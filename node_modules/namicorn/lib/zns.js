"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var zilliqa_1 = require("@zilliqa-js/zilliqa");
var crypto_1 = require("@zilliqa-js/crypto");
var namehash_1 = __importDefault(require("./zns/namehash"));
var lodash_1 = __importDefault(require("lodash"));
var NamingService_1 = __importDefault(require("./namingService"));
var DefaultSource = 'https://api.zilliqa.com';
var NullAddress = '0x0000000000000000000000000000000000000000';
var NetworkIdMap = {
    1: 'mainnet',
    333: 'testnet',
    111: 'localnet',
};
var RegistryMap = {
    mainnet: 'zil1jcgu2wlx6xejqk9jw3aaankw6lsjzeunx2j0jz',
};
var UrlMap = {
    mainnet: 'https://api.zilliqa.com',
    testnet: 'https://dev-api.zilliqa.com',
    localnet: 'http://localhost:4201',
};
var UrlNetworkMap = function (url) {
    var invert = lodash_1.default(UrlMap)
        .invert()
        .value();
    return invert[url];
};
var Zns = /** @class */ (function (_super) {
    __extends(Zns, _super);
    function Zns(source) {
        if (source === void 0) { source = true; }
        var _this = _super.call(this) || this;
        source = _this.normalizeSource(source);
        _this.network = source.network;
        _this.url = source.url;
        _this.zilliqa = new zilliqa_1.Zilliqa(_this.url);
        if (!_this.network) {
            throw new Error('Unspecified network in Namicorn ZNS configuration');
        }
        if (!_this.url) {
            throw new Error('Unspecified url in Namicorn ZNS configuration');
        }
        _this.registryAddress = source.registry
            ? source.registry
            : RegistryMap[_this.network];
        if (_this.registryAddress) {
            _this.registryAddress = _this.registryAddress.startsWith('0x')
                ? crypto_1.toBech32Address(_this.registryAddress)
                : _this.registryAddress;
            _this.registry = _this.zilliqa.contracts.at(_this.registryAddress);
        }
        return _this;
    }
    Zns.prototype.resolve = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var recordAddresses, ownerAddress, resolverAddress, resolution, addresses;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isSupportedDomain(domain) || !this.isSupportedNetwork())
                            return [2 /*return*/, null];
                        return [4 /*yield*/, this._getRecordsAddresses(domain)];
                    case 1:
                        recordAddresses = _a.sent();
                        if (!recordAddresses)
                            return [2 /*return*/, null];
                        ownerAddress = recordAddresses[0], resolverAddress = recordAddresses[1];
                        return [4 /*yield*/, this._getResolverRecordsStructure(resolverAddress)];
                    case 2:
                        resolution = _a.sent();
                        addresses = lodash_1.default.mapValues(resolution.crypto, 'address');
                        return [2 /*return*/, {
                                addresses: addresses,
                                meta: {
                                    owner: ownerAddress || null,
                                    type: 'zns',
                                    ttl: parseInt(resolution.ttl) || 0,
                                },
                            }];
                }
            });
        });
    };
    /**
     * Resolves a domain
     * @param domain - domain name to be resolved
     * @returns - Everything what is stored on specified domain
     */
    Zns.prototype.resolution = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var recordAddresses, _, resolverAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isSupportedDomain(domain) || !this.isSupportedNetwork())
                            return [2 /*return*/, {}];
                        return [4 /*yield*/, this._getRecordsAddresses(domain)];
                    case 1:
                        recordAddresses = _a.sent();
                        if (!recordAddresses)
                            return [2 /*return*/, {}];
                        _ = recordAddresses[0], resolverAddress = recordAddresses[1];
                        return [4 /*yield*/, this._getResolverRecordsStructure(resolverAddress)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Zns.prototype.isSupportedDomain = function (domain) {
        return domain.indexOf('.') > 0 && /^.{1,}\.(zil)$/.test(domain);
    };
    Zns.prototype.isSupportedNetwork = function () {
        return this.registryAddress != null;
    };
    /**
     * @ignore
     * @param domain - domain name
     */
    Zns.prototype._getRecordsAddresses = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var registryRecord, _a, ownerAddress, resolverAddress;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getContractMapValue(this.registry, 'records', namehash_1.default(domain))];
                    case 1:
                        registryRecord = _b.sent();
                        if (!registryRecord)
                            return [2 /*return*/, null];
                        _a = registryRecord.arguments, ownerAddress = _a[0], resolverAddress = _a[1];
                        if (ownerAddress.startsWith('0x')) {
                            ownerAddress = crypto_1.toBech32Address(ownerAddress);
                        }
                        return [2 /*return*/, [ownerAddress, resolverAddress]];
                }
            });
        });
    };
    Zns.prototype._getResolverRecordsStructure = function (resolverAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var resolver, resolverRecords;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (resolverAddress == NullAddress) {
                            return [2 /*return*/, {}];
                        }
                        resolver = this.zilliqa.contracts.at(crypto_1.toChecksumAddress(resolverAddress));
                        return [4 /*yield*/, this.getContractField(resolver, 'records')];
                    case 1:
                        resolverRecords = (_a.sent());
                        return [2 /*return*/, lodash_1.default.transform(resolverRecords, function (result, value, key) { return lodash_1.default.set(result, key, value); }, {})];
                }
            });
        });
    };
    Zns.prototype.normalizeSource = function (source) {
        switch (typeof source) {
            case 'boolean': {
                return { url: DefaultSource, network: 'mainnet' };
            }
            case 'string': {
                return {
                    url: source,
                    network: UrlNetworkMap(source),
                };
            }
            case 'object': {
                source = lodash_1.default.clone(source);
                if (typeof source.network == 'number') {
                    source.network = NetworkIdMap[source.network];
                }
                if (source.registry) {
                    source.network = source.network ? source.network : 'mainnet';
                    source.url = source.url ? source.url : DefaultSource;
                }
                if (source.network && !source.url) {
                    source.url = UrlMap[source.network];
                }
                if (source.url && !source.network) {
                    source.network = UrlNetworkMap(source.url);
                }
                return source;
            }
        }
    };
    Zns.prototype.getContractField = function (contract, field, keys) {
        if (keys === void 0) { keys = []; }
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, contract.getSubState(field, keys)];
                    case 1:
                        result = (_a.sent()) || {};
                        return [2 /*return*/, result[field]];
                }
            });
        });
    };
    Zns.prototype.getContractMapValue = function (contract, field, key) {
        return __awaiter(this, void 0, void 0, function () {
            var record;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getContractField(contract, field, [key])];
                    case 1:
                        record = _a.sent();
                        return [2 /*return*/, (record && record[key]) || null];
                }
            });
        });
    };
    return Zns;
}(NamingService_1.default));
exports.default = Zns;

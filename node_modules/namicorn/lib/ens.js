"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = __importDefault(require("lodash"));
var ens_1 = __importDefault(require("./ens/contract/ens"));
var registrar_1 = __importDefault(require("./ens/contract/registrar"));
var resolver_1 = __importDefault(require("./ens/contract/resolver"));
var eth_ens_namehash_1 = require("eth-ens-namehash");
var NamingService_1 = __importDefault(require("./namingService"));
var Web3 = require('web3');
var NullAddress = '0x0000000000000000000000000000000000000000';
var DefaultUrl = 'https://mainnet.infura.io';
var NetworkIdMap = {
    1: 'mainnet',
    3: 'ropsten',
    4: 'kovan',
    42: 'rinkeby',
    5: 'goerli',
};
var NetworkNameMap = lodash_1.default(NetworkIdMap)
    .invert()
    .mapValues(function (v, k) { return parseInt(v); })
    .value();
var RegistryMap = {
    mainnet: '0x314159265dd8dbb310642f98f50c066173c1259b',
    ropsten: '0x112234455c3a32fd11230c42e7bccd4a84e02010',
};
var Ens = /** @class */ (function (_super) {
    __extends(Ens, _super);
    function Ens(source) {
        if (source === void 0) { source = true; }
        var _this = _super.call(this) || this;
        source = _this.normalizeSource(source);
        _this.web3 = new Web3(source.url);
        _this.network = source.network;
        _this.url = source.url;
        if (!_this.network) {
            throw new Error('Unspecified network in Namicorn ENS configuration');
        }
        if (!_this.url) {
            throw new Error('Unspecified url in Namicorn ENS configuration');
        }
        _this.registryAddress = source.registry
            ? source.registry
            : RegistryMap[_this.network];
        if (_this.registryAddress) {
            _this.ensContract = new _this.web3.eth.Contract(ens_1.default, _this.registryAddress);
            _this.registrarContract = new _this.web3.eth.Contract(registrar_1.default, 
            //TODO: make an address dependent on network id
            '0x6090A6e47849629b7245Dfa1Ca21D94cd15878Ef');
        }
        return _this;
    }
    Ens.prototype.isSupportedDomain = function (domain) {
        return (domain.indexOf('.') > 0 && /^.{1,}\.(eth|luxe|xyz|test)$/.test(domain));
    };
    Ens.prototype.isSupportedNetwork = function () {
        return this.registryAddress != null;
    };
    Ens.prototype.reverse = function (address, currencyTicker) {
        return __awaiter(this, void 0, void 0, function () {
            var reverseAddress, nodeHash, resolverAddress, resolverContract;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (currencyTicker != 'ETH') {
                            throw new Error("Ens doesn't support any currency other than ETH");
                        }
                        if (address.startsWith('0x')) {
                            address = address.substr(2);
                        }
                        reverseAddress = address + '.addr.reverse';
                        nodeHash = eth_ens_namehash_1.hash(reverseAddress);
                        return [4 /*yield*/, this._getResolver(nodeHash)];
                    case 1:
                        resolverAddress = _a.sent();
                        if (resolverAddress == NullAddress) {
                            return [2 /*return*/, null];
                        }
                        resolverContract = new this.web3.eth.Contract(resolver_1.default, resolverAddress);
                        return [4 /*yield*/, this._resolverCallToName(resolverContract, nodeHash)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Ens.prototype.resolve = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var nodeHash, _a, owner, ttl, resolver, address;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.isSupportedDomain(domain) || !this.isSupportedNetwork()) {
                            return [2 /*return*/, null];
                        }
                        nodeHash = eth_ens_namehash_1.hash(domain);
                        return [4 /*yield*/, this._getResolutionInfo(nodeHash)];
                    case 1:
                        _a = _b.sent(), owner = _a[0], ttl = _a[1], resolver = _a[2];
                        if (owner == NullAddress)
                            owner = null;
                        return [4 /*yield*/, this._fetchAddress(resolver, nodeHash)];
                    case 2:
                        address = _b.sent();
                        return [2 /*return*/, {
                                addresses: {
                                    ETH: address,
                                },
                                meta: {
                                    owner: owner,
                                    type: 'ens',
                                    ttl: Number(ttl),
                                },
                            }];
                }
            });
        });
    };
    /* Test functions bellow */
    Ens.prototype._resolverCallToName = function (resolverContract, nodeHash) {
        return resolverContract.methods.name(nodeHash).call();
    };
    Ens.prototype._getResolver = function (nodeHash) {
        return this.ensContract.methods.resolver(nodeHash).call();
    };
    Ens.prototype._getResolutionInfo = function (nodeHash) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.ensContract.methods.owner(nodeHash).call(),
                            this.ensContract.methods.ttl(nodeHash).call(),
                            this.ensContract.methods.resolver(nodeHash).call(),
                        ])];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Ens.prototype._fetchAddress = function (resolver, nodeHash) {
        return __awaiter(this, void 0, void 0, function () {
            var resolverContract, address;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!resolver || resolver == NullAddress) {
                            return [2 /*return*/, null];
                        }
                        resolverContract = new this.web3.eth.Contract(resolver_1.default, resolver);
                        return [4 /*yield*/, resolverContract.methods.addr(nodeHash).call()];
                    case 1:
                        address = _a.sent();
                        return [2 /*return*/, address];
                }
            });
        });
    };
    /*===========================*/
    Ens.prototype.normalizeSource = function (source) {
        switch (typeof source) {
            case 'boolean': {
                return { url: DefaultUrl, network: this.networkFromUrl(DefaultUrl) };
            }
            case 'string': {
                return {
                    url: source,
                    network: this.networkFromUrl(source),
                };
            }
            case 'object': {
                source = lodash_1.default.clone(source);
                if (typeof source.network == 'number') {
                    source.network = NetworkIdMap[source.network];
                }
                if (source.registry) {
                    source.network = source.network ? source.network : 'mainnet';
                    source.url = source.url
                        ? source.url
                        : "https://" + source.network + ".infura.io";
                }
                if (source.network && !source.url) {
                    if (NetworkNameMap.hasOwnProperty(source.network))
                        source.url = "https://" + source.network + ".infura.io";
                    else
                        throw new Error('Invalid network or unspecified url');
                }
                if (source.url && !source.network) {
                    source.network = this.networkFromUrl(source.url);
                }
                return source;
            }
        }
    };
    Ens.prototype.networkFromUrl = function (url) {
        return lodash_1.default.find(NetworkIdMap, function (name) { return url.indexOf(name) >= 0; });
    };
    return Ens;
}(NamingService_1.default));
exports.default = Ens;

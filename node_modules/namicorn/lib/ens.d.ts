import { SourceDefinition, ResolutionResult } from './types';
import NamingService from './NamingService';
export default class Ens extends NamingService {
    readonly network: string;
    readonly url: string;
    readonly registryAddress?: string;
    private ensContract;
    private registrarContract;
    private web3;
    constructor(source?: string | boolean | SourceDefinition);
    isSupportedDomain(domain: string): boolean;
    isSupportedNetwork(): boolean;
    reverse(address: string, currencyTicker: string): Promise<string>;
    resolve(domain: string): Promise<ResolutionResult | null>;
    _resolverCallToName(resolverContract: any, nodeHash: any): any;
    _getResolver(nodeHash: any): any;
    _getResolutionInfo(nodeHash: any): Promise<[any, any, any]>;
    _fetchAddress(resolver: any, nodeHash: any): Promise<any>;
    protected normalizeSource(source: string | boolean | SourceDefinition): SourceDefinition;
    private networkFromUrl;
}

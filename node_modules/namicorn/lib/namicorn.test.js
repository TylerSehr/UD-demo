"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var nock_1 = __importDefault(require("nock"));
var _1 = __importDefault(require("."));
var mockData_json_1 = __importDefault(require("./testData/mockData.json"));
var Ens_1 = __importDefault(require("./Ens"));
var DefaultUrl = 'https://unstoppabledomains.com/api/v1';
var MainnetUrl = 'https://mainnet.infura.io';
var ZilliqaUrl = 'https://api.zilliqa.com';
var mockAPICalls = function (topLevel, testName, url) {
    if (url === void 0) { url = MainnetUrl; }
    if (process.env.LIVE) {
        return;
    }
    var mcdt = mockData_json_1.default;
    var tplvl = mcdt[topLevel];
    var mockCall = tplvl[testName];
    mockCall.forEach(function (_a) {
        var METHOD = _a.METHOD, REQUEST = _a.REQUEST, RESPONSE = _a.RESPONSE;
        switch (METHOD) {
            case 'POST': {
                nock_1.default(url)
                    // .log(console.log)
                    .post('/', JSON.stringify(REQUEST))
                    .reply(200, JSON.stringify(RESPONSE));
            }
            default: {
                nock_1.default(url)
                    // .log(console.log)
                    .get(REQUEST)
                    .reply(200, RESPONSE);
            }
        }
    });
};
beforeEach(function () {
    nock_1.default.cleanAll();
    jest.restoreAllMocks();
});
describe('ZNS', function () {
    it('resolving from unstoppable API', function () { return __awaiter(void 0, void 0, void 0, function () {
        var testName, namicorn, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    testName = 'should work';
                    mockAPICalls('UD_API', testName, DefaultUrl);
                    namicorn = new _1.default({ blockchain: false });
                    return [4 /*yield*/, namicorn.address('cofounding.zil', 'eth')];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual('0xaa91734f90795e80751c96e682a321bb3c1a4186');
                    return [2 /*return*/];
            }
        });
    }); });
    it('resolves .zil name using blockchain', function () { return __awaiter(void 0, void 0, void 0, function () {
        var testName, namicorn, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    testName = 'resolves .zil name using blockchain';
                    mockAPICalls('ZIL', testName, ZilliqaUrl);
                    namicorn = new _1.default({ blockchain: { zns: ZilliqaUrl } });
                    return [4 /*yield*/, namicorn.resolve('cofounding.zil')];
                case 1:
                    result = _a.sent();
                    expect(result).toBeDefined();
                    expect(result.addresses.ETH).toEqual('0xaa91734f90795e80751c96e682a321bb3c1a4186');
                    expect(result.meta.owner).toEqual('zil1ye72zl5t8wl5n3f2fsa5w0x7hja0jqj7mhct23');
                    expect(result.meta.type).toEqual('zns');
                    expect(result.meta.ttl).toEqual(0);
                    return [2 /*return*/];
            }
        });
    }); });
    it('resolves unclaimed domain using blockchain', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    namicorn = new _1.default({ blockchain: true });
                    return [4 /*yield*/, namicorn.resolve('test.zil')];
                case 1:
                    result = _a.sent();
                    expect(result.addresses).toEqual({});
                    expect(result.meta.owner).toEqual(null);
                    return [2 /*return*/];
            }
        });
    }); });
    it('resolves domain using blockchain #2', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    namicorn = new _1.default({ blockchain: true });
                    return [4 /*yield*/, namicorn.resolve('test-manage-one.zil')];
                case 1:
                    result = _a.sent();
                    expect(result.addresses).toEqual({ BURST: 'BURST-R7KK-SBSY-FENX-AWYMW' });
                    expect(result.meta).toEqual({
                        owner: 'zil1zzpjwyp2nu29pcv3sh04qxq9x5l45vke0hrwec',
                        type: 'zns',
                        ttl: 0,
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it("doesn't support zil domain when zns is disabled", function () {
        var namicorn = new _1.default({ blockchain: { zns: false } });
        expect(namicorn.zns).toBeUndefined();
        expect(namicorn.isSupportedDomain('hello.zil')).toBeFalsy();
    });
    it('checks normalizeSource zns (boolean)', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({ blockchain: { zns: true } });
            expect(namicorn.zns.network).toBe('mainnet');
            expect(namicorn.zns.url).toBe('https://api.zilliqa.com');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource zns (boolean - false)', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({ blockchain: { zns: false } });
            new _1.default({ blockchain: { zns: false } });
            expect(namicorn.zns).toBeUndefined();
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource zns (string)', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({
                blockchain: { zns: 'https://api.zilliqa.com' },
            });
            expect(namicorn.zns.network).toBe('mainnet');
            expect(namicorn.zns.url).toBe('https://api.zilliqa.com');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource zns wrong string', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            expect(function () { return new _1.default({ blockchain: { zns: 'https://wrongurl.com' } }); }).toThrow();
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource zns (object) #1', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({
                blockchain: { zns: { url: 'https://api.zilliqa.com' } },
            });
            expect(namicorn.zns.network).toBe('mainnet');
            expect(namicorn.zns.url).toBe('https://api.zilliqa.com');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource zns (object) #2', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({ blockchain: { zns: { network: 333 } } });
            expect(namicorn.zns.url).toBe('https://dev-api.zilliqa.com');
            expect(namicorn.zns.network).toBe('testnet');
            expect(namicorn.zns.registryAddress).toBeUndefined();
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource zns (object) #3', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({
                blockchain: { zns: { url: 'https://api.zilliqa.com' } },
            });
            expect(namicorn.zns.network).toBe('mainnet');
            expect(namicorn.zns.url).toBe('https://api.zilliqa.com');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource zns (object) #4', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({
                blockchain: { zns: { url: 'https://api.zilliqa.com', network: 1 } },
            });
            expect(namicorn.zns.network).toBe('mainnet');
            expect(namicorn.zns.url).toBe('https://api.zilliqa.com');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource zns (object) #5', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({
                blockchain: { zns: { url: 'https://api.zilliqa.com', network: 333 } },
            });
            expect(namicorn.zns.url).toBe('https://api.zilliqa.com');
            expect(namicorn.zns.network).toBe('testnet');
            expect(namicorn.zns.registryAddress).toBeUndefined();
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource zns (object) #6', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            expect(function () { return new _1.default({ blockchain: { zns: { network: 42 } } }); }).toThrow();
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource zns (object) #7', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            expect(function () { return new _1.default({ blockchain: { zns: { network: 'invalid' } } }); }).toThrow();
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource zns (object) #8', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({
                blockchain: { zns: { network: 'mainnet' } },
            });
            expect(namicorn.zns.network).toBe('mainnet');
            expect(namicorn.zns.url).toBe('https://api.zilliqa.com');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource zns (object) #9', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({
                blockchain: { zns: { network: 'testnet' } },
            });
            expect(namicorn.zns.network).toBe('testnet');
            expect(namicorn.zns.url).toBe('https://dev-api.zilliqa.com');
            expect(namicorn.zns.registryAddress).toBeUndefined();
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource zns (object) #10', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({
                blockchain: {
                    zns: { registry: 'zil1jcgu2wlx6xejqk9jw3aaankw6lsjzeunx2j0jz' },
                },
            });
            expect(namicorn.zns.network).toBe('mainnet');
            expect(namicorn.zns.registryAddress).toBe('zil1jcgu2wlx6xejqk9jw3aaankw6lsjzeunx2j0jz');
            expect(namicorn.zns.url).toBe('https://api.zilliqa.com');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource zns (object) #11', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({
                blockchain: {
                    zns: { registry: '0xabcffff1231586348194fcabbeff1231240234fc' },
                },
            });
            expect(namicorn.zns.network).toBe('mainnet');
            expect(namicorn.zns.url).toBe('https://api.zilliqa.com');
            expect(namicorn.zns.registryAddress).toBe('zil1408llufrzkrrfqv5lj4malcjxyjqyd8urd7xz6');
            return [2 /*return*/];
        });
    }); });
    it('should resolve with resolution key setuped', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn, eye, secondEye, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    namicorn = new _1.default();
                    eye = jest
                        .spyOn(namicorn.zns, '_getRecordsAddresses')
                        .mockResolvedValue([
                        'zil194qcjskuuxh6qtg8xw3qqrr3kdc6dtq8ct6j9s',
                        '0xdac22230adfe4601f00631eae92df6d77f054891',
                    ]);
                    secondEye = jest
                        .spyOn(namicorn.zns, '_getResolverRecordsStructure')
                        .mockResolvedValue({
                        crypto: {
                            BCH: { address: 'qrq4sk49ayvepqz7j7ep8x4km2qp8lauvcnzhveyu6' },
                            BTC: { address: '1EVt92qQnaLDcmVFtHivRJaunG2mf2C3mB' },
                            ETH: { address: '0x45b31e01AA6f42F0549aD482BE81635ED3149abb' },
                            LTC: { address: 'LetmswTW3b7dgJ46mXuiXMUY17XbK29UmL' },
                            ZIL: { address: 'zil1yu5u4hegy9v3xgluweg4en54zm8f8auwxu0xxj' },
                        },
                        ipfs: {
                            html: { value: 'QmVaAtQbi3EtsfpKoLzALm6vXphdi2KjMgxEDKeGg6wHuK' },
                            redirect_domain: { value: 'www.unstoppabledomains.com' },
                        },
                    });
                    return [4 /*yield*/, namicorn.zns.resolution('brad.zil')];
                case 1:
                    result = _a.sent();
                    expect(eye).toHaveBeenCalled();
                    expect(secondEye).toHaveBeenCalled();
                    expect(result).toEqual({
                        crypto: {
                            BCH: { address: 'qrq4sk49ayvepqz7j7ep8x4km2qp8lauvcnzhveyu6' },
                            BTC: { address: '1EVt92qQnaLDcmVFtHivRJaunG2mf2C3mB' },
                            ETH: { address: '0x45b31e01AA6f42F0549aD482BE81635ED3149abb' },
                            LTC: { address: 'LetmswTW3b7dgJ46mXuiXMUY17XbK29UmL' },
                            ZIL: { address: 'zil1yu5u4hegy9v3xgluweg4en54zm8f8auwxu0xxj' },
                        },
                        ipfs: {
                            html: { value: 'QmVaAtQbi3EtsfpKoLzALm6vXphdi2KjMgxEDKeGg6wHuK' },
                            redirect_domain: { value: 'www.unstoppabledomains.com' },
                        },
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it('should resolve with resolution key setuped #2', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn, eye, secondEye, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    namicorn = new _1.default();
                    eye = jest
                        .spyOn(namicorn.zns, '_getRecordsAddresses')
                        .mockResolvedValue([
                        'zil1f6vyj5hgvll3xtx5kuxd8ucn66x9zxmkp34agy',
                        '0xa9b1d3647e4deb9ce4e601c2c9e0a2fdf2d7415a',
                    ]);
                    secondEye = jest
                        .spyOn(namicorn.zns, '_getResolverRecordsStructure')
                        .mockResolvedValue({
                        ipfs: {
                            html: {
                                hash: 'QmefehFs5n8yQcGCVJnBMY3Hr6aMRHtsoniAhsM1KsHMSe',
                                value: 'QmVaAtQbi3EtsfpKoLzALm6vXphdi2KjMgxEDKeGg6wHuK',
                            },
                            redirect_domain: { value: 'www.unstoppabledomains.com' },
                        },
                        whois: {
                            email: { value: 'matt+test@unstoppabledomains.com' },
                            for_sale: { value: 'true' },
                        },
                    });
                    return [4 /*yield*/, namicorn.zns.resolution('ergergergerg.zil')];
                case 1:
                    result = _a.sent();
                    expect(eye).toHaveBeenCalled();
                    expect(secondEye).toHaveBeenCalled();
                    expect(result).toEqual({
                        ipfs: {
                            html: {
                                hash: 'QmefehFs5n8yQcGCVJnBMY3Hr6aMRHtsoniAhsM1KsHMSe',
                                value: 'QmVaAtQbi3EtsfpKoLzALm6vXphdi2KjMgxEDKeGg6wHuK',
                            },
                            redirect_domain: { value: 'www.unstoppabledomains.com' },
                        },
                        whois: {
                            email: { value: 'matt+test@unstoppabledomains.com' },
                            for_sale: { value: 'true' },
                        },
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it('should resolve with resolution key setuped #3', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn, zns, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    namicorn = new _1.default();
                    zns = namicorn.zns;
                    expect(zns).toBeDefined();
                    return [4 /*yield*/, zns.resolution('invalid.domain')];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual({});
                    return [2 /*return*/];
            }
        });
    }); });
    it('should resolve with resolution key setuped #4', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn, zns, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    namicorn = new _1.default();
                    zns = namicorn.zns;
                    expect(zns).toBeDefined();
                    return [4 /*yield*/, zns.resolution('mcafee2020.zil')];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual({
                        crypto: {
                            BTC: { address: '17LV6fxL8b1pJomn5zoDR3ZCnbt88ehGBf' },
                            ETH: { address: '0x0ed6180ef7c638064b9b17ff53ba76ec7077dd95' },
                            LTC: { address: 'MTbeoMfWqEZaaZVG1yE1ENoxVGNmMAxoEj' }
                        },
                        whois: {
                            email: { value: 'jordanb_970@hotmail.com' },
                            for_sale: { value: 'true' }
                        }
                    });
                    return [2 /*return*/];
            }
        });
    }); });
});
describe('ENS', function () {
    it('allows ens network specified as string', function () { return __awaiter(void 0, void 0, void 0, function () {
        var testName, namicorn;
        return __generator(this, function (_a) {
            testName = 'resolves .eth name using blockchain';
            namicorn = new _1.default({
                blockchain: { ens: { network: 'mainnet' } },
            });
            expect(namicorn.ens.url).toBe('https://mainnet.infura.io');
            expect(namicorn.ens.network).toEqual('mainnet');
            return [2 /*return*/];
        });
    }); });
    it('resolves .eth name using blockchain', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn, eye, secondEye, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    namicorn = new _1.default({
                        blockchain: { ens: true },
                    });
                    expect(namicorn.ens.url).toBe('https://mainnet.infura.io');
                    expect(namicorn.ens.network).toEqual('mainnet');
                    eye = jest
                        .spyOn(namicorn.ens, '_getResolutionInfo')
                        .mockImplementation(function () {
                        return Promise.resolve([
                            '0x714ef33943d925731FBB89C99aF5780D888bD106',
                            '0',
                            '0x5FfC014343cd971B7eb70732021E26C35B744cc4',
                        ]);
                    });
                    secondEye = jest
                        .spyOn(namicorn.ens, '_fetchAddress')
                        .mockImplementation(function () {
                        return Promise.resolve('0x714ef33943d925731FBB89C99aF5780D888bD106');
                    });
                    return [4 /*yield*/, namicorn.address('matthewgould.eth', 'ETH')];
                case 1:
                    result = _a.sent();
                    expect(eye).toHaveBeenCalled();
                    expect(secondEye).toHaveBeenCalled();
                    expect(result).toEqual('0x714ef33943d925731FBB89C99aF5780D888bD106');
                    return [2 /*return*/];
            }
        });
    }); });
    it('reverses address to ENS domain', function () { return __awaiter(void 0, void 0, void 0, function () {
        var ens, eye, secondEye, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    ens = new Ens_1.default(MainnetUrl);
                    eye = jest
                        .spyOn(ens, '_resolverCallToName')
                        .mockImplementation(function () { return 'adrian.argent.xyz'; });
                    secondEye = jest
                        .spyOn(ens, '_getResolver')
                        .mockImplementation(function () { return '0xDa1756Bb923Af5d1a05E277CB1E54f1D0A127890'; });
                    return [4 /*yield*/, ens.reverse('0xb0E7a465D255aE83eb7F8a50504F3867B945164C', 'ETH')];
                case 1:
                    result = _a.sent();
                    expect(eye).toHaveBeenCalled();
                    expect(secondEye).toHaveBeenCalled();
                    expect(result).toEqual('adrian.argent.xyz');
                    return [2 /*return*/];
            }
        });
    }); });
    it('reverses address to ENS domain null', function () { return __awaiter(void 0, void 0, void 0, function () {
        var ens, spy, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    ens = new Ens_1.default(MainnetUrl);
                    spy = jest
                        .spyOn(ens, '_getResolver')
                        .mockImplementation(function () { return '0x0000000000000000000000000000000000000000'; });
                    return [4 /*yield*/, ens.reverse('0x112234455c3a32fd11230c42e7bccd4a84e02010', 'ETH')];
                case 1:
                    result = _a.sent();
                    expect(spy).toHaveBeenCalled();
                    expect(result).toEqual(null);
                    return [2 /*return*/];
            }
        });
    }); });
    it('resolves .xyz name using ENS blockchain', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn, spy, secondSpy, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    namicorn = new _1.default({
                        blockchain: { ens: MainnetUrl },
                    });
                    spy = jest
                        .spyOn(namicorn.ens, '_getResolutionInfo')
                        .mockImplementation(function () {
                        return Promise.resolve([
                            '0xb0E7a465D255aE83eb7F8a50504F3867B945164C',
                            Number(0x00),
                            '0xDa1756Bb923Af5d1a05E277CB1E54f1D0A127890',
                        ]);
                    });
                    secondSpy = jest
                        .spyOn(namicorn.ens, '_fetchAddress')
                        .mockImplementation(function () {
                        return Promise.resolve('0xb0E7a465D255aE83eb7F8a50504F3867B945164C');
                    });
                    return [4 /*yield*/, namicorn.address('adrian.argent.xyz', 'ETH')];
                case 1:
                    result = _a.sent();
                    expect(spy).toBeCalled();
                    expect(secondSpy).toBeCalled();
                    expect(result).toEqual('0xb0E7a465D255aE83eb7F8a50504F3867B945164C');
                    return [2 /*return*/];
            }
        });
    }); });
    it('resolves .luxe name using ENS blockchain', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn, spy, secondSpy, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    namicorn = new _1.default({
                        blockchain: { ens: MainnetUrl },
                    });
                    spy = jest
                        .spyOn(namicorn.ens, '_getResolutionInfo')
                        .mockImplementation(function () {
                        return Promise.resolve([
                            '0xf3dE750A73C11a6a2863761E930BF5fE979d5663',
                            Number(0x00),
                            '0xBD5F5ec7ed5f19b53726344540296C02584A5237',
                        ]);
                    });
                    secondSpy = jest
                        .spyOn(namicorn.ens, '_fetchAddress')
                        .mockImplementation(function () {
                        return Promise.resolve('0xf3dE750A73C11a6a2863761E930BF5fE979d5663');
                    });
                    return [4 /*yield*/, namicorn.address('john.luxe', 'ETH')];
                case 1:
                    result = _a.sent();
                    // expect(spy).toBeCalled();
                    expect(secondSpy).toBeCalled();
                    expect(result).toEqual('0xf3dE750A73C11a6a2863761E930BF5fE979d5663');
                    return [2 /*return*/];
            }
        });
    }); });
    it('resolves .luxe name using ENS blockchain null', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn, spy, secondSpy, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    namicorn = new _1.default({
                        blockchain: { ens: MainnetUrl },
                    });
                    spy = jest
                        .spyOn(namicorn.ens, '_getResolutionInfo')
                        .mockImplementation(function () {
                        return Promise.resolve([
                            '0x0000000000000000000000000000000000000000',
                            Number(0x00),
                            '0x0000000000000000000000000000000000000000',
                        ]);
                    });
                    secondSpy = jest
                        .spyOn(namicorn.ens, '_fetchAddress')
                        .mockImplementation(function () { return Promise.resolve(null); });
                    return [4 /*yield*/, namicorn.address('something.luxe', 'ETH')];
                case 1:
                    result = _a.sent();
                    expect(spy).toBeCalled();
                    expect(secondSpy).toBeCalled();
                    expect(result).toEqual(null);
                    return [2 /*return*/];
            }
        });
    }); });
    it('checks if the network is supported(true)', function () { return __awaiter(void 0, void 0, void 0, function () {
        var ens, answer;
        return __generator(this, function (_a) {
            ens = new Ens_1.default({ network: 1 });
            answer = ens.isSupportedNetwork();
            expect(answer).toBe(true);
            return [2 /*return*/];
        });
    }); });
    it('checks if the network is supported(false)', function () { return __awaiter(void 0, void 0, void 0, function () {
        var ens, answer;
        return __generator(this, function (_a) {
            ens = new Ens_1.default({ network: 5 });
            answer = ens.isSupportedNetwork();
            expect(answer).toBe(false);
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (boolean)', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({ blockchain: { ens: true } });
            expect(namicorn.ens.network).toBe('mainnet');
            expect(namicorn.ens.url).toBe('https://mainnet.infura.io');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (boolean - false)', function () { return __awaiter(void 0, void 0, void 0, function () {
        var ens;
        return __generator(this, function (_a) {
            ens = new Ens_1.default({ network: 5 });
            expect(ens.network).toBe('goerli');
            expect(ens.url).toBe('https://goerli.infura.io');
            expect(ens.isSupportedNetwork()).toBeFalsy();
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #1', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({
                blockchain: { ens: { url: 'https://mainnet.infura.io' } },
            });
            expect(namicorn.ens.network).toBe('mainnet');
            expect(namicorn.ens.url).toBe('https://mainnet.infura.io');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #2', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({ blockchain: { ens: { network: 3 } } });
            expect(namicorn.ens.network).toBe('ropsten');
            expect(namicorn.ens.url).toBe('https://ropsten.infura.io');
            expect(namicorn.ens.registryAddress).toBe('0x112234455c3a32fd11230c42e7bccd4a84e02010');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #3', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({
                blockchain: { ens: { url: 'https://rinkeby.infura.io' } },
            });
            expect(namicorn.ens.network).toBe('rinkeby');
            expect(namicorn.ens.url).toBe('https://rinkeby.infura.io');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #4', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({
                blockchain: { ens: { url: 'https://goerli.infura.io', network: 5 } },
            });
            expect(namicorn.ens.network).toBe('goerli');
            expect(namicorn.ens.url).toBe('https://goerli.infura.io');
            expect(namicorn.ens.registryAddress).toBeUndefined();
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #6', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            expect(function () { return new _1.default({ blockchain: { ens: { network: 7543 } } }); }).toThrow();
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #7', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            expect(function () { return new _1.default({ blockchain: { ens: { network: 'invalid' } } }); }).toThrow();
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #8', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({
                blockchain: { ens: { network: 'mainnet' } },
            });
            expect(namicorn.ens.network).toBe('mainnet');
            expect(namicorn.ens.url).toBe('https://mainnet.infura.io');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #9', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({
                blockchain: { ens: { network: 'kovan' } },
            });
            expect(namicorn.ens.network).toBe('kovan');
            expect(namicorn.ens.url).toBe('https://kovan.infura.io');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #10', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({
                blockchain: {
                    ens: { registry: '0x314159265dd8dbb310642f98f50c066173c1259b' },
                },
            });
            expect(namicorn.ens.network).toBe('mainnet');
            expect(namicorn.ens.url).toBe('https://mainnet.infura.io');
            expect(namicorn.ens.registryAddress).toBe('0x314159265dd8dbb310642f98f50c066173c1259b');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #11', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({
                blockchain: {
                    ens: {
                        network: 'ropsten',
                        registry: '0x112234455c3a32fd11230c42e7bccd4a84e02010',
                    },
                },
            });
            expect(namicorn.ens.network).toBe('ropsten');
            expect(namicorn.ens.url).toBe('https://ropsten.infura.io');
            expect(namicorn.ens.registryAddress).toBe('0x112234455c3a32fd11230c42e7bccd4a84e02010');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #12', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({
                blockchain: {
                    ens: { registry: '0xabcffff1231586348194fcabbeff1231240234fc' },
                },
            });
            expect(namicorn.ens.network).toBe('mainnet');
            expect(namicorn.ens.url).toBe('https://mainnet.infura.io');
            expect(namicorn.ens.registryAddress).toBe('0xabcffff1231586348194fcabbeff1231240234fc');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #13', function () { return __awaiter(void 0, void 0, void 0, function () {
        var namicorn;
        return __generator(this, function (_a) {
            namicorn = new _1.default({
                blockchain: {
                    ens: { network: 'custom', url: 'https://custom.notinfura.io' },
                },
            });
            expect(namicorn.ens.network).toBe('custom');
            expect(namicorn.ens.url).toBe('https://custom.notinfura.io');
            expect(namicorn.ens.registryAddress).toBeUndefined();
            return [2 /*return*/];
        });
    }); });
});
it('provides empty response constant', function () { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        response = _1.default.UNCLAIMED_DOMAIN_RESPONSE;
        expect(response.addresses).toEqual({});
        expect(response.meta.owner).toEqual(null);
        return [2 /*return*/];
    });
}); });
it('resolves non-existing domain zone', function () { return __awaiter(void 0, void 0, void 0, function () {
    var namicorn, result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                namicorn = new _1.default({ blockchain: true });
                return [4 /*yield*/, namicorn.address('bogdangusiev.qq', 'ZIL')];
            case 1:
                result = _a.sent();
                expect(result).toEqual(null);
                return [2 /*return*/];
        }
    });
}); });
it('checks the isSupportedDomainInNetwork', function () { return __awaiter(void 0, void 0, void 0, function () {
    var namicorn, result;
    return __generator(this, function (_a) {
        namicorn = new _1.default();
        result = namicorn.isSupportedDomainInNetwork('brad.zil');
        expect(result).toBe(true);
        return [2 /*return*/];
    });
}); });

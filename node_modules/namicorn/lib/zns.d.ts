import { ResolutionResult, SourceDefinition } from './types';
import NamingService from './NamingService';
export default class Zns extends NamingService {
    readonly network: string;
    readonly url: string;
    readonly registryAddress?: string;
    private registry?;
    private zilliqa;
    constructor(source?: string | boolean | SourceDefinition);
    resolve(domain: string): Promise<ResolutionResult | null>;
    /**
     * Resolves a domain
     * @param domain - domain name to be resolved
     * @returns - Everything what is stored on specified domain
     */
    resolution(domain: string): Promise<Object | {}>;
    isSupportedDomain(domain: string): boolean;
    isSupportedNetwork(): boolean;
    /**
     * @ignore
     * @param domain - domain name
     */
    _getRecordsAddresses(domain: string): Promise<[string, string] | null>;
    _getResolverRecordsStructure(resolverAddress: string): Promise<ResolutionResult>;
    protected normalizeSource(source: string | boolean | SourceDefinition): SourceDefinition;
    private getContractField;
    private getContractMapValue;
}

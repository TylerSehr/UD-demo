{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@zilliqa-js/util'), require('@zilliqa-js/proto'), require('@zilliqa-js/crypto'), require('buffer'), require('stream'), require('crypto'), require('@zilliqa-js/core')) : typeof define === 'function' && define.amd ? define(['exports', '@zilliqa-js/util', '@zilliqa-js/proto', '@zilliqa-js/crypto', 'buffer', 'stream', 'crypto', '@zilliqa-js/core'], factory) : factory(global.zjsAccount = {}, global.zjsUtil, global.zjsProto, global.zjsCrypto, global.buffer, global.stream, global.crypto, global.zjsCore);\n})(this, function (exports, util, proto, zcrypto, buffer, stream, crypto, core) {\n  'use strict';\n\n  buffer = buffer && buffer.hasOwnProperty('default') ? buffer['default'] : buffer;\n  stream = stream && stream.hasOwnProperty('default') ? stream['default'] : stream;\n  crypto = crypto && crypto.hasOwnProperty('default') ? crypto['default'] : crypto;\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation. All rights reserved.\r\n  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n  this file except in compliance with the License. You may obtain a copy of the\r\n  License at http://www.apache.org/licenses/LICENSE-2.0\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n  MERCHANTABLITY OR NON-INFRINGEMENT.\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n  and limitations under the License.\r\n  ***************************************************************************** */\n\n  /* global Reflect, Promise */\n\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  function __extends(d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  }\n\n  var __assign = function () {\n    __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n\n      return t;\n    };\n\n    return __assign.apply(this, arguments);\n  };\n\n  function __rest(s, e) {\n    var t = {};\n\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n  }\n\n  function __awaiter(thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n\n      function step(result) {\n        result.done ? resolve(result.value) : new P(function (resolve) {\n          resolve(result.value);\n        }).then(fulfilled, rejected);\n      }\n\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  }\n\n  function __generator(thisArg, body) {\n    var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n        f,\n        y,\n        t,\n        g;\n    return g = {\n      next: verb(0),\n      \"throw\": verb(1),\n      \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n      return this;\n    }), g;\n\n    function verb(n) {\n      return function (v) {\n        return step([n, v]);\n      };\n    }\n\n    function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n\n      while (_) try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n\n      if (op[0] & 5) throw op[1];\n      return {\n        value: op[0] ? op[1] : void 0,\n        done: true\n      };\n    }\n  }\n\n  function __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o),\n        r,\n        ar = [],\n        e;\n\n    try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    } catch (error) {\n      e = {\n        error: error\n      };\n    } finally {\n      try {\n        if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      } finally {\n        if (e) throw e.error;\n      }\n    }\n\n    return ar;\n  }\n\n  function __spread() {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n    return ar;\n  } //  This file is part of Zilliqa-Javascript-Library.\n\n\n  var encodeTransactionProto = function (tx) {\n    var msg = {\n      version: tx.version,\n      nonce: tx.nonce || 0,\n      // core protocol Schnorr expects lowercase, non-prefixed address.\n      toaddr: util.bytes.hexToByteArray(tx.toAddr.replace('0x', '').toLowerCase()),\n      senderpubkey: proto.ZilliqaMessage.ByteArray.create({\n        data: util.bytes.hexToByteArray(tx.pubKey || '00')\n      }),\n      amount: proto.ZilliqaMessage.ByteArray.create({\n        data: Uint8Array.from(tx.amount.toArrayLike(Buffer, undefined, 16))\n      }),\n      gasprice: proto.ZilliqaMessage.ByteArray.create({\n        data: Uint8Array.from(tx.gasPrice.toArrayLike(Buffer, undefined, 16))\n      }),\n      gaslimit: tx.gasLimit,\n      code: tx.code && tx.code.length ? Uint8Array.from(__spread(tx.code).map(function (c) {\n        return c.charCodeAt(0);\n      })) : null,\n      data: tx.data && tx.data.length ? Uint8Array.from(__spread(tx.data).map(function (c) {\n        return c.charCodeAt(0);\n      })) : null\n    };\n    var serialised = proto.ZilliqaMessage.ProtoTransactionCoreInfo.create(msg);\n    return Buffer.from(proto.ZilliqaMessage.ProtoTransactionCoreInfo.encode(serialised).finish());\n  };\n\n  var isTxReceipt = function (x) {\n    return util.validation.isPlainObject(x) && util.validation.matchesObject(x, {});\n  };\n\n  var isTxParams = function (obj) {\n    var validator = {\n      version: [util.validation.required(util.validation.isNumber)],\n      toAddr: [util.validation.required(util.validation.isAddress)],\n      amount: [util.validation.required(util.validation.isBN)],\n      gasPrice: [util.validation.required(util.validation.isBN)],\n      gasLimit: [util.validation.required(util.validation.isLong)],\n      code: [util.validation.isString],\n      data: [util.validation.isString],\n      receipt: [isTxReceipt],\n      nonce: [util.validation.required(util.validation.isNumber)],\n      signature: [util.validation.required(util.validation.isSignature)]\n    };\n    return util.validation.matchesObject(obj, validator);\n  };\n\n  var formatOutgoingTx = function (req) {\n    if (req.payload.method === \"CreateTransaction\"\n    /* CreateTransaction */\n    && isTxParams(req.payload.params[0])) {\n      var txConfig = req.payload.params[0];\n\n      var ret = __assign(__assign({}, req), {\n        payload: __assign(__assign({}, req.payload), {\n          params: [__assign(__assign({}, txConfig), {\n            amount: txConfig.amount.toString(),\n            gasLimit: txConfig.gasLimit.toString(),\n            gasPrice: txConfig.gasPrice.toString()\n          })]\n        })\n      });\n\n      return ret;\n    }\n\n    return req;\n  };\n\n  function sleep(ms) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (resolve) {\n          setTimeout(function () {\n            return resolve();\n          }, ms);\n        })];\n      });\n    });\n  }\n\n  var util$1 =\n  /*#__PURE__*/\n  Object.freeze({\n    encodeTransactionProto: encodeTransactionProto,\n    isTxReceipt: isTxReceipt,\n    isTxParams: isTxParams,\n    formatOutgoingTx: formatOutgoingTx,\n    sleep: sleep\n  }); //  This file is part of Zilliqa-Javascript-Library.\n\n  var Account =\n  /** @class */\n  function () {\n    function Account(privateKey) {\n      this.privateKey = this.normalizePrivateKey(privateKey);\n      this.publicKey = zcrypto.getPubKeyFromPrivateKey(this.privateKey);\n      this.address = zcrypto.getAddressFromPublicKey(this.publicKey);\n      this.bech32Address = zcrypto.toBech32Address(this.address);\n    }\n    /**\r\n     * fromFile\r\n     *\r\n     * Takes a JSON-encoded keystore and passphrase, returning a fully\r\n     * instantiated Account instance.\r\n     *\r\n     * @param {string} file\r\n     * @param {string} passphrase\r\n     * @returns {Promise<Account>}\r\n     */\n\n\n    Account.fromFile = function (file, passphrase) {\n      return __awaiter(this, void 0, void 0, function () {\n        var keystore, privateKey, err_1;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 2,, 3]);\n\n              keystore = JSON.parse(file);\n              return [4\n              /*yield*/\n              , zcrypto.decryptPrivateKey(passphrase, keystore)];\n\n            case 1:\n              privateKey = _a.sent();\n              return [2\n              /*return*/\n              , new Account(privateKey)];\n\n            case 2:\n              err_1 = _a.sent();\n              throw new Error(\"Could not decrypt keystore file.\");\n\n            case 3:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n    /**\r\n     * toFile\r\n     *\r\n     * @param {string} passphrase\r\n     * @param {kdf} 'pbkdf2' | 'scrypt'\r\n     * @returns {Promise<string>}\r\n     */\n\n\n    Account.prototype.toFile = function (passphrase, kdf) {\n      if (kdf === void 0) {\n        kdf = 'scrypt';\n      }\n\n      return __awaiter(this, void 0, void 0, function () {\n        var keystore;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!passphrase || !passphrase.length) {\n                throw new Error('Passphrase cannot have a length of 0');\n              }\n\n              return [4\n              /*yield*/\n              , zcrypto.encryptPrivateKey(kdf, this.privateKey, passphrase)];\n\n            case 1:\n              keystore = _a.sent();\n              return [2\n              /*return*/\n              , keystore];\n          }\n        });\n      });\n    };\n    /**\r\n     * signTransaction\r\n     *\r\n     * @param {Buffer} bytes - the data to be signed\r\n     *\r\n     * @returns {string} - the hex encoded signature. it is a concatenation of\r\n     * the r and s values in hex, each padded to a length of 64.\r\n     */\n\n\n    Account.prototype.signTransaction = function (bytes) {\n      return zcrypto.sign(bytes, this.privateKey, this.publicKey);\n    };\n\n    Account.prototype.normalizePrivateKey = function (privateKey) {\n      return zcrypto.normalizePrivateKey(privateKey);\n    };\n\n    return Account;\n  }();\n\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n  function createCommonjsModule(fn, module) {\n    return module = {\n      exports: {}\n    }, fn(module, module.exports), module.exports;\n  }\n\n  function getCjsExportFromNamespace(n) {\n    return n && n['default'] || n;\n  }\n\n  var safeBuffer = createCommonjsModule(function (module, exports) {\n    /* eslint-disable node/no-deprecated-api */\n    var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers\n\n    function copyProps(src, dst) {\n      for (var key in src) {\n        dst[key] = src[key];\n      }\n    }\n\n    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n      module.exports = buffer;\n    } else {\n      // Copy properties from require('buffer')\n      copyProps(buffer, exports);\n      exports.Buffer = SafeBuffer;\n    }\n\n    function SafeBuffer(arg, encodingOrOffset, length) {\n      return Buffer(arg, encodingOrOffset, length);\n    }\n\n    SafeBuffer.prototype = Object.create(Buffer.prototype); // Copy static methods from Buffer\n\n    copyProps(Buffer, SafeBuffer);\n\n    SafeBuffer.from = function (arg, encodingOrOffset, length) {\n      if (typeof arg === 'number') {\n        throw new TypeError('Argument must not be a number');\n      }\n\n      return Buffer(arg, encodingOrOffset, length);\n    };\n\n    SafeBuffer.alloc = function (size, fill, encoding) {\n      if (typeof size !== 'number') {\n        throw new TypeError('Argument must be a number');\n      }\n\n      var buf = Buffer(size);\n\n      if (fill !== undefined) {\n        if (typeof encoding === 'string') {\n          buf.fill(fill, encoding);\n        } else {\n          buf.fill(fill);\n        }\n      } else {\n        buf.fill(0);\n      }\n\n      return buf;\n    };\n\n    SafeBuffer.allocUnsafe = function (size) {\n      if (typeof size !== 'number') {\n        throw new TypeError('Argument must be a number');\n      }\n\n      return Buffer(size);\n    };\n\n    SafeBuffer.allocUnsafeSlow = function (size) {\n      if (typeof size !== 'number') {\n        throw new TypeError('Argument must be a number');\n      }\n\n      return buffer.SlowBuffer(size);\n    };\n  });\n  var safeBuffer_1 = safeBuffer.Buffer;\n  var inherits_browser = createCommonjsModule(function (module) {\n    if (typeof Object.create === 'function') {\n      // implementation from standard node.js 'util' module\n      module.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n          ctor.super_ = superCtor;\n          ctor.prototype = Object.create(superCtor.prototype, {\n            constructor: {\n              value: ctor,\n              enumerable: false,\n              writable: true,\n              configurable: true\n            }\n          });\n        }\n      };\n    } else {\n      // old school shim for old browsers\n      module.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n          ctor.super_ = superCtor;\n\n          var TempCtor = function () {};\n\n          TempCtor.prototype = superCtor.prototype;\n          ctor.prototype = new TempCtor();\n          ctor.prototype.constructor = ctor;\n        }\n      };\n    }\n  });\n  var Buffer$1 = safeBuffer.Buffer;\n  var Transform = stream.Transform;\n\n  function throwIfNotStringOrBuffer(val, prefix) {\n    if (!Buffer$1.isBuffer(val) && typeof val !== 'string') {\n      throw new TypeError(prefix + ' must be a string or a buffer');\n    }\n  }\n\n  function HashBase(blockSize) {\n    Transform.call(this);\n    this._block = Buffer$1.allocUnsafe(blockSize);\n    this._blockSize = blockSize;\n    this._blockOffset = 0;\n    this._length = [0, 0, 0, 0];\n    this._finalized = false;\n  }\n\n  inherits_browser(HashBase, Transform);\n\n  HashBase.prototype._transform = function (chunk, encoding, callback) {\n    var error = null;\n\n    try {\n      this.update(chunk, encoding);\n    } catch (err) {\n      error = err;\n    }\n\n    callback(error);\n  };\n\n  HashBase.prototype._flush = function (callback) {\n    var error = null;\n\n    try {\n      this.push(this.digest());\n    } catch (err) {\n      error = err;\n    }\n\n    callback(error);\n  };\n\n  HashBase.prototype.update = function (data, encoding) {\n    throwIfNotStringOrBuffer(data, 'Data');\n    if (this._finalized) throw new Error('Digest already called');\n    if (!Buffer$1.isBuffer(data)) data = Buffer$1.from(data, encoding); // consume data\n\n    var block = this._block;\n    var offset = 0;\n\n    while (this._blockOffset + data.length - offset >= this._blockSize) {\n      for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];\n\n      this._update();\n\n      this._blockOffset = 0;\n    }\n\n    while (offset < data.length) block[this._blockOffset++] = data[offset++]; // update length\n\n\n    for (var j = 0, carry = data.length * 8; carry > 0; ++j) {\n      this._length[j] += carry;\n      carry = this._length[j] / 0x0100000000 | 0;\n      if (carry > 0) this._length[j] -= 0x0100000000 * carry;\n    }\n\n    return this;\n  };\n\n  HashBase.prototype._update = function () {\n    throw new Error('_update is not implemented');\n  };\n\n  HashBase.prototype.digest = function (encoding) {\n    if (this._finalized) throw new Error('Digest already called');\n    this._finalized = true;\n\n    var digest = this._digest();\n\n    if (encoding !== undefined) digest = digest.toString(encoding); // reset state\n\n    this._block.fill(0);\n\n    this._blockOffset = 0;\n\n    for (var i = 0; i < 4; ++i) this._length[i] = 0;\n\n    return digest;\n  };\n\n  HashBase.prototype._digest = function () {\n    throw new Error('_digest is not implemented');\n  };\n\n  var hashBase = HashBase;\n  var Buffer$2 = safeBuffer.Buffer;\n  var ARRAY16 = new Array(16);\n\n  function MD5() {\n    hashBase.call(this, 64); // state\n\n    this._a = 0x67452301;\n    this._b = 0xefcdab89;\n    this._c = 0x98badcfe;\n    this._d = 0x10325476;\n  }\n\n  inherits_browser(MD5, hashBase);\n\n  MD5.prototype._update = function () {\n    var M = ARRAY16;\n\n    for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4);\n\n    var a = this._a;\n    var b = this._b;\n    var c = this._c;\n    var d = this._d;\n    a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);\n    d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);\n    c = fnF(c, d, a, b, M[2], 0x242070db, 17);\n    b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);\n    a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);\n    d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);\n    c = fnF(c, d, a, b, M[6], 0xa8304613, 17);\n    b = fnF(b, c, d, a, M[7], 0xfd469501, 22);\n    a = fnF(a, b, c, d, M[8], 0x698098d8, 7);\n    d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);\n    c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);\n    b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);\n    a = fnF(a, b, c, d, M[12], 0x6b901122, 7);\n    d = fnF(d, a, b, c, M[13], 0xfd987193, 12);\n    c = fnF(c, d, a, b, M[14], 0xa679438e, 17);\n    b = fnF(b, c, d, a, M[15], 0x49b40821, 22);\n    a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);\n    d = fnG(d, a, b, c, M[6], 0xc040b340, 9);\n    c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);\n    b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);\n    a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);\n    d = fnG(d, a, b, c, M[10], 0x02441453, 9);\n    c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);\n    b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);\n    a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);\n    d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);\n    c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);\n    b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);\n    a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);\n    d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);\n    c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);\n    b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);\n    a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);\n    d = fnH(d, a, b, c, M[8], 0x8771f681, 11);\n    c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);\n    b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);\n    a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);\n    d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);\n    c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);\n    b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);\n    a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);\n    d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);\n    c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);\n    b = fnH(b, c, d, a, M[6], 0x04881d05, 23);\n    a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);\n    d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);\n    c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);\n    b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);\n    a = fnI(a, b, c, d, M[0], 0xf4292244, 6);\n    d = fnI(d, a, b, c, M[7], 0x432aff97, 10);\n    c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);\n    b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);\n    a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);\n    d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);\n    c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);\n    b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);\n    a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);\n    d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);\n    c = fnI(c, d, a, b, M[6], 0xa3014314, 15);\n    b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);\n    a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);\n    d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);\n    c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);\n    b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);\n    this._a = this._a + a | 0;\n    this._b = this._b + b | 0;\n    this._c = this._c + c | 0;\n    this._d = this._d + d | 0;\n  };\n\n  MD5.prototype._digest = function () {\n    // create padding and handle blocks\n    this._block[this._blockOffset++] = 0x80;\n\n    if (this._blockOffset > 56) {\n      this._block.fill(0, this._blockOffset, 64);\n\n      this._update();\n\n      this._blockOffset = 0;\n    }\n\n    this._block.fill(0, this._blockOffset, 56);\n\n    this._block.writeUInt32LE(this._length[0], 56);\n\n    this._block.writeUInt32LE(this._length[1], 60);\n\n    this._update(); // produce result\n\n\n    var buffer$$1 = Buffer$2.allocUnsafe(16);\n    buffer$$1.writeInt32LE(this._a, 0);\n    buffer$$1.writeInt32LE(this._b, 4);\n    buffer$$1.writeInt32LE(this._c, 8);\n    buffer$$1.writeInt32LE(this._d, 12);\n    return buffer$$1;\n  };\n\n  function rotl(x, n) {\n    return x << n | x >>> 32 - n;\n  }\n\n  function fnF(a, b, c, d, m, k, s) {\n    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;\n  }\n\n  function fnG(a, b, c, d, m, k, s) {\n    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;\n  }\n\n  function fnH(a, b, c, d, m, k, s) {\n    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;\n  }\n\n  function fnI(a, b, c, d, m, k, s) {\n    return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;\n  }\n\n  var md5_js = MD5;\n  var Buffer$3 = buffer.Buffer;\n  var ARRAY16$1 = new Array(16);\n  var zl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\n  var zr = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];\n  var sl = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\n  var sr = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];\n  var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];\n  var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];\n\n  function RIPEMD160() {\n    hashBase.call(this, 64); // state\n\n    this._a = 0x67452301;\n    this._b = 0xefcdab89;\n    this._c = 0x98badcfe;\n    this._d = 0x10325476;\n    this._e = 0xc3d2e1f0;\n  }\n\n  inherits_browser(RIPEMD160, hashBase);\n\n  RIPEMD160.prototype._update = function () {\n    var words = ARRAY16$1;\n\n    for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4);\n\n    var al = this._a | 0;\n    var bl = this._b | 0;\n    var cl = this._c | 0;\n    var dl = this._d | 0;\n    var el = this._e | 0;\n    var ar = this._a | 0;\n    var br = this._b | 0;\n    var cr = this._c | 0;\n    var dr = this._d | 0;\n    var er = this._e | 0; // computation\n\n    for (var i = 0; i < 80; i += 1) {\n      var tl;\n      var tr;\n\n      if (i < 16) {\n        tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);\n        tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);\n      } else if (i < 32) {\n        tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);\n        tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);\n      } else if (i < 48) {\n        tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);\n        tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);\n      } else if (i < 64) {\n        tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);\n        tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);\n      } else {\n        // if (i<80) {\n        tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);\n        tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);\n      }\n\n      al = el;\n      el = dl;\n      dl = rotl$1(cl, 10);\n      cl = bl;\n      bl = tl;\n      ar = er;\n      er = dr;\n      dr = rotl$1(cr, 10);\n      cr = br;\n      br = tr;\n    } // update state\n\n\n    var t = this._b + cl + dr | 0;\n    this._b = this._c + dl + er | 0;\n    this._c = this._d + el + ar | 0;\n    this._d = this._e + al + br | 0;\n    this._e = this._a + bl + cr | 0;\n    this._a = t;\n  };\n\n  RIPEMD160.prototype._digest = function () {\n    // create padding and handle blocks\n    this._block[this._blockOffset++] = 0x80;\n\n    if (this._blockOffset > 56) {\n      this._block.fill(0, this._blockOffset, 64);\n\n      this._update();\n\n      this._blockOffset = 0;\n    }\n\n    this._block.fill(0, this._blockOffset, 56);\n\n    this._block.writeUInt32LE(this._length[0], 56);\n\n    this._block.writeUInt32LE(this._length[1], 60);\n\n    this._update(); // produce result\n\n\n    var buffer$$1 = Buffer$3.alloc ? Buffer$3.alloc(20) : new Buffer$3(20);\n    buffer$$1.writeInt32LE(this._a, 0);\n    buffer$$1.writeInt32LE(this._b, 4);\n    buffer$$1.writeInt32LE(this._c, 8);\n    buffer$$1.writeInt32LE(this._d, 12);\n    buffer$$1.writeInt32LE(this._e, 16);\n    return buffer$$1;\n  };\n\n  function rotl$1(x, n) {\n    return x << n | x >>> 32 - n;\n  }\n\n  function fn1(a, b, c, d, e, m, k, s) {\n    return rotl$1(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;\n  }\n\n  function fn2(a, b, c, d, e, m, k, s) {\n    return rotl$1(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;\n  }\n\n  function fn3(a, b, c, d, e, m, k, s) {\n    return rotl$1(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;\n  }\n\n  function fn4(a, b, c, d, e, m, k, s) {\n    return rotl$1(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;\n  }\n\n  function fn5(a, b, c, d, e, m, k, s) {\n    return rotl$1(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;\n  }\n\n  var ripemd160 = RIPEMD160;\n  var Buffer$4 = safeBuffer.Buffer; // prototype class for hash functions\n\n  function Hash(blockSize, finalSize) {\n    this._block = Buffer$4.alloc(blockSize);\n    this._finalSize = finalSize;\n    this._blockSize = blockSize;\n    this._len = 0;\n  }\n\n  Hash.prototype.update = function (data, enc) {\n    if (typeof data === 'string') {\n      enc = enc || 'utf8';\n      data = Buffer$4.from(data, enc);\n    }\n\n    var block = this._block;\n    var blockSize = this._blockSize;\n    var length = data.length;\n    var accum = this._len;\n\n    for (var offset = 0; offset < length;) {\n      var assigned = accum % blockSize;\n      var remainder = Math.min(length - offset, blockSize - assigned);\n\n      for (var i = 0; i < remainder; i++) {\n        block[assigned + i] = data[offset + i];\n      }\n\n      accum += remainder;\n      offset += remainder;\n\n      if (accum % blockSize === 0) {\n        this._update(block);\n      }\n    }\n\n    this._len += length;\n    return this;\n  };\n\n  Hash.prototype.digest = function (enc) {\n    var rem = this._len % this._blockSize;\n    this._block[rem] = 0x80; // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\n    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\n\n    this._block.fill(0, rem + 1);\n\n    if (rem >= this._finalSize) {\n      this._update(this._block);\n\n      this._block.fill(0);\n    }\n\n    var bits = this._len * 8; // uint32\n\n    if (bits <= 0xffffffff) {\n      this._block.writeUInt32BE(bits, this._blockSize - 4); // uint64\n\n    } else {\n      var lowBits = (bits & 0xffffffff) >>> 0;\n      var highBits = (bits - lowBits) / 0x100000000;\n\n      this._block.writeUInt32BE(highBits, this._blockSize - 8);\n\n      this._block.writeUInt32BE(lowBits, this._blockSize - 4);\n    }\n\n    this._update(this._block);\n\n    var hash = this._hash();\n\n    return enc ? hash.toString(enc) : hash;\n  };\n\n  Hash.prototype._update = function () {\n    throw new Error('_update must be implemented by subclass');\n  };\n\n  var hash = Hash;\n  /*\n   * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined\n   * in FIPS PUB 180-1\n   * This source code is derived from sha1.js of the same repository.\n   * The difference between SHA-0 and SHA-1 is just a bitwise rotate left\n   * operation was added.\n   */\n\n  var Buffer$5 = safeBuffer.Buffer;\n  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];\n  var W = new Array(80);\n\n  function Sha() {\n    this.init();\n    this._w = W;\n    hash.call(this, 64, 56);\n  }\n\n  inherits_browser(Sha, hash);\n\n  Sha.prototype.init = function () {\n    this._a = 0x67452301;\n    this._b = 0xefcdab89;\n    this._c = 0x98badcfe;\n    this._d = 0x10325476;\n    this._e = 0xc3d2e1f0;\n    return this;\n  };\n\n  function rotl5(num) {\n    return num << 5 | num >>> 27;\n  }\n\n  function rotl30(num) {\n    return num << 30 | num >>> 2;\n  }\n\n  function ft(s, b, c, d) {\n    if (s === 0) return b & c | ~b & d;\n    if (s === 2) return b & c | b & d | c & d;\n    return b ^ c ^ d;\n  }\n\n  Sha.prototype._update = function (M) {\n    var W = this._w;\n    var a = this._a | 0;\n    var b = this._b | 0;\n    var c = this._c | 0;\n    var d = this._d | 0;\n    var e = this._e | 0;\n\n    for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);\n\n    for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n\n    for (var j = 0; j < 80; ++j) {\n      var s = ~~(j / 20);\n      var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;\n      e = d;\n      d = c;\n      c = rotl30(b);\n      b = a;\n      a = t;\n    }\n\n    this._a = a + this._a | 0;\n    this._b = b + this._b | 0;\n    this._c = c + this._c | 0;\n    this._d = d + this._d | 0;\n    this._e = e + this._e | 0;\n  };\n\n  Sha.prototype._hash = function () {\n    var H = Buffer$5.allocUnsafe(20);\n    H.writeInt32BE(this._a | 0, 0);\n    H.writeInt32BE(this._b | 0, 4);\n    H.writeInt32BE(this._c | 0, 8);\n    H.writeInt32BE(this._d | 0, 12);\n    H.writeInt32BE(this._e | 0, 16);\n    return H;\n  };\n\n  var sha = Sha;\n  /*\n   * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n   * in FIPS PUB 180-1\n   * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n   * Distributed under the BSD License\n   * See http://pajhome.org.uk/crypt/md5 for details.\n   */\n\n  var Buffer$6 = safeBuffer.Buffer;\n  var K$1 = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];\n  var W$1 = new Array(80);\n\n  function Sha1() {\n    this.init();\n    this._w = W$1;\n    hash.call(this, 64, 56);\n  }\n\n  inherits_browser(Sha1, hash);\n\n  Sha1.prototype.init = function () {\n    this._a = 0x67452301;\n    this._b = 0xefcdab89;\n    this._c = 0x98badcfe;\n    this._d = 0x10325476;\n    this._e = 0xc3d2e1f0;\n    return this;\n  };\n\n  function rotl1(num) {\n    return num << 1 | num >>> 31;\n  }\n\n  function rotl5$1(num) {\n    return num << 5 | num >>> 27;\n  }\n\n  function rotl30$1(num) {\n    return num << 30 | num >>> 2;\n  }\n\n  function ft$1(s, b, c, d) {\n    if (s === 0) return b & c | ~b & d;\n    if (s === 2) return b & c | b & d | c & d;\n    return b ^ c ^ d;\n  }\n\n  Sha1.prototype._update = function (M) {\n    var W = this._w;\n    var a = this._a | 0;\n    var b = this._b | 0;\n    var c = this._c | 0;\n    var d = this._d | 0;\n    var e = this._e | 0;\n\n    for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);\n\n    for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);\n\n    for (var j = 0; j < 80; ++j) {\n      var s = ~~(j / 20);\n      var t = rotl5$1(a) + ft$1(s, b, c, d) + e + W[j] + K$1[s] | 0;\n      e = d;\n      d = c;\n      c = rotl30$1(b);\n      b = a;\n      a = t;\n    }\n\n    this._a = a + this._a | 0;\n    this._b = b + this._b | 0;\n    this._c = c + this._c | 0;\n    this._d = d + this._d | 0;\n    this._e = e + this._e | 0;\n  };\n\n  Sha1.prototype._hash = function () {\n    var H = Buffer$6.allocUnsafe(20);\n    H.writeInt32BE(this._a | 0, 0);\n    H.writeInt32BE(this._b | 0, 4);\n    H.writeInt32BE(this._c | 0, 8);\n    H.writeInt32BE(this._d | 0, 12);\n    H.writeInt32BE(this._e | 0, 16);\n    return H;\n  };\n\n  var sha1 = Sha1;\n  /**\n   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n   * in FIPS 180-2\n   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n   *\n   */\n\n  var Buffer$7 = safeBuffer.Buffer;\n  var K$2 = [0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2];\n  var W$2 = new Array(64);\n\n  function Sha256() {\n    this.init();\n    this._w = W$2; // new Array(64)\n\n    hash.call(this, 64, 56);\n  }\n\n  inherits_browser(Sha256, hash);\n\n  Sha256.prototype.init = function () {\n    this._a = 0x6a09e667;\n    this._b = 0xbb67ae85;\n    this._c = 0x3c6ef372;\n    this._d = 0xa54ff53a;\n    this._e = 0x510e527f;\n    this._f = 0x9b05688c;\n    this._g = 0x1f83d9ab;\n    this._h = 0x5be0cd19;\n    return this;\n  };\n\n  function ch(x, y, z) {\n    return z ^ x & (y ^ z);\n  }\n\n  function maj(x, y, z) {\n    return x & y | z & (x | y);\n  }\n\n  function sigma0(x) {\n    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);\n  }\n\n  function sigma1(x) {\n    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);\n  }\n\n  function gamma0(x) {\n    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;\n  }\n\n  function gamma1(x) {\n    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;\n  }\n\n  Sha256.prototype._update = function (M) {\n    var W = this._w;\n    var a = this._a | 0;\n    var b = this._b | 0;\n    var c = this._c | 0;\n    var d = this._d | 0;\n    var e = this._e | 0;\n    var f = this._f | 0;\n    var g = this._g | 0;\n    var h = this._h | 0;\n\n    for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);\n\n    for (; i < 64; ++i) W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;\n\n    for (var j = 0; j < 64; ++j) {\n      var T1 = h + sigma1(e) + ch(e, f, g) + K$2[j] + W[j] | 0;\n      var T2 = sigma0(a) + maj(a, b, c) | 0;\n      h = g;\n      g = f;\n      f = e;\n      e = d + T1 | 0;\n      d = c;\n      c = b;\n      b = a;\n      a = T1 + T2 | 0;\n    }\n\n    this._a = a + this._a | 0;\n    this._b = b + this._b | 0;\n    this._c = c + this._c | 0;\n    this._d = d + this._d | 0;\n    this._e = e + this._e | 0;\n    this._f = f + this._f | 0;\n    this._g = g + this._g | 0;\n    this._h = h + this._h | 0;\n  };\n\n  Sha256.prototype._hash = function () {\n    var H = Buffer$7.allocUnsafe(32);\n    H.writeInt32BE(this._a, 0);\n    H.writeInt32BE(this._b, 4);\n    H.writeInt32BE(this._c, 8);\n    H.writeInt32BE(this._d, 12);\n    H.writeInt32BE(this._e, 16);\n    H.writeInt32BE(this._f, 20);\n    H.writeInt32BE(this._g, 24);\n    H.writeInt32BE(this._h, 28);\n    return H;\n  };\n\n  var sha256 = Sha256;\n  /**\n   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n   * in FIPS 180-2\n   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n   *\n   */\n\n  var Buffer$8 = safeBuffer.Buffer;\n  var W$3 = new Array(64);\n\n  function Sha224() {\n    this.init();\n    this._w = W$3; // new Array(64)\n\n    hash.call(this, 64, 56);\n  }\n\n  inherits_browser(Sha224, sha256);\n\n  Sha224.prototype.init = function () {\n    this._a = 0xc1059ed8;\n    this._b = 0x367cd507;\n    this._c = 0x3070dd17;\n    this._d = 0xf70e5939;\n    this._e = 0xffc00b31;\n    this._f = 0x68581511;\n    this._g = 0x64f98fa7;\n    this._h = 0xbefa4fa4;\n    return this;\n  };\n\n  Sha224.prototype._hash = function () {\n    var H = Buffer$8.allocUnsafe(28);\n    H.writeInt32BE(this._a, 0);\n    H.writeInt32BE(this._b, 4);\n    H.writeInt32BE(this._c, 8);\n    H.writeInt32BE(this._d, 12);\n    H.writeInt32BE(this._e, 16);\n    H.writeInt32BE(this._f, 20);\n    H.writeInt32BE(this._g, 24);\n    return H;\n  };\n\n  var sha224 = Sha224;\n  var Buffer$9 = safeBuffer.Buffer;\n  var K$3 = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];\n  var W$4 = new Array(160);\n\n  function Sha512() {\n    this.init();\n    this._w = W$4;\n    hash.call(this, 128, 112);\n  }\n\n  inherits_browser(Sha512, hash);\n\n  Sha512.prototype.init = function () {\n    this._ah = 0x6a09e667;\n    this._bh = 0xbb67ae85;\n    this._ch = 0x3c6ef372;\n    this._dh = 0xa54ff53a;\n    this._eh = 0x510e527f;\n    this._fh = 0x9b05688c;\n    this._gh = 0x1f83d9ab;\n    this._hh = 0x5be0cd19;\n    this._al = 0xf3bcc908;\n    this._bl = 0x84caa73b;\n    this._cl = 0xfe94f82b;\n    this._dl = 0x5f1d36f1;\n    this._el = 0xade682d1;\n    this._fl = 0x2b3e6c1f;\n    this._gl = 0xfb41bd6b;\n    this._hl = 0x137e2179;\n    return this;\n  };\n\n  function Ch(x, y, z) {\n    return z ^ x & (y ^ z);\n  }\n\n  function maj$1(x, y, z) {\n    return x & y | z & (x | y);\n  }\n\n  function sigma0$1(x, xl) {\n    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);\n  }\n\n  function sigma1$1(x, xl) {\n    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);\n  }\n\n  function Gamma0(x, xl) {\n    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;\n  }\n\n  function Gamma0l(x, xl) {\n    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);\n  }\n\n  function Gamma1(x, xl) {\n    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;\n  }\n\n  function Gamma1l(x, xl) {\n    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);\n  }\n\n  function getCarry(a, b) {\n    return a >>> 0 < b >>> 0 ? 1 : 0;\n  }\n\n  Sha512.prototype._update = function (M) {\n    var W = this._w;\n    var ah = this._ah | 0;\n    var bh = this._bh | 0;\n    var ch = this._ch | 0;\n    var dh = this._dh | 0;\n    var eh = this._eh | 0;\n    var fh = this._fh | 0;\n    var gh = this._gh | 0;\n    var hh = this._hh | 0;\n    var al = this._al | 0;\n    var bl = this._bl | 0;\n    var cl = this._cl | 0;\n    var dl = this._dl | 0;\n    var el = this._el | 0;\n    var fl = this._fl | 0;\n    var gl = this._gl | 0;\n    var hl = this._hl | 0;\n\n    for (var i = 0; i < 32; i += 2) {\n      W[i] = M.readInt32BE(i * 4);\n      W[i + 1] = M.readInt32BE(i * 4 + 4);\n    }\n\n    for (; i < 160; i += 2) {\n      var xh = W[i - 15 * 2];\n      var xl = W[i - 15 * 2 + 1];\n      var gamma0 = Gamma0(xh, xl);\n      var gamma0l = Gamma0l(xl, xh);\n      xh = W[i - 2 * 2];\n      xl = W[i - 2 * 2 + 1];\n      var gamma1 = Gamma1(xh, xl);\n      var gamma1l = Gamma1l(xl, xh); // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n\n      var Wi7h = W[i - 7 * 2];\n      var Wi7l = W[i - 7 * 2 + 1];\n      var Wi16h = W[i - 16 * 2];\n      var Wi16l = W[i - 16 * 2 + 1];\n      var Wil = gamma0l + Wi7l | 0;\n      var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;\n      Wil = Wil + gamma1l | 0;\n      Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;\n      Wil = Wil + Wi16l | 0;\n      Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;\n      W[i] = Wih;\n      W[i + 1] = Wil;\n    }\n\n    for (var j = 0; j < 160; j += 2) {\n      Wih = W[j];\n      Wil = W[j + 1];\n      var majh = maj$1(ah, bh, ch);\n      var majl = maj$1(al, bl, cl);\n      var sigma0h = sigma0$1(ah, al);\n      var sigma0l = sigma0$1(al, ah);\n      var sigma1h = sigma1$1(eh, el);\n      var sigma1l = sigma1$1(el, eh); // t1 = h + sigma1 + ch + K[j] + W[j]\n\n      var Kih = K$3[j];\n      var Kil = K$3[j + 1];\n      var chh = Ch(eh, fh, gh);\n      var chl = Ch(el, fl, gl);\n      var t1l = hl + sigma1l | 0;\n      var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;\n      t1l = t1l + chl | 0;\n      t1h = t1h + chh + getCarry(t1l, chl) | 0;\n      t1l = t1l + Kil | 0;\n      t1h = t1h + Kih + getCarry(t1l, Kil) | 0;\n      t1l = t1l + Wil | 0;\n      t1h = t1h + Wih + getCarry(t1l, Wil) | 0; // t2 = sigma0 + maj\n\n      var t2l = sigma0l + majl | 0;\n      var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;\n      hh = gh;\n      hl = gl;\n      gh = fh;\n      gl = fl;\n      fh = eh;\n      fl = el;\n      el = dl + t1l | 0;\n      eh = dh + t1h + getCarry(el, dl) | 0;\n      dh = ch;\n      dl = cl;\n      ch = bh;\n      cl = bl;\n      bh = ah;\n      bl = al;\n      al = t1l + t2l | 0;\n      ah = t1h + t2h + getCarry(al, t1l) | 0;\n    }\n\n    this._al = this._al + al | 0;\n    this._bl = this._bl + bl | 0;\n    this._cl = this._cl + cl | 0;\n    this._dl = this._dl + dl | 0;\n    this._el = this._el + el | 0;\n    this._fl = this._fl + fl | 0;\n    this._gl = this._gl + gl | 0;\n    this._hl = this._hl + hl | 0;\n    this._ah = this._ah + ah + getCarry(this._al, al) | 0;\n    this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;\n    this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;\n    this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;\n    this._eh = this._eh + eh + getCarry(this._el, el) | 0;\n    this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;\n    this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;\n    this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;\n  };\n\n  Sha512.prototype._hash = function () {\n    var H = Buffer$9.allocUnsafe(64);\n\n    function writeInt64BE(h, l, offset) {\n      H.writeInt32BE(h, offset);\n      H.writeInt32BE(l, offset + 4);\n    }\n\n    writeInt64BE(this._ah, this._al, 0);\n    writeInt64BE(this._bh, this._bl, 8);\n    writeInt64BE(this._ch, this._cl, 16);\n    writeInt64BE(this._dh, this._dl, 24);\n    writeInt64BE(this._eh, this._el, 32);\n    writeInt64BE(this._fh, this._fl, 40);\n    writeInt64BE(this._gh, this._gl, 48);\n    writeInt64BE(this._hh, this._hl, 56);\n    return H;\n  };\n\n  var sha512 = Sha512;\n  var Buffer$a = safeBuffer.Buffer;\n  var W$5 = new Array(160);\n\n  function Sha384() {\n    this.init();\n    this._w = W$5;\n    hash.call(this, 128, 112);\n  }\n\n  inherits_browser(Sha384, sha512);\n\n  Sha384.prototype.init = function () {\n    this._ah = 0xcbbb9d5d;\n    this._bh = 0x629a292a;\n    this._ch = 0x9159015a;\n    this._dh = 0x152fecd8;\n    this._eh = 0x67332667;\n    this._fh = 0x8eb44a87;\n    this._gh = 0xdb0c2e0d;\n    this._hh = 0x47b5481d;\n    this._al = 0xc1059ed8;\n    this._bl = 0x367cd507;\n    this._cl = 0x3070dd17;\n    this._dl = 0xf70e5939;\n    this._el = 0xffc00b31;\n    this._fl = 0x68581511;\n    this._gl = 0x64f98fa7;\n    this._hl = 0xbefa4fa4;\n    return this;\n  };\n\n  Sha384.prototype._hash = function () {\n    var H = Buffer$a.allocUnsafe(48);\n\n    function writeInt64BE(h, l, offset) {\n      H.writeInt32BE(h, offset);\n      H.writeInt32BE(l, offset + 4);\n    }\n\n    writeInt64BE(this._ah, this._al, 0);\n    writeInt64BE(this._bh, this._bl, 8);\n    writeInt64BE(this._ch, this._cl, 16);\n    writeInt64BE(this._dh, this._dl, 24);\n    writeInt64BE(this._eh, this._el, 32);\n    writeInt64BE(this._fh, this._fl, 40);\n    return H;\n  };\n\n  var sha384 = Sha384;\n  var sha_js = createCommonjsModule(function (module) {\n    var exports = module.exports = function SHA(algorithm) {\n      algorithm = algorithm.toLowerCase();\n      var Algorithm = exports[algorithm];\n      if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)');\n      return new Algorithm();\n    };\n\n    exports.sha = sha;\n    exports.sha1 = sha1;\n    exports.sha224 = sha224;\n    exports.sha256 = sha256;\n    exports.sha384 = sha384;\n    exports.sha512 = sha512;\n  });\n  /*<replacement>*/\n\n  var Buffer$b = safeBuffer.Buffer;\n  /*</replacement>*/\n\n  var isEncoding = Buffer$b.isEncoding || function (encoding) {\n    encoding = '' + encoding;\n\n    switch (encoding && encoding.toLowerCase()) {\n      case 'hex':\n      case 'utf8':\n      case 'utf-8':\n      case 'ascii':\n      case 'binary':\n      case 'base64':\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n      case 'raw':\n        return true;\n\n      default:\n        return false;\n    }\n  };\n\n  function _normalizeEncoding(enc) {\n    if (!enc) return 'utf8';\n    var retried;\n\n    while (true) {\n      switch (enc) {\n        case 'utf8':\n        case 'utf-8':\n          return 'utf8';\n\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n          return 'utf16le';\n\n        case 'latin1':\n        case 'binary':\n          return 'latin1';\n\n        case 'base64':\n        case 'ascii':\n        case 'hex':\n          return enc;\n\n        default:\n          if (retried) return; // undefined\n\n          enc = ('' + enc).toLowerCase();\n          retried = true;\n      }\n    }\n  } // Do not cache `Buffer.isEncoding` when checking encoding names as some\n  // modules monkey-patch it to support additional encodings\n\n\n  function normalizeEncoding(enc) {\n    var nenc = _normalizeEncoding(enc);\n\n    if (typeof nenc !== 'string' && (Buffer$b.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n    return nenc || enc;\n  } // StringDecoder provides an interface for efficiently splitting a series of\n  // buffers into a series of JS strings without breaking apart multi-byte\n  // characters.\n\n\n  var StringDecoder_1 = StringDecoder;\n\n  function StringDecoder(encoding) {\n    this.encoding = normalizeEncoding(encoding);\n    var nb;\n\n    switch (this.encoding) {\n      case 'utf16le':\n        this.text = utf16Text;\n        this.end = utf16End;\n        nb = 4;\n        break;\n\n      case 'utf8':\n        this.fillLast = utf8FillLast;\n        nb = 4;\n        break;\n\n      case 'base64':\n        this.text = base64Text;\n        this.end = base64End;\n        nb = 3;\n        break;\n\n      default:\n        this.write = simpleWrite;\n        this.end = simpleEnd;\n        return;\n    }\n\n    this.lastNeed = 0;\n    this.lastTotal = 0;\n    this.lastChar = Buffer$b.allocUnsafe(nb);\n  }\n\n  StringDecoder.prototype.write = function (buf) {\n    if (buf.length === 0) return '';\n    var r;\n    var i;\n\n    if (this.lastNeed) {\n      r = this.fillLast(buf);\n      if (r === undefined) return '';\n      i = this.lastNeed;\n      this.lastNeed = 0;\n    } else {\n      i = 0;\n    }\n\n    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n    return r || '';\n  };\n\n  StringDecoder.prototype.end = utf8End; // Returns only complete characters in a Buffer\n\n  StringDecoder.prototype.text = utf8Text; // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\n\n  StringDecoder.prototype.fillLast = function (buf) {\n    if (this.lastNeed <= buf.length) {\n      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n      return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n    }\n\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n    this.lastNeed -= buf.length;\n  }; // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n  // continuation byte. If an invalid byte is detected, -2 is returned.\n\n\n  function utf8CheckByte(byte) {\n    if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n    return byte >> 6 === 0x02 ? -1 : -2;\n  } // Checks at most 3 bytes at the end of a Buffer in order to detect an\n  // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n  // needed to complete the UTF-8 character (if applicable) are returned.\n\n\n  function utf8CheckIncomplete(self, buf, i) {\n    var j = buf.length - 1;\n    if (j < i) return 0;\n    var nb = utf8CheckByte(buf[j]);\n\n    if (nb >= 0) {\n      if (nb > 0) self.lastNeed = nb - 1;\n      return nb;\n    }\n\n    if (--j < i || nb === -2) return 0;\n    nb = utf8CheckByte(buf[j]);\n\n    if (nb >= 0) {\n      if (nb > 0) self.lastNeed = nb - 2;\n      return nb;\n    }\n\n    if (--j < i || nb === -2) return 0;\n    nb = utf8CheckByte(buf[j]);\n\n    if (nb >= 0) {\n      if (nb > 0) {\n        if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n      }\n\n      return nb;\n    }\n\n    return 0;\n  } // Validates as many continuation bytes for a multi-byte UTF-8 character as\n  // needed or are available. If we see a non-continuation byte where we expect\n  // one, we \"replace\" the validated continuation bytes we've seen so far with\n  // a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n  // behavior. The continuation byte check is included three times in the case\n  // where all of the continuation bytes for a character exist in the same buffer.\n  // It is also done this way as a slight performance increase instead of using a\n  // loop.\n\n\n  function utf8CheckExtraBytes(self, buf, p) {\n    if ((buf[0] & 0xC0) !== 0x80) {\n      self.lastNeed = 0;\n      return '\\ufffd';\n    }\n\n    if (self.lastNeed > 1 && buf.length > 1) {\n      if ((buf[1] & 0xC0) !== 0x80) {\n        self.lastNeed = 1;\n        return '\\ufffd';\n      }\n\n      if (self.lastNeed > 2 && buf.length > 2) {\n        if ((buf[2] & 0xC0) !== 0x80) {\n          self.lastNeed = 2;\n          return '\\ufffd';\n        }\n      }\n    }\n  } // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\n\n\n  function utf8FillLast(buf) {\n    var p = this.lastTotal - this.lastNeed;\n    var r = utf8CheckExtraBytes(this, buf, p);\n    if (r !== undefined) return r;\n\n    if (this.lastNeed <= buf.length) {\n      buf.copy(this.lastChar, p, 0, this.lastNeed);\n      return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n    }\n\n    buf.copy(this.lastChar, p, 0, buf.length);\n    this.lastNeed -= buf.length;\n  } // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n  // partial character, the character's bytes are buffered until the required\n  // number of bytes are available.\n\n\n  function utf8Text(buf, i) {\n    var total = utf8CheckIncomplete(this, buf, i);\n    if (!this.lastNeed) return buf.toString('utf8', i);\n    this.lastTotal = total;\n    var end = buf.length - (total - this.lastNeed);\n    buf.copy(this.lastChar, 0, end);\n    return buf.toString('utf8', i, end);\n  } // For UTF-8, a replacement character is added when ending on a partial\n  // character.\n\n\n  function utf8End(buf) {\n    var r = buf && buf.length ? this.write(buf) : '';\n    if (this.lastNeed) return r + '\\ufffd';\n    return r;\n  } // UTF-16LE typically needs two bytes per character, but even if we have an even\n  // number of bytes available, we need to check if we end on a leading/high\n  // surrogate. In that case, we need to wait for the next two bytes in order to\n  // decode the last character properly.\n\n\n  function utf16Text(buf, i) {\n    if ((buf.length - i) % 2 === 0) {\n      var r = buf.toString('utf16le', i);\n\n      if (r) {\n        var c = r.charCodeAt(r.length - 1);\n\n        if (c >= 0xD800 && c <= 0xDBFF) {\n          this.lastNeed = 2;\n          this.lastTotal = 4;\n          this.lastChar[0] = buf[buf.length - 2];\n          this.lastChar[1] = buf[buf.length - 1];\n          return r.slice(0, -1);\n        }\n      }\n\n      return r;\n    }\n\n    this.lastNeed = 1;\n    this.lastTotal = 2;\n    this.lastChar[0] = buf[buf.length - 1];\n    return buf.toString('utf16le', i, buf.length - 1);\n  } // For UTF-16LE we do not explicitly append special replacement characters if we\n  // end on a partial character, we simply let v8 handle that.\n\n\n  function utf16End(buf) {\n    var r = buf && buf.length ? this.write(buf) : '';\n\n    if (this.lastNeed) {\n      var end = this.lastTotal - this.lastNeed;\n      return r + this.lastChar.toString('utf16le', 0, end);\n    }\n\n    return r;\n  }\n\n  function base64Text(buf, i) {\n    var n = (buf.length - i) % 3;\n    if (n === 0) return buf.toString('base64', i);\n    this.lastNeed = 3 - n;\n    this.lastTotal = 3;\n\n    if (n === 1) {\n      this.lastChar[0] = buf[buf.length - 1];\n    } else {\n      this.lastChar[0] = buf[buf.length - 2];\n      this.lastChar[1] = buf[buf.length - 1];\n    }\n\n    return buf.toString('base64', i, buf.length - n);\n  }\n\n  function base64End(buf) {\n    var r = buf && buf.length ? this.write(buf) : '';\n    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n    return r;\n  } // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\n\n\n  function simpleWrite(buf) {\n    return buf.toString(this.encoding);\n  }\n\n  function simpleEnd(buf) {\n    return buf && buf.length ? this.write(buf) : '';\n  }\n\n  var string_decoder = {\n    StringDecoder: StringDecoder_1\n  };\n  var Buffer$c = safeBuffer.Buffer;\n  var Transform$1 = stream.Transform;\n  var StringDecoder$1 = string_decoder.StringDecoder;\n\n  function CipherBase(hashMode) {\n    Transform$1.call(this);\n    this.hashMode = typeof hashMode === 'string';\n\n    if (this.hashMode) {\n      this[hashMode] = this._finalOrDigest;\n    } else {\n      this.final = this._finalOrDigest;\n    }\n\n    if (this._final) {\n      this.__final = this._final;\n      this._final = null;\n    }\n\n    this._decoder = null;\n    this._encoding = null;\n  }\n\n  inherits_browser(CipherBase, Transform$1);\n\n  CipherBase.prototype.update = function (data, inputEnc, outputEnc) {\n    if (typeof data === 'string') {\n      data = Buffer$c.from(data, inputEnc);\n    }\n\n    var outData = this._update(data);\n\n    if (this.hashMode) return this;\n\n    if (outputEnc) {\n      outData = this._toString(outData, outputEnc);\n    }\n\n    return outData;\n  };\n\n  CipherBase.prototype.setAutoPadding = function () {};\n\n  CipherBase.prototype.getAuthTag = function () {\n    throw new Error('trying to get auth tag in unsupported state');\n  };\n\n  CipherBase.prototype.setAuthTag = function () {\n    throw new Error('trying to set auth tag in unsupported state');\n  };\n\n  CipherBase.prototype.setAAD = function () {\n    throw new Error('trying to set aad in unsupported state');\n  };\n\n  CipherBase.prototype._transform = function (data, _, next) {\n    var err;\n\n    try {\n      if (this.hashMode) {\n        this._update(data);\n      } else {\n        this.push(this._update(data));\n      }\n    } catch (e) {\n      err = e;\n    } finally {\n      next(err);\n    }\n  };\n\n  CipherBase.prototype._flush = function (done) {\n    var err;\n\n    try {\n      this.push(this.__final());\n    } catch (e) {\n      err = e;\n    }\n\n    done(err);\n  };\n\n  CipherBase.prototype._finalOrDigest = function (outputEnc) {\n    var outData = this.__final() || Buffer$c.alloc(0);\n\n    if (outputEnc) {\n      outData = this._toString(outData, outputEnc, true);\n    }\n\n    return outData;\n  };\n\n  CipherBase.prototype._toString = function (value, enc, fin) {\n    if (!this._decoder) {\n      this._decoder = new StringDecoder$1(enc);\n      this._encoding = enc;\n    }\n\n    if (this._encoding !== enc) throw new Error('can\\'t switch encodings');\n\n    var out = this._decoder.write(value);\n\n    if (fin) {\n      out += this._decoder.end();\n    }\n\n    return out;\n  };\n\n  var cipherBase = CipherBase;\n\n  function Hash$1(hash) {\n    cipherBase.call(this, 'digest');\n    this._hash = hash;\n  }\n\n  inherits_browser(Hash$1, cipherBase);\n\n  Hash$1.prototype._update = function (data) {\n    this._hash.update(data);\n  };\n\n  Hash$1.prototype._final = function () {\n    return this._hash.digest();\n  };\n\n  var browser = function createHash(alg) {\n    alg = alg.toLowerCase();\n    if (alg === 'md5') return new md5_js();\n    if (alg === 'rmd160' || alg === 'ripemd160') return new ripemd160();\n    return new Hash$1(sha_js(alg));\n  };\n\n  var global$1 = typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {}; // shim for using process in browser\n  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js\n\n  function defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n  }\n\n  function defaultClearTimeout() {\n    throw new Error('clearTimeout has not been defined');\n  }\n\n  var cachedSetTimeout = defaultSetTimout;\n  var cachedClearTimeout = defaultClearTimeout;\n\n  if (typeof global$1.setTimeout === 'function') {\n    cachedSetTimeout = setTimeout;\n  }\n\n  if (typeof global$1.clearTimeout === 'function') {\n    cachedClearTimeout = clearTimeout;\n  }\n\n  function runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n      //normal enviroments in sane situations\n      return setTimeout(fun, 0);\n    } // if setTimeout wasn't available but was latter defined\n\n\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n      cachedSetTimeout = setTimeout;\n      return setTimeout(fun, 0);\n    }\n\n    try {\n      // when when somebody has screwed with setTimeout but no I.E. maddness\n      return cachedSetTimeout(fun, 0);\n    } catch (e) {\n      try {\n        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n        return cachedSetTimeout.call(null, fun, 0);\n      } catch (e) {\n        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n        return cachedSetTimeout.call(this, fun, 0);\n      }\n    }\n  }\n\n  function runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n      //normal enviroments in sane situations\n      return clearTimeout(marker);\n    } // if clearTimeout wasn't available but was latter defined\n\n\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n      cachedClearTimeout = clearTimeout;\n      return clearTimeout(marker);\n    }\n\n    try {\n      // when when somebody has screwed with setTimeout but no I.E. maddness\n      return cachedClearTimeout(marker);\n    } catch (e) {\n      try {\n        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n        return cachedClearTimeout.call(null, marker);\n      } catch (e) {\n        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n        // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n        return cachedClearTimeout.call(this, marker);\n      }\n    }\n  }\n\n  var queue = [];\n  var draining = false;\n  var currentQueue;\n  var queueIndex = -1;\n\n  function cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n      return;\n    }\n\n    draining = false;\n\n    if (currentQueue.length) {\n      queue = currentQueue.concat(queue);\n    } else {\n      queueIndex = -1;\n    }\n\n    if (queue.length) {\n      drainQueue();\n    }\n  }\n\n  function drainQueue() {\n    if (draining) {\n      return;\n    }\n\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n    var len = queue.length;\n\n    while (len) {\n      currentQueue = queue;\n      queue = [];\n\n      while (++queueIndex < len) {\n        if (currentQueue) {\n          currentQueue[queueIndex].run();\n        }\n      }\n\n      queueIndex = -1;\n      len = queue.length;\n    }\n\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n  }\n\n  function nextTick(fun) {\n    var args = new Array(arguments.length - 1);\n\n    if (arguments.length > 1) {\n      for (var i = 1; i < arguments.length; i++) {\n        args[i - 1] = arguments[i];\n      }\n    }\n\n    queue.push(new Item(fun, args));\n\n    if (queue.length === 1 && !draining) {\n      runTimeout(drainQueue);\n    }\n  } // v8 likes predictible objects\n\n\n  function Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n  }\n\n  Item.prototype.run = function () {\n    this.fun.apply(null, this.array);\n  };\n\n  var title = 'browser';\n  var platform = 'browser';\n  var browser$1 = true;\n  var env = {};\n  var argv = [];\n  var version = ''; // empty string to avoid regexp issues\n\n  var versions = {};\n  var release = {};\n  var config = {};\n\n  function noop() {}\n\n  var on = noop;\n  var addListener = noop;\n  var once = noop;\n  var off = noop;\n  var removeListener = noop;\n  var removeAllListeners = noop;\n  var emit = noop;\n\n  function binding(name) {\n    throw new Error('process.binding is not supported');\n  }\n\n  function cwd() {\n    return '/';\n  }\n\n  function chdir(dir) {\n    throw new Error('process.chdir is not supported');\n  }\n\n  function umask() {\n    return 0;\n  } // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js\n\n\n  var performance = global$1.performance || {};\n\n  var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function () {\n    return new Date().getTime();\n  }; // generate timestamp or delta\n  // see http://nodejs.org/api/process.html#process_process_hrtime\n\n\n  function hrtime(previousTimestamp) {\n    var clocktime = performanceNow.call(performance) * 1e-3;\n    var seconds = Math.floor(clocktime);\n    var nanoseconds = Math.floor(clocktime % 1 * 1e9);\n\n    if (previousTimestamp) {\n      seconds = seconds - previousTimestamp[0];\n      nanoseconds = nanoseconds - previousTimestamp[1];\n\n      if (nanoseconds < 0) {\n        seconds--;\n        nanoseconds += 1e9;\n      }\n    }\n\n    return [seconds, nanoseconds];\n  }\n\n  var startTime = new Date();\n\n  function uptime() {\n    var currentTime = new Date();\n    var dif = currentTime - startTime;\n    return dif / 1000;\n  }\n\n  var process = {\n    nextTick: nextTick,\n    title: title,\n    browser: browser$1,\n    env: env,\n    argv: argv,\n    version: version,\n    versions: versions,\n    on: on,\n    addListener: addListener,\n    once: once,\n    off: off,\n    removeListener: removeListener,\n    removeAllListeners: removeAllListeners,\n    emit: emit,\n    binding: binding,\n    cwd: cwd,\n    chdir: chdir,\n    umask: umask,\n    hrtime: hrtime,\n    platform: platform,\n    release: release,\n    config: config,\n    uptime: uptime\n  };\n  var lookup = [];\n  var revLookup = [];\n  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n  var inited = false;\n\n  function init() {\n    inited = true;\n    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n    for (var i = 0, len = code.length; i < len; ++i) {\n      lookup[i] = code[i];\n      revLookup[code.charCodeAt(i)] = i;\n    }\n\n    revLookup['-'.charCodeAt(0)] = 62;\n    revLookup['_'.charCodeAt(0)] = 63;\n  }\n\n  function toByteArray(b64) {\n    if (!inited) {\n      init();\n    }\n\n    var i, j, l, tmp, placeHolders, arr;\n    var len = b64.length;\n\n    if (len % 4 > 0) {\n      throw new Error('Invalid string. Length must be a multiple of 4');\n    } // the number of equal signs (place holders)\n    // if there are two placeholders, than the two characters before it\n    // represent one byte\n    // if there is only one, then the three characters before it represent 2 bytes\n    // this is just a cheap hack to not do indexOf twice\n\n\n    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0; // base64 is 4/3 + up to two characters of the original data\n\n    arr = new Arr(len * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars\n\n    l = placeHolders > 0 ? len - 4 : len;\n    var L = 0;\n\n    for (i = 0, j = 0; i < l; i += 4, j += 3) {\n      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n      arr[L++] = tmp >> 16 & 0xFF;\n      arr[L++] = tmp >> 8 & 0xFF;\n      arr[L++] = tmp & 0xFF;\n    }\n\n    if (placeHolders === 2) {\n      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n      arr[L++] = tmp & 0xFF;\n    } else if (placeHolders === 1) {\n      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n      arr[L++] = tmp >> 8 & 0xFF;\n      arr[L++] = tmp & 0xFF;\n    }\n\n    return arr;\n  }\n\n  function tripletToBase64(num) {\n    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n  }\n\n  function encodeChunk(uint8, start, end) {\n    var tmp;\n    var output = [];\n\n    for (var i = start; i < end; i += 3) {\n      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];\n      output.push(tripletToBase64(tmp));\n    }\n\n    return output.join('');\n  }\n\n  function fromByteArray(uint8) {\n    if (!inited) {\n      init();\n    }\n\n    var tmp;\n    var len = uint8.length;\n    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n\n    var output = '';\n    var parts = [];\n    var maxChunkLength = 16383; // must be multiple of 3\n    // go through the array every three bytes, we'll deal with trailing stuff later\n\n    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n    } // pad the end with zeros, but make sure to not forget the extra bytes\n\n\n    if (extraBytes === 1) {\n      tmp = uint8[len - 1];\n      output += lookup[tmp >> 2];\n      output += lookup[tmp << 4 & 0x3F];\n      output += '==';\n    } else if (extraBytes === 2) {\n      tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n      output += lookup[tmp >> 10];\n      output += lookup[tmp >> 4 & 0x3F];\n      output += lookup[tmp << 2 & 0x3F];\n      output += '=';\n    }\n\n    parts.push(output);\n    return parts.join('');\n  }\n\n  function read(buffer$$1, offset, isLE, mLen, nBytes) {\n    var e, m;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var nBits = -7;\n    var i = isLE ? nBytes - 1 : 0;\n    var d = isLE ? -1 : 1;\n    var s = buffer$$1[offset + i];\n    i += d;\n    e = s & (1 << -nBits) - 1;\n    s >>= -nBits;\n    nBits += eLen;\n\n    for (; nBits > 0; e = e * 256 + buffer$$1[offset + i], i += d, nBits -= 8) {}\n\n    m = e & (1 << -nBits) - 1;\n    e >>= -nBits;\n    nBits += mLen;\n\n    for (; nBits > 0; m = m * 256 + buffer$$1[offset + i], i += d, nBits -= 8) {}\n\n    if (e === 0) {\n      e = 1 - eBias;\n    } else if (e === eMax) {\n      return m ? NaN : (s ? -1 : 1) * Infinity;\n    } else {\n      m = m + Math.pow(2, mLen);\n      e = e - eBias;\n    }\n\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n  }\n\n  function write(buffer$$1, value, offset, isLE, mLen, nBytes) {\n    var e, m, c;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n    var i = isLE ? 0 : nBytes - 1;\n    var d = isLE ? 1 : -1;\n    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n    value = Math.abs(value);\n\n    if (isNaN(value) || value === Infinity) {\n      m = isNaN(value) ? 1 : 0;\n      e = eMax;\n    } else {\n      e = Math.floor(Math.log(value) / Math.LN2);\n\n      if (value * (c = Math.pow(2, -e)) < 1) {\n        e--;\n        c *= 2;\n      }\n\n      if (e + eBias >= 1) {\n        value += rt / c;\n      } else {\n        value += rt * Math.pow(2, 1 - eBias);\n      }\n\n      if (value * c >= 2) {\n        e++;\n        c /= 2;\n      }\n\n      if (e + eBias >= eMax) {\n        m = 0;\n        e = eMax;\n      } else if (e + eBias >= 1) {\n        m = (value * c - 1) * Math.pow(2, mLen);\n        e = e + eBias;\n      } else {\n        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n        e = 0;\n      }\n    }\n\n    for (; mLen >= 8; buffer$$1[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n    e = e << mLen | m;\n    eLen += mLen;\n\n    for (; eLen > 0; buffer$$1[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n    buffer$$1[offset + i - d] |= s * 128;\n  }\n\n  var toString = {}.toString;\n\n  var isArray = Array.isArray || function (arr) {\n    return toString.call(arr) == '[object Array]';\n  };\n\n  var INSPECT_MAX_BYTES = 50;\n  /**\n   * If `Buffer.TYPED_ARRAY_SUPPORT`:\n   *   === true    Use Uint8Array implementation (fastest)\n   *   === false   Use Object implementation (most compatible, even IE6)\n   *\n   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n   * Opera 11.6+, iOS 4.2+.\n   *\n   * Due to various browser bugs, sometimes the Object implementation will be used even\n   * when the browser supports typed arrays.\n   *\n   * Note:\n   *\n   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n   *\n   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n   *\n   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n   *     incorrect length in some situations.\n    * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n   * get the Object implementation, which is slower but behaves correctly.\n   */\n\n  Buffer$d.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined ? global$1.TYPED_ARRAY_SUPPORT : true;\n\n  function kMaxLength() {\n    return Buffer$d.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;\n  }\n\n  function createBuffer(that, length) {\n    if (kMaxLength() < length) {\n      throw new RangeError('Invalid typed array length');\n    }\n\n    if (Buffer$d.TYPED_ARRAY_SUPPORT) {\n      // Return an augmented `Uint8Array` instance, for best performance\n      that = new Uint8Array(length);\n      that.__proto__ = Buffer$d.prototype;\n    } else {\n      // Fallback: Return an object instance of the Buffer class\n      if (that === null) {\n        that = new Buffer$d(length);\n      }\n\n      that.length = length;\n    }\n\n    return that;\n  }\n  /**\n   * The Buffer constructor returns instances of `Uint8Array` that have their\n   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n   * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n   * returns a single octet.\n   *\n   * The `Uint8Array` prototype remains unmodified.\n   */\n\n\n  function Buffer$d(arg, encodingOrOffset, length) {\n    if (!Buffer$d.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$d)) {\n      return new Buffer$d(arg, encodingOrOffset, length);\n    } // Common case.\n\n\n    if (typeof arg === 'number') {\n      if (typeof encodingOrOffset === 'string') {\n        throw new Error('If encoding is specified then the first argument must be a string');\n      }\n\n      return allocUnsafe(this, arg);\n    }\n\n    return from(this, arg, encodingOrOffset, length);\n  }\n\n  Buffer$d.poolSize = 8192; // not used by this implementation\n  // TODO: Legacy, not needed anymore. Remove in next major version.\n\n  Buffer$d._augment = function (arr) {\n    arr.__proto__ = Buffer$d.prototype;\n    return arr;\n  };\n\n  function from(that, value, encodingOrOffset, length) {\n    if (typeof value === 'number') {\n      throw new TypeError('\"value\" argument must not be a number');\n    }\n\n    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n      return fromArrayBuffer(that, value, encodingOrOffset, length);\n    }\n\n    if (typeof value === 'string') {\n      return fromString(that, value, encodingOrOffset);\n    }\n\n    return fromObject(that, value);\n  }\n  /**\n   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n   * if value is a number.\n   * Buffer.from(str[, encoding])\n   * Buffer.from(array)\n   * Buffer.from(buffer)\n   * Buffer.from(arrayBuffer[, byteOffset[, length]])\n   **/\n\n\n  Buffer$d.from = function (value, encodingOrOffset, length) {\n    return from(null, value, encodingOrOffset, length);\n  };\n\n  if (Buffer$d.TYPED_ARRAY_SUPPORT) {\n    Buffer$d.prototype.__proto__ = Uint8Array.prototype;\n    Buffer$d.__proto__ = Uint8Array;\n  }\n\n  function assertSize(size) {\n    if (typeof size !== 'number') {\n      throw new TypeError('\"size\" argument must be a number');\n    } else if (size < 0) {\n      throw new RangeError('\"size\" argument must not be negative');\n    }\n  }\n\n  function alloc(that, size, fill, encoding) {\n    assertSize(size);\n\n    if (size <= 0) {\n      return createBuffer(that, size);\n    }\n\n    if (fill !== undefined) {\n      // Only pay attention to encoding if it's a string. This\n      // prevents accidentally sending in a number that would\n      // be interpretted as a start offset.\n      return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);\n    }\n\n    return createBuffer(that, size);\n  }\n  /**\n   * Creates a new filled Buffer instance.\n   * alloc(size[, fill[, encoding]])\n   **/\n\n\n  Buffer$d.alloc = function (size, fill, encoding) {\n    return alloc(null, size, fill, encoding);\n  };\n\n  function allocUnsafe(that, size) {\n    assertSize(size);\n    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n\n    if (!Buffer$d.TYPED_ARRAY_SUPPORT) {\n      for (var i = 0; i < size; ++i) {\n        that[i] = 0;\n      }\n    }\n\n    return that;\n  }\n  /**\n   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n   * */\n\n\n  Buffer$d.allocUnsafe = function (size) {\n    return allocUnsafe(null, size);\n  };\n  /**\n   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n   */\n\n\n  Buffer$d.allocUnsafeSlow = function (size) {\n    return allocUnsafe(null, size);\n  };\n\n  function fromString(that, string, encoding) {\n    if (typeof encoding !== 'string' || encoding === '') {\n      encoding = 'utf8';\n    }\n\n    if (!Buffer$d.isEncoding(encoding)) {\n      throw new TypeError('\"encoding\" must be a valid string encoding');\n    }\n\n    var length = byteLength(string, encoding) | 0;\n    that = createBuffer(that, length);\n    var actual = that.write(string, encoding);\n\n    if (actual !== length) {\n      // Writing a hex string, for example, that contains invalid characters will\n      // cause everything after the first invalid character to be ignored. (e.g.\n      // 'abxxcd' will be treated as 'ab')\n      that = that.slice(0, actual);\n    }\n\n    return that;\n  }\n\n  function fromArrayLike(that, array) {\n    var length = array.length < 0 ? 0 : checked(array.length) | 0;\n    that = createBuffer(that, length);\n\n    for (var i = 0; i < length; i += 1) {\n      that[i] = array[i] & 255;\n    }\n\n    return that;\n  }\n\n  function fromArrayBuffer(that, array, byteOffset, length) {\n    array.byteLength; // this throws if `array` is not a valid ArrayBuffer\n\n    if (byteOffset < 0 || array.byteLength < byteOffset) {\n      throw new RangeError('\\'offset\\' is out of bounds');\n    }\n\n    if (array.byteLength < byteOffset + (length || 0)) {\n      throw new RangeError('\\'length\\' is out of bounds');\n    }\n\n    if (byteOffset === undefined && length === undefined) {\n      array = new Uint8Array(array);\n    } else if (length === undefined) {\n      array = new Uint8Array(array, byteOffset);\n    } else {\n      array = new Uint8Array(array, byteOffset, length);\n    }\n\n    if (Buffer$d.TYPED_ARRAY_SUPPORT) {\n      // Return an augmented `Uint8Array` instance, for best performance\n      that = array;\n      that.__proto__ = Buffer$d.prototype;\n    } else {\n      // Fallback: Return an object instance of the Buffer class\n      that = fromArrayLike(that, array);\n    }\n\n    return that;\n  }\n\n  function fromObject(that, obj) {\n    if (internalIsBuffer(obj)) {\n      var len = checked(obj.length) | 0;\n      that = createBuffer(that, len);\n\n      if (that.length === 0) {\n        return that;\n      }\n\n      obj.copy(that, 0, 0, len);\n      return that;\n    }\n\n    if (obj) {\n      if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {\n        if (typeof obj.length !== 'number' || isnan(obj.length)) {\n          return createBuffer(that, 0);\n        }\n\n        return fromArrayLike(that, obj);\n      }\n\n      if (obj.type === 'Buffer' && isArray(obj.data)) {\n        return fromArrayLike(that, obj.data);\n      }\n    }\n\n    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');\n  }\n\n  function checked(length) {\n    // Note: cannot use `length < kMaxLength()` here because that fails when\n    // length is NaN (which is otherwise coerced to zero.)\n    if (length >= kMaxLength()) {\n      throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');\n    }\n\n    return length | 0;\n  }\n\n  Buffer$d.isBuffer = isBuffer;\n\n  function internalIsBuffer(b) {\n    return !!(b != null && b._isBuffer);\n  }\n\n  Buffer$d.compare = function compare(a, b) {\n    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {\n      throw new TypeError('Arguments must be Buffers');\n    }\n\n    if (a === b) return 0;\n    var x = a.length;\n    var y = b.length;\n\n    for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n      if (a[i] !== b[i]) {\n        x = a[i];\n        y = b[i];\n        break;\n      }\n    }\n\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n  };\n\n  Buffer$d.isEncoding = function isEncoding(encoding) {\n    switch (String(encoding).toLowerCase()) {\n      case 'hex':\n      case 'utf8':\n      case 'utf-8':\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n      case 'base64':\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return true;\n\n      default:\n        return false;\n    }\n  };\n\n  Buffer$d.concat = function concat(list, length) {\n    if (!isArray(list)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers');\n    }\n\n    if (list.length === 0) {\n      return Buffer$d.alloc(0);\n    }\n\n    var i;\n\n    if (length === undefined) {\n      length = 0;\n\n      for (i = 0; i < list.length; ++i) {\n        length += list[i].length;\n      }\n    }\n\n    var buffer$$1 = Buffer$d.allocUnsafe(length);\n    var pos = 0;\n\n    for (i = 0; i < list.length; ++i) {\n      var buf = list[i];\n\n      if (!internalIsBuffer(buf)) {\n        throw new TypeError('\"list\" argument must be an Array of Buffers');\n      }\n\n      buf.copy(buffer$$1, pos);\n      pos += buf.length;\n    }\n\n    return buffer$$1;\n  };\n\n  function byteLength(string, encoding) {\n    if (internalIsBuffer(string)) {\n      return string.length;\n    }\n\n    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n      return string.byteLength;\n    }\n\n    if (typeof string !== 'string') {\n      string = '' + string;\n    }\n\n    var len = string.length;\n    if (len === 0) return 0; // Use a for loop to avoid recursion\n\n    var loweredCase = false;\n\n    for (;;) {\n      switch (encoding) {\n        case 'ascii':\n        case 'latin1':\n        case 'binary':\n          return len;\n\n        case 'utf8':\n        case 'utf-8':\n        case undefined:\n          return utf8ToBytes(string).length;\n\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n          return len * 2;\n\n        case 'hex':\n          return len >>> 1;\n\n        case 'base64':\n          return base64ToBytes(string).length;\n\n        default:\n          if (loweredCase) return utf8ToBytes(string).length; // assume utf8\n\n          encoding = ('' + encoding).toLowerCase();\n          loweredCase = true;\n      }\n    }\n  }\n\n  Buffer$d.byteLength = byteLength;\n\n  function slowToString(encoding, start, end) {\n    var loweredCase = false; // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n    // property of a typed array.\n    // This behaves neither like String nor Uint8Array in that we set start/end\n    // to their upper/lower bounds if the value passed is out of range.\n    // undefined is handled specially as per ECMA-262 6th Edition,\n    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n\n    if (start === undefined || start < 0) {\n      start = 0;\n    } // Return early if start > this.length. Done here to prevent potential uint32\n    // coercion fail below.\n\n\n    if (start > this.length) {\n      return '';\n    }\n\n    if (end === undefined || end > this.length) {\n      end = this.length;\n    }\n\n    if (end <= 0) {\n      return '';\n    } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n\n\n    end >>>= 0;\n    start >>>= 0;\n\n    if (end <= start) {\n      return '';\n    }\n\n    if (!encoding) encoding = 'utf8';\n\n    while (true) {\n      switch (encoding) {\n        case 'hex':\n          return hexSlice(this, start, end);\n\n        case 'utf8':\n        case 'utf-8':\n          return utf8Slice(this, start, end);\n\n        case 'ascii':\n          return asciiSlice(this, start, end);\n\n        case 'latin1':\n        case 'binary':\n          return latin1Slice(this, start, end);\n\n        case 'base64':\n          return base64Slice(this, start, end);\n\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n          return utf16leSlice(this, start, end);\n\n        default:\n          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n          encoding = (encoding + '').toLowerCase();\n          loweredCase = true;\n      }\n    }\n  } // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n  // Buffer instances.\n\n\n  Buffer$d.prototype._isBuffer = true;\n\n  function swap(b, n, m) {\n    var i = b[n];\n    b[n] = b[m];\n    b[m] = i;\n  }\n\n  Buffer$d.prototype.swap16 = function swap16() {\n    var len = this.length;\n\n    if (len % 2 !== 0) {\n      throw new RangeError('Buffer size must be a multiple of 16-bits');\n    }\n\n    for (var i = 0; i < len; i += 2) {\n      swap(this, i, i + 1);\n    }\n\n    return this;\n  };\n\n  Buffer$d.prototype.swap32 = function swap32() {\n    var len = this.length;\n\n    if (len % 4 !== 0) {\n      throw new RangeError('Buffer size must be a multiple of 32-bits');\n    }\n\n    for (var i = 0; i < len; i += 4) {\n      swap(this, i, i + 3);\n      swap(this, i + 1, i + 2);\n    }\n\n    return this;\n  };\n\n  Buffer$d.prototype.swap64 = function swap64() {\n    var len = this.length;\n\n    if (len % 8 !== 0) {\n      throw new RangeError('Buffer size must be a multiple of 64-bits');\n    }\n\n    for (var i = 0; i < len; i += 8) {\n      swap(this, i, i + 7);\n      swap(this, i + 1, i + 6);\n      swap(this, i + 2, i + 5);\n      swap(this, i + 3, i + 4);\n    }\n\n    return this;\n  };\n\n  Buffer$d.prototype.toString = function toString() {\n    var length = this.length | 0;\n    if (length === 0) return '';\n    if (arguments.length === 0) return utf8Slice(this, 0, length);\n    return slowToString.apply(this, arguments);\n  };\n\n  Buffer$d.prototype.equals = function equals(b) {\n    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer');\n    if (this === b) return true;\n    return Buffer$d.compare(this, b) === 0;\n  };\n\n  Buffer$d.prototype.inspect = function inspect() {\n    var str = '';\n    var max = INSPECT_MAX_BYTES;\n\n    if (this.length > 0) {\n      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n      if (this.length > max) str += ' ... ';\n    }\n\n    return '<Buffer ' + str + '>';\n  };\n\n  Buffer$d.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n    if (!internalIsBuffer(target)) {\n      throw new TypeError('Argument must be a Buffer');\n    }\n\n    if (start === undefined) {\n      start = 0;\n    }\n\n    if (end === undefined) {\n      end = target ? target.length : 0;\n    }\n\n    if (thisStart === undefined) {\n      thisStart = 0;\n    }\n\n    if (thisEnd === undefined) {\n      thisEnd = this.length;\n    }\n\n    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n      throw new RangeError('out of range index');\n    }\n\n    if (thisStart >= thisEnd && start >= end) {\n      return 0;\n    }\n\n    if (thisStart >= thisEnd) {\n      return -1;\n    }\n\n    if (start >= end) {\n      return 1;\n    }\n\n    start >>>= 0;\n    end >>>= 0;\n    thisStart >>>= 0;\n    thisEnd >>>= 0;\n    if (this === target) return 0;\n    var x = thisEnd - thisStart;\n    var y = end - start;\n    var len = Math.min(x, y);\n    var thisCopy = this.slice(thisStart, thisEnd);\n    var targetCopy = target.slice(start, end);\n\n    for (var i = 0; i < len; ++i) {\n      if (thisCopy[i] !== targetCopy[i]) {\n        x = thisCopy[i];\n        y = targetCopy[i];\n        break;\n      }\n    }\n\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n  }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n  //\n  // Arguments:\n  // - buffer - a Buffer to search\n  // - val - a string, Buffer, or number\n  // - byteOffset - an index into `buffer`; will be clamped to an int32\n  // - encoding - an optional encoding, relevant is val is a string\n  // - dir - true for indexOf, false for lastIndexOf\n\n\n  function bidirectionalIndexOf(buffer$$1, val, byteOffset, encoding, dir) {\n    // Empty buffer means no match\n    if (buffer$$1.length === 0) return -1; // Normalize byteOffset\n\n    if (typeof byteOffset === 'string') {\n      encoding = byteOffset;\n      byteOffset = 0;\n    } else if (byteOffset > 0x7fffffff) {\n      byteOffset = 0x7fffffff;\n    } else if (byteOffset < -0x80000000) {\n      byteOffset = -0x80000000;\n    }\n\n    byteOffset = +byteOffset; // Coerce to Number.\n\n    if (isNaN(byteOffset)) {\n      // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n      byteOffset = dir ? 0 : buffer$$1.length - 1;\n    } // Normalize byteOffset: negative offsets start from the end of the buffer\n\n\n    if (byteOffset < 0) byteOffset = buffer$$1.length + byteOffset;\n\n    if (byteOffset >= buffer$$1.length) {\n      if (dir) return -1;else byteOffset = buffer$$1.length - 1;\n    } else if (byteOffset < 0) {\n      if (dir) byteOffset = 0;else return -1;\n    } // Normalize val\n\n\n    if (typeof val === 'string') {\n      val = Buffer$d.from(val, encoding);\n    } // Finally, search either indexOf (if dir is true) or lastIndexOf\n\n\n    if (internalIsBuffer(val)) {\n      // Special case: looking for empty string/buffer always fails\n      if (val.length === 0) {\n        return -1;\n      }\n\n      return arrayIndexOf(buffer$$1, val, byteOffset, encoding, dir);\n    } else if (typeof val === 'number') {\n      val = val & 0xFF; // Search for a byte value [0-255]\n\n      if (Buffer$d.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {\n        if (dir) {\n          return Uint8Array.prototype.indexOf.call(buffer$$1, val, byteOffset);\n        } else {\n          return Uint8Array.prototype.lastIndexOf.call(buffer$$1, val, byteOffset);\n        }\n      }\n\n      return arrayIndexOf(buffer$$1, [val], byteOffset, encoding, dir);\n    }\n\n    throw new TypeError('val must be string, number or Buffer');\n  }\n\n  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n    var indexSize = 1;\n    var arrLength = arr.length;\n    var valLength = val.length;\n\n    if (encoding !== undefined) {\n      encoding = String(encoding).toLowerCase();\n\n      if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {\n        if (arr.length < 2 || val.length < 2) {\n          return -1;\n        }\n\n        indexSize = 2;\n        arrLength /= 2;\n        valLength /= 2;\n        byteOffset /= 2;\n      }\n    }\n\n    function read$$1(buf, i) {\n      if (indexSize === 1) {\n        return buf[i];\n      } else {\n        return buf.readUInt16BE(i * indexSize);\n      }\n    }\n\n    var i;\n\n    if (dir) {\n      var foundIndex = -1;\n\n      for (i = byteOffset; i < arrLength; i++) {\n        if (read$$1(arr, i) === read$$1(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n          if (foundIndex === -1) foundIndex = i;\n          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n        } else {\n          if (foundIndex !== -1) i -= i - foundIndex;\n          foundIndex = -1;\n        }\n      }\n    } else {\n      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n\n      for (i = byteOffset; i >= 0; i--) {\n        var found = true;\n\n        for (var j = 0; j < valLength; j++) {\n          if (read$$1(arr, i + j) !== read$$1(val, j)) {\n            found = false;\n            break;\n          }\n        }\n\n        if (found) return i;\n      }\n    }\n\n    return -1;\n  }\n\n  Buffer$d.prototype.includes = function includes(val, byteOffset, encoding) {\n    return this.indexOf(val, byteOffset, encoding) !== -1;\n  };\n\n  Buffer$d.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n  };\n\n  Buffer$d.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n  };\n\n  function hexWrite(buf, string, offset, length) {\n    offset = Number(offset) || 0;\n    var remaining = buf.length - offset;\n\n    if (!length) {\n      length = remaining;\n    } else {\n      length = Number(length);\n\n      if (length > remaining) {\n        length = remaining;\n      }\n    } // must be an even number of digits\n\n\n    var strLen = string.length;\n    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');\n\n    if (length > strLen / 2) {\n      length = strLen / 2;\n    }\n\n    for (var i = 0; i < length; ++i) {\n      var parsed = parseInt(string.substr(i * 2, 2), 16);\n      if (isNaN(parsed)) return i;\n      buf[offset + i] = parsed;\n    }\n\n    return i;\n  }\n\n  function utf8Write(buf, string, offset, length) {\n    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n  }\n\n  function asciiWrite(buf, string, offset, length) {\n    return blitBuffer(asciiToBytes(string), buf, offset, length);\n  }\n\n  function latin1Write(buf, string, offset, length) {\n    return asciiWrite(buf, string, offset, length);\n  }\n\n  function base64Write(buf, string, offset, length) {\n    return blitBuffer(base64ToBytes(string), buf, offset, length);\n  }\n\n  function ucs2Write(buf, string, offset, length) {\n    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n  }\n\n  Buffer$d.prototype.write = function write$$1(string, offset, length, encoding) {\n    // Buffer#write(string)\n    if (offset === undefined) {\n      encoding = 'utf8';\n      length = this.length;\n      offset = 0; // Buffer#write(string, encoding)\n    } else if (length === undefined && typeof offset === 'string') {\n      encoding = offset;\n      length = this.length;\n      offset = 0; // Buffer#write(string, offset[, length][, encoding])\n    } else if (isFinite(offset)) {\n      offset = offset | 0;\n\n      if (isFinite(length)) {\n        length = length | 0;\n        if (encoding === undefined) encoding = 'utf8';\n      } else {\n        encoding = length;\n        length = undefined;\n      } // legacy write(string, encoding, offset, length) - remove in v0.13\n\n    } else {\n      throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\n    }\n\n    var remaining = this.length - offset;\n    if (length === undefined || length > remaining) length = remaining;\n\n    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n      throw new RangeError('Attempt to write outside buffer bounds');\n    }\n\n    if (!encoding) encoding = 'utf8';\n    var loweredCase = false;\n\n    for (;;) {\n      switch (encoding) {\n        case 'hex':\n          return hexWrite(this, string, offset, length);\n\n        case 'utf8':\n        case 'utf-8':\n          return utf8Write(this, string, offset, length);\n\n        case 'ascii':\n          return asciiWrite(this, string, offset, length);\n\n        case 'latin1':\n        case 'binary':\n          return latin1Write(this, string, offset, length);\n\n        case 'base64':\n          // Warning: maxLength not taken into account in base64Write\n          return base64Write(this, string, offset, length);\n\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n          return ucs2Write(this, string, offset, length);\n\n        default:\n          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n          encoding = ('' + encoding).toLowerCase();\n          loweredCase = true;\n      }\n    }\n  };\n\n  Buffer$d.prototype.toJSON = function toJSON() {\n    return {\n      type: 'Buffer',\n      data: Array.prototype.slice.call(this._arr || this, 0)\n    };\n  };\n\n  function base64Slice(buf, start, end) {\n    if (start === 0 && end === buf.length) {\n      return fromByteArray(buf);\n    } else {\n      return fromByteArray(buf.slice(start, end));\n    }\n  }\n\n  function utf8Slice(buf, start, end) {\n    end = Math.min(buf.length, end);\n    var res = [];\n    var i = start;\n\n    while (i < end) {\n      var firstByte = buf[i];\n      var codePoint = null;\n      var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n\n      if (i + bytesPerSequence <= end) {\n        var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n        switch (bytesPerSequence) {\n          case 1:\n            if (firstByte < 0x80) {\n              codePoint = firstByte;\n            }\n\n            break;\n\n          case 2:\n            secondByte = buf[i + 1];\n\n            if ((secondByte & 0xC0) === 0x80) {\n              tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n\n              if (tempCodePoint > 0x7F) {\n                codePoint = tempCodePoint;\n              }\n            }\n\n            break;\n\n          case 3:\n            secondByte = buf[i + 1];\n            thirdByte = buf[i + 2];\n\n            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n\n              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n                codePoint = tempCodePoint;\n              }\n            }\n\n            break;\n\n          case 4:\n            secondByte = buf[i + 1];\n            thirdByte = buf[i + 2];\n            fourthByte = buf[i + 3];\n\n            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n\n              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n                codePoint = tempCodePoint;\n              }\n            }\n\n        }\n      }\n\n      if (codePoint === null) {\n        // we did not generate a valid codePoint so insert a\n        // replacement char (U+FFFD) and advance only 1 byte\n        codePoint = 0xFFFD;\n        bytesPerSequence = 1;\n      } else if (codePoint > 0xFFFF) {\n        // encode to utf16 (surrogate pair dance)\n        codePoint -= 0x10000;\n        res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n        codePoint = 0xDC00 | codePoint & 0x3FF;\n      }\n\n      res.push(codePoint);\n      i += bytesPerSequence;\n    }\n\n    return decodeCodePointsArray(res);\n  } // Based on http://stackoverflow.com/a/22747272/680742, the browser with\n  // the lowest limit is Chrome, with 0x10000 args.\n  // We go 1 magnitude less, for safety\n\n\n  var MAX_ARGUMENTS_LENGTH = 0x1000;\n\n  function decodeCodePointsArray(codePoints) {\n    var len = codePoints.length;\n\n    if (len <= MAX_ARGUMENTS_LENGTH) {\n      return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n    } // Decode in chunks to avoid \"call stack size exceeded\".\n\n\n    var res = '';\n    var i = 0;\n\n    while (i < len) {\n      res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n    }\n\n    return res;\n  }\n\n  function asciiSlice(buf, start, end) {\n    var ret = '';\n    end = Math.min(buf.length, end);\n\n    for (var i = start; i < end; ++i) {\n      ret += String.fromCharCode(buf[i] & 0x7F);\n    }\n\n    return ret;\n  }\n\n  function latin1Slice(buf, start, end) {\n    var ret = '';\n    end = Math.min(buf.length, end);\n\n    for (var i = start; i < end; ++i) {\n      ret += String.fromCharCode(buf[i]);\n    }\n\n    return ret;\n  }\n\n  function hexSlice(buf, start, end) {\n    var len = buf.length;\n    if (!start || start < 0) start = 0;\n    if (!end || end < 0 || end > len) end = len;\n    var out = '';\n\n    for (var i = start; i < end; ++i) {\n      out += toHex(buf[i]);\n    }\n\n    return out;\n  }\n\n  function utf16leSlice(buf, start, end) {\n    var bytes = buf.slice(start, end);\n    var res = '';\n\n    for (var i = 0; i < bytes.length; i += 2) {\n      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n    }\n\n    return res;\n  }\n\n  Buffer$d.prototype.slice = function slice(start, end) {\n    var len = this.length;\n    start = ~~start;\n    end = end === undefined ? len : ~~end;\n\n    if (start < 0) {\n      start += len;\n      if (start < 0) start = 0;\n    } else if (start > len) {\n      start = len;\n    }\n\n    if (end < 0) {\n      end += len;\n      if (end < 0) end = 0;\n    } else if (end > len) {\n      end = len;\n    }\n\n    if (end < start) end = start;\n    var newBuf;\n\n    if (Buffer$d.TYPED_ARRAY_SUPPORT) {\n      newBuf = this.subarray(start, end);\n      newBuf.__proto__ = Buffer$d.prototype;\n    } else {\n      var sliceLen = end - start;\n      newBuf = new Buffer$d(sliceLen, undefined);\n\n      for (var i = 0; i < sliceLen; ++i) {\n        newBuf[i] = this[i + start];\n      }\n    }\n\n    return newBuf;\n  };\n  /*\n   * Need to make sure that buffer isn't trying to write out of bounds.\n   */\n\n\n  function checkOffset(offset, ext, length) {\n    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\n    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\n  }\n\n  Buffer$d.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    var val = this[offset];\n    var mul = 1;\n    var i = 0;\n\n    while (++i < byteLength && (mul *= 0x100)) {\n      val += this[offset + i] * mul;\n    }\n\n    return val;\n  };\n\n  Buffer$d.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n\n    if (!noAssert) {\n      checkOffset(offset, byteLength, this.length);\n    }\n\n    var val = this[offset + --byteLength];\n    var mul = 1;\n\n    while (byteLength > 0 && (mul *= 0x100)) {\n      val += this[offset + --byteLength] * mul;\n    }\n\n    return val;\n  };\n\n  Buffer$d.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 1, this.length);\n    return this[offset];\n  };\n\n  Buffer$d.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    return this[offset] | this[offset + 1] << 8;\n  };\n\n  Buffer$d.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    return this[offset] << 8 | this[offset + 1];\n  };\n\n  Buffer$d.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n  };\n\n  Buffer$d.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n  };\n\n  Buffer$d.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    var val = this[offset];\n    var mul = 1;\n    var i = 0;\n\n    while (++i < byteLength && (mul *= 0x100)) {\n      val += this[offset + i] * mul;\n    }\n\n    mul *= 0x80;\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n    return val;\n  };\n\n  Buffer$d.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    var i = byteLength;\n    var mul = 1;\n    var val = this[offset + --i];\n\n    while (i > 0 && (mul *= 0x100)) {\n      val += this[offset + --i] * mul;\n    }\n\n    mul *= 0x80;\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n    return val;\n  };\n\n  Buffer$d.prototype.readInt8 = function readInt8(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 1, this.length);\n    if (!(this[offset] & 0x80)) return this[offset];\n    return (0xff - this[offset] + 1) * -1;\n  };\n\n  Buffer$d.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    var val = this[offset] | this[offset + 1] << 8;\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\n  };\n\n  Buffer$d.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    var val = this[offset + 1] | this[offset] << 8;\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\n  };\n\n  Buffer$d.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n  };\n\n  Buffer$d.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n  };\n\n  Buffer$d.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return read(this, offset, true, 23, 4);\n  };\n\n  Buffer$d.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return read(this, offset, false, 23, 4);\n  };\n\n  Buffer$d.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 8, this.length);\n    return read(this, offset, true, 52, 8);\n  };\n\n  Buffer$d.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 8, this.length);\n    return read(this, offset, false, 52, 8);\n  };\n\n  function checkInt(buf, value, offset, ext, max, min) {\n    if (!internalIsBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n    if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n    if (offset + ext > buf.length) throw new RangeError('Index out of range');\n  }\n\n  Buffer$d.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n\n    if (!noAssert) {\n      var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n      checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n\n    var mul = 1;\n    var i = 0;\n    this[offset] = value & 0xFF;\n\n    while (++i < byteLength && (mul *= 0x100)) {\n      this[offset + i] = value / mul & 0xFF;\n    }\n\n    return offset + byteLength;\n  };\n\n  Buffer$d.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n\n    if (!noAssert) {\n      var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n      checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n\n    var i = byteLength - 1;\n    var mul = 1;\n    this[offset + i] = value & 0xFF;\n\n    while (--i >= 0 && (mul *= 0x100)) {\n      this[offset + i] = value / mul & 0xFF;\n    }\n\n    return offset + byteLength;\n  };\n\n  Buffer$d.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n    if (!Buffer$d.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n    this[offset] = value & 0xff;\n    return offset + 1;\n  };\n\n  function objectWriteUInt16(buf, value, offset, littleEndian) {\n    if (value < 0) value = 0xffff + value + 1;\n\n    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n      buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;\n    }\n  }\n\n  Buffer$d.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n    if (Buffer$d.TYPED_ARRAY_SUPPORT) {\n      this[offset] = value & 0xff;\n      this[offset + 1] = value >>> 8;\n    } else {\n      objectWriteUInt16(this, value, offset, true);\n    }\n\n    return offset + 2;\n  };\n\n  Buffer$d.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n    if (Buffer$d.TYPED_ARRAY_SUPPORT) {\n      this[offset] = value >>> 8;\n      this[offset + 1] = value & 0xff;\n    } else {\n      objectWriteUInt16(this, value, offset, false);\n    }\n\n    return offset + 2;\n  };\n\n  function objectWriteUInt32(buf, value, offset, littleEndian) {\n    if (value < 0) value = 0xffffffff + value + 1;\n\n    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n      buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;\n    }\n  }\n\n  Buffer$d.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n    if (Buffer$d.TYPED_ARRAY_SUPPORT) {\n      this[offset + 3] = value >>> 24;\n      this[offset + 2] = value >>> 16;\n      this[offset + 1] = value >>> 8;\n      this[offset] = value & 0xff;\n    } else {\n      objectWriteUInt32(this, value, offset, true);\n    }\n\n    return offset + 4;\n  };\n\n  Buffer$d.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n    if (Buffer$d.TYPED_ARRAY_SUPPORT) {\n      this[offset] = value >>> 24;\n      this[offset + 1] = value >>> 16;\n      this[offset + 2] = value >>> 8;\n      this[offset + 3] = value & 0xff;\n    } else {\n      objectWriteUInt32(this, value, offset, false);\n    }\n\n    return offset + 4;\n  };\n\n  Buffer$d.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset | 0;\n\n    if (!noAssert) {\n      var limit = Math.pow(2, 8 * byteLength - 1);\n      checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n\n    var i = 0;\n    var mul = 1;\n    var sub = 0;\n    this[offset] = value & 0xFF;\n\n    while (++i < byteLength && (mul *= 0x100)) {\n      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n        sub = 1;\n      }\n\n      this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n    }\n\n    return offset + byteLength;\n  };\n\n  Buffer$d.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset | 0;\n\n    if (!noAssert) {\n      var limit = Math.pow(2, 8 * byteLength - 1);\n      checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n\n    var i = byteLength - 1;\n    var mul = 1;\n    var sub = 0;\n    this[offset + i] = value & 0xFF;\n\n    while (--i >= 0 && (mul *= 0x100)) {\n      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n        sub = 1;\n      }\n\n      this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n    }\n\n    return offset + byteLength;\n  };\n\n  Buffer$d.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n    if (!Buffer$d.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n    if (value < 0) value = 0xff + value + 1;\n    this[offset] = value & 0xff;\n    return offset + 1;\n  };\n\n  Buffer$d.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n    if (Buffer$d.TYPED_ARRAY_SUPPORT) {\n      this[offset] = value & 0xff;\n      this[offset + 1] = value >>> 8;\n    } else {\n      objectWriteUInt16(this, value, offset, true);\n    }\n\n    return offset + 2;\n  };\n\n  Buffer$d.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n    if (Buffer$d.TYPED_ARRAY_SUPPORT) {\n      this[offset] = value >>> 8;\n      this[offset + 1] = value & 0xff;\n    } else {\n      objectWriteUInt16(this, value, offset, false);\n    }\n\n    return offset + 2;\n  };\n\n  Buffer$d.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n\n    if (Buffer$d.TYPED_ARRAY_SUPPORT) {\n      this[offset] = value & 0xff;\n      this[offset + 1] = value >>> 8;\n      this[offset + 2] = value >>> 16;\n      this[offset + 3] = value >>> 24;\n    } else {\n      objectWriteUInt32(this, value, offset, true);\n    }\n\n    return offset + 4;\n  };\n\n  Buffer$d.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n    if (value < 0) value = 0xffffffff + value + 1;\n\n    if (Buffer$d.TYPED_ARRAY_SUPPORT) {\n      this[offset] = value >>> 24;\n      this[offset + 1] = value >>> 16;\n      this[offset + 2] = value >>> 8;\n      this[offset + 3] = value & 0xff;\n    } else {\n      objectWriteUInt32(this, value, offset, false);\n    }\n\n    return offset + 4;\n  };\n\n  function checkIEEE754(buf, value, offset, ext, max, min) {\n    if (offset + ext > buf.length) throw new RangeError('Index out of range');\n    if (offset < 0) throw new RangeError('Index out of range');\n  }\n\n  function writeFloat(buf, value, offset, littleEndian, noAssert) {\n    if (!noAssert) {\n      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\n    }\n\n    write(buf, value, offset, littleEndian, 23, 4);\n    return offset + 4;\n  }\n\n  Buffer$d.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, true, noAssert);\n  };\n\n  Buffer$d.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, false, noAssert);\n  };\n\n  function writeDouble(buf, value, offset, littleEndian, noAssert) {\n    if (!noAssert) {\n      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\n    }\n\n    write(buf, value, offset, littleEndian, 52, 8);\n    return offset + 8;\n  }\n\n  Buffer$d.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n    return writeDouble(this, value, offset, true, noAssert);\n  };\n\n  Buffer$d.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n    return writeDouble(this, value, offset, false, noAssert);\n  }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\n\n  Buffer$d.prototype.copy = function copy(target, targetStart, start, end) {\n    if (!start) start = 0;\n    if (!end && end !== 0) end = this.length;\n    if (targetStart >= target.length) targetStart = target.length;\n    if (!targetStart) targetStart = 0;\n    if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done\n\n    if (end === start) return 0;\n    if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions\n\n    if (targetStart < 0) {\n      throw new RangeError('targetStart out of bounds');\n    }\n\n    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');\n    if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?\n\n    if (end > this.length) end = this.length;\n\n    if (target.length - targetStart < end - start) {\n      end = target.length - targetStart + start;\n    }\n\n    var len = end - start;\n    var i;\n\n    if (this === target && start < targetStart && targetStart < end) {\n      // descending copy from end\n      for (i = len - 1; i >= 0; --i) {\n        target[i + targetStart] = this[i + start];\n      }\n    } else if (len < 1000 || !Buffer$d.TYPED_ARRAY_SUPPORT) {\n      // ascending copy from start\n      for (i = 0; i < len; ++i) {\n        target[i + targetStart] = this[i + start];\n      }\n    } else {\n      Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);\n    }\n\n    return len;\n  }; // Usage:\n  //    buffer.fill(number[, offset[, end]])\n  //    buffer.fill(buffer[, offset[, end]])\n  //    buffer.fill(string[, offset[, end]][, encoding])\n\n\n  Buffer$d.prototype.fill = function fill(val, start, end, encoding) {\n    // Handle string cases:\n    if (typeof val === 'string') {\n      if (typeof start === 'string') {\n        encoding = start;\n        start = 0;\n        end = this.length;\n      } else if (typeof end === 'string') {\n        encoding = end;\n        end = this.length;\n      }\n\n      if (val.length === 1) {\n        var code = val.charCodeAt(0);\n\n        if (code < 256) {\n          val = code;\n        }\n      }\n\n      if (encoding !== undefined && typeof encoding !== 'string') {\n        throw new TypeError('encoding must be a string');\n      }\n\n      if (typeof encoding === 'string' && !Buffer$d.isEncoding(encoding)) {\n        throw new TypeError('Unknown encoding: ' + encoding);\n      }\n    } else if (typeof val === 'number') {\n      val = val & 255;\n    } // Invalid ranges are not set to a default, so can range check early.\n\n\n    if (start < 0 || this.length < start || this.length < end) {\n      throw new RangeError('Out of range index');\n    }\n\n    if (end <= start) {\n      return this;\n    }\n\n    start = start >>> 0;\n    end = end === undefined ? this.length : end >>> 0;\n    if (!val) val = 0;\n    var i;\n\n    if (typeof val === 'number') {\n      for (i = start; i < end; ++i) {\n        this[i] = val;\n      }\n    } else {\n      var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer$d(val, encoding).toString());\n      var len = bytes.length;\n\n      for (i = 0; i < end - start; ++i) {\n        this[i + start] = bytes[i % len];\n      }\n    }\n\n    return this;\n  }; // HELPER FUNCTIONS\n  // ================\n\n\n  var INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\n  function base64clean(str) {\n    // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n    str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''\n\n    if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\n    while (str.length % 4 !== 0) {\n      str = str + '=';\n    }\n\n    return str;\n  }\n\n  function stringtrim(str) {\n    if (str.trim) return str.trim();\n    return str.replace(/^\\s+|\\s+$/g, '');\n  }\n\n  function toHex(n) {\n    if (n < 16) return '0' + n.toString(16);\n    return n.toString(16);\n  }\n\n  function utf8ToBytes(string, units) {\n    units = units || Infinity;\n    var codePoint;\n    var length = string.length;\n    var leadSurrogate = null;\n    var bytes = [];\n\n    for (var i = 0; i < length; ++i) {\n      codePoint = string.charCodeAt(i); // is surrogate component\n\n      if (codePoint > 0xD7FF && codePoint < 0xE000) {\n        // last char was a lead\n        if (!leadSurrogate) {\n          // no lead yet\n          if (codePoint > 0xDBFF) {\n            // unexpected trail\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n            continue;\n          } else if (i + 1 === length) {\n            // unpaired lead\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n            continue;\n          } // valid lead\n\n\n          leadSurrogate = codePoint;\n          continue;\n        } // 2 leads in a row\n\n\n        if (codePoint < 0xDC00) {\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          leadSurrogate = codePoint;\n          continue;\n        } // valid surrogate pair\n\n\n        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n      } else if (leadSurrogate) {\n        // valid bmp char, but last char was a lead\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n      }\n\n      leadSurrogate = null; // encode utf8\n\n      if (codePoint < 0x80) {\n        if ((units -= 1) < 0) break;\n        bytes.push(codePoint);\n      } else if (codePoint < 0x800) {\n        if ((units -= 2) < 0) break;\n        bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n      } else if (codePoint < 0x10000) {\n        if ((units -= 3) < 0) break;\n        bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n      } else if (codePoint < 0x110000) {\n        if ((units -= 4) < 0) break;\n        bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n      } else {\n        throw new Error('Invalid code point');\n      }\n    }\n\n    return bytes;\n  }\n\n  function asciiToBytes(str) {\n    var byteArray = [];\n\n    for (var i = 0; i < str.length; ++i) {\n      // Node's code seems to be doing this and not & 0x7F..\n      byteArray.push(str.charCodeAt(i) & 0xFF);\n    }\n\n    return byteArray;\n  }\n\n  function utf16leToBytes(str, units) {\n    var c, hi, lo;\n    var byteArray = [];\n\n    for (var i = 0; i < str.length; ++i) {\n      if ((units -= 2) < 0) break;\n      c = str.charCodeAt(i);\n      hi = c >> 8;\n      lo = c % 256;\n      byteArray.push(lo);\n      byteArray.push(hi);\n    }\n\n    return byteArray;\n  }\n\n  function base64ToBytes(str) {\n    return toByteArray(base64clean(str));\n  }\n\n  function blitBuffer(src, dst, offset, length) {\n    for (var i = 0; i < length; ++i) {\n      if (i + offset >= dst.length || i >= src.length) break;\n      dst[i + offset] = src[i];\n    }\n\n    return i;\n  }\n\n  function isnan(val) {\n    return val !== val; // eslint-disable-line no-self-compare\n  } // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence\n  // The _isBuffer check is for Safari 5-7 support, because it's missing\n  // Object.prototype.constructor. Remove this eventually\n\n\n  function isBuffer(obj) {\n    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));\n  }\n\n  function isFastBuffer(obj) {\n    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);\n  } // For Node v0.10 support. Remove this eventually.\n\n\n  function isSlowBuffer(obj) {\n    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0));\n  }\n\n  var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs\n\n  function checkBuffer(buf, name) {\n    if (typeof buf !== 'string' && !isBuffer(buf)) {\n      throw new TypeError(name + ' must be a buffer or string');\n    }\n  }\n\n  var precondition = function (password, salt, iterations, keylen) {\n    checkBuffer(password, 'Password');\n    checkBuffer(salt, 'Salt');\n\n    if (typeof iterations !== 'number') {\n      throw new TypeError('Iterations not a number');\n    }\n\n    if (iterations < 0) {\n      throw new TypeError('Bad iterations');\n    }\n\n    if (typeof keylen !== 'number') {\n      throw new TypeError('Key length not a number');\n    }\n\n    if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {\n      /* eslint no-self-compare: 0 */\n      throw new TypeError('Bad key length');\n    }\n  };\n\n  var defaultEncoding;\n  /* istanbul ignore next */\n\n  {\n    defaultEncoding = 'utf-8';\n  }\n  var defaultEncoding_1 = defaultEncoding;\n\n  var md5 = function (buffer$$1) {\n    return new md5_js().update(buffer$$1).digest();\n  };\n\n  var Buffer$e = safeBuffer.Buffer;\n  var ZEROS = Buffer$e.alloc(128);\n  var sizes = {\n    md5: 16,\n    sha1: 20,\n    sha224: 28,\n    sha256: 32,\n    sha384: 48,\n    sha512: 64,\n    rmd160: 20,\n    ripemd160: 20\n  };\n\n  function Hmac(alg, key, saltLen) {\n    var hash = getDigest(alg);\n    var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;\n\n    if (key.length > blocksize) {\n      key = hash(key);\n    } else if (key.length < blocksize) {\n      key = Buffer$e.concat([key, ZEROS], blocksize);\n    }\n\n    var ipad = Buffer$e.allocUnsafe(blocksize + sizes[alg]);\n    var opad = Buffer$e.allocUnsafe(blocksize + sizes[alg]);\n\n    for (var i = 0; i < blocksize; i++) {\n      ipad[i] = key[i] ^ 0x36;\n      opad[i] = key[i] ^ 0x5C;\n    }\n\n    var ipad1 = Buffer$e.allocUnsafe(blocksize + saltLen + 4);\n    ipad.copy(ipad1, 0, 0, blocksize);\n    this.ipad1 = ipad1;\n    this.ipad2 = ipad;\n    this.opad = opad;\n    this.alg = alg;\n    this.blocksize = blocksize;\n    this.hash = hash;\n    this.size = sizes[alg];\n  }\n\n  Hmac.prototype.run = function (data, ipad) {\n    data.copy(ipad, this.blocksize);\n    var h = this.hash(ipad);\n    h.copy(this.opad, this.blocksize);\n    return this.hash(this.opad);\n  };\n\n  function getDigest(alg) {\n    function shaFunc(data) {\n      return sha_js(alg).update(data).digest();\n    }\n\n    function rmd160Func(data) {\n      return new ripemd160().update(data).digest();\n    }\n\n    if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func;\n    if (alg === 'md5') return md5;\n    return shaFunc;\n  }\n\n  function pbkdf2(password, salt, iterations, keylen, digest) {\n    precondition(password, salt, iterations, keylen);\n    if (!Buffer$e.isBuffer(password)) password = Buffer$e.from(password, defaultEncoding_1);\n    if (!Buffer$e.isBuffer(salt)) salt = Buffer$e.from(salt, defaultEncoding_1);\n    digest = digest || 'sha1';\n    var hmac = new Hmac(digest, password, salt.length);\n    var DK = Buffer$e.allocUnsafe(keylen);\n    var block1 = Buffer$e.allocUnsafe(salt.length + 4);\n    salt.copy(block1, 0, 0, salt.length);\n    var destPos = 0;\n    var hLen = sizes[digest];\n    var l = Math.ceil(keylen / hLen);\n\n    for (var i = 1; i <= l; i++) {\n      block1.writeUInt32BE(i, salt.length);\n      var T = hmac.run(block1, hmac.ipad1);\n      var U = T;\n\n      for (var j = 1; j < iterations; j++) {\n        U = hmac.run(U, hmac.ipad2);\n\n        for (var k = 0; k < hLen; k++) T[k] ^= U[k];\n      }\n\n      T.copy(DK, destPos);\n      destPos += hLen;\n    }\n\n    return DK;\n  }\n\n  var syncBrowser = pbkdf2;\n  var Buffer$f = safeBuffer.Buffer;\n  var ZERO_BUF;\n  var subtle = commonjsGlobal.crypto && commonjsGlobal.crypto.subtle;\n  var toBrowser = {\n    'sha': 'SHA-1',\n    'sha-1': 'SHA-1',\n    'sha1': 'SHA-1',\n    'sha256': 'SHA-256',\n    'sha-256': 'SHA-256',\n    'sha384': 'SHA-384',\n    'sha-384': 'SHA-384',\n    'sha-512': 'SHA-512',\n    'sha512': 'SHA-512'\n  };\n  var checks = [];\n\n  function checkNative(algo) {\n    if (commonjsGlobal.process && !commonjsGlobal.process.browser) {\n      return Promise.resolve(false);\n    }\n\n    if (!subtle || !subtle.importKey || !subtle.deriveBits) {\n      return Promise.resolve(false);\n    }\n\n    if (checks[algo] !== undefined) {\n      return checks[algo];\n    }\n\n    ZERO_BUF = ZERO_BUF || Buffer$f.alloc(8);\n    var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function () {\n      return true;\n    }).catch(function () {\n      return false;\n    });\n    checks[algo] = prom;\n    return prom;\n  }\n\n  function browserPbkdf2(password, salt, iterations, length, algo) {\n    return subtle.importKey('raw', password, {\n      name: 'PBKDF2'\n    }, false, ['deriveBits']).then(function (key) {\n      return subtle.deriveBits({\n        name: 'PBKDF2',\n        salt: salt,\n        iterations: iterations,\n        hash: {\n          name: algo\n        }\n      }, key, length << 3);\n    }).then(function (res) {\n      return Buffer$f.from(res);\n    });\n  }\n\n  function resolvePromise(promise, callback) {\n    promise.then(function (out) {\n      nextTick(function () {\n        callback(null, out);\n      });\n    }, function (e) {\n      nextTick(function () {\n        callback(e);\n      });\n    });\n  }\n\n  var async = function (password, salt, iterations, keylen, digest, callback) {\n    if (typeof digest === 'function') {\n      callback = digest;\n      digest = undefined;\n    }\n\n    digest = digest || 'sha1';\n    var algo = toBrowser[digest.toLowerCase()];\n\n    if (!algo || typeof commonjsGlobal.Promise !== 'function') {\n      return nextTick(function () {\n        var out;\n\n        try {\n          out = syncBrowser(password, salt, iterations, keylen, digest);\n        } catch (e) {\n          return callback(e);\n        }\n\n        callback(null, out);\n      });\n    }\n\n    precondition(password, salt, iterations, keylen);\n    if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');\n    if (!Buffer$f.isBuffer(password)) password = Buffer$f.from(password, defaultEncoding_1);\n    if (!Buffer$f.isBuffer(salt)) salt = Buffer$f.from(salt, defaultEncoding_1);\n    resolvePromise(checkNative(algo).then(function (resp) {\n      if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);\n      return syncBrowser(password, salt, iterations, keylen, digest);\n    }), callback);\n  };\n\n  var pbkdf2$1 = async;\n  var pbkdf2Sync = syncBrowser;\n  var browser$3 = {\n    pbkdf2: pbkdf2$1,\n    pbkdf2Sync: pbkdf2Sync\n  };\n  var browser$4 = createCommonjsModule(function (module) {\n    // limit of Crypto.getRandomValues()\n    // https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\n    var MAX_BYTES = 65536; // Node supports requesting up to this number of bytes\n    // https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48\n\n    var MAX_UINT32 = 4294967295;\n\n    function oldBrowser() {\n      throw new Error('Secure random number generation is not supported by this browser.\\nUse Chrome, Firefox or Internet Explorer 11');\n    }\n\n    var Buffer = safeBuffer.Buffer;\n    var crypto$$1 = commonjsGlobal.crypto || commonjsGlobal.msCrypto;\n\n    if (crypto$$1 && crypto$$1.getRandomValues) {\n      module.exports = randomBytes;\n    } else {\n      module.exports = oldBrowser;\n    }\n\n    function randomBytes(size, cb) {\n      // phantomjs needs to throw\n      if (size > MAX_UINT32) throw new RangeError('requested too many random bytes');\n      var bytes = Buffer.allocUnsafe(size);\n\n      if (size > 0) {\n        // getRandomValues fails on IE if size == 0\n        if (size > MAX_BYTES) {\n          // this is the max bytes crypto.getRandomValues\n          // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\n          for (var generated = 0; generated < size; generated += MAX_BYTES) {\n            // buffer.slice automatically checks if the end is past the end of\n            // the buffer so we don't have to here\n            crypto$$1.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));\n          }\n        } else {\n          crypto$$1.getRandomValues(bytes);\n        }\n      }\n\n      if (typeof cb === 'function') {\n        return nextTick(function () {\n          cb(null, bytes);\n        });\n      }\n\n      return bytes;\n    }\n  });\n  var unorm = createCommonjsModule(function (module) {\n    (function (root) {\n      /***** unorm.js *****/\n\n      /*\n       * UnicodeNormalizer 1.0.0\n       * Copyright (c) 2008 Matsuza\n       * Dual licensed under the MIT (MIT-LICENSE.txt) and GPL (GPL-LICENSE.txt) licenses.\n       * $Date: 2008-06-05 16:44:17 +0200 (Thu, 05 Jun 2008) $\n       * $Rev: 13309 $\n       */\n      var DEFAULT_FEATURE = [null, 0, {}];\n      var CACHE_THRESHOLD = 10;\n      var SBase = 0xAC00,\n          LBase = 0x1100,\n          VBase = 0x1161,\n          TBase = 0x11A7,\n          LCount = 19,\n          VCount = 21,\n          TCount = 28;\n      var NCount = VCount * TCount; // 588\n\n      var SCount = LCount * NCount; // 11172\n\n      var UChar = function (cp, feature) {\n        this.codepoint = cp;\n        this.feature = feature;\n      }; // Strategies\n\n\n      var cache = {};\n      var cacheCounter = [];\n\n      for (var i = 0; i <= 0xFF; ++i) {\n        cacheCounter[i] = 0;\n      }\n\n      function fromCache(next, cp, needFeature) {\n        var ret = cache[cp];\n\n        if (!ret) {\n          ret = next(cp, needFeature);\n\n          if (!!ret.feature && ++cacheCounter[cp >> 8 & 0xFF] > CACHE_THRESHOLD) {\n            cache[cp] = ret;\n          }\n        }\n\n        return ret;\n      }\n\n      function fromData(next, cp, needFeature) {\n        var hash = cp & 0xFF00;\n        var dunit = UChar.udata[hash] || {};\n        var f = dunit[cp];\n        return f ? new UChar(cp, f) : new UChar(cp, DEFAULT_FEATURE);\n      }\n\n      function fromCpOnly(next, cp, needFeature) {\n        return !!needFeature ? next(cp, needFeature) : new UChar(cp, null);\n      }\n\n      function fromRuleBasedJamo(next, cp, needFeature) {\n        var j;\n\n        if (cp < LBase || LBase + LCount <= cp && cp < SBase || SBase + SCount < cp) {\n          return next(cp, needFeature);\n        }\n\n        if (LBase <= cp && cp < LBase + LCount) {\n          var c = {};\n          var base = (cp - LBase) * VCount;\n\n          for (j = 0; j < VCount; ++j) {\n            c[VBase + j] = SBase + TCount * (j + base);\n          }\n\n          return new UChar(cp, [,, c]);\n        }\n\n        var SIndex = cp - SBase;\n        var TIndex = SIndex % TCount;\n        var feature = [];\n\n        if (TIndex !== 0) {\n          feature[0] = [SBase + SIndex - TIndex, TBase + TIndex];\n        } else {\n          feature[0] = [LBase + Math.floor(SIndex / NCount), VBase + Math.floor(SIndex % NCount / TCount)];\n          feature[2] = {};\n\n          for (j = 1; j < TCount; ++j) {\n            feature[2][TBase + j] = cp + j;\n          }\n        }\n\n        return new UChar(cp, feature);\n      }\n\n      function fromCpFilter(next, cp, needFeature) {\n        return cp < 60 || 13311 < cp && cp < 42607 ? new UChar(cp, DEFAULT_FEATURE) : next(cp, needFeature);\n      }\n\n      var strategies = [fromCpFilter, fromCache, fromCpOnly, fromRuleBasedJamo, fromData];\n      UChar.fromCharCode = strategies.reduceRight(function (next, strategy) {\n        return function (cp, needFeature) {\n          return strategy(next, cp, needFeature);\n        };\n      }, null);\n\n      UChar.isHighSurrogate = function (cp) {\n        return cp >= 0xD800 && cp <= 0xDBFF;\n      };\n\n      UChar.isLowSurrogate = function (cp) {\n        return cp >= 0xDC00 && cp <= 0xDFFF;\n      };\n\n      UChar.prototype.prepFeature = function () {\n        if (!this.feature) {\n          this.feature = UChar.fromCharCode(this.codepoint, true).feature;\n        }\n      };\n\n      UChar.prototype.toString = function () {\n        if (this.codepoint < 0x10000) {\n          return String.fromCharCode(this.codepoint);\n        } else {\n          var x = this.codepoint - 0x10000;\n          return String.fromCharCode(Math.floor(x / 0x400) + 0xD800, x % 0x400 + 0xDC00);\n        }\n      };\n\n      UChar.prototype.getDecomp = function () {\n        this.prepFeature();\n        return this.feature[0] || null;\n      };\n\n      UChar.prototype.isCompatibility = function () {\n        this.prepFeature();\n        return !!this.feature[1] && this.feature[1] & 1 << 8;\n      };\n\n      UChar.prototype.isExclude = function () {\n        this.prepFeature();\n        return !!this.feature[1] && this.feature[1] & 1 << 9;\n      };\n\n      UChar.prototype.getCanonicalClass = function () {\n        this.prepFeature();\n        return !!this.feature[1] ? this.feature[1] & 0xff : 0;\n      };\n\n      UChar.prototype.getComposite = function (following) {\n        this.prepFeature();\n\n        if (!this.feature[2]) {\n          return null;\n        }\n\n        var cp = this.feature[2][following.codepoint];\n        return cp ? UChar.fromCharCode(cp) : null;\n      };\n\n      var UCharIterator = function (str) {\n        this.str = str;\n        this.cursor = 0;\n      };\n\n      UCharIterator.prototype.next = function () {\n        if (!!this.str && this.cursor < this.str.length) {\n          var cp = this.str.charCodeAt(this.cursor++);\n          var d;\n\n          if (UChar.isHighSurrogate(cp) && this.cursor < this.str.length && UChar.isLowSurrogate(d = this.str.charCodeAt(this.cursor))) {\n            cp = (cp - 0xD800) * 0x400 + (d - 0xDC00) + 0x10000;\n            ++this.cursor;\n          }\n\n          return UChar.fromCharCode(cp);\n        } else {\n          this.str = null;\n          return null;\n        }\n      };\n\n      var RecursDecompIterator = function (it, cano) {\n        this.it = it;\n        this.canonical = cano;\n        this.resBuf = [];\n      };\n\n      RecursDecompIterator.prototype.next = function () {\n        function recursiveDecomp(cano, uchar) {\n          var decomp = uchar.getDecomp();\n\n          if (!!decomp && !(cano && uchar.isCompatibility())) {\n            var ret = [];\n\n            for (var i = 0; i < decomp.length; ++i) {\n              var a = recursiveDecomp(cano, UChar.fromCharCode(decomp[i]));\n              ret = ret.concat(a);\n            }\n\n            return ret;\n          } else {\n            return [uchar];\n          }\n        }\n\n        if (this.resBuf.length === 0) {\n          var uchar = this.it.next();\n\n          if (!uchar) {\n            return null;\n          }\n\n          this.resBuf = recursiveDecomp(this.canonical, uchar);\n        }\n\n        return this.resBuf.shift();\n      };\n\n      var DecompIterator = function (it) {\n        this.it = it;\n        this.resBuf = [];\n      };\n\n      DecompIterator.prototype.next = function () {\n        var cc;\n\n        if (this.resBuf.length === 0) {\n          do {\n            var uchar = this.it.next();\n\n            if (!uchar) {\n              break;\n            }\n\n            cc = uchar.getCanonicalClass();\n            var inspt = this.resBuf.length;\n\n            if (cc !== 0) {\n              for (; inspt > 0; --inspt) {\n                var uchar2 = this.resBuf[inspt - 1];\n                var cc2 = uchar2.getCanonicalClass();\n\n                if (cc2 <= cc) {\n                  break;\n                }\n              }\n            }\n\n            this.resBuf.splice(inspt, 0, uchar);\n          } while (cc !== 0);\n        }\n\n        return this.resBuf.shift();\n      };\n\n      var CompIterator = function (it) {\n        this.it = it;\n        this.procBuf = [];\n        this.resBuf = [];\n        this.lastClass = null;\n      };\n\n      CompIterator.prototype.next = function () {\n        while (this.resBuf.length === 0) {\n          var uchar = this.it.next();\n\n          if (!uchar) {\n            this.resBuf = this.procBuf;\n            this.procBuf = [];\n            break;\n          }\n\n          if (this.procBuf.length === 0) {\n            this.lastClass = uchar.getCanonicalClass();\n            this.procBuf.push(uchar);\n          } else {\n            var starter = this.procBuf[0];\n            var composite = starter.getComposite(uchar);\n            var cc = uchar.getCanonicalClass();\n\n            if (!!composite && (this.lastClass < cc || this.lastClass === 0)) {\n              this.procBuf[0] = composite;\n            } else {\n              if (cc === 0) {\n                this.resBuf = this.procBuf;\n                this.procBuf = [];\n              }\n\n              this.lastClass = cc;\n              this.procBuf.push(uchar);\n            }\n          }\n        }\n\n        return this.resBuf.shift();\n      };\n\n      var createIterator = function (mode, str) {\n        switch (mode) {\n          case \"NFD\":\n            return new DecompIterator(new RecursDecompIterator(new UCharIterator(str), true));\n\n          case \"NFKD\":\n            return new DecompIterator(new RecursDecompIterator(new UCharIterator(str), false));\n\n          case \"NFC\":\n            return new CompIterator(new DecompIterator(new RecursDecompIterator(new UCharIterator(str), true)));\n\n          case \"NFKC\":\n            return new CompIterator(new DecompIterator(new RecursDecompIterator(new UCharIterator(str), false)));\n        }\n\n        throw mode + \" is invalid\";\n      };\n\n      var normalize = function (mode, str) {\n        var it = createIterator(mode, str);\n        var ret = \"\";\n        var uchar;\n\n        while (!!(uchar = it.next())) {\n          ret += uchar.toString();\n        }\n\n        return ret;\n      };\n      /* API functions */\n\n\n      function nfd(str) {\n        return normalize(\"NFD\", str);\n      }\n\n      function nfkd(str) {\n        return normalize(\"NFKD\", str);\n      }\n\n      function nfc(str) {\n        return normalize(\"NFC\", str);\n      }\n\n      function nfkc(str) {\n        return normalize(\"NFKC\", str);\n      }\n      /* Unicode data */\n\n\n      UChar.udata = {\n        0: {\n          60: [,, {\n            824: 8814\n          }],\n          61: [,, {\n            824: 8800\n          }],\n          62: [,, {\n            824: 8815\n          }],\n          65: [,, {\n            768: 192,\n            769: 193,\n            770: 194,\n            771: 195,\n            772: 256,\n            774: 258,\n            775: 550,\n            776: 196,\n            777: 7842,\n            778: 197,\n            780: 461,\n            783: 512,\n            785: 514,\n            803: 7840,\n            805: 7680,\n            808: 260\n          }],\n          66: [,, {\n            775: 7682,\n            803: 7684,\n            817: 7686\n          }],\n          67: [,, {\n            769: 262,\n            770: 264,\n            775: 266,\n            780: 268,\n            807: 199\n          }],\n          68: [,, {\n            775: 7690,\n            780: 270,\n            803: 7692,\n            807: 7696,\n            813: 7698,\n            817: 7694\n          }],\n          69: [,, {\n            768: 200,\n            769: 201,\n            770: 202,\n            771: 7868,\n            772: 274,\n            774: 276,\n            775: 278,\n            776: 203,\n            777: 7866,\n            780: 282,\n            783: 516,\n            785: 518,\n            803: 7864,\n            807: 552,\n            808: 280,\n            813: 7704,\n            816: 7706\n          }],\n          70: [,, {\n            775: 7710\n          }],\n          71: [,, {\n            769: 500,\n            770: 284,\n            772: 7712,\n            774: 286,\n            775: 288,\n            780: 486,\n            807: 290\n          }],\n          72: [,, {\n            770: 292,\n            775: 7714,\n            776: 7718,\n            780: 542,\n            803: 7716,\n            807: 7720,\n            814: 7722\n          }],\n          73: [,, {\n            768: 204,\n            769: 205,\n            770: 206,\n            771: 296,\n            772: 298,\n            774: 300,\n            775: 304,\n            776: 207,\n            777: 7880,\n            780: 463,\n            783: 520,\n            785: 522,\n            803: 7882,\n            808: 302,\n            816: 7724\n          }],\n          74: [,, {\n            770: 308\n          }],\n          75: [,, {\n            769: 7728,\n            780: 488,\n            803: 7730,\n            807: 310,\n            817: 7732\n          }],\n          76: [,, {\n            769: 313,\n            780: 317,\n            803: 7734,\n            807: 315,\n            813: 7740,\n            817: 7738\n          }],\n          77: [,, {\n            769: 7742,\n            775: 7744,\n            803: 7746\n          }],\n          78: [,, {\n            768: 504,\n            769: 323,\n            771: 209,\n            775: 7748,\n            780: 327,\n            803: 7750,\n            807: 325,\n            813: 7754,\n            817: 7752\n          }],\n          79: [,, {\n            768: 210,\n            769: 211,\n            770: 212,\n            771: 213,\n            772: 332,\n            774: 334,\n            775: 558,\n            776: 214,\n            777: 7886,\n            779: 336,\n            780: 465,\n            783: 524,\n            785: 526,\n            795: 416,\n            803: 7884,\n            808: 490\n          }],\n          80: [,, {\n            769: 7764,\n            775: 7766\n          }],\n          82: [,, {\n            769: 340,\n            775: 7768,\n            780: 344,\n            783: 528,\n            785: 530,\n            803: 7770,\n            807: 342,\n            817: 7774\n          }],\n          83: [,, {\n            769: 346,\n            770: 348,\n            775: 7776,\n            780: 352,\n            803: 7778,\n            806: 536,\n            807: 350\n          }],\n          84: [,, {\n            775: 7786,\n            780: 356,\n            803: 7788,\n            806: 538,\n            807: 354,\n            813: 7792,\n            817: 7790\n          }],\n          85: [,, {\n            768: 217,\n            769: 218,\n            770: 219,\n            771: 360,\n            772: 362,\n            774: 364,\n            776: 220,\n            777: 7910,\n            778: 366,\n            779: 368,\n            780: 467,\n            783: 532,\n            785: 534,\n            795: 431,\n            803: 7908,\n            804: 7794,\n            808: 370,\n            813: 7798,\n            816: 7796\n          }],\n          86: [,, {\n            771: 7804,\n            803: 7806\n          }],\n          87: [,, {\n            768: 7808,\n            769: 7810,\n            770: 372,\n            775: 7814,\n            776: 7812,\n            803: 7816\n          }],\n          88: [,, {\n            775: 7818,\n            776: 7820\n          }],\n          89: [,, {\n            768: 7922,\n            769: 221,\n            770: 374,\n            771: 7928,\n            772: 562,\n            775: 7822,\n            776: 376,\n            777: 7926,\n            803: 7924\n          }],\n          90: [,, {\n            769: 377,\n            770: 7824,\n            775: 379,\n            780: 381,\n            803: 7826,\n            817: 7828\n          }],\n          97: [,, {\n            768: 224,\n            769: 225,\n            770: 226,\n            771: 227,\n            772: 257,\n            774: 259,\n            775: 551,\n            776: 228,\n            777: 7843,\n            778: 229,\n            780: 462,\n            783: 513,\n            785: 515,\n            803: 7841,\n            805: 7681,\n            808: 261\n          }],\n          98: [,, {\n            775: 7683,\n            803: 7685,\n            817: 7687\n          }],\n          99: [,, {\n            769: 263,\n            770: 265,\n            775: 267,\n            780: 269,\n            807: 231\n          }],\n          100: [,, {\n            775: 7691,\n            780: 271,\n            803: 7693,\n            807: 7697,\n            813: 7699,\n            817: 7695\n          }],\n          101: [,, {\n            768: 232,\n            769: 233,\n            770: 234,\n            771: 7869,\n            772: 275,\n            774: 277,\n            775: 279,\n            776: 235,\n            777: 7867,\n            780: 283,\n            783: 517,\n            785: 519,\n            803: 7865,\n            807: 553,\n            808: 281,\n            813: 7705,\n            816: 7707\n          }],\n          102: [,, {\n            775: 7711\n          }],\n          103: [,, {\n            769: 501,\n            770: 285,\n            772: 7713,\n            774: 287,\n            775: 289,\n            780: 487,\n            807: 291\n          }],\n          104: [,, {\n            770: 293,\n            775: 7715,\n            776: 7719,\n            780: 543,\n            803: 7717,\n            807: 7721,\n            814: 7723,\n            817: 7830\n          }],\n          105: [,, {\n            768: 236,\n            769: 237,\n            770: 238,\n            771: 297,\n            772: 299,\n            774: 301,\n            776: 239,\n            777: 7881,\n            780: 464,\n            783: 521,\n            785: 523,\n            803: 7883,\n            808: 303,\n            816: 7725\n          }],\n          106: [,, {\n            770: 309,\n            780: 496\n          }],\n          107: [,, {\n            769: 7729,\n            780: 489,\n            803: 7731,\n            807: 311,\n            817: 7733\n          }],\n          108: [,, {\n            769: 314,\n            780: 318,\n            803: 7735,\n            807: 316,\n            813: 7741,\n            817: 7739\n          }],\n          109: [,, {\n            769: 7743,\n            775: 7745,\n            803: 7747\n          }],\n          110: [,, {\n            768: 505,\n            769: 324,\n            771: 241,\n            775: 7749,\n            780: 328,\n            803: 7751,\n            807: 326,\n            813: 7755,\n            817: 7753\n          }],\n          111: [,, {\n            768: 242,\n            769: 243,\n            770: 244,\n            771: 245,\n            772: 333,\n            774: 335,\n            775: 559,\n            776: 246,\n            777: 7887,\n            779: 337,\n            780: 466,\n            783: 525,\n            785: 527,\n            795: 417,\n            803: 7885,\n            808: 491\n          }],\n          112: [,, {\n            769: 7765,\n            775: 7767\n          }],\n          114: [,, {\n            769: 341,\n            775: 7769,\n            780: 345,\n            783: 529,\n            785: 531,\n            803: 7771,\n            807: 343,\n            817: 7775\n          }],\n          115: [,, {\n            769: 347,\n            770: 349,\n            775: 7777,\n            780: 353,\n            803: 7779,\n            806: 537,\n            807: 351\n          }],\n          116: [,, {\n            775: 7787,\n            776: 7831,\n            780: 357,\n            803: 7789,\n            806: 539,\n            807: 355,\n            813: 7793,\n            817: 7791\n          }],\n          117: [,, {\n            768: 249,\n            769: 250,\n            770: 251,\n            771: 361,\n            772: 363,\n            774: 365,\n            776: 252,\n            777: 7911,\n            778: 367,\n            779: 369,\n            780: 468,\n            783: 533,\n            785: 535,\n            795: 432,\n            803: 7909,\n            804: 7795,\n            808: 371,\n            813: 7799,\n            816: 7797\n          }],\n          118: [,, {\n            771: 7805,\n            803: 7807\n          }],\n          119: [,, {\n            768: 7809,\n            769: 7811,\n            770: 373,\n            775: 7815,\n            776: 7813,\n            778: 7832,\n            803: 7817\n          }],\n          120: [,, {\n            775: 7819,\n            776: 7821\n          }],\n          121: [,, {\n            768: 7923,\n            769: 253,\n            770: 375,\n            771: 7929,\n            772: 563,\n            775: 7823,\n            776: 255,\n            777: 7927,\n            778: 7833,\n            803: 7925\n          }],\n          122: [,, {\n            769: 378,\n            770: 7825,\n            775: 380,\n            780: 382,\n            803: 7827,\n            817: 7829\n          }],\n          160: [[32], 256],\n          168: [[32, 776], 256, {\n            768: 8173,\n            769: 901,\n            834: 8129\n          }],\n          170: [[97], 256],\n          175: [[32, 772], 256],\n          178: [[50], 256],\n          179: [[51], 256],\n          180: [[32, 769], 256],\n          181: [[956], 256],\n          184: [[32, 807], 256],\n          185: [[49], 256],\n          186: [[111], 256],\n          188: [[49, 8260, 52], 256],\n          189: [[49, 8260, 50], 256],\n          190: [[51, 8260, 52], 256],\n          192: [[65, 768]],\n          193: [[65, 769]],\n          194: [[65, 770],, {\n            768: 7846,\n            769: 7844,\n            771: 7850,\n            777: 7848\n          }],\n          195: [[65, 771]],\n          196: [[65, 776],, {\n            772: 478\n          }],\n          197: [[65, 778],, {\n            769: 506\n          }],\n          198: [,, {\n            769: 508,\n            772: 482\n          }],\n          199: [[67, 807],, {\n            769: 7688\n          }],\n          200: [[69, 768]],\n          201: [[69, 769]],\n          202: [[69, 770],, {\n            768: 7872,\n            769: 7870,\n            771: 7876,\n            777: 7874\n          }],\n          203: [[69, 776]],\n          204: [[73, 768]],\n          205: [[73, 769]],\n          206: [[73, 770]],\n          207: [[73, 776],, {\n            769: 7726\n          }],\n          209: [[78, 771]],\n          210: [[79, 768]],\n          211: [[79, 769]],\n          212: [[79, 770],, {\n            768: 7890,\n            769: 7888,\n            771: 7894,\n            777: 7892\n          }],\n          213: [[79, 771],, {\n            769: 7756,\n            772: 556,\n            776: 7758\n          }],\n          214: [[79, 776],, {\n            772: 554\n          }],\n          216: [,, {\n            769: 510\n          }],\n          217: [[85, 768]],\n          218: [[85, 769]],\n          219: [[85, 770]],\n          220: [[85, 776],, {\n            768: 475,\n            769: 471,\n            772: 469,\n            780: 473\n          }],\n          221: [[89, 769]],\n          224: [[97, 768]],\n          225: [[97, 769]],\n          226: [[97, 770],, {\n            768: 7847,\n            769: 7845,\n            771: 7851,\n            777: 7849\n          }],\n          227: [[97, 771]],\n          228: [[97, 776],, {\n            772: 479\n          }],\n          229: [[97, 778],, {\n            769: 507\n          }],\n          230: [,, {\n            769: 509,\n            772: 483\n          }],\n          231: [[99, 807],, {\n            769: 7689\n          }],\n          232: [[101, 768]],\n          233: [[101, 769]],\n          234: [[101, 770],, {\n            768: 7873,\n            769: 7871,\n            771: 7877,\n            777: 7875\n          }],\n          235: [[101, 776]],\n          236: [[105, 768]],\n          237: [[105, 769]],\n          238: [[105, 770]],\n          239: [[105, 776],, {\n            769: 7727\n          }],\n          241: [[110, 771]],\n          242: [[111, 768]],\n          243: [[111, 769]],\n          244: [[111, 770],, {\n            768: 7891,\n            769: 7889,\n            771: 7895,\n            777: 7893\n          }],\n          245: [[111, 771],, {\n            769: 7757,\n            772: 557,\n            776: 7759\n          }],\n          246: [[111, 776],, {\n            772: 555\n          }],\n          248: [,, {\n            769: 511\n          }],\n          249: [[117, 768]],\n          250: [[117, 769]],\n          251: [[117, 770]],\n          252: [[117, 776],, {\n            768: 476,\n            769: 472,\n            772: 470,\n            780: 474\n          }],\n          253: [[121, 769]],\n          255: [[121, 776]]\n        },\n        256: {\n          256: [[65, 772]],\n          257: [[97, 772]],\n          258: [[65, 774],, {\n            768: 7856,\n            769: 7854,\n            771: 7860,\n            777: 7858\n          }],\n          259: [[97, 774],, {\n            768: 7857,\n            769: 7855,\n            771: 7861,\n            777: 7859\n          }],\n          260: [[65, 808]],\n          261: [[97, 808]],\n          262: [[67, 769]],\n          263: [[99, 769]],\n          264: [[67, 770]],\n          265: [[99, 770]],\n          266: [[67, 775]],\n          267: [[99, 775]],\n          268: [[67, 780]],\n          269: [[99, 780]],\n          270: [[68, 780]],\n          271: [[100, 780]],\n          274: [[69, 772],, {\n            768: 7700,\n            769: 7702\n          }],\n          275: [[101, 772],, {\n            768: 7701,\n            769: 7703\n          }],\n          276: [[69, 774]],\n          277: [[101, 774]],\n          278: [[69, 775]],\n          279: [[101, 775]],\n          280: [[69, 808]],\n          281: [[101, 808]],\n          282: [[69, 780]],\n          283: [[101, 780]],\n          284: [[71, 770]],\n          285: [[103, 770]],\n          286: [[71, 774]],\n          287: [[103, 774]],\n          288: [[71, 775]],\n          289: [[103, 775]],\n          290: [[71, 807]],\n          291: [[103, 807]],\n          292: [[72, 770]],\n          293: [[104, 770]],\n          296: [[73, 771]],\n          297: [[105, 771]],\n          298: [[73, 772]],\n          299: [[105, 772]],\n          300: [[73, 774]],\n          301: [[105, 774]],\n          302: [[73, 808]],\n          303: [[105, 808]],\n          304: [[73, 775]],\n          306: [[73, 74], 256],\n          307: [[105, 106], 256],\n          308: [[74, 770]],\n          309: [[106, 770]],\n          310: [[75, 807]],\n          311: [[107, 807]],\n          313: [[76, 769]],\n          314: [[108, 769]],\n          315: [[76, 807]],\n          316: [[108, 807]],\n          317: [[76, 780]],\n          318: [[108, 780]],\n          319: [[76, 183], 256],\n          320: [[108, 183], 256],\n          323: [[78, 769]],\n          324: [[110, 769]],\n          325: [[78, 807]],\n          326: [[110, 807]],\n          327: [[78, 780]],\n          328: [[110, 780]],\n          329: [[700, 110], 256],\n          332: [[79, 772],, {\n            768: 7760,\n            769: 7762\n          }],\n          333: [[111, 772],, {\n            768: 7761,\n            769: 7763\n          }],\n          334: [[79, 774]],\n          335: [[111, 774]],\n          336: [[79, 779]],\n          337: [[111, 779]],\n          340: [[82, 769]],\n          341: [[114, 769]],\n          342: [[82, 807]],\n          343: [[114, 807]],\n          344: [[82, 780]],\n          345: [[114, 780]],\n          346: [[83, 769],, {\n            775: 7780\n          }],\n          347: [[115, 769],, {\n            775: 7781\n          }],\n          348: [[83, 770]],\n          349: [[115, 770]],\n          350: [[83, 807]],\n          351: [[115, 807]],\n          352: [[83, 780],, {\n            775: 7782\n          }],\n          353: [[115, 780],, {\n            775: 7783\n          }],\n          354: [[84, 807]],\n          355: [[116, 807]],\n          356: [[84, 780]],\n          357: [[116, 780]],\n          360: [[85, 771],, {\n            769: 7800\n          }],\n          361: [[117, 771],, {\n            769: 7801\n          }],\n          362: [[85, 772],, {\n            776: 7802\n          }],\n          363: [[117, 772],, {\n            776: 7803\n          }],\n          364: [[85, 774]],\n          365: [[117, 774]],\n          366: [[85, 778]],\n          367: [[117, 778]],\n          368: [[85, 779]],\n          369: [[117, 779]],\n          370: [[85, 808]],\n          371: [[117, 808]],\n          372: [[87, 770]],\n          373: [[119, 770]],\n          374: [[89, 770]],\n          375: [[121, 770]],\n          376: [[89, 776]],\n          377: [[90, 769]],\n          378: [[122, 769]],\n          379: [[90, 775]],\n          380: [[122, 775]],\n          381: [[90, 780]],\n          382: [[122, 780]],\n          383: [[115], 256, {\n            775: 7835\n          }],\n          416: [[79, 795],, {\n            768: 7900,\n            769: 7898,\n            771: 7904,\n            777: 7902,\n            803: 7906\n          }],\n          417: [[111, 795],, {\n            768: 7901,\n            769: 7899,\n            771: 7905,\n            777: 7903,\n            803: 7907\n          }],\n          431: [[85, 795],, {\n            768: 7914,\n            769: 7912,\n            771: 7918,\n            777: 7916,\n            803: 7920\n          }],\n          432: [[117, 795],, {\n            768: 7915,\n            769: 7913,\n            771: 7919,\n            777: 7917,\n            803: 7921\n          }],\n          439: [,, {\n            780: 494\n          }],\n          452: [[68, 381], 256],\n          453: [[68, 382], 256],\n          454: [[100, 382], 256],\n          455: [[76, 74], 256],\n          456: [[76, 106], 256],\n          457: [[108, 106], 256],\n          458: [[78, 74], 256],\n          459: [[78, 106], 256],\n          460: [[110, 106], 256],\n          461: [[65, 780]],\n          462: [[97, 780]],\n          463: [[73, 780]],\n          464: [[105, 780]],\n          465: [[79, 780]],\n          466: [[111, 780]],\n          467: [[85, 780]],\n          468: [[117, 780]],\n          469: [[220, 772]],\n          470: [[252, 772]],\n          471: [[220, 769]],\n          472: [[252, 769]],\n          473: [[220, 780]],\n          474: [[252, 780]],\n          475: [[220, 768]],\n          476: [[252, 768]],\n          478: [[196, 772]],\n          479: [[228, 772]],\n          480: [[550, 772]],\n          481: [[551, 772]],\n          482: [[198, 772]],\n          483: [[230, 772]],\n          486: [[71, 780]],\n          487: [[103, 780]],\n          488: [[75, 780]],\n          489: [[107, 780]],\n          490: [[79, 808],, {\n            772: 492\n          }],\n          491: [[111, 808],, {\n            772: 493\n          }],\n          492: [[490, 772]],\n          493: [[491, 772]],\n          494: [[439, 780]],\n          495: [[658, 780]],\n          496: [[106, 780]],\n          497: [[68, 90], 256],\n          498: [[68, 122], 256],\n          499: [[100, 122], 256],\n          500: [[71, 769]],\n          501: [[103, 769]],\n          504: [[78, 768]],\n          505: [[110, 768]],\n          506: [[197, 769]],\n          507: [[229, 769]],\n          508: [[198, 769]],\n          509: [[230, 769]],\n          510: [[216, 769]],\n          511: [[248, 769]],\n          66045: [, 220]\n        },\n        512: {\n          512: [[65, 783]],\n          513: [[97, 783]],\n          514: [[65, 785]],\n          515: [[97, 785]],\n          516: [[69, 783]],\n          517: [[101, 783]],\n          518: [[69, 785]],\n          519: [[101, 785]],\n          520: [[73, 783]],\n          521: [[105, 783]],\n          522: [[73, 785]],\n          523: [[105, 785]],\n          524: [[79, 783]],\n          525: [[111, 783]],\n          526: [[79, 785]],\n          527: [[111, 785]],\n          528: [[82, 783]],\n          529: [[114, 783]],\n          530: [[82, 785]],\n          531: [[114, 785]],\n          532: [[85, 783]],\n          533: [[117, 783]],\n          534: [[85, 785]],\n          535: [[117, 785]],\n          536: [[83, 806]],\n          537: [[115, 806]],\n          538: [[84, 806]],\n          539: [[116, 806]],\n          542: [[72, 780]],\n          543: [[104, 780]],\n          550: [[65, 775],, {\n            772: 480\n          }],\n          551: [[97, 775],, {\n            772: 481\n          }],\n          552: [[69, 807],, {\n            774: 7708\n          }],\n          553: [[101, 807],, {\n            774: 7709\n          }],\n          554: [[214, 772]],\n          555: [[246, 772]],\n          556: [[213, 772]],\n          557: [[245, 772]],\n          558: [[79, 775],, {\n            772: 560\n          }],\n          559: [[111, 775],, {\n            772: 561\n          }],\n          560: [[558, 772]],\n          561: [[559, 772]],\n          562: [[89, 772]],\n          563: [[121, 772]],\n          658: [,, {\n            780: 495\n          }],\n          688: [[104], 256],\n          689: [[614], 256],\n          690: [[106], 256],\n          691: [[114], 256],\n          692: [[633], 256],\n          693: [[635], 256],\n          694: [[641], 256],\n          695: [[119], 256],\n          696: [[121], 256],\n          728: [[32, 774], 256],\n          729: [[32, 775], 256],\n          730: [[32, 778], 256],\n          731: [[32, 808], 256],\n          732: [[32, 771], 256],\n          733: [[32, 779], 256],\n          736: [[611], 256],\n          737: [[108], 256],\n          738: [[115], 256],\n          739: [[120], 256],\n          740: [[661], 256],\n          66272: [, 220]\n        },\n        768: {\n          768: [, 230],\n          769: [, 230],\n          770: [, 230],\n          771: [, 230],\n          772: [, 230],\n          773: [, 230],\n          774: [, 230],\n          775: [, 230],\n          776: [, 230, {\n            769: 836\n          }],\n          777: [, 230],\n          778: [, 230],\n          779: [, 230],\n          780: [, 230],\n          781: [, 230],\n          782: [, 230],\n          783: [, 230],\n          784: [, 230],\n          785: [, 230],\n          786: [, 230],\n          787: [, 230],\n          788: [, 230],\n          789: [, 232],\n          790: [, 220],\n          791: [, 220],\n          792: [, 220],\n          793: [, 220],\n          794: [, 232],\n          795: [, 216],\n          796: [, 220],\n          797: [, 220],\n          798: [, 220],\n          799: [, 220],\n          800: [, 220],\n          801: [, 202],\n          802: [, 202],\n          803: [, 220],\n          804: [, 220],\n          805: [, 220],\n          806: [, 220],\n          807: [, 202],\n          808: [, 202],\n          809: [, 220],\n          810: [, 220],\n          811: [, 220],\n          812: [, 220],\n          813: [, 220],\n          814: [, 220],\n          815: [, 220],\n          816: [, 220],\n          817: [, 220],\n          818: [, 220],\n          819: [, 220],\n          820: [, 1],\n          821: [, 1],\n          822: [, 1],\n          823: [, 1],\n          824: [, 1],\n          825: [, 220],\n          826: [, 220],\n          827: [, 220],\n          828: [, 220],\n          829: [, 230],\n          830: [, 230],\n          831: [, 230],\n          832: [[768], 230],\n          833: [[769], 230],\n          834: [, 230],\n          835: [[787], 230],\n          836: [[776, 769], 230],\n          837: [, 240],\n          838: [, 230],\n          839: [, 220],\n          840: [, 220],\n          841: [, 220],\n          842: [, 230],\n          843: [, 230],\n          844: [, 230],\n          845: [, 220],\n          846: [, 220],\n          848: [, 230],\n          849: [, 230],\n          850: [, 230],\n          851: [, 220],\n          852: [, 220],\n          853: [, 220],\n          854: [, 220],\n          855: [, 230],\n          856: [, 232],\n          857: [, 220],\n          858: [, 220],\n          859: [, 230],\n          860: [, 233],\n          861: [, 234],\n          862: [, 234],\n          863: [, 233],\n          864: [, 234],\n          865: [, 234],\n          866: [, 233],\n          867: [, 230],\n          868: [, 230],\n          869: [, 230],\n          870: [, 230],\n          871: [, 230],\n          872: [, 230],\n          873: [, 230],\n          874: [, 230],\n          875: [, 230],\n          876: [, 230],\n          877: [, 230],\n          878: [, 230],\n          879: [, 230],\n          884: [[697]],\n          890: [[32, 837], 256],\n          894: [[59]],\n          900: [[32, 769], 256],\n          901: [[168, 769]],\n          902: [[913, 769]],\n          903: [[183]],\n          904: [[917, 769]],\n          905: [[919, 769]],\n          906: [[921, 769]],\n          908: [[927, 769]],\n          910: [[933, 769]],\n          911: [[937, 769]],\n          912: [[970, 769]],\n          913: [,, {\n            768: 8122,\n            769: 902,\n            772: 8121,\n            774: 8120,\n            787: 7944,\n            788: 7945,\n            837: 8124\n          }],\n          917: [,, {\n            768: 8136,\n            769: 904,\n            787: 7960,\n            788: 7961\n          }],\n          919: [,, {\n            768: 8138,\n            769: 905,\n            787: 7976,\n            788: 7977,\n            837: 8140\n          }],\n          921: [,, {\n            768: 8154,\n            769: 906,\n            772: 8153,\n            774: 8152,\n            776: 938,\n            787: 7992,\n            788: 7993\n          }],\n          927: [,, {\n            768: 8184,\n            769: 908,\n            787: 8008,\n            788: 8009\n          }],\n          929: [,, {\n            788: 8172\n          }],\n          933: [,, {\n            768: 8170,\n            769: 910,\n            772: 8169,\n            774: 8168,\n            776: 939,\n            788: 8025\n          }],\n          937: [,, {\n            768: 8186,\n            769: 911,\n            787: 8040,\n            788: 8041,\n            837: 8188\n          }],\n          938: [[921, 776]],\n          939: [[933, 776]],\n          940: [[945, 769],, {\n            837: 8116\n          }],\n          941: [[949, 769]],\n          942: [[951, 769],, {\n            837: 8132\n          }],\n          943: [[953, 769]],\n          944: [[971, 769]],\n          945: [,, {\n            768: 8048,\n            769: 940,\n            772: 8113,\n            774: 8112,\n            787: 7936,\n            788: 7937,\n            834: 8118,\n            837: 8115\n          }],\n          949: [,, {\n            768: 8050,\n            769: 941,\n            787: 7952,\n            788: 7953\n          }],\n          951: [,, {\n            768: 8052,\n            769: 942,\n            787: 7968,\n            788: 7969,\n            834: 8134,\n            837: 8131\n          }],\n          953: [,, {\n            768: 8054,\n            769: 943,\n            772: 8145,\n            774: 8144,\n            776: 970,\n            787: 7984,\n            788: 7985,\n            834: 8150\n          }],\n          959: [,, {\n            768: 8056,\n            769: 972,\n            787: 8000,\n            788: 8001\n          }],\n          961: [,, {\n            787: 8164,\n            788: 8165\n          }],\n          965: [,, {\n            768: 8058,\n            769: 973,\n            772: 8161,\n            774: 8160,\n            776: 971,\n            787: 8016,\n            788: 8017,\n            834: 8166\n          }],\n          969: [,, {\n            768: 8060,\n            769: 974,\n            787: 8032,\n            788: 8033,\n            834: 8182,\n            837: 8179\n          }],\n          970: [[953, 776],, {\n            768: 8146,\n            769: 912,\n            834: 8151\n          }],\n          971: [[965, 776],, {\n            768: 8162,\n            769: 944,\n            834: 8167\n          }],\n          972: [[959, 769]],\n          973: [[965, 769]],\n          974: [[969, 769],, {\n            837: 8180\n          }],\n          976: [[946], 256],\n          977: [[952], 256],\n          978: [[933], 256, {\n            769: 979,\n            776: 980\n          }],\n          979: [[978, 769]],\n          980: [[978, 776]],\n          981: [[966], 256],\n          982: [[960], 256],\n          1008: [[954], 256],\n          1009: [[961], 256],\n          1010: [[962], 256],\n          1012: [[920], 256],\n          1013: [[949], 256],\n          1017: [[931], 256],\n          66422: [, 230],\n          66423: [, 230],\n          66424: [, 230],\n          66425: [, 230],\n          66426: [, 230]\n        },\n        1024: {\n          1024: [[1045, 768]],\n          1025: [[1045, 776]],\n          1027: [[1043, 769]],\n          1030: [,, {\n            776: 1031\n          }],\n          1031: [[1030, 776]],\n          1036: [[1050, 769]],\n          1037: [[1048, 768]],\n          1038: [[1059, 774]],\n          1040: [,, {\n            774: 1232,\n            776: 1234\n          }],\n          1043: [,, {\n            769: 1027\n          }],\n          1045: [,, {\n            768: 1024,\n            774: 1238,\n            776: 1025\n          }],\n          1046: [,, {\n            774: 1217,\n            776: 1244\n          }],\n          1047: [,, {\n            776: 1246\n          }],\n          1048: [,, {\n            768: 1037,\n            772: 1250,\n            774: 1049,\n            776: 1252\n          }],\n          1049: [[1048, 774]],\n          1050: [,, {\n            769: 1036\n          }],\n          1054: [,, {\n            776: 1254\n          }],\n          1059: [,, {\n            772: 1262,\n            774: 1038,\n            776: 1264,\n            779: 1266\n          }],\n          1063: [,, {\n            776: 1268\n          }],\n          1067: [,, {\n            776: 1272\n          }],\n          1069: [,, {\n            776: 1260\n          }],\n          1072: [,, {\n            774: 1233,\n            776: 1235\n          }],\n          1075: [,, {\n            769: 1107\n          }],\n          1077: [,, {\n            768: 1104,\n            774: 1239,\n            776: 1105\n          }],\n          1078: [,, {\n            774: 1218,\n            776: 1245\n          }],\n          1079: [,, {\n            776: 1247\n          }],\n          1080: [,, {\n            768: 1117,\n            772: 1251,\n            774: 1081,\n            776: 1253\n          }],\n          1081: [[1080, 774]],\n          1082: [,, {\n            769: 1116\n          }],\n          1086: [,, {\n            776: 1255\n          }],\n          1091: [,, {\n            772: 1263,\n            774: 1118,\n            776: 1265,\n            779: 1267\n          }],\n          1095: [,, {\n            776: 1269\n          }],\n          1099: [,, {\n            776: 1273\n          }],\n          1101: [,, {\n            776: 1261\n          }],\n          1104: [[1077, 768]],\n          1105: [[1077, 776]],\n          1107: [[1075, 769]],\n          1110: [,, {\n            776: 1111\n          }],\n          1111: [[1110, 776]],\n          1116: [[1082, 769]],\n          1117: [[1080, 768]],\n          1118: [[1091, 774]],\n          1140: [,, {\n            783: 1142\n          }],\n          1141: [,, {\n            783: 1143\n          }],\n          1142: [[1140, 783]],\n          1143: [[1141, 783]],\n          1155: [, 230],\n          1156: [, 230],\n          1157: [, 230],\n          1158: [, 230],\n          1159: [, 230],\n          1217: [[1046, 774]],\n          1218: [[1078, 774]],\n          1232: [[1040, 774]],\n          1233: [[1072, 774]],\n          1234: [[1040, 776]],\n          1235: [[1072, 776]],\n          1238: [[1045, 774]],\n          1239: [[1077, 774]],\n          1240: [,, {\n            776: 1242\n          }],\n          1241: [,, {\n            776: 1243\n          }],\n          1242: [[1240, 776]],\n          1243: [[1241, 776]],\n          1244: [[1046, 776]],\n          1245: [[1078, 776]],\n          1246: [[1047, 776]],\n          1247: [[1079, 776]],\n          1250: [[1048, 772]],\n          1251: [[1080, 772]],\n          1252: [[1048, 776]],\n          1253: [[1080, 776]],\n          1254: [[1054, 776]],\n          1255: [[1086, 776]],\n          1256: [,, {\n            776: 1258\n          }],\n          1257: [,, {\n            776: 1259\n          }],\n          1258: [[1256, 776]],\n          1259: [[1257, 776]],\n          1260: [[1069, 776]],\n          1261: [[1101, 776]],\n          1262: [[1059, 772]],\n          1263: [[1091, 772]],\n          1264: [[1059, 776]],\n          1265: [[1091, 776]],\n          1266: [[1059, 779]],\n          1267: [[1091, 779]],\n          1268: [[1063, 776]],\n          1269: [[1095, 776]],\n          1272: [[1067, 776]],\n          1273: [[1099, 776]]\n        },\n        1280: {\n          1415: [[1381, 1410], 256],\n          1425: [, 220],\n          1426: [, 230],\n          1427: [, 230],\n          1428: [, 230],\n          1429: [, 230],\n          1430: [, 220],\n          1431: [, 230],\n          1432: [, 230],\n          1433: [, 230],\n          1434: [, 222],\n          1435: [, 220],\n          1436: [, 230],\n          1437: [, 230],\n          1438: [, 230],\n          1439: [, 230],\n          1440: [, 230],\n          1441: [, 230],\n          1442: [, 220],\n          1443: [, 220],\n          1444: [, 220],\n          1445: [, 220],\n          1446: [, 220],\n          1447: [, 220],\n          1448: [, 230],\n          1449: [, 230],\n          1450: [, 220],\n          1451: [, 230],\n          1452: [, 230],\n          1453: [, 222],\n          1454: [, 228],\n          1455: [, 230],\n          1456: [, 10],\n          1457: [, 11],\n          1458: [, 12],\n          1459: [, 13],\n          1460: [, 14],\n          1461: [, 15],\n          1462: [, 16],\n          1463: [, 17],\n          1464: [, 18],\n          1465: [, 19],\n          1466: [, 19],\n          1467: [, 20],\n          1468: [, 21],\n          1469: [, 22],\n          1471: [, 23],\n          1473: [, 24],\n          1474: [, 25],\n          1476: [, 230],\n          1477: [, 220],\n          1479: [, 18]\n        },\n        1536: {\n          1552: [, 230],\n          1553: [, 230],\n          1554: [, 230],\n          1555: [, 230],\n          1556: [, 230],\n          1557: [, 230],\n          1558: [, 230],\n          1559: [, 230],\n          1560: [, 30],\n          1561: [, 31],\n          1562: [, 32],\n          1570: [[1575, 1619]],\n          1571: [[1575, 1620]],\n          1572: [[1608, 1620]],\n          1573: [[1575, 1621]],\n          1574: [[1610, 1620]],\n          1575: [,, {\n            1619: 1570,\n            1620: 1571,\n            1621: 1573\n          }],\n          1608: [,, {\n            1620: 1572\n          }],\n          1610: [,, {\n            1620: 1574\n          }],\n          1611: [, 27],\n          1612: [, 28],\n          1613: [, 29],\n          1614: [, 30],\n          1615: [, 31],\n          1616: [, 32],\n          1617: [, 33],\n          1618: [, 34],\n          1619: [, 230],\n          1620: [, 230],\n          1621: [, 220],\n          1622: [, 220],\n          1623: [, 230],\n          1624: [, 230],\n          1625: [, 230],\n          1626: [, 230],\n          1627: [, 230],\n          1628: [, 220],\n          1629: [, 230],\n          1630: [, 230],\n          1631: [, 220],\n          1648: [, 35],\n          1653: [[1575, 1652], 256],\n          1654: [[1608, 1652], 256],\n          1655: [[1735, 1652], 256],\n          1656: [[1610, 1652], 256],\n          1728: [[1749, 1620]],\n          1729: [,, {\n            1620: 1730\n          }],\n          1730: [[1729, 1620]],\n          1746: [,, {\n            1620: 1747\n          }],\n          1747: [[1746, 1620]],\n          1749: [,, {\n            1620: 1728\n          }],\n          1750: [, 230],\n          1751: [, 230],\n          1752: [, 230],\n          1753: [, 230],\n          1754: [, 230],\n          1755: [, 230],\n          1756: [, 230],\n          1759: [, 230],\n          1760: [, 230],\n          1761: [, 230],\n          1762: [, 230],\n          1763: [, 220],\n          1764: [, 230],\n          1767: [, 230],\n          1768: [, 230],\n          1770: [, 220],\n          1771: [, 230],\n          1772: [, 230],\n          1773: [, 220]\n        },\n        1792: {\n          1809: [, 36],\n          1840: [, 230],\n          1841: [, 220],\n          1842: [, 230],\n          1843: [, 230],\n          1844: [, 220],\n          1845: [, 230],\n          1846: [, 230],\n          1847: [, 220],\n          1848: [, 220],\n          1849: [, 220],\n          1850: [, 230],\n          1851: [, 220],\n          1852: [, 220],\n          1853: [, 230],\n          1854: [, 220],\n          1855: [, 230],\n          1856: [, 230],\n          1857: [, 230],\n          1858: [, 220],\n          1859: [, 230],\n          1860: [, 220],\n          1861: [, 230],\n          1862: [, 220],\n          1863: [, 230],\n          1864: [, 220],\n          1865: [, 230],\n          1866: [, 230],\n          2027: [, 230],\n          2028: [, 230],\n          2029: [, 230],\n          2030: [, 230],\n          2031: [, 230],\n          2032: [, 230],\n          2033: [, 230],\n          2034: [, 220],\n          2035: [, 230]\n        },\n        2048: {\n          2070: [, 230],\n          2071: [, 230],\n          2072: [, 230],\n          2073: [, 230],\n          2075: [, 230],\n          2076: [, 230],\n          2077: [, 230],\n          2078: [, 230],\n          2079: [, 230],\n          2080: [, 230],\n          2081: [, 230],\n          2082: [, 230],\n          2083: [, 230],\n          2085: [, 230],\n          2086: [, 230],\n          2087: [, 230],\n          2089: [, 230],\n          2090: [, 230],\n          2091: [, 230],\n          2092: [, 230],\n          2093: [, 230],\n          2137: [, 220],\n          2138: [, 220],\n          2139: [, 220],\n          2276: [, 230],\n          2277: [, 230],\n          2278: [, 220],\n          2279: [, 230],\n          2280: [, 230],\n          2281: [, 220],\n          2282: [, 230],\n          2283: [, 230],\n          2284: [, 230],\n          2285: [, 220],\n          2286: [, 220],\n          2287: [, 220],\n          2288: [, 27],\n          2289: [, 28],\n          2290: [, 29],\n          2291: [, 230],\n          2292: [, 230],\n          2293: [, 230],\n          2294: [, 220],\n          2295: [, 230],\n          2296: [, 230],\n          2297: [, 220],\n          2298: [, 220],\n          2299: [, 230],\n          2300: [, 230],\n          2301: [, 230],\n          2302: [, 230],\n          2303: [, 230]\n        },\n        2304: {\n          2344: [,, {\n            2364: 2345\n          }],\n          2345: [[2344, 2364]],\n          2352: [,, {\n            2364: 2353\n          }],\n          2353: [[2352, 2364]],\n          2355: [,, {\n            2364: 2356\n          }],\n          2356: [[2355, 2364]],\n          2364: [, 7],\n          2381: [, 9],\n          2385: [, 230],\n          2386: [, 220],\n          2387: [, 230],\n          2388: [, 230],\n          2392: [[2325, 2364], 512],\n          2393: [[2326, 2364], 512],\n          2394: [[2327, 2364], 512],\n          2395: [[2332, 2364], 512],\n          2396: [[2337, 2364], 512],\n          2397: [[2338, 2364], 512],\n          2398: [[2347, 2364], 512],\n          2399: [[2351, 2364], 512],\n          2492: [, 7],\n          2503: [,, {\n            2494: 2507,\n            2519: 2508\n          }],\n          2507: [[2503, 2494]],\n          2508: [[2503, 2519]],\n          2509: [, 9],\n          2524: [[2465, 2492], 512],\n          2525: [[2466, 2492], 512],\n          2527: [[2479, 2492], 512]\n        },\n        2560: {\n          2611: [[2610, 2620], 512],\n          2614: [[2616, 2620], 512],\n          2620: [, 7],\n          2637: [, 9],\n          2649: [[2582, 2620], 512],\n          2650: [[2583, 2620], 512],\n          2651: [[2588, 2620], 512],\n          2654: [[2603, 2620], 512],\n          2748: [, 7],\n          2765: [, 9],\n          68109: [, 220],\n          68111: [, 230],\n          68152: [, 230],\n          68153: [, 1],\n          68154: [, 220],\n          68159: [, 9],\n          68325: [, 230],\n          68326: [, 220]\n        },\n        2816: {\n          2876: [, 7],\n          2887: [,, {\n            2878: 2891,\n            2902: 2888,\n            2903: 2892\n          }],\n          2888: [[2887, 2902]],\n          2891: [[2887, 2878]],\n          2892: [[2887, 2903]],\n          2893: [, 9],\n          2908: [[2849, 2876], 512],\n          2909: [[2850, 2876], 512],\n          2962: [,, {\n            3031: 2964\n          }],\n          2964: [[2962, 3031]],\n          3014: [,, {\n            3006: 3018,\n            3031: 3020\n          }],\n          3015: [,, {\n            3006: 3019\n          }],\n          3018: [[3014, 3006]],\n          3019: [[3015, 3006]],\n          3020: [[3014, 3031]],\n          3021: [, 9]\n        },\n        3072: {\n          3142: [,, {\n            3158: 3144\n          }],\n          3144: [[3142, 3158]],\n          3149: [, 9],\n          3157: [, 84],\n          3158: [, 91],\n          3260: [, 7],\n          3263: [,, {\n            3285: 3264\n          }],\n          3264: [[3263, 3285]],\n          3270: [,, {\n            3266: 3274,\n            3285: 3271,\n            3286: 3272\n          }],\n          3271: [[3270, 3285]],\n          3272: [[3270, 3286]],\n          3274: [[3270, 3266],, {\n            3285: 3275\n          }],\n          3275: [[3274, 3285]],\n          3277: [, 9]\n        },\n        3328: {\n          3398: [,, {\n            3390: 3402,\n            3415: 3404\n          }],\n          3399: [,, {\n            3390: 3403\n          }],\n          3402: [[3398, 3390]],\n          3403: [[3399, 3390]],\n          3404: [[3398, 3415]],\n          3405: [, 9],\n          3530: [, 9],\n          3545: [,, {\n            3530: 3546,\n            3535: 3548,\n            3551: 3550\n          }],\n          3546: [[3545, 3530]],\n          3548: [[3545, 3535],, {\n            3530: 3549\n          }],\n          3549: [[3548, 3530]],\n          3550: [[3545, 3551]]\n        },\n        3584: {\n          3635: [[3661, 3634], 256],\n          3640: [, 103],\n          3641: [, 103],\n          3642: [, 9],\n          3656: [, 107],\n          3657: [, 107],\n          3658: [, 107],\n          3659: [, 107],\n          3763: [[3789, 3762], 256],\n          3768: [, 118],\n          3769: [, 118],\n          3784: [, 122],\n          3785: [, 122],\n          3786: [, 122],\n          3787: [, 122],\n          3804: [[3755, 3737], 256],\n          3805: [[3755, 3745], 256]\n        },\n        3840: {\n          3852: [[3851], 256],\n          3864: [, 220],\n          3865: [, 220],\n          3893: [, 220],\n          3895: [, 220],\n          3897: [, 216],\n          3907: [[3906, 4023], 512],\n          3917: [[3916, 4023], 512],\n          3922: [[3921, 4023], 512],\n          3927: [[3926, 4023], 512],\n          3932: [[3931, 4023], 512],\n          3945: [[3904, 4021], 512],\n          3953: [, 129],\n          3954: [, 130],\n          3955: [[3953, 3954], 512],\n          3956: [, 132],\n          3957: [[3953, 3956], 512],\n          3958: [[4018, 3968], 512],\n          3959: [[4018, 3969], 256],\n          3960: [[4019, 3968], 512],\n          3961: [[4019, 3969], 256],\n          3962: [, 130],\n          3963: [, 130],\n          3964: [, 130],\n          3965: [, 130],\n          3968: [, 130],\n          3969: [[3953, 3968], 512],\n          3970: [, 230],\n          3971: [, 230],\n          3972: [, 9],\n          3974: [, 230],\n          3975: [, 230],\n          3987: [[3986, 4023], 512],\n          3997: [[3996, 4023], 512],\n          4002: [[4001, 4023], 512],\n          4007: [[4006, 4023], 512],\n          4012: [[4011, 4023], 512],\n          4025: [[3984, 4021], 512],\n          4038: [, 220]\n        },\n        4096: {\n          4133: [,, {\n            4142: 4134\n          }],\n          4134: [[4133, 4142]],\n          4151: [, 7],\n          4153: [, 9],\n          4154: [, 9],\n          4237: [, 220],\n          4348: [[4316], 256],\n          69702: [, 9],\n          69759: [, 9],\n          69785: [,, {\n            69818: 69786\n          }],\n          69786: [[69785, 69818]],\n          69787: [,, {\n            69818: 69788\n          }],\n          69788: [[69787, 69818]],\n          69797: [,, {\n            69818: 69803\n          }],\n          69803: [[69797, 69818]],\n          69817: [, 9],\n          69818: [, 7]\n        },\n        4352: {\n          69888: [, 230],\n          69889: [, 230],\n          69890: [, 230],\n          69934: [[69937, 69927]],\n          69935: [[69938, 69927]],\n          69937: [,, {\n            69927: 69934\n          }],\n          69938: [,, {\n            69927: 69935\n          }],\n          69939: [, 9],\n          69940: [, 9],\n          70003: [, 7],\n          70080: [, 9]\n        },\n        4608: {\n          70197: [, 9],\n          70198: [, 7],\n          70377: [, 7],\n          70378: [, 9]\n        },\n        4864: {\n          4957: [, 230],\n          4958: [, 230],\n          4959: [, 230],\n          70460: [, 7],\n          70471: [,, {\n            70462: 70475,\n            70487: 70476\n          }],\n          70475: [[70471, 70462]],\n          70476: [[70471, 70487]],\n          70477: [, 9],\n          70502: [, 230],\n          70503: [, 230],\n          70504: [, 230],\n          70505: [, 230],\n          70506: [, 230],\n          70507: [, 230],\n          70508: [, 230],\n          70512: [, 230],\n          70513: [, 230],\n          70514: [, 230],\n          70515: [, 230],\n          70516: [, 230]\n        },\n        5120: {\n          70841: [,, {\n            70832: 70844,\n            70842: 70843,\n            70845: 70846\n          }],\n          70843: [[70841, 70842]],\n          70844: [[70841, 70832]],\n          70846: [[70841, 70845]],\n          70850: [, 9],\n          70851: [, 7]\n        },\n        5376: {\n          71096: [,, {\n            71087: 71098\n          }],\n          71097: [,, {\n            71087: 71099\n          }],\n          71098: [[71096, 71087]],\n          71099: [[71097, 71087]],\n          71103: [, 9],\n          71104: [, 7]\n        },\n        5632: {\n          71231: [, 9],\n          71350: [, 9],\n          71351: [, 7]\n        },\n        5888: {\n          5908: [, 9],\n          5940: [, 9],\n          6098: [, 9],\n          6109: [, 230]\n        },\n        6144: {\n          6313: [, 228]\n        },\n        6400: {\n          6457: [, 222],\n          6458: [, 230],\n          6459: [, 220]\n        },\n        6656: {\n          6679: [, 230],\n          6680: [, 220],\n          6752: [, 9],\n          6773: [, 230],\n          6774: [, 230],\n          6775: [, 230],\n          6776: [, 230],\n          6777: [, 230],\n          6778: [, 230],\n          6779: [, 230],\n          6780: [, 230],\n          6783: [, 220],\n          6832: [, 230],\n          6833: [, 230],\n          6834: [, 230],\n          6835: [, 230],\n          6836: [, 230],\n          6837: [, 220],\n          6838: [, 220],\n          6839: [, 220],\n          6840: [, 220],\n          6841: [, 220],\n          6842: [, 220],\n          6843: [, 230],\n          6844: [, 230],\n          6845: [, 220]\n        },\n        6912: {\n          6917: [,, {\n            6965: 6918\n          }],\n          6918: [[6917, 6965]],\n          6919: [,, {\n            6965: 6920\n          }],\n          6920: [[6919, 6965]],\n          6921: [,, {\n            6965: 6922\n          }],\n          6922: [[6921, 6965]],\n          6923: [,, {\n            6965: 6924\n          }],\n          6924: [[6923, 6965]],\n          6925: [,, {\n            6965: 6926\n          }],\n          6926: [[6925, 6965]],\n          6929: [,, {\n            6965: 6930\n          }],\n          6930: [[6929, 6965]],\n          6964: [, 7],\n          6970: [,, {\n            6965: 6971\n          }],\n          6971: [[6970, 6965]],\n          6972: [,, {\n            6965: 6973\n          }],\n          6973: [[6972, 6965]],\n          6974: [,, {\n            6965: 6976\n          }],\n          6975: [,, {\n            6965: 6977\n          }],\n          6976: [[6974, 6965]],\n          6977: [[6975, 6965]],\n          6978: [,, {\n            6965: 6979\n          }],\n          6979: [[6978, 6965]],\n          6980: [, 9],\n          7019: [, 230],\n          7020: [, 220],\n          7021: [, 230],\n          7022: [, 230],\n          7023: [, 230],\n          7024: [, 230],\n          7025: [, 230],\n          7026: [, 230],\n          7027: [, 230],\n          7082: [, 9],\n          7083: [, 9],\n          7142: [, 7],\n          7154: [, 9],\n          7155: [, 9]\n        },\n        7168: {\n          7223: [, 7],\n          7376: [, 230],\n          7377: [, 230],\n          7378: [, 230],\n          7380: [, 1],\n          7381: [, 220],\n          7382: [, 220],\n          7383: [, 220],\n          7384: [, 220],\n          7385: [, 220],\n          7386: [, 230],\n          7387: [, 230],\n          7388: [, 220],\n          7389: [, 220],\n          7390: [, 220],\n          7391: [, 220],\n          7392: [, 230],\n          7394: [, 1],\n          7395: [, 1],\n          7396: [, 1],\n          7397: [, 1],\n          7398: [, 1],\n          7399: [, 1],\n          7400: [, 1],\n          7405: [, 220],\n          7412: [, 230],\n          7416: [, 230],\n          7417: [, 230]\n        },\n        7424: {\n          7468: [[65], 256],\n          7469: [[198], 256],\n          7470: [[66], 256],\n          7472: [[68], 256],\n          7473: [[69], 256],\n          7474: [[398], 256],\n          7475: [[71], 256],\n          7476: [[72], 256],\n          7477: [[73], 256],\n          7478: [[74], 256],\n          7479: [[75], 256],\n          7480: [[76], 256],\n          7481: [[77], 256],\n          7482: [[78], 256],\n          7484: [[79], 256],\n          7485: [[546], 256],\n          7486: [[80], 256],\n          7487: [[82], 256],\n          7488: [[84], 256],\n          7489: [[85], 256],\n          7490: [[87], 256],\n          7491: [[97], 256],\n          7492: [[592], 256],\n          7493: [[593], 256],\n          7494: [[7426], 256],\n          7495: [[98], 256],\n          7496: [[100], 256],\n          7497: [[101], 256],\n          7498: [[601], 256],\n          7499: [[603], 256],\n          7500: [[604], 256],\n          7501: [[103], 256],\n          7503: [[107], 256],\n          7504: [[109], 256],\n          7505: [[331], 256],\n          7506: [[111], 256],\n          7507: [[596], 256],\n          7508: [[7446], 256],\n          7509: [[7447], 256],\n          7510: [[112], 256],\n          7511: [[116], 256],\n          7512: [[117], 256],\n          7513: [[7453], 256],\n          7514: [[623], 256],\n          7515: [[118], 256],\n          7516: [[7461], 256],\n          7517: [[946], 256],\n          7518: [[947], 256],\n          7519: [[948], 256],\n          7520: [[966], 256],\n          7521: [[967], 256],\n          7522: [[105], 256],\n          7523: [[114], 256],\n          7524: [[117], 256],\n          7525: [[118], 256],\n          7526: [[946], 256],\n          7527: [[947], 256],\n          7528: [[961], 256],\n          7529: [[966], 256],\n          7530: [[967], 256],\n          7544: [[1085], 256],\n          7579: [[594], 256],\n          7580: [[99], 256],\n          7581: [[597], 256],\n          7582: [[240], 256],\n          7583: [[604], 256],\n          7584: [[102], 256],\n          7585: [[607], 256],\n          7586: [[609], 256],\n          7587: [[613], 256],\n          7588: [[616], 256],\n          7589: [[617], 256],\n          7590: [[618], 256],\n          7591: [[7547], 256],\n          7592: [[669], 256],\n          7593: [[621], 256],\n          7594: [[7557], 256],\n          7595: [[671], 256],\n          7596: [[625], 256],\n          7597: [[624], 256],\n          7598: [[626], 256],\n          7599: [[627], 256],\n          7600: [[628], 256],\n          7601: [[629], 256],\n          7602: [[632], 256],\n          7603: [[642], 256],\n          7604: [[643], 256],\n          7605: [[427], 256],\n          7606: [[649], 256],\n          7607: [[650], 256],\n          7608: [[7452], 256],\n          7609: [[651], 256],\n          7610: [[652], 256],\n          7611: [[122], 256],\n          7612: [[656], 256],\n          7613: [[657], 256],\n          7614: [[658], 256],\n          7615: [[952], 256],\n          7616: [, 230],\n          7617: [, 230],\n          7618: [, 220],\n          7619: [, 230],\n          7620: [, 230],\n          7621: [, 230],\n          7622: [, 230],\n          7623: [, 230],\n          7624: [, 230],\n          7625: [, 230],\n          7626: [, 220],\n          7627: [, 230],\n          7628: [, 230],\n          7629: [, 234],\n          7630: [, 214],\n          7631: [, 220],\n          7632: [, 202],\n          7633: [, 230],\n          7634: [, 230],\n          7635: [, 230],\n          7636: [, 230],\n          7637: [, 230],\n          7638: [, 230],\n          7639: [, 230],\n          7640: [, 230],\n          7641: [, 230],\n          7642: [, 230],\n          7643: [, 230],\n          7644: [, 230],\n          7645: [, 230],\n          7646: [, 230],\n          7647: [, 230],\n          7648: [, 230],\n          7649: [, 230],\n          7650: [, 230],\n          7651: [, 230],\n          7652: [, 230],\n          7653: [, 230],\n          7654: [, 230],\n          7655: [, 230],\n          7656: [, 230],\n          7657: [, 230],\n          7658: [, 230],\n          7659: [, 230],\n          7660: [, 230],\n          7661: [, 230],\n          7662: [, 230],\n          7663: [, 230],\n          7664: [, 230],\n          7665: [, 230],\n          7666: [, 230],\n          7667: [, 230],\n          7668: [, 230],\n          7669: [, 230],\n          7676: [, 233],\n          7677: [, 220],\n          7678: [, 230],\n          7679: [, 220]\n        },\n        7680: {\n          7680: [[65, 805]],\n          7681: [[97, 805]],\n          7682: [[66, 775]],\n          7683: [[98, 775]],\n          7684: [[66, 803]],\n          7685: [[98, 803]],\n          7686: [[66, 817]],\n          7687: [[98, 817]],\n          7688: [[199, 769]],\n          7689: [[231, 769]],\n          7690: [[68, 775]],\n          7691: [[100, 775]],\n          7692: [[68, 803]],\n          7693: [[100, 803]],\n          7694: [[68, 817]],\n          7695: [[100, 817]],\n          7696: [[68, 807]],\n          7697: [[100, 807]],\n          7698: [[68, 813]],\n          7699: [[100, 813]],\n          7700: [[274, 768]],\n          7701: [[275, 768]],\n          7702: [[274, 769]],\n          7703: [[275, 769]],\n          7704: [[69, 813]],\n          7705: [[101, 813]],\n          7706: [[69, 816]],\n          7707: [[101, 816]],\n          7708: [[552, 774]],\n          7709: [[553, 774]],\n          7710: [[70, 775]],\n          7711: [[102, 775]],\n          7712: [[71, 772]],\n          7713: [[103, 772]],\n          7714: [[72, 775]],\n          7715: [[104, 775]],\n          7716: [[72, 803]],\n          7717: [[104, 803]],\n          7718: [[72, 776]],\n          7719: [[104, 776]],\n          7720: [[72, 807]],\n          7721: [[104, 807]],\n          7722: [[72, 814]],\n          7723: [[104, 814]],\n          7724: [[73, 816]],\n          7725: [[105, 816]],\n          7726: [[207, 769]],\n          7727: [[239, 769]],\n          7728: [[75, 769]],\n          7729: [[107, 769]],\n          7730: [[75, 803]],\n          7731: [[107, 803]],\n          7732: [[75, 817]],\n          7733: [[107, 817]],\n          7734: [[76, 803],, {\n            772: 7736\n          }],\n          7735: [[108, 803],, {\n            772: 7737\n          }],\n          7736: [[7734, 772]],\n          7737: [[7735, 772]],\n          7738: [[76, 817]],\n          7739: [[108, 817]],\n          7740: [[76, 813]],\n          7741: [[108, 813]],\n          7742: [[77, 769]],\n          7743: [[109, 769]],\n          7744: [[77, 775]],\n          7745: [[109, 775]],\n          7746: [[77, 803]],\n          7747: [[109, 803]],\n          7748: [[78, 775]],\n          7749: [[110, 775]],\n          7750: [[78, 803]],\n          7751: [[110, 803]],\n          7752: [[78, 817]],\n          7753: [[110, 817]],\n          7754: [[78, 813]],\n          7755: [[110, 813]],\n          7756: [[213, 769]],\n          7757: [[245, 769]],\n          7758: [[213, 776]],\n          7759: [[245, 776]],\n          7760: [[332, 768]],\n          7761: [[333, 768]],\n          7762: [[332, 769]],\n          7763: [[333, 769]],\n          7764: [[80, 769]],\n          7765: [[112, 769]],\n          7766: [[80, 775]],\n          7767: [[112, 775]],\n          7768: [[82, 775]],\n          7769: [[114, 775]],\n          7770: [[82, 803],, {\n            772: 7772\n          }],\n          7771: [[114, 803],, {\n            772: 7773\n          }],\n          7772: [[7770, 772]],\n          7773: [[7771, 772]],\n          7774: [[82, 817]],\n          7775: [[114, 817]],\n          7776: [[83, 775]],\n          7777: [[115, 775]],\n          7778: [[83, 803],, {\n            775: 7784\n          }],\n          7779: [[115, 803],, {\n            775: 7785\n          }],\n          7780: [[346, 775]],\n          7781: [[347, 775]],\n          7782: [[352, 775]],\n          7783: [[353, 775]],\n          7784: [[7778, 775]],\n          7785: [[7779, 775]],\n          7786: [[84, 775]],\n          7787: [[116, 775]],\n          7788: [[84, 803]],\n          7789: [[116, 803]],\n          7790: [[84, 817]],\n          7791: [[116, 817]],\n          7792: [[84, 813]],\n          7793: [[116, 813]],\n          7794: [[85, 804]],\n          7795: [[117, 804]],\n          7796: [[85, 816]],\n          7797: [[117, 816]],\n          7798: [[85, 813]],\n          7799: [[117, 813]],\n          7800: [[360, 769]],\n          7801: [[361, 769]],\n          7802: [[362, 776]],\n          7803: [[363, 776]],\n          7804: [[86, 771]],\n          7805: [[118, 771]],\n          7806: [[86, 803]],\n          7807: [[118, 803]],\n          7808: [[87, 768]],\n          7809: [[119, 768]],\n          7810: [[87, 769]],\n          7811: [[119, 769]],\n          7812: [[87, 776]],\n          7813: [[119, 776]],\n          7814: [[87, 775]],\n          7815: [[119, 775]],\n          7816: [[87, 803]],\n          7817: [[119, 803]],\n          7818: [[88, 775]],\n          7819: [[120, 775]],\n          7820: [[88, 776]],\n          7821: [[120, 776]],\n          7822: [[89, 775]],\n          7823: [[121, 775]],\n          7824: [[90, 770]],\n          7825: [[122, 770]],\n          7826: [[90, 803]],\n          7827: [[122, 803]],\n          7828: [[90, 817]],\n          7829: [[122, 817]],\n          7830: [[104, 817]],\n          7831: [[116, 776]],\n          7832: [[119, 778]],\n          7833: [[121, 778]],\n          7834: [[97, 702], 256],\n          7835: [[383, 775]],\n          7840: [[65, 803],, {\n            770: 7852,\n            774: 7862\n          }],\n          7841: [[97, 803],, {\n            770: 7853,\n            774: 7863\n          }],\n          7842: [[65, 777]],\n          7843: [[97, 777]],\n          7844: [[194, 769]],\n          7845: [[226, 769]],\n          7846: [[194, 768]],\n          7847: [[226, 768]],\n          7848: [[194, 777]],\n          7849: [[226, 777]],\n          7850: [[194, 771]],\n          7851: [[226, 771]],\n          7852: [[7840, 770]],\n          7853: [[7841, 770]],\n          7854: [[258, 769]],\n          7855: [[259, 769]],\n          7856: [[258, 768]],\n          7857: [[259, 768]],\n          7858: [[258, 777]],\n          7859: [[259, 777]],\n          7860: [[258, 771]],\n          7861: [[259, 771]],\n          7862: [[7840, 774]],\n          7863: [[7841, 774]],\n          7864: [[69, 803],, {\n            770: 7878\n          }],\n          7865: [[101, 803],, {\n            770: 7879\n          }],\n          7866: [[69, 777]],\n          7867: [[101, 777]],\n          7868: [[69, 771]],\n          7869: [[101, 771]],\n          7870: [[202, 769]],\n          7871: [[234, 769]],\n          7872: [[202, 768]],\n          7873: [[234, 768]],\n          7874: [[202, 777]],\n          7875: [[234, 777]],\n          7876: [[202, 771]],\n          7877: [[234, 771]],\n          7878: [[7864, 770]],\n          7879: [[7865, 770]],\n          7880: [[73, 777]],\n          7881: [[105, 777]],\n          7882: [[73, 803]],\n          7883: [[105, 803]],\n          7884: [[79, 803],, {\n            770: 7896\n          }],\n          7885: [[111, 803],, {\n            770: 7897\n          }],\n          7886: [[79, 777]],\n          7887: [[111, 777]],\n          7888: [[212, 769]],\n          7889: [[244, 769]],\n          7890: [[212, 768]],\n          7891: [[244, 768]],\n          7892: [[212, 777]],\n          7893: [[244, 777]],\n          7894: [[212, 771]],\n          7895: [[244, 771]],\n          7896: [[7884, 770]],\n          7897: [[7885, 770]],\n          7898: [[416, 769]],\n          7899: [[417, 769]],\n          7900: [[416, 768]],\n          7901: [[417, 768]],\n          7902: [[416, 777]],\n          7903: [[417, 777]],\n          7904: [[416, 771]],\n          7905: [[417, 771]],\n          7906: [[416, 803]],\n          7907: [[417, 803]],\n          7908: [[85, 803]],\n          7909: [[117, 803]],\n          7910: [[85, 777]],\n          7911: [[117, 777]],\n          7912: [[431, 769]],\n          7913: [[432, 769]],\n          7914: [[431, 768]],\n          7915: [[432, 768]],\n          7916: [[431, 777]],\n          7917: [[432, 777]],\n          7918: [[431, 771]],\n          7919: [[432, 771]],\n          7920: [[431, 803]],\n          7921: [[432, 803]],\n          7922: [[89, 768]],\n          7923: [[121, 768]],\n          7924: [[89, 803]],\n          7925: [[121, 803]],\n          7926: [[89, 777]],\n          7927: [[121, 777]],\n          7928: [[89, 771]],\n          7929: [[121, 771]]\n        },\n        7936: {\n          7936: [[945, 787],, {\n            768: 7938,\n            769: 7940,\n            834: 7942,\n            837: 8064\n          }],\n          7937: [[945, 788],, {\n            768: 7939,\n            769: 7941,\n            834: 7943,\n            837: 8065\n          }],\n          7938: [[7936, 768],, {\n            837: 8066\n          }],\n          7939: [[7937, 768],, {\n            837: 8067\n          }],\n          7940: [[7936, 769],, {\n            837: 8068\n          }],\n          7941: [[7937, 769],, {\n            837: 8069\n          }],\n          7942: [[7936, 834],, {\n            837: 8070\n          }],\n          7943: [[7937, 834],, {\n            837: 8071\n          }],\n          7944: [[913, 787],, {\n            768: 7946,\n            769: 7948,\n            834: 7950,\n            837: 8072\n          }],\n          7945: [[913, 788],, {\n            768: 7947,\n            769: 7949,\n            834: 7951,\n            837: 8073\n          }],\n          7946: [[7944, 768],, {\n            837: 8074\n          }],\n          7947: [[7945, 768],, {\n            837: 8075\n          }],\n          7948: [[7944, 769],, {\n            837: 8076\n          }],\n          7949: [[7945, 769],, {\n            837: 8077\n          }],\n          7950: [[7944, 834],, {\n            837: 8078\n          }],\n          7951: [[7945, 834],, {\n            837: 8079\n          }],\n          7952: [[949, 787],, {\n            768: 7954,\n            769: 7956\n          }],\n          7953: [[949, 788],, {\n            768: 7955,\n            769: 7957\n          }],\n          7954: [[7952, 768]],\n          7955: [[7953, 768]],\n          7956: [[7952, 769]],\n          7957: [[7953, 769]],\n          7960: [[917, 787],, {\n            768: 7962,\n            769: 7964\n          }],\n          7961: [[917, 788],, {\n            768: 7963,\n            769: 7965\n          }],\n          7962: [[7960, 768]],\n          7963: [[7961, 768]],\n          7964: [[7960, 769]],\n          7965: [[7961, 769]],\n          7968: [[951, 787],, {\n            768: 7970,\n            769: 7972,\n            834: 7974,\n            837: 8080\n          }],\n          7969: [[951, 788],, {\n            768: 7971,\n            769: 7973,\n            834: 7975,\n            837: 8081\n          }],\n          7970: [[7968, 768],, {\n            837: 8082\n          }],\n          7971: [[7969, 768],, {\n            837: 8083\n          }],\n          7972: [[7968, 769],, {\n            837: 8084\n          }],\n          7973: [[7969, 769],, {\n            837: 8085\n          }],\n          7974: [[7968, 834],, {\n            837: 8086\n          }],\n          7975: [[7969, 834],, {\n            837: 8087\n          }],\n          7976: [[919, 787],, {\n            768: 7978,\n            769: 7980,\n            834: 7982,\n            837: 8088\n          }],\n          7977: [[919, 788],, {\n            768: 7979,\n            769: 7981,\n            834: 7983,\n            837: 8089\n          }],\n          7978: [[7976, 768],, {\n            837: 8090\n          }],\n          7979: [[7977, 768],, {\n            837: 8091\n          }],\n          7980: [[7976, 769],, {\n            837: 8092\n          }],\n          7981: [[7977, 769],, {\n            837: 8093\n          }],\n          7982: [[7976, 834],, {\n            837: 8094\n          }],\n          7983: [[7977, 834],, {\n            837: 8095\n          }],\n          7984: [[953, 787],, {\n            768: 7986,\n            769: 7988,\n            834: 7990\n          }],\n          7985: [[953, 788],, {\n            768: 7987,\n            769: 7989,\n            834: 7991\n          }],\n          7986: [[7984, 768]],\n          7987: [[7985, 768]],\n          7988: [[7984, 769]],\n          7989: [[7985, 769]],\n          7990: [[7984, 834]],\n          7991: [[7985, 834]],\n          7992: [[921, 787],, {\n            768: 7994,\n            769: 7996,\n            834: 7998\n          }],\n          7993: [[921, 788],, {\n            768: 7995,\n            769: 7997,\n            834: 7999\n          }],\n          7994: [[7992, 768]],\n          7995: [[7993, 768]],\n          7996: [[7992, 769]],\n          7997: [[7993, 769]],\n          7998: [[7992, 834]],\n          7999: [[7993, 834]],\n          8000: [[959, 787],, {\n            768: 8002,\n            769: 8004\n          }],\n          8001: [[959, 788],, {\n            768: 8003,\n            769: 8005\n          }],\n          8002: [[8000, 768]],\n          8003: [[8001, 768]],\n          8004: [[8000, 769]],\n          8005: [[8001, 769]],\n          8008: [[927, 787],, {\n            768: 8010,\n            769: 8012\n          }],\n          8009: [[927, 788],, {\n            768: 8011,\n            769: 8013\n          }],\n          8010: [[8008, 768]],\n          8011: [[8009, 768]],\n          8012: [[8008, 769]],\n          8013: [[8009, 769]],\n          8016: [[965, 787],, {\n            768: 8018,\n            769: 8020,\n            834: 8022\n          }],\n          8017: [[965, 788],, {\n            768: 8019,\n            769: 8021,\n            834: 8023\n          }],\n          8018: [[8016, 768]],\n          8019: [[8017, 768]],\n          8020: [[8016, 769]],\n          8021: [[8017, 769]],\n          8022: [[8016, 834]],\n          8023: [[8017, 834]],\n          8025: [[933, 788],, {\n            768: 8027,\n            769: 8029,\n            834: 8031\n          }],\n          8027: [[8025, 768]],\n          8029: [[8025, 769]],\n          8031: [[8025, 834]],\n          8032: [[969, 787],, {\n            768: 8034,\n            769: 8036,\n            834: 8038,\n            837: 8096\n          }],\n          8033: [[969, 788],, {\n            768: 8035,\n            769: 8037,\n            834: 8039,\n            837: 8097\n          }],\n          8034: [[8032, 768],, {\n            837: 8098\n          }],\n          8035: [[8033, 768],, {\n            837: 8099\n          }],\n          8036: [[8032, 769],, {\n            837: 8100\n          }],\n          8037: [[8033, 769],, {\n            837: 8101\n          }],\n          8038: [[8032, 834],, {\n            837: 8102\n          }],\n          8039: [[8033, 834],, {\n            837: 8103\n          }],\n          8040: [[937, 787],, {\n            768: 8042,\n            769: 8044,\n            834: 8046,\n            837: 8104\n          }],\n          8041: [[937, 788],, {\n            768: 8043,\n            769: 8045,\n            834: 8047,\n            837: 8105\n          }],\n          8042: [[8040, 768],, {\n            837: 8106\n          }],\n          8043: [[8041, 768],, {\n            837: 8107\n          }],\n          8044: [[8040, 769],, {\n            837: 8108\n          }],\n          8045: [[8041, 769],, {\n            837: 8109\n          }],\n          8046: [[8040, 834],, {\n            837: 8110\n          }],\n          8047: [[8041, 834],, {\n            837: 8111\n          }],\n          8048: [[945, 768],, {\n            837: 8114\n          }],\n          8049: [[940]],\n          8050: [[949, 768]],\n          8051: [[941]],\n          8052: [[951, 768],, {\n            837: 8130\n          }],\n          8053: [[942]],\n          8054: [[953, 768]],\n          8055: [[943]],\n          8056: [[959, 768]],\n          8057: [[972]],\n          8058: [[965, 768]],\n          8059: [[973]],\n          8060: [[969, 768],, {\n            837: 8178\n          }],\n          8061: [[974]],\n          8064: [[7936, 837]],\n          8065: [[7937, 837]],\n          8066: [[7938, 837]],\n          8067: [[7939, 837]],\n          8068: [[7940, 837]],\n          8069: [[7941, 837]],\n          8070: [[7942, 837]],\n          8071: [[7943, 837]],\n          8072: [[7944, 837]],\n          8073: [[7945, 837]],\n          8074: [[7946, 837]],\n          8075: [[7947, 837]],\n          8076: [[7948, 837]],\n          8077: [[7949, 837]],\n          8078: [[7950, 837]],\n          8079: [[7951, 837]],\n          8080: [[7968, 837]],\n          8081: [[7969, 837]],\n          8082: [[7970, 837]],\n          8083: [[7971, 837]],\n          8084: [[7972, 837]],\n          8085: [[7973, 837]],\n          8086: [[7974, 837]],\n          8087: [[7975, 837]],\n          8088: [[7976, 837]],\n          8089: [[7977, 837]],\n          8090: [[7978, 837]],\n          8091: [[7979, 837]],\n          8092: [[7980, 837]],\n          8093: [[7981, 837]],\n          8094: [[7982, 837]],\n          8095: [[7983, 837]],\n          8096: [[8032, 837]],\n          8097: [[8033, 837]],\n          8098: [[8034, 837]],\n          8099: [[8035, 837]],\n          8100: [[8036, 837]],\n          8101: [[8037, 837]],\n          8102: [[8038, 837]],\n          8103: [[8039, 837]],\n          8104: [[8040, 837]],\n          8105: [[8041, 837]],\n          8106: [[8042, 837]],\n          8107: [[8043, 837]],\n          8108: [[8044, 837]],\n          8109: [[8045, 837]],\n          8110: [[8046, 837]],\n          8111: [[8047, 837]],\n          8112: [[945, 774]],\n          8113: [[945, 772]],\n          8114: [[8048, 837]],\n          8115: [[945, 837]],\n          8116: [[940, 837]],\n          8118: [[945, 834],, {\n            837: 8119\n          }],\n          8119: [[8118, 837]],\n          8120: [[913, 774]],\n          8121: [[913, 772]],\n          8122: [[913, 768]],\n          8123: [[902]],\n          8124: [[913, 837]],\n          8125: [[32, 787], 256],\n          8126: [[953]],\n          8127: [[32, 787], 256, {\n            768: 8141,\n            769: 8142,\n            834: 8143\n          }],\n          8128: [[32, 834], 256],\n          8129: [[168, 834]],\n          8130: [[8052, 837]],\n          8131: [[951, 837]],\n          8132: [[942, 837]],\n          8134: [[951, 834],, {\n            837: 8135\n          }],\n          8135: [[8134, 837]],\n          8136: [[917, 768]],\n          8137: [[904]],\n          8138: [[919, 768]],\n          8139: [[905]],\n          8140: [[919, 837]],\n          8141: [[8127, 768]],\n          8142: [[8127, 769]],\n          8143: [[8127, 834]],\n          8144: [[953, 774]],\n          8145: [[953, 772]],\n          8146: [[970, 768]],\n          8147: [[912]],\n          8150: [[953, 834]],\n          8151: [[970, 834]],\n          8152: [[921, 774]],\n          8153: [[921, 772]],\n          8154: [[921, 768]],\n          8155: [[906]],\n          8157: [[8190, 768]],\n          8158: [[8190, 769]],\n          8159: [[8190, 834]],\n          8160: [[965, 774]],\n          8161: [[965, 772]],\n          8162: [[971, 768]],\n          8163: [[944]],\n          8164: [[961, 787]],\n          8165: [[961, 788]],\n          8166: [[965, 834]],\n          8167: [[971, 834]],\n          8168: [[933, 774]],\n          8169: [[933, 772]],\n          8170: [[933, 768]],\n          8171: [[910]],\n          8172: [[929, 788]],\n          8173: [[168, 768]],\n          8174: [[901]],\n          8175: [[96]],\n          8178: [[8060, 837]],\n          8179: [[969, 837]],\n          8180: [[974, 837]],\n          8182: [[969, 834],, {\n            837: 8183\n          }],\n          8183: [[8182, 837]],\n          8184: [[927, 768]],\n          8185: [[908]],\n          8186: [[937, 768]],\n          8187: [[911]],\n          8188: [[937, 837]],\n          8189: [[180]],\n          8190: [[32, 788], 256, {\n            768: 8157,\n            769: 8158,\n            834: 8159\n          }]\n        },\n        8192: {\n          8192: [[8194]],\n          8193: [[8195]],\n          8194: [[32], 256],\n          8195: [[32], 256],\n          8196: [[32], 256],\n          8197: [[32], 256],\n          8198: [[32], 256],\n          8199: [[32], 256],\n          8200: [[32], 256],\n          8201: [[32], 256],\n          8202: [[32], 256],\n          8209: [[8208], 256],\n          8215: [[32, 819], 256],\n          8228: [[46], 256],\n          8229: [[46, 46], 256],\n          8230: [[46, 46, 46], 256],\n          8239: [[32], 256],\n          8243: [[8242, 8242], 256],\n          8244: [[8242, 8242, 8242], 256],\n          8246: [[8245, 8245], 256],\n          8247: [[8245, 8245, 8245], 256],\n          8252: [[33, 33], 256],\n          8254: [[32, 773], 256],\n          8263: [[63, 63], 256],\n          8264: [[63, 33], 256],\n          8265: [[33, 63], 256],\n          8279: [[8242, 8242, 8242, 8242], 256],\n          8287: [[32], 256],\n          8304: [[48], 256],\n          8305: [[105], 256],\n          8308: [[52], 256],\n          8309: [[53], 256],\n          8310: [[54], 256],\n          8311: [[55], 256],\n          8312: [[56], 256],\n          8313: [[57], 256],\n          8314: [[43], 256],\n          8315: [[8722], 256],\n          8316: [[61], 256],\n          8317: [[40], 256],\n          8318: [[41], 256],\n          8319: [[110], 256],\n          8320: [[48], 256],\n          8321: [[49], 256],\n          8322: [[50], 256],\n          8323: [[51], 256],\n          8324: [[52], 256],\n          8325: [[53], 256],\n          8326: [[54], 256],\n          8327: [[55], 256],\n          8328: [[56], 256],\n          8329: [[57], 256],\n          8330: [[43], 256],\n          8331: [[8722], 256],\n          8332: [[61], 256],\n          8333: [[40], 256],\n          8334: [[41], 256],\n          8336: [[97], 256],\n          8337: [[101], 256],\n          8338: [[111], 256],\n          8339: [[120], 256],\n          8340: [[601], 256],\n          8341: [[104], 256],\n          8342: [[107], 256],\n          8343: [[108], 256],\n          8344: [[109], 256],\n          8345: [[110], 256],\n          8346: [[112], 256],\n          8347: [[115], 256],\n          8348: [[116], 256],\n          8360: [[82, 115], 256],\n          8400: [, 230],\n          8401: [, 230],\n          8402: [, 1],\n          8403: [, 1],\n          8404: [, 230],\n          8405: [, 230],\n          8406: [, 230],\n          8407: [, 230],\n          8408: [, 1],\n          8409: [, 1],\n          8410: [, 1],\n          8411: [, 230],\n          8412: [, 230],\n          8417: [, 230],\n          8421: [, 1],\n          8422: [, 1],\n          8423: [, 230],\n          8424: [, 220],\n          8425: [, 230],\n          8426: [, 1],\n          8427: [, 1],\n          8428: [, 220],\n          8429: [, 220],\n          8430: [, 220],\n          8431: [, 220],\n          8432: [, 230]\n        },\n        8448: {\n          8448: [[97, 47, 99], 256],\n          8449: [[97, 47, 115], 256],\n          8450: [[67], 256],\n          8451: [[176, 67], 256],\n          8453: [[99, 47, 111], 256],\n          8454: [[99, 47, 117], 256],\n          8455: [[400], 256],\n          8457: [[176, 70], 256],\n          8458: [[103], 256],\n          8459: [[72], 256],\n          8460: [[72], 256],\n          8461: [[72], 256],\n          8462: [[104], 256],\n          8463: [[295], 256],\n          8464: [[73], 256],\n          8465: [[73], 256],\n          8466: [[76], 256],\n          8467: [[108], 256],\n          8469: [[78], 256],\n          8470: [[78, 111], 256],\n          8473: [[80], 256],\n          8474: [[81], 256],\n          8475: [[82], 256],\n          8476: [[82], 256],\n          8477: [[82], 256],\n          8480: [[83, 77], 256],\n          8481: [[84, 69, 76], 256],\n          8482: [[84, 77], 256],\n          8484: [[90], 256],\n          8486: [[937]],\n          8488: [[90], 256],\n          8490: [[75]],\n          8491: [[197]],\n          8492: [[66], 256],\n          8493: [[67], 256],\n          8495: [[101], 256],\n          8496: [[69], 256],\n          8497: [[70], 256],\n          8499: [[77], 256],\n          8500: [[111], 256],\n          8501: [[1488], 256],\n          8502: [[1489], 256],\n          8503: [[1490], 256],\n          8504: [[1491], 256],\n          8505: [[105], 256],\n          8507: [[70, 65, 88], 256],\n          8508: [[960], 256],\n          8509: [[947], 256],\n          8510: [[915], 256],\n          8511: [[928], 256],\n          8512: [[8721], 256],\n          8517: [[68], 256],\n          8518: [[100], 256],\n          8519: [[101], 256],\n          8520: [[105], 256],\n          8521: [[106], 256],\n          8528: [[49, 8260, 55], 256],\n          8529: [[49, 8260, 57], 256],\n          8530: [[49, 8260, 49, 48], 256],\n          8531: [[49, 8260, 51], 256],\n          8532: [[50, 8260, 51], 256],\n          8533: [[49, 8260, 53], 256],\n          8534: [[50, 8260, 53], 256],\n          8535: [[51, 8260, 53], 256],\n          8536: [[52, 8260, 53], 256],\n          8537: [[49, 8260, 54], 256],\n          8538: [[53, 8260, 54], 256],\n          8539: [[49, 8260, 56], 256],\n          8540: [[51, 8260, 56], 256],\n          8541: [[53, 8260, 56], 256],\n          8542: [[55, 8260, 56], 256],\n          8543: [[49, 8260], 256],\n          8544: [[73], 256],\n          8545: [[73, 73], 256],\n          8546: [[73, 73, 73], 256],\n          8547: [[73, 86], 256],\n          8548: [[86], 256],\n          8549: [[86, 73], 256],\n          8550: [[86, 73, 73], 256],\n          8551: [[86, 73, 73, 73], 256],\n          8552: [[73, 88], 256],\n          8553: [[88], 256],\n          8554: [[88, 73], 256],\n          8555: [[88, 73, 73], 256],\n          8556: [[76], 256],\n          8557: [[67], 256],\n          8558: [[68], 256],\n          8559: [[77], 256],\n          8560: [[105], 256],\n          8561: [[105, 105], 256],\n          8562: [[105, 105, 105], 256],\n          8563: [[105, 118], 256],\n          8564: [[118], 256],\n          8565: [[118, 105], 256],\n          8566: [[118, 105, 105], 256],\n          8567: [[118, 105, 105, 105], 256],\n          8568: [[105, 120], 256],\n          8569: [[120], 256],\n          8570: [[120, 105], 256],\n          8571: [[120, 105, 105], 256],\n          8572: [[108], 256],\n          8573: [[99], 256],\n          8574: [[100], 256],\n          8575: [[109], 256],\n          8585: [[48, 8260, 51], 256],\n          8592: [,, {\n            824: 8602\n          }],\n          8594: [,, {\n            824: 8603\n          }],\n          8596: [,, {\n            824: 8622\n          }],\n          8602: [[8592, 824]],\n          8603: [[8594, 824]],\n          8622: [[8596, 824]],\n          8653: [[8656, 824]],\n          8654: [[8660, 824]],\n          8655: [[8658, 824]],\n          8656: [,, {\n            824: 8653\n          }],\n          8658: [,, {\n            824: 8655\n          }],\n          8660: [,, {\n            824: 8654\n          }]\n        },\n        8704: {\n          8707: [,, {\n            824: 8708\n          }],\n          8708: [[8707, 824]],\n          8712: [,, {\n            824: 8713\n          }],\n          8713: [[8712, 824]],\n          8715: [,, {\n            824: 8716\n          }],\n          8716: [[8715, 824]],\n          8739: [,, {\n            824: 8740\n          }],\n          8740: [[8739, 824]],\n          8741: [,, {\n            824: 8742\n          }],\n          8742: [[8741, 824]],\n          8748: [[8747, 8747], 256],\n          8749: [[8747, 8747, 8747], 256],\n          8751: [[8750, 8750], 256],\n          8752: [[8750, 8750, 8750], 256],\n          8764: [,, {\n            824: 8769\n          }],\n          8769: [[8764, 824]],\n          8771: [,, {\n            824: 8772\n          }],\n          8772: [[8771, 824]],\n          8773: [,, {\n            824: 8775\n          }],\n          8775: [[8773, 824]],\n          8776: [,, {\n            824: 8777\n          }],\n          8777: [[8776, 824]],\n          8781: [,, {\n            824: 8813\n          }],\n          8800: [[61, 824]],\n          8801: [,, {\n            824: 8802\n          }],\n          8802: [[8801, 824]],\n          8804: [,, {\n            824: 8816\n          }],\n          8805: [,, {\n            824: 8817\n          }],\n          8813: [[8781, 824]],\n          8814: [[60, 824]],\n          8815: [[62, 824]],\n          8816: [[8804, 824]],\n          8817: [[8805, 824]],\n          8818: [,, {\n            824: 8820\n          }],\n          8819: [,, {\n            824: 8821\n          }],\n          8820: [[8818, 824]],\n          8821: [[8819, 824]],\n          8822: [,, {\n            824: 8824\n          }],\n          8823: [,, {\n            824: 8825\n          }],\n          8824: [[8822, 824]],\n          8825: [[8823, 824]],\n          8826: [,, {\n            824: 8832\n          }],\n          8827: [,, {\n            824: 8833\n          }],\n          8828: [,, {\n            824: 8928\n          }],\n          8829: [,, {\n            824: 8929\n          }],\n          8832: [[8826, 824]],\n          8833: [[8827, 824]],\n          8834: [,, {\n            824: 8836\n          }],\n          8835: [,, {\n            824: 8837\n          }],\n          8836: [[8834, 824]],\n          8837: [[8835, 824]],\n          8838: [,, {\n            824: 8840\n          }],\n          8839: [,, {\n            824: 8841\n          }],\n          8840: [[8838, 824]],\n          8841: [[8839, 824]],\n          8849: [,, {\n            824: 8930\n          }],\n          8850: [,, {\n            824: 8931\n          }],\n          8866: [,, {\n            824: 8876\n          }],\n          8872: [,, {\n            824: 8877\n          }],\n          8873: [,, {\n            824: 8878\n          }],\n          8875: [,, {\n            824: 8879\n          }],\n          8876: [[8866, 824]],\n          8877: [[8872, 824]],\n          8878: [[8873, 824]],\n          8879: [[8875, 824]],\n          8882: [,, {\n            824: 8938\n          }],\n          8883: [,, {\n            824: 8939\n          }],\n          8884: [,, {\n            824: 8940\n          }],\n          8885: [,, {\n            824: 8941\n          }],\n          8928: [[8828, 824]],\n          8929: [[8829, 824]],\n          8930: [[8849, 824]],\n          8931: [[8850, 824]],\n          8938: [[8882, 824]],\n          8939: [[8883, 824]],\n          8940: [[8884, 824]],\n          8941: [[8885, 824]]\n        },\n        8960: {\n          9001: [[12296]],\n          9002: [[12297]]\n        },\n        9216: {\n          9312: [[49], 256],\n          9313: [[50], 256],\n          9314: [[51], 256],\n          9315: [[52], 256],\n          9316: [[53], 256],\n          9317: [[54], 256],\n          9318: [[55], 256],\n          9319: [[56], 256],\n          9320: [[57], 256],\n          9321: [[49, 48], 256],\n          9322: [[49, 49], 256],\n          9323: [[49, 50], 256],\n          9324: [[49, 51], 256],\n          9325: [[49, 52], 256],\n          9326: [[49, 53], 256],\n          9327: [[49, 54], 256],\n          9328: [[49, 55], 256],\n          9329: [[49, 56], 256],\n          9330: [[49, 57], 256],\n          9331: [[50, 48], 256],\n          9332: [[40, 49, 41], 256],\n          9333: [[40, 50, 41], 256],\n          9334: [[40, 51, 41], 256],\n          9335: [[40, 52, 41], 256],\n          9336: [[40, 53, 41], 256],\n          9337: [[40, 54, 41], 256],\n          9338: [[40, 55, 41], 256],\n          9339: [[40, 56, 41], 256],\n          9340: [[40, 57, 41], 256],\n          9341: [[40, 49, 48, 41], 256],\n          9342: [[40, 49, 49, 41], 256],\n          9343: [[40, 49, 50, 41], 256],\n          9344: [[40, 49, 51, 41], 256],\n          9345: [[40, 49, 52, 41], 256],\n          9346: [[40, 49, 53, 41], 256],\n          9347: [[40, 49, 54, 41], 256],\n          9348: [[40, 49, 55, 41], 256],\n          9349: [[40, 49, 56, 41], 256],\n          9350: [[40, 49, 57, 41], 256],\n          9351: [[40, 50, 48, 41], 256],\n          9352: [[49, 46], 256],\n          9353: [[50, 46], 256],\n          9354: [[51, 46], 256],\n          9355: [[52, 46], 256],\n          9356: [[53, 46], 256],\n          9357: [[54, 46], 256],\n          9358: [[55, 46], 256],\n          9359: [[56, 46], 256],\n          9360: [[57, 46], 256],\n          9361: [[49, 48, 46], 256],\n          9362: [[49, 49, 46], 256],\n          9363: [[49, 50, 46], 256],\n          9364: [[49, 51, 46], 256],\n          9365: [[49, 52, 46], 256],\n          9366: [[49, 53, 46], 256],\n          9367: [[49, 54, 46], 256],\n          9368: [[49, 55, 46], 256],\n          9369: [[49, 56, 46], 256],\n          9370: [[49, 57, 46], 256],\n          9371: [[50, 48, 46], 256],\n          9372: [[40, 97, 41], 256],\n          9373: [[40, 98, 41], 256],\n          9374: [[40, 99, 41], 256],\n          9375: [[40, 100, 41], 256],\n          9376: [[40, 101, 41], 256],\n          9377: [[40, 102, 41], 256],\n          9378: [[40, 103, 41], 256],\n          9379: [[40, 104, 41], 256],\n          9380: [[40, 105, 41], 256],\n          9381: [[40, 106, 41], 256],\n          9382: [[40, 107, 41], 256],\n          9383: [[40, 108, 41], 256],\n          9384: [[40, 109, 41], 256],\n          9385: [[40, 110, 41], 256],\n          9386: [[40, 111, 41], 256],\n          9387: [[40, 112, 41], 256],\n          9388: [[40, 113, 41], 256],\n          9389: [[40, 114, 41], 256],\n          9390: [[40, 115, 41], 256],\n          9391: [[40, 116, 41], 256],\n          9392: [[40, 117, 41], 256],\n          9393: [[40, 118, 41], 256],\n          9394: [[40, 119, 41], 256],\n          9395: [[40, 120, 41], 256],\n          9396: [[40, 121, 41], 256],\n          9397: [[40, 122, 41], 256],\n          9398: [[65], 256],\n          9399: [[66], 256],\n          9400: [[67], 256],\n          9401: [[68], 256],\n          9402: [[69], 256],\n          9403: [[70], 256],\n          9404: [[71], 256],\n          9405: [[72], 256],\n          9406: [[73], 256],\n          9407: [[74], 256],\n          9408: [[75], 256],\n          9409: [[76], 256],\n          9410: [[77], 256],\n          9411: [[78], 256],\n          9412: [[79], 256],\n          9413: [[80], 256],\n          9414: [[81], 256],\n          9415: [[82], 256],\n          9416: [[83], 256],\n          9417: [[84], 256],\n          9418: [[85], 256],\n          9419: [[86], 256],\n          9420: [[87], 256],\n          9421: [[88], 256],\n          9422: [[89], 256],\n          9423: [[90], 256],\n          9424: [[97], 256],\n          9425: [[98], 256],\n          9426: [[99], 256],\n          9427: [[100], 256],\n          9428: [[101], 256],\n          9429: [[102], 256],\n          9430: [[103], 256],\n          9431: [[104], 256],\n          9432: [[105], 256],\n          9433: [[106], 256],\n          9434: [[107], 256],\n          9435: [[108], 256],\n          9436: [[109], 256],\n          9437: [[110], 256],\n          9438: [[111], 256],\n          9439: [[112], 256],\n          9440: [[113], 256],\n          9441: [[114], 256],\n          9442: [[115], 256],\n          9443: [[116], 256],\n          9444: [[117], 256],\n          9445: [[118], 256],\n          9446: [[119], 256],\n          9447: [[120], 256],\n          9448: [[121], 256],\n          9449: [[122], 256],\n          9450: [[48], 256]\n        },\n        10752: {\n          10764: [[8747, 8747, 8747, 8747], 256],\n          10868: [[58, 58, 61], 256],\n          10869: [[61, 61], 256],\n          10870: [[61, 61, 61], 256],\n          10972: [[10973, 824], 512]\n        },\n        11264: {\n          11388: [[106], 256],\n          11389: [[86], 256],\n          11503: [, 230],\n          11504: [, 230],\n          11505: [, 230]\n        },\n        11520: {\n          11631: [[11617], 256],\n          11647: [, 9],\n          11744: [, 230],\n          11745: [, 230],\n          11746: [, 230],\n          11747: [, 230],\n          11748: [, 230],\n          11749: [, 230],\n          11750: [, 230],\n          11751: [, 230],\n          11752: [, 230],\n          11753: [, 230],\n          11754: [, 230],\n          11755: [, 230],\n          11756: [, 230],\n          11757: [, 230],\n          11758: [, 230],\n          11759: [, 230],\n          11760: [, 230],\n          11761: [, 230],\n          11762: [, 230],\n          11763: [, 230],\n          11764: [, 230],\n          11765: [, 230],\n          11766: [, 230],\n          11767: [, 230],\n          11768: [, 230],\n          11769: [, 230],\n          11770: [, 230],\n          11771: [, 230],\n          11772: [, 230],\n          11773: [, 230],\n          11774: [, 230],\n          11775: [, 230]\n        },\n        11776: {\n          11935: [[27597], 256],\n          12019: [[40863], 256]\n        },\n        12032: {\n          12032: [[19968], 256],\n          12033: [[20008], 256],\n          12034: [[20022], 256],\n          12035: [[20031], 256],\n          12036: [[20057], 256],\n          12037: [[20101], 256],\n          12038: [[20108], 256],\n          12039: [[20128], 256],\n          12040: [[20154], 256],\n          12041: [[20799], 256],\n          12042: [[20837], 256],\n          12043: [[20843], 256],\n          12044: [[20866], 256],\n          12045: [[20886], 256],\n          12046: [[20907], 256],\n          12047: [[20960], 256],\n          12048: [[20981], 256],\n          12049: [[20992], 256],\n          12050: [[21147], 256],\n          12051: [[21241], 256],\n          12052: [[21269], 256],\n          12053: [[21274], 256],\n          12054: [[21304], 256],\n          12055: [[21313], 256],\n          12056: [[21340], 256],\n          12057: [[21353], 256],\n          12058: [[21378], 256],\n          12059: [[21430], 256],\n          12060: [[21448], 256],\n          12061: [[21475], 256],\n          12062: [[22231], 256],\n          12063: [[22303], 256],\n          12064: [[22763], 256],\n          12065: [[22786], 256],\n          12066: [[22794], 256],\n          12067: [[22805], 256],\n          12068: [[22823], 256],\n          12069: [[22899], 256],\n          12070: [[23376], 256],\n          12071: [[23424], 256],\n          12072: [[23544], 256],\n          12073: [[23567], 256],\n          12074: [[23586], 256],\n          12075: [[23608], 256],\n          12076: [[23662], 256],\n          12077: [[23665], 256],\n          12078: [[24027], 256],\n          12079: [[24037], 256],\n          12080: [[24049], 256],\n          12081: [[24062], 256],\n          12082: [[24178], 256],\n          12083: [[24186], 256],\n          12084: [[24191], 256],\n          12085: [[24308], 256],\n          12086: [[24318], 256],\n          12087: [[24331], 256],\n          12088: [[24339], 256],\n          12089: [[24400], 256],\n          12090: [[24417], 256],\n          12091: [[24435], 256],\n          12092: [[24515], 256],\n          12093: [[25096], 256],\n          12094: [[25142], 256],\n          12095: [[25163], 256],\n          12096: [[25903], 256],\n          12097: [[25908], 256],\n          12098: [[25991], 256],\n          12099: [[26007], 256],\n          12100: [[26020], 256],\n          12101: [[26041], 256],\n          12102: [[26080], 256],\n          12103: [[26085], 256],\n          12104: [[26352], 256],\n          12105: [[26376], 256],\n          12106: [[26408], 256],\n          12107: [[27424], 256],\n          12108: [[27490], 256],\n          12109: [[27513], 256],\n          12110: [[27571], 256],\n          12111: [[27595], 256],\n          12112: [[27604], 256],\n          12113: [[27611], 256],\n          12114: [[27663], 256],\n          12115: [[27668], 256],\n          12116: [[27700], 256],\n          12117: [[28779], 256],\n          12118: [[29226], 256],\n          12119: [[29238], 256],\n          12120: [[29243], 256],\n          12121: [[29247], 256],\n          12122: [[29255], 256],\n          12123: [[29273], 256],\n          12124: [[29275], 256],\n          12125: [[29356], 256],\n          12126: [[29572], 256],\n          12127: [[29577], 256],\n          12128: [[29916], 256],\n          12129: [[29926], 256],\n          12130: [[29976], 256],\n          12131: [[29983], 256],\n          12132: [[29992], 256],\n          12133: [[30000], 256],\n          12134: [[30091], 256],\n          12135: [[30098], 256],\n          12136: [[30326], 256],\n          12137: [[30333], 256],\n          12138: [[30382], 256],\n          12139: [[30399], 256],\n          12140: [[30446], 256],\n          12141: [[30683], 256],\n          12142: [[30690], 256],\n          12143: [[30707], 256],\n          12144: [[31034], 256],\n          12145: [[31160], 256],\n          12146: [[31166], 256],\n          12147: [[31348], 256],\n          12148: [[31435], 256],\n          12149: [[31481], 256],\n          12150: [[31859], 256],\n          12151: [[31992], 256],\n          12152: [[32566], 256],\n          12153: [[32593], 256],\n          12154: [[32650], 256],\n          12155: [[32701], 256],\n          12156: [[32769], 256],\n          12157: [[32780], 256],\n          12158: [[32786], 256],\n          12159: [[32819], 256],\n          12160: [[32895], 256],\n          12161: [[32905], 256],\n          12162: [[33251], 256],\n          12163: [[33258], 256],\n          12164: [[33267], 256],\n          12165: [[33276], 256],\n          12166: [[33292], 256],\n          12167: [[33307], 256],\n          12168: [[33311], 256],\n          12169: [[33390], 256],\n          12170: [[33394], 256],\n          12171: [[33400], 256],\n          12172: [[34381], 256],\n          12173: [[34411], 256],\n          12174: [[34880], 256],\n          12175: [[34892], 256],\n          12176: [[34915], 256],\n          12177: [[35198], 256],\n          12178: [[35211], 256],\n          12179: [[35282], 256],\n          12180: [[35328], 256],\n          12181: [[35895], 256],\n          12182: [[35910], 256],\n          12183: [[35925], 256],\n          12184: [[35960], 256],\n          12185: [[35997], 256],\n          12186: [[36196], 256],\n          12187: [[36208], 256],\n          12188: [[36275], 256],\n          12189: [[36523], 256],\n          12190: [[36554], 256],\n          12191: [[36763], 256],\n          12192: [[36784], 256],\n          12193: [[36789], 256],\n          12194: [[37009], 256],\n          12195: [[37193], 256],\n          12196: [[37318], 256],\n          12197: [[37324], 256],\n          12198: [[37329], 256],\n          12199: [[38263], 256],\n          12200: [[38272], 256],\n          12201: [[38428], 256],\n          12202: [[38582], 256],\n          12203: [[38585], 256],\n          12204: [[38632], 256],\n          12205: [[38737], 256],\n          12206: [[38750], 256],\n          12207: [[38754], 256],\n          12208: [[38761], 256],\n          12209: [[38859], 256],\n          12210: [[38893], 256],\n          12211: [[38899], 256],\n          12212: [[38913], 256],\n          12213: [[39080], 256],\n          12214: [[39131], 256],\n          12215: [[39135], 256],\n          12216: [[39318], 256],\n          12217: [[39321], 256],\n          12218: [[39340], 256],\n          12219: [[39592], 256],\n          12220: [[39640], 256],\n          12221: [[39647], 256],\n          12222: [[39717], 256],\n          12223: [[39727], 256],\n          12224: [[39730], 256],\n          12225: [[39740], 256],\n          12226: [[39770], 256],\n          12227: [[40165], 256],\n          12228: [[40565], 256],\n          12229: [[40575], 256],\n          12230: [[40613], 256],\n          12231: [[40635], 256],\n          12232: [[40643], 256],\n          12233: [[40653], 256],\n          12234: [[40657], 256],\n          12235: [[40697], 256],\n          12236: [[40701], 256],\n          12237: [[40718], 256],\n          12238: [[40723], 256],\n          12239: [[40736], 256],\n          12240: [[40763], 256],\n          12241: [[40778], 256],\n          12242: [[40786], 256],\n          12243: [[40845], 256],\n          12244: [[40860], 256],\n          12245: [[40864], 256]\n        },\n        12288: {\n          12288: [[32], 256],\n          12330: [, 218],\n          12331: [, 228],\n          12332: [, 232],\n          12333: [, 222],\n          12334: [, 224],\n          12335: [, 224],\n          12342: [[12306], 256],\n          12344: [[21313], 256],\n          12345: [[21316], 256],\n          12346: [[21317], 256],\n          12358: [,, {\n            12441: 12436\n          }],\n          12363: [,, {\n            12441: 12364\n          }],\n          12364: [[12363, 12441]],\n          12365: [,, {\n            12441: 12366\n          }],\n          12366: [[12365, 12441]],\n          12367: [,, {\n            12441: 12368\n          }],\n          12368: [[12367, 12441]],\n          12369: [,, {\n            12441: 12370\n          }],\n          12370: [[12369, 12441]],\n          12371: [,, {\n            12441: 12372\n          }],\n          12372: [[12371, 12441]],\n          12373: [,, {\n            12441: 12374\n          }],\n          12374: [[12373, 12441]],\n          12375: [,, {\n            12441: 12376\n          }],\n          12376: [[12375, 12441]],\n          12377: [,, {\n            12441: 12378\n          }],\n          12378: [[12377, 12441]],\n          12379: [,, {\n            12441: 12380\n          }],\n          12380: [[12379, 12441]],\n          12381: [,, {\n            12441: 12382\n          }],\n          12382: [[12381, 12441]],\n          12383: [,, {\n            12441: 12384\n          }],\n          12384: [[12383, 12441]],\n          12385: [,, {\n            12441: 12386\n          }],\n          12386: [[12385, 12441]],\n          12388: [,, {\n            12441: 12389\n          }],\n          12389: [[12388, 12441]],\n          12390: [,, {\n            12441: 12391\n          }],\n          12391: [[12390, 12441]],\n          12392: [,, {\n            12441: 12393\n          }],\n          12393: [[12392, 12441]],\n          12399: [,, {\n            12441: 12400,\n            12442: 12401\n          }],\n          12400: [[12399, 12441]],\n          12401: [[12399, 12442]],\n          12402: [,, {\n            12441: 12403,\n            12442: 12404\n          }],\n          12403: [[12402, 12441]],\n          12404: [[12402, 12442]],\n          12405: [,, {\n            12441: 12406,\n            12442: 12407\n          }],\n          12406: [[12405, 12441]],\n          12407: [[12405, 12442]],\n          12408: [,, {\n            12441: 12409,\n            12442: 12410\n          }],\n          12409: [[12408, 12441]],\n          12410: [[12408, 12442]],\n          12411: [,, {\n            12441: 12412,\n            12442: 12413\n          }],\n          12412: [[12411, 12441]],\n          12413: [[12411, 12442]],\n          12436: [[12358, 12441]],\n          12441: [, 8],\n          12442: [, 8],\n          12443: [[32, 12441], 256],\n          12444: [[32, 12442], 256],\n          12445: [,, {\n            12441: 12446\n          }],\n          12446: [[12445, 12441]],\n          12447: [[12424, 12426], 256],\n          12454: [,, {\n            12441: 12532\n          }],\n          12459: [,, {\n            12441: 12460\n          }],\n          12460: [[12459, 12441]],\n          12461: [,, {\n            12441: 12462\n          }],\n          12462: [[12461, 12441]],\n          12463: [,, {\n            12441: 12464\n          }],\n          12464: [[12463, 12441]],\n          12465: [,, {\n            12441: 12466\n          }],\n          12466: [[12465, 12441]],\n          12467: [,, {\n            12441: 12468\n          }],\n          12468: [[12467, 12441]],\n          12469: [,, {\n            12441: 12470\n          }],\n          12470: [[12469, 12441]],\n          12471: [,, {\n            12441: 12472\n          }],\n          12472: [[12471, 12441]],\n          12473: [,, {\n            12441: 12474\n          }],\n          12474: [[12473, 12441]],\n          12475: [,, {\n            12441: 12476\n          }],\n          12476: [[12475, 12441]],\n          12477: [,, {\n            12441: 12478\n          }],\n          12478: [[12477, 12441]],\n          12479: [,, {\n            12441: 12480\n          }],\n          12480: [[12479, 12441]],\n          12481: [,, {\n            12441: 12482\n          }],\n          12482: [[12481, 12441]],\n          12484: [,, {\n            12441: 12485\n          }],\n          12485: [[12484, 12441]],\n          12486: [,, {\n            12441: 12487\n          }],\n          12487: [[12486, 12441]],\n          12488: [,, {\n            12441: 12489\n          }],\n          12489: [[12488, 12441]],\n          12495: [,, {\n            12441: 12496,\n            12442: 12497\n          }],\n          12496: [[12495, 12441]],\n          12497: [[12495, 12442]],\n          12498: [,, {\n            12441: 12499,\n            12442: 12500\n          }],\n          12499: [[12498, 12441]],\n          12500: [[12498, 12442]],\n          12501: [,, {\n            12441: 12502,\n            12442: 12503\n          }],\n          12502: [[12501, 12441]],\n          12503: [[12501, 12442]],\n          12504: [,, {\n            12441: 12505,\n            12442: 12506\n          }],\n          12505: [[12504, 12441]],\n          12506: [[12504, 12442]],\n          12507: [,, {\n            12441: 12508,\n            12442: 12509\n          }],\n          12508: [[12507, 12441]],\n          12509: [[12507, 12442]],\n          12527: [,, {\n            12441: 12535\n          }],\n          12528: [,, {\n            12441: 12536\n          }],\n          12529: [,, {\n            12441: 12537\n          }],\n          12530: [,, {\n            12441: 12538\n          }],\n          12532: [[12454, 12441]],\n          12535: [[12527, 12441]],\n          12536: [[12528, 12441]],\n          12537: [[12529, 12441]],\n          12538: [[12530, 12441]],\n          12541: [,, {\n            12441: 12542\n          }],\n          12542: [[12541, 12441]],\n          12543: [[12467, 12488], 256]\n        },\n        12544: {\n          12593: [[4352], 256],\n          12594: [[4353], 256],\n          12595: [[4522], 256],\n          12596: [[4354], 256],\n          12597: [[4524], 256],\n          12598: [[4525], 256],\n          12599: [[4355], 256],\n          12600: [[4356], 256],\n          12601: [[4357], 256],\n          12602: [[4528], 256],\n          12603: [[4529], 256],\n          12604: [[4530], 256],\n          12605: [[4531], 256],\n          12606: [[4532], 256],\n          12607: [[4533], 256],\n          12608: [[4378], 256],\n          12609: [[4358], 256],\n          12610: [[4359], 256],\n          12611: [[4360], 256],\n          12612: [[4385], 256],\n          12613: [[4361], 256],\n          12614: [[4362], 256],\n          12615: [[4363], 256],\n          12616: [[4364], 256],\n          12617: [[4365], 256],\n          12618: [[4366], 256],\n          12619: [[4367], 256],\n          12620: [[4368], 256],\n          12621: [[4369], 256],\n          12622: [[4370], 256],\n          12623: [[4449], 256],\n          12624: [[4450], 256],\n          12625: [[4451], 256],\n          12626: [[4452], 256],\n          12627: [[4453], 256],\n          12628: [[4454], 256],\n          12629: [[4455], 256],\n          12630: [[4456], 256],\n          12631: [[4457], 256],\n          12632: [[4458], 256],\n          12633: [[4459], 256],\n          12634: [[4460], 256],\n          12635: [[4461], 256],\n          12636: [[4462], 256],\n          12637: [[4463], 256],\n          12638: [[4464], 256],\n          12639: [[4465], 256],\n          12640: [[4466], 256],\n          12641: [[4467], 256],\n          12642: [[4468], 256],\n          12643: [[4469], 256],\n          12644: [[4448], 256],\n          12645: [[4372], 256],\n          12646: [[4373], 256],\n          12647: [[4551], 256],\n          12648: [[4552], 256],\n          12649: [[4556], 256],\n          12650: [[4558], 256],\n          12651: [[4563], 256],\n          12652: [[4567], 256],\n          12653: [[4569], 256],\n          12654: [[4380], 256],\n          12655: [[4573], 256],\n          12656: [[4575], 256],\n          12657: [[4381], 256],\n          12658: [[4382], 256],\n          12659: [[4384], 256],\n          12660: [[4386], 256],\n          12661: [[4387], 256],\n          12662: [[4391], 256],\n          12663: [[4393], 256],\n          12664: [[4395], 256],\n          12665: [[4396], 256],\n          12666: [[4397], 256],\n          12667: [[4398], 256],\n          12668: [[4399], 256],\n          12669: [[4402], 256],\n          12670: [[4406], 256],\n          12671: [[4416], 256],\n          12672: [[4423], 256],\n          12673: [[4428], 256],\n          12674: [[4593], 256],\n          12675: [[4594], 256],\n          12676: [[4439], 256],\n          12677: [[4440], 256],\n          12678: [[4441], 256],\n          12679: [[4484], 256],\n          12680: [[4485], 256],\n          12681: [[4488], 256],\n          12682: [[4497], 256],\n          12683: [[4498], 256],\n          12684: [[4500], 256],\n          12685: [[4510], 256],\n          12686: [[4513], 256],\n          12690: [[19968], 256],\n          12691: [[20108], 256],\n          12692: [[19977], 256],\n          12693: [[22235], 256],\n          12694: [[19978], 256],\n          12695: [[20013], 256],\n          12696: [[19979], 256],\n          12697: [[30002], 256],\n          12698: [[20057], 256],\n          12699: [[19993], 256],\n          12700: [[19969], 256],\n          12701: [[22825], 256],\n          12702: [[22320], 256],\n          12703: [[20154], 256]\n        },\n        12800: {\n          12800: [[40, 4352, 41], 256],\n          12801: [[40, 4354, 41], 256],\n          12802: [[40, 4355, 41], 256],\n          12803: [[40, 4357, 41], 256],\n          12804: [[40, 4358, 41], 256],\n          12805: [[40, 4359, 41], 256],\n          12806: [[40, 4361, 41], 256],\n          12807: [[40, 4363, 41], 256],\n          12808: [[40, 4364, 41], 256],\n          12809: [[40, 4366, 41], 256],\n          12810: [[40, 4367, 41], 256],\n          12811: [[40, 4368, 41], 256],\n          12812: [[40, 4369, 41], 256],\n          12813: [[40, 4370, 41], 256],\n          12814: [[40, 4352, 4449, 41], 256],\n          12815: [[40, 4354, 4449, 41], 256],\n          12816: [[40, 4355, 4449, 41], 256],\n          12817: [[40, 4357, 4449, 41], 256],\n          12818: [[40, 4358, 4449, 41], 256],\n          12819: [[40, 4359, 4449, 41], 256],\n          12820: [[40, 4361, 4449, 41], 256],\n          12821: [[40, 4363, 4449, 41], 256],\n          12822: [[40, 4364, 4449, 41], 256],\n          12823: [[40, 4366, 4449, 41], 256],\n          12824: [[40, 4367, 4449, 41], 256],\n          12825: [[40, 4368, 4449, 41], 256],\n          12826: [[40, 4369, 4449, 41], 256],\n          12827: [[40, 4370, 4449, 41], 256],\n          12828: [[40, 4364, 4462, 41], 256],\n          12829: [[40, 4363, 4457, 4364, 4453, 4523, 41], 256],\n          12830: [[40, 4363, 4457, 4370, 4462, 41], 256],\n          12832: [[40, 19968, 41], 256],\n          12833: [[40, 20108, 41], 256],\n          12834: [[40, 19977, 41], 256],\n          12835: [[40, 22235, 41], 256],\n          12836: [[40, 20116, 41], 256],\n          12837: [[40, 20845, 41], 256],\n          12838: [[40, 19971, 41], 256],\n          12839: [[40, 20843, 41], 256],\n          12840: [[40, 20061, 41], 256],\n          12841: [[40, 21313, 41], 256],\n          12842: [[40, 26376, 41], 256],\n          12843: [[40, 28779, 41], 256],\n          12844: [[40, 27700, 41], 256],\n          12845: [[40, 26408, 41], 256],\n          12846: [[40, 37329, 41], 256],\n          12847: [[40, 22303, 41], 256],\n          12848: [[40, 26085, 41], 256],\n          12849: [[40, 26666, 41], 256],\n          12850: [[40, 26377, 41], 256],\n          12851: [[40, 31038, 41], 256],\n          12852: [[40, 21517, 41], 256],\n          12853: [[40, 29305, 41], 256],\n          12854: [[40, 36001, 41], 256],\n          12855: [[40, 31069, 41], 256],\n          12856: [[40, 21172, 41], 256],\n          12857: [[40, 20195, 41], 256],\n          12858: [[40, 21628, 41], 256],\n          12859: [[40, 23398, 41], 256],\n          12860: [[40, 30435, 41], 256],\n          12861: [[40, 20225, 41], 256],\n          12862: [[40, 36039, 41], 256],\n          12863: [[40, 21332, 41], 256],\n          12864: [[40, 31085, 41], 256],\n          12865: [[40, 20241, 41], 256],\n          12866: [[40, 33258, 41], 256],\n          12867: [[40, 33267, 41], 256],\n          12868: [[21839], 256],\n          12869: [[24188], 256],\n          12870: [[25991], 256],\n          12871: [[31631], 256],\n          12880: [[80, 84, 69], 256],\n          12881: [[50, 49], 256],\n          12882: [[50, 50], 256],\n          12883: [[50, 51], 256],\n          12884: [[50, 52], 256],\n          12885: [[50, 53], 256],\n          12886: [[50, 54], 256],\n          12887: [[50, 55], 256],\n          12888: [[50, 56], 256],\n          12889: [[50, 57], 256],\n          12890: [[51, 48], 256],\n          12891: [[51, 49], 256],\n          12892: [[51, 50], 256],\n          12893: [[51, 51], 256],\n          12894: [[51, 52], 256],\n          12895: [[51, 53], 256],\n          12896: [[4352], 256],\n          12897: [[4354], 256],\n          12898: [[4355], 256],\n          12899: [[4357], 256],\n          12900: [[4358], 256],\n          12901: [[4359], 256],\n          12902: [[4361], 256],\n          12903: [[4363], 256],\n          12904: [[4364], 256],\n          12905: [[4366], 256],\n          12906: [[4367], 256],\n          12907: [[4368], 256],\n          12908: [[4369], 256],\n          12909: [[4370], 256],\n          12910: [[4352, 4449], 256],\n          12911: [[4354, 4449], 256],\n          12912: [[4355, 4449], 256],\n          12913: [[4357, 4449], 256],\n          12914: [[4358, 4449], 256],\n          12915: [[4359, 4449], 256],\n          12916: [[4361, 4449], 256],\n          12917: [[4363, 4449], 256],\n          12918: [[4364, 4449], 256],\n          12919: [[4366, 4449], 256],\n          12920: [[4367, 4449], 256],\n          12921: [[4368, 4449], 256],\n          12922: [[4369, 4449], 256],\n          12923: [[4370, 4449], 256],\n          12924: [[4366, 4449, 4535, 4352, 4457], 256],\n          12925: [[4364, 4462, 4363, 4468], 256],\n          12926: [[4363, 4462], 256],\n          12928: [[19968], 256],\n          12929: [[20108], 256],\n          12930: [[19977], 256],\n          12931: [[22235], 256],\n          12932: [[20116], 256],\n          12933: [[20845], 256],\n          12934: [[19971], 256],\n          12935: [[20843], 256],\n          12936: [[20061], 256],\n          12937: [[21313], 256],\n          12938: [[26376], 256],\n          12939: [[28779], 256],\n          12940: [[27700], 256],\n          12941: [[26408], 256],\n          12942: [[37329], 256],\n          12943: [[22303], 256],\n          12944: [[26085], 256],\n          12945: [[26666], 256],\n          12946: [[26377], 256],\n          12947: [[31038], 256],\n          12948: [[21517], 256],\n          12949: [[29305], 256],\n          12950: [[36001], 256],\n          12951: [[31069], 256],\n          12952: [[21172], 256],\n          12953: [[31192], 256],\n          12954: [[30007], 256],\n          12955: [[22899], 256],\n          12956: [[36969], 256],\n          12957: [[20778], 256],\n          12958: [[21360], 256],\n          12959: [[27880], 256],\n          12960: [[38917], 256],\n          12961: [[20241], 256],\n          12962: [[20889], 256],\n          12963: [[27491], 256],\n          12964: [[19978], 256],\n          12965: [[20013], 256],\n          12966: [[19979], 256],\n          12967: [[24038], 256],\n          12968: [[21491], 256],\n          12969: [[21307], 256],\n          12970: [[23447], 256],\n          12971: [[23398], 256],\n          12972: [[30435], 256],\n          12973: [[20225], 256],\n          12974: [[36039], 256],\n          12975: [[21332], 256],\n          12976: [[22812], 256],\n          12977: [[51, 54], 256],\n          12978: [[51, 55], 256],\n          12979: [[51, 56], 256],\n          12980: [[51, 57], 256],\n          12981: [[52, 48], 256],\n          12982: [[52, 49], 256],\n          12983: [[52, 50], 256],\n          12984: [[52, 51], 256],\n          12985: [[52, 52], 256],\n          12986: [[52, 53], 256],\n          12987: [[52, 54], 256],\n          12988: [[52, 55], 256],\n          12989: [[52, 56], 256],\n          12990: [[52, 57], 256],\n          12991: [[53, 48], 256],\n          12992: [[49, 26376], 256],\n          12993: [[50, 26376], 256],\n          12994: [[51, 26376], 256],\n          12995: [[52, 26376], 256],\n          12996: [[53, 26376], 256],\n          12997: [[54, 26376], 256],\n          12998: [[55, 26376], 256],\n          12999: [[56, 26376], 256],\n          13000: [[57, 26376], 256],\n          13001: [[49, 48, 26376], 256],\n          13002: [[49, 49, 26376], 256],\n          13003: [[49, 50, 26376], 256],\n          13004: [[72, 103], 256],\n          13005: [[101, 114, 103], 256],\n          13006: [[101, 86], 256],\n          13007: [[76, 84, 68], 256],\n          13008: [[12450], 256],\n          13009: [[12452], 256],\n          13010: [[12454], 256],\n          13011: [[12456], 256],\n          13012: [[12458], 256],\n          13013: [[12459], 256],\n          13014: [[12461], 256],\n          13015: [[12463], 256],\n          13016: [[12465], 256],\n          13017: [[12467], 256],\n          13018: [[12469], 256],\n          13019: [[12471], 256],\n          13020: [[12473], 256],\n          13021: [[12475], 256],\n          13022: [[12477], 256],\n          13023: [[12479], 256],\n          13024: [[12481], 256],\n          13025: [[12484], 256],\n          13026: [[12486], 256],\n          13027: [[12488], 256],\n          13028: [[12490], 256],\n          13029: [[12491], 256],\n          13030: [[12492], 256],\n          13031: [[12493], 256],\n          13032: [[12494], 256],\n          13033: [[12495], 256],\n          13034: [[12498], 256],\n          13035: [[12501], 256],\n          13036: [[12504], 256],\n          13037: [[12507], 256],\n          13038: [[12510], 256],\n          13039: [[12511], 256],\n          13040: [[12512], 256],\n          13041: [[12513], 256],\n          13042: [[12514], 256],\n          13043: [[12516], 256],\n          13044: [[12518], 256],\n          13045: [[12520], 256],\n          13046: [[12521], 256],\n          13047: [[12522], 256],\n          13048: [[12523], 256],\n          13049: [[12524], 256],\n          13050: [[12525], 256],\n          13051: [[12527], 256],\n          13052: [[12528], 256],\n          13053: [[12529], 256],\n          13054: [[12530], 256]\n        },\n        13056: {\n          13056: [[12450, 12497, 12540, 12488], 256],\n          13057: [[12450, 12523, 12501, 12449], 256],\n          13058: [[12450, 12531, 12506, 12450], 256],\n          13059: [[12450, 12540, 12523], 256],\n          13060: [[12452, 12491, 12531, 12464], 256],\n          13061: [[12452, 12531, 12481], 256],\n          13062: [[12454, 12457, 12531], 256],\n          13063: [[12456, 12473, 12463, 12540, 12489], 256],\n          13064: [[12456, 12540, 12459, 12540], 256],\n          13065: [[12458, 12531, 12473], 256],\n          13066: [[12458, 12540, 12512], 256],\n          13067: [[12459, 12452, 12522], 256],\n          13068: [[12459, 12521, 12483, 12488], 256],\n          13069: [[12459, 12525, 12522, 12540], 256],\n          13070: [[12460, 12525, 12531], 256],\n          13071: [[12460, 12531, 12510], 256],\n          13072: [[12462, 12460], 256],\n          13073: [[12462, 12491, 12540], 256],\n          13074: [[12461, 12517, 12522, 12540], 256],\n          13075: [[12462, 12523, 12480, 12540], 256],\n          13076: [[12461, 12525], 256],\n          13077: [[12461, 12525, 12464, 12521, 12512], 256],\n          13078: [[12461, 12525, 12513, 12540, 12488, 12523], 256],\n          13079: [[12461, 12525, 12527, 12483, 12488], 256],\n          13080: [[12464, 12521, 12512], 256],\n          13081: [[12464, 12521, 12512, 12488, 12531], 256],\n          13082: [[12463, 12523, 12476, 12452, 12525], 256],\n          13083: [[12463, 12525, 12540, 12493], 256],\n          13084: [[12465, 12540, 12473], 256],\n          13085: [[12467, 12523, 12490], 256],\n          13086: [[12467, 12540, 12509], 256],\n          13087: [[12469, 12452, 12463, 12523], 256],\n          13088: [[12469, 12531, 12481, 12540, 12512], 256],\n          13089: [[12471, 12522, 12531, 12464], 256],\n          13090: [[12475, 12531, 12481], 256],\n          13091: [[12475, 12531, 12488], 256],\n          13092: [[12480, 12540, 12473], 256],\n          13093: [[12487, 12471], 256],\n          13094: [[12489, 12523], 256],\n          13095: [[12488, 12531], 256],\n          13096: [[12490, 12494], 256],\n          13097: [[12494, 12483, 12488], 256],\n          13098: [[12495, 12452, 12484], 256],\n          13099: [[12497, 12540, 12475, 12531, 12488], 256],\n          13100: [[12497, 12540, 12484], 256],\n          13101: [[12496, 12540, 12524, 12523], 256],\n          13102: [[12500, 12450, 12473, 12488, 12523], 256],\n          13103: [[12500, 12463, 12523], 256],\n          13104: [[12500, 12467], 256],\n          13105: [[12499, 12523], 256],\n          13106: [[12501, 12449, 12521, 12483, 12489], 256],\n          13107: [[12501, 12451, 12540, 12488], 256],\n          13108: [[12502, 12483, 12471, 12455, 12523], 256],\n          13109: [[12501, 12521, 12531], 256],\n          13110: [[12504, 12463, 12479, 12540, 12523], 256],\n          13111: [[12506, 12477], 256],\n          13112: [[12506, 12491, 12498], 256],\n          13113: [[12504, 12523, 12484], 256],\n          13114: [[12506, 12531, 12473], 256],\n          13115: [[12506, 12540, 12472], 256],\n          13116: [[12505, 12540, 12479], 256],\n          13117: [[12509, 12452, 12531, 12488], 256],\n          13118: [[12508, 12523, 12488], 256],\n          13119: [[12507, 12531], 256],\n          13120: [[12509, 12531, 12489], 256],\n          13121: [[12507, 12540, 12523], 256],\n          13122: [[12507, 12540, 12531], 256],\n          13123: [[12510, 12452, 12463, 12525], 256],\n          13124: [[12510, 12452, 12523], 256],\n          13125: [[12510, 12483, 12495], 256],\n          13126: [[12510, 12523, 12463], 256],\n          13127: [[12510, 12531, 12471, 12519, 12531], 256],\n          13128: [[12511, 12463, 12525, 12531], 256],\n          13129: [[12511, 12522], 256],\n          13130: [[12511, 12522, 12496, 12540, 12523], 256],\n          13131: [[12513, 12460], 256],\n          13132: [[12513, 12460, 12488, 12531], 256],\n          13133: [[12513, 12540, 12488, 12523], 256],\n          13134: [[12516, 12540, 12489], 256],\n          13135: [[12516, 12540, 12523], 256],\n          13136: [[12518, 12450, 12531], 256],\n          13137: [[12522, 12483, 12488, 12523], 256],\n          13138: [[12522, 12521], 256],\n          13139: [[12523, 12500, 12540], 256],\n          13140: [[12523, 12540, 12502, 12523], 256],\n          13141: [[12524, 12512], 256],\n          13142: [[12524, 12531, 12488, 12466, 12531], 256],\n          13143: [[12527, 12483, 12488], 256],\n          13144: [[48, 28857], 256],\n          13145: [[49, 28857], 256],\n          13146: [[50, 28857], 256],\n          13147: [[51, 28857], 256],\n          13148: [[52, 28857], 256],\n          13149: [[53, 28857], 256],\n          13150: [[54, 28857], 256],\n          13151: [[55, 28857], 256],\n          13152: [[56, 28857], 256],\n          13153: [[57, 28857], 256],\n          13154: [[49, 48, 28857], 256],\n          13155: [[49, 49, 28857], 256],\n          13156: [[49, 50, 28857], 256],\n          13157: [[49, 51, 28857], 256],\n          13158: [[49, 52, 28857], 256],\n          13159: [[49, 53, 28857], 256],\n          13160: [[49, 54, 28857], 256],\n          13161: [[49, 55, 28857], 256],\n          13162: [[49, 56, 28857], 256],\n          13163: [[49, 57, 28857], 256],\n          13164: [[50, 48, 28857], 256],\n          13165: [[50, 49, 28857], 256],\n          13166: [[50, 50, 28857], 256],\n          13167: [[50, 51, 28857], 256],\n          13168: [[50, 52, 28857], 256],\n          13169: [[104, 80, 97], 256],\n          13170: [[100, 97], 256],\n          13171: [[65, 85], 256],\n          13172: [[98, 97, 114], 256],\n          13173: [[111, 86], 256],\n          13174: [[112, 99], 256],\n          13175: [[100, 109], 256],\n          13176: [[100, 109, 178], 256],\n          13177: [[100, 109, 179], 256],\n          13178: [[73, 85], 256],\n          13179: [[24179, 25104], 256],\n          13180: [[26157, 21644], 256],\n          13181: [[22823, 27491], 256],\n          13182: [[26126, 27835], 256],\n          13183: [[26666, 24335, 20250, 31038], 256],\n          13184: [[112, 65], 256],\n          13185: [[110, 65], 256],\n          13186: [[956, 65], 256],\n          13187: [[109, 65], 256],\n          13188: [[107, 65], 256],\n          13189: [[75, 66], 256],\n          13190: [[77, 66], 256],\n          13191: [[71, 66], 256],\n          13192: [[99, 97, 108], 256],\n          13193: [[107, 99, 97, 108], 256],\n          13194: [[112, 70], 256],\n          13195: [[110, 70], 256],\n          13196: [[956, 70], 256],\n          13197: [[956, 103], 256],\n          13198: [[109, 103], 256],\n          13199: [[107, 103], 256],\n          13200: [[72, 122], 256],\n          13201: [[107, 72, 122], 256],\n          13202: [[77, 72, 122], 256],\n          13203: [[71, 72, 122], 256],\n          13204: [[84, 72, 122], 256],\n          13205: [[956, 8467], 256],\n          13206: [[109, 8467], 256],\n          13207: [[100, 8467], 256],\n          13208: [[107, 8467], 256],\n          13209: [[102, 109], 256],\n          13210: [[110, 109], 256],\n          13211: [[956, 109], 256],\n          13212: [[109, 109], 256],\n          13213: [[99, 109], 256],\n          13214: [[107, 109], 256],\n          13215: [[109, 109, 178], 256],\n          13216: [[99, 109, 178], 256],\n          13217: [[109, 178], 256],\n          13218: [[107, 109, 178], 256],\n          13219: [[109, 109, 179], 256],\n          13220: [[99, 109, 179], 256],\n          13221: [[109, 179], 256],\n          13222: [[107, 109, 179], 256],\n          13223: [[109, 8725, 115], 256],\n          13224: [[109, 8725, 115, 178], 256],\n          13225: [[80, 97], 256],\n          13226: [[107, 80, 97], 256],\n          13227: [[77, 80, 97], 256],\n          13228: [[71, 80, 97], 256],\n          13229: [[114, 97, 100], 256],\n          13230: [[114, 97, 100, 8725, 115], 256],\n          13231: [[114, 97, 100, 8725, 115, 178], 256],\n          13232: [[112, 115], 256],\n          13233: [[110, 115], 256],\n          13234: [[956, 115], 256],\n          13235: [[109, 115], 256],\n          13236: [[112, 86], 256],\n          13237: [[110, 86], 256],\n          13238: [[956, 86], 256],\n          13239: [[109, 86], 256],\n          13240: [[107, 86], 256],\n          13241: [[77, 86], 256],\n          13242: [[112, 87], 256],\n          13243: [[110, 87], 256],\n          13244: [[956, 87], 256],\n          13245: [[109, 87], 256],\n          13246: [[107, 87], 256],\n          13247: [[77, 87], 256],\n          13248: [[107, 937], 256],\n          13249: [[77, 937], 256],\n          13250: [[97, 46, 109, 46], 256],\n          13251: [[66, 113], 256],\n          13252: [[99, 99], 256],\n          13253: [[99, 100], 256],\n          13254: [[67, 8725, 107, 103], 256],\n          13255: [[67, 111, 46], 256],\n          13256: [[100, 66], 256],\n          13257: [[71, 121], 256],\n          13258: [[104, 97], 256],\n          13259: [[72, 80], 256],\n          13260: [[105, 110], 256],\n          13261: [[75, 75], 256],\n          13262: [[75, 77], 256],\n          13263: [[107, 116], 256],\n          13264: [[108, 109], 256],\n          13265: [[108, 110], 256],\n          13266: [[108, 111, 103], 256],\n          13267: [[108, 120], 256],\n          13268: [[109, 98], 256],\n          13269: [[109, 105, 108], 256],\n          13270: [[109, 111, 108], 256],\n          13271: [[80, 72], 256],\n          13272: [[112, 46, 109, 46], 256],\n          13273: [[80, 80, 77], 256],\n          13274: [[80, 82], 256],\n          13275: [[115, 114], 256],\n          13276: [[83, 118], 256],\n          13277: [[87, 98], 256],\n          13278: [[86, 8725, 109], 256],\n          13279: [[65, 8725, 109], 256],\n          13280: [[49, 26085], 256],\n          13281: [[50, 26085], 256],\n          13282: [[51, 26085], 256],\n          13283: [[52, 26085], 256],\n          13284: [[53, 26085], 256],\n          13285: [[54, 26085], 256],\n          13286: [[55, 26085], 256],\n          13287: [[56, 26085], 256],\n          13288: [[57, 26085], 256],\n          13289: [[49, 48, 26085], 256],\n          13290: [[49, 49, 26085], 256],\n          13291: [[49, 50, 26085], 256],\n          13292: [[49, 51, 26085], 256],\n          13293: [[49, 52, 26085], 256],\n          13294: [[49, 53, 26085], 256],\n          13295: [[49, 54, 26085], 256],\n          13296: [[49, 55, 26085], 256],\n          13297: [[49, 56, 26085], 256],\n          13298: [[49, 57, 26085], 256],\n          13299: [[50, 48, 26085], 256],\n          13300: [[50, 49, 26085], 256],\n          13301: [[50, 50, 26085], 256],\n          13302: [[50, 51, 26085], 256],\n          13303: [[50, 52, 26085], 256],\n          13304: [[50, 53, 26085], 256],\n          13305: [[50, 54, 26085], 256],\n          13306: [[50, 55, 26085], 256],\n          13307: [[50, 56, 26085], 256],\n          13308: [[50, 57, 26085], 256],\n          13309: [[51, 48, 26085], 256],\n          13310: [[51, 49, 26085], 256],\n          13311: [[103, 97, 108], 256]\n        },\n        27136: {\n          92912: [, 1],\n          92913: [, 1],\n          92914: [, 1],\n          92915: [, 1],\n          92916: [, 1]\n        },\n        27392: {\n          92976: [, 230],\n          92977: [, 230],\n          92978: [, 230],\n          92979: [, 230],\n          92980: [, 230],\n          92981: [, 230],\n          92982: [, 230]\n        },\n        42496: {\n          42607: [, 230],\n          42612: [, 230],\n          42613: [, 230],\n          42614: [, 230],\n          42615: [, 230],\n          42616: [, 230],\n          42617: [, 230],\n          42618: [, 230],\n          42619: [, 230],\n          42620: [, 230],\n          42621: [, 230],\n          42652: [[1098], 256],\n          42653: [[1100], 256],\n          42655: [, 230],\n          42736: [, 230],\n          42737: [, 230]\n        },\n        42752: {\n          42864: [[42863], 256],\n          43000: [[294], 256],\n          43001: [[339], 256]\n        },\n        43008: {\n          43014: [, 9],\n          43204: [, 9],\n          43232: [, 230],\n          43233: [, 230],\n          43234: [, 230],\n          43235: [, 230],\n          43236: [, 230],\n          43237: [, 230],\n          43238: [, 230],\n          43239: [, 230],\n          43240: [, 230],\n          43241: [, 230],\n          43242: [, 230],\n          43243: [, 230],\n          43244: [, 230],\n          43245: [, 230],\n          43246: [, 230],\n          43247: [, 230],\n          43248: [, 230],\n          43249: [, 230]\n        },\n        43264: {\n          43307: [, 220],\n          43308: [, 220],\n          43309: [, 220],\n          43347: [, 9],\n          43443: [, 7],\n          43456: [, 9]\n        },\n        43520: {\n          43696: [, 230],\n          43698: [, 230],\n          43699: [, 230],\n          43700: [, 220],\n          43703: [, 230],\n          43704: [, 230],\n          43710: [, 230],\n          43711: [, 230],\n          43713: [, 230],\n          43766: [, 9]\n        },\n        43776: {\n          43868: [[42791], 256],\n          43869: [[43831], 256],\n          43870: [[619], 256],\n          43871: [[43858], 256],\n          44013: [, 9]\n        },\n        48128: {\n          113822: [, 1]\n        },\n        53504: {\n          119134: [[119127, 119141], 512],\n          119135: [[119128, 119141], 512],\n          119136: [[119135, 119150], 512],\n          119137: [[119135, 119151], 512],\n          119138: [[119135, 119152], 512],\n          119139: [[119135, 119153], 512],\n          119140: [[119135, 119154], 512],\n          119141: [, 216],\n          119142: [, 216],\n          119143: [, 1],\n          119144: [, 1],\n          119145: [, 1],\n          119149: [, 226],\n          119150: [, 216],\n          119151: [, 216],\n          119152: [, 216],\n          119153: [, 216],\n          119154: [, 216],\n          119163: [, 220],\n          119164: [, 220],\n          119165: [, 220],\n          119166: [, 220],\n          119167: [, 220],\n          119168: [, 220],\n          119169: [, 220],\n          119170: [, 220],\n          119173: [, 230],\n          119174: [, 230],\n          119175: [, 230],\n          119176: [, 230],\n          119177: [, 230],\n          119178: [, 220],\n          119179: [, 220],\n          119210: [, 230],\n          119211: [, 230],\n          119212: [, 230],\n          119213: [, 230],\n          119227: [[119225, 119141], 512],\n          119228: [[119226, 119141], 512],\n          119229: [[119227, 119150], 512],\n          119230: [[119228, 119150], 512],\n          119231: [[119227, 119151], 512],\n          119232: [[119228, 119151], 512]\n        },\n        53760: {\n          119362: [, 230],\n          119363: [, 230],\n          119364: [, 230]\n        },\n        54272: {\n          119808: [[65], 256],\n          119809: [[66], 256],\n          119810: [[67], 256],\n          119811: [[68], 256],\n          119812: [[69], 256],\n          119813: [[70], 256],\n          119814: [[71], 256],\n          119815: [[72], 256],\n          119816: [[73], 256],\n          119817: [[74], 256],\n          119818: [[75], 256],\n          119819: [[76], 256],\n          119820: [[77], 256],\n          119821: [[78], 256],\n          119822: [[79], 256],\n          119823: [[80], 256],\n          119824: [[81], 256],\n          119825: [[82], 256],\n          119826: [[83], 256],\n          119827: [[84], 256],\n          119828: [[85], 256],\n          119829: [[86], 256],\n          119830: [[87], 256],\n          119831: [[88], 256],\n          119832: [[89], 256],\n          119833: [[90], 256],\n          119834: [[97], 256],\n          119835: [[98], 256],\n          119836: [[99], 256],\n          119837: [[100], 256],\n          119838: [[101], 256],\n          119839: [[102], 256],\n          119840: [[103], 256],\n          119841: [[104], 256],\n          119842: [[105], 256],\n          119843: [[106], 256],\n          119844: [[107], 256],\n          119845: [[108], 256],\n          119846: [[109], 256],\n          119847: [[110], 256],\n          119848: [[111], 256],\n          119849: [[112], 256],\n          119850: [[113], 256],\n          119851: [[114], 256],\n          119852: [[115], 256],\n          119853: [[116], 256],\n          119854: [[117], 256],\n          119855: [[118], 256],\n          119856: [[119], 256],\n          119857: [[120], 256],\n          119858: [[121], 256],\n          119859: [[122], 256],\n          119860: [[65], 256],\n          119861: [[66], 256],\n          119862: [[67], 256],\n          119863: [[68], 256],\n          119864: [[69], 256],\n          119865: [[70], 256],\n          119866: [[71], 256],\n          119867: [[72], 256],\n          119868: [[73], 256],\n          119869: [[74], 256],\n          119870: [[75], 256],\n          119871: [[76], 256],\n          119872: [[77], 256],\n          119873: [[78], 256],\n          119874: [[79], 256],\n          119875: [[80], 256],\n          119876: [[81], 256],\n          119877: [[82], 256],\n          119878: [[83], 256],\n          119879: [[84], 256],\n          119880: [[85], 256],\n          119881: [[86], 256],\n          119882: [[87], 256],\n          119883: [[88], 256],\n          119884: [[89], 256],\n          119885: [[90], 256],\n          119886: [[97], 256],\n          119887: [[98], 256],\n          119888: [[99], 256],\n          119889: [[100], 256],\n          119890: [[101], 256],\n          119891: [[102], 256],\n          119892: [[103], 256],\n          119894: [[105], 256],\n          119895: [[106], 256],\n          119896: [[107], 256],\n          119897: [[108], 256],\n          119898: [[109], 256],\n          119899: [[110], 256],\n          119900: [[111], 256],\n          119901: [[112], 256],\n          119902: [[113], 256],\n          119903: [[114], 256],\n          119904: [[115], 256],\n          119905: [[116], 256],\n          119906: [[117], 256],\n          119907: [[118], 256],\n          119908: [[119], 256],\n          119909: [[120], 256],\n          119910: [[121], 256],\n          119911: [[122], 256],\n          119912: [[65], 256],\n          119913: [[66], 256],\n          119914: [[67], 256],\n          119915: [[68], 256],\n          119916: [[69], 256],\n          119917: [[70], 256],\n          119918: [[71], 256],\n          119919: [[72], 256],\n          119920: [[73], 256],\n          119921: [[74], 256],\n          119922: [[75], 256],\n          119923: [[76], 256],\n          119924: [[77], 256],\n          119925: [[78], 256],\n          119926: [[79], 256],\n          119927: [[80], 256],\n          119928: [[81], 256],\n          119929: [[82], 256],\n          119930: [[83], 256],\n          119931: [[84], 256],\n          119932: [[85], 256],\n          119933: [[86], 256],\n          119934: [[87], 256],\n          119935: [[88], 256],\n          119936: [[89], 256],\n          119937: [[90], 256],\n          119938: [[97], 256],\n          119939: [[98], 256],\n          119940: [[99], 256],\n          119941: [[100], 256],\n          119942: [[101], 256],\n          119943: [[102], 256],\n          119944: [[103], 256],\n          119945: [[104], 256],\n          119946: [[105], 256],\n          119947: [[106], 256],\n          119948: [[107], 256],\n          119949: [[108], 256],\n          119950: [[109], 256],\n          119951: [[110], 256],\n          119952: [[111], 256],\n          119953: [[112], 256],\n          119954: [[113], 256],\n          119955: [[114], 256],\n          119956: [[115], 256],\n          119957: [[116], 256],\n          119958: [[117], 256],\n          119959: [[118], 256],\n          119960: [[119], 256],\n          119961: [[120], 256],\n          119962: [[121], 256],\n          119963: [[122], 256],\n          119964: [[65], 256],\n          119966: [[67], 256],\n          119967: [[68], 256],\n          119970: [[71], 256],\n          119973: [[74], 256],\n          119974: [[75], 256],\n          119977: [[78], 256],\n          119978: [[79], 256],\n          119979: [[80], 256],\n          119980: [[81], 256],\n          119982: [[83], 256],\n          119983: [[84], 256],\n          119984: [[85], 256],\n          119985: [[86], 256],\n          119986: [[87], 256],\n          119987: [[88], 256],\n          119988: [[89], 256],\n          119989: [[90], 256],\n          119990: [[97], 256],\n          119991: [[98], 256],\n          119992: [[99], 256],\n          119993: [[100], 256],\n          119995: [[102], 256],\n          119997: [[104], 256],\n          119998: [[105], 256],\n          119999: [[106], 256],\n          120000: [[107], 256],\n          120001: [[108], 256],\n          120002: [[109], 256],\n          120003: [[110], 256],\n          120005: [[112], 256],\n          120006: [[113], 256],\n          120007: [[114], 256],\n          120008: [[115], 256],\n          120009: [[116], 256],\n          120010: [[117], 256],\n          120011: [[118], 256],\n          120012: [[119], 256],\n          120013: [[120], 256],\n          120014: [[121], 256],\n          120015: [[122], 256],\n          120016: [[65], 256],\n          120017: [[66], 256],\n          120018: [[67], 256],\n          120019: [[68], 256],\n          120020: [[69], 256],\n          120021: [[70], 256],\n          120022: [[71], 256],\n          120023: [[72], 256],\n          120024: [[73], 256],\n          120025: [[74], 256],\n          120026: [[75], 256],\n          120027: [[76], 256],\n          120028: [[77], 256],\n          120029: [[78], 256],\n          120030: [[79], 256],\n          120031: [[80], 256],\n          120032: [[81], 256],\n          120033: [[82], 256],\n          120034: [[83], 256],\n          120035: [[84], 256],\n          120036: [[85], 256],\n          120037: [[86], 256],\n          120038: [[87], 256],\n          120039: [[88], 256],\n          120040: [[89], 256],\n          120041: [[90], 256],\n          120042: [[97], 256],\n          120043: [[98], 256],\n          120044: [[99], 256],\n          120045: [[100], 256],\n          120046: [[101], 256],\n          120047: [[102], 256],\n          120048: [[103], 256],\n          120049: [[104], 256],\n          120050: [[105], 256],\n          120051: [[106], 256],\n          120052: [[107], 256],\n          120053: [[108], 256],\n          120054: [[109], 256],\n          120055: [[110], 256],\n          120056: [[111], 256],\n          120057: [[112], 256],\n          120058: [[113], 256],\n          120059: [[114], 256],\n          120060: [[115], 256],\n          120061: [[116], 256],\n          120062: [[117], 256],\n          120063: [[118], 256]\n        },\n        54528: {\n          120064: [[119], 256],\n          120065: [[120], 256],\n          120066: [[121], 256],\n          120067: [[122], 256],\n          120068: [[65], 256],\n          120069: [[66], 256],\n          120071: [[68], 256],\n          120072: [[69], 256],\n          120073: [[70], 256],\n          120074: [[71], 256],\n          120077: [[74], 256],\n          120078: [[75], 256],\n          120079: [[76], 256],\n          120080: [[77], 256],\n          120081: [[78], 256],\n          120082: [[79], 256],\n          120083: [[80], 256],\n          120084: [[81], 256],\n          120086: [[83], 256],\n          120087: [[84], 256],\n          120088: [[85], 256],\n          120089: [[86], 256],\n          120090: [[87], 256],\n          120091: [[88], 256],\n          120092: [[89], 256],\n          120094: [[97], 256],\n          120095: [[98], 256],\n          120096: [[99], 256],\n          120097: [[100], 256],\n          120098: [[101], 256],\n          120099: [[102], 256],\n          120100: [[103], 256],\n          120101: [[104], 256],\n          120102: [[105], 256],\n          120103: [[106], 256],\n          120104: [[107], 256],\n          120105: [[108], 256],\n          120106: [[109], 256],\n          120107: [[110], 256],\n          120108: [[111], 256],\n          120109: [[112], 256],\n          120110: [[113], 256],\n          120111: [[114], 256],\n          120112: [[115], 256],\n          120113: [[116], 256],\n          120114: [[117], 256],\n          120115: [[118], 256],\n          120116: [[119], 256],\n          120117: [[120], 256],\n          120118: [[121], 256],\n          120119: [[122], 256],\n          120120: [[65], 256],\n          120121: [[66], 256],\n          120123: [[68], 256],\n          120124: [[69], 256],\n          120125: [[70], 256],\n          120126: [[71], 256],\n          120128: [[73], 256],\n          120129: [[74], 256],\n          120130: [[75], 256],\n          120131: [[76], 256],\n          120132: [[77], 256],\n          120134: [[79], 256],\n          120138: [[83], 256],\n          120139: [[84], 256],\n          120140: [[85], 256],\n          120141: [[86], 256],\n          120142: [[87], 256],\n          120143: [[88], 256],\n          120144: [[89], 256],\n          120146: [[97], 256],\n          120147: [[98], 256],\n          120148: [[99], 256],\n          120149: [[100], 256],\n          120150: [[101], 256],\n          120151: [[102], 256],\n          120152: [[103], 256],\n          120153: [[104], 256],\n          120154: [[105], 256],\n          120155: [[106], 256],\n          120156: [[107], 256],\n          120157: [[108], 256],\n          120158: [[109], 256],\n          120159: [[110], 256],\n          120160: [[111], 256],\n          120161: [[112], 256],\n          120162: [[113], 256],\n          120163: [[114], 256],\n          120164: [[115], 256],\n          120165: [[116], 256],\n          120166: [[117], 256],\n          120167: [[118], 256],\n          120168: [[119], 256],\n          120169: [[120], 256],\n          120170: [[121], 256],\n          120171: [[122], 256],\n          120172: [[65], 256],\n          120173: [[66], 256],\n          120174: [[67], 256],\n          120175: [[68], 256],\n          120176: [[69], 256],\n          120177: [[70], 256],\n          120178: [[71], 256],\n          120179: [[72], 256],\n          120180: [[73], 256],\n          120181: [[74], 256],\n          120182: [[75], 256],\n          120183: [[76], 256],\n          120184: [[77], 256],\n          120185: [[78], 256],\n          120186: [[79], 256],\n          120187: [[80], 256],\n          120188: [[81], 256],\n          120189: [[82], 256],\n          120190: [[83], 256],\n          120191: [[84], 256],\n          120192: [[85], 256],\n          120193: [[86], 256],\n          120194: [[87], 256],\n          120195: [[88], 256],\n          120196: [[89], 256],\n          120197: [[90], 256],\n          120198: [[97], 256],\n          120199: [[98], 256],\n          120200: [[99], 256],\n          120201: [[100], 256],\n          120202: [[101], 256],\n          120203: [[102], 256],\n          120204: [[103], 256],\n          120205: [[104], 256],\n          120206: [[105], 256],\n          120207: [[106], 256],\n          120208: [[107], 256],\n          120209: [[108], 256],\n          120210: [[109], 256],\n          120211: [[110], 256],\n          120212: [[111], 256],\n          120213: [[112], 256],\n          120214: [[113], 256],\n          120215: [[114], 256],\n          120216: [[115], 256],\n          120217: [[116], 256],\n          120218: [[117], 256],\n          120219: [[118], 256],\n          120220: [[119], 256],\n          120221: [[120], 256],\n          120222: [[121], 256],\n          120223: [[122], 256],\n          120224: [[65], 256],\n          120225: [[66], 256],\n          120226: [[67], 256],\n          120227: [[68], 256],\n          120228: [[69], 256],\n          120229: [[70], 256],\n          120230: [[71], 256],\n          120231: [[72], 256],\n          120232: [[73], 256],\n          120233: [[74], 256],\n          120234: [[75], 256],\n          120235: [[76], 256],\n          120236: [[77], 256],\n          120237: [[78], 256],\n          120238: [[79], 256],\n          120239: [[80], 256],\n          120240: [[81], 256],\n          120241: [[82], 256],\n          120242: [[83], 256],\n          120243: [[84], 256],\n          120244: [[85], 256],\n          120245: [[86], 256],\n          120246: [[87], 256],\n          120247: [[88], 256],\n          120248: [[89], 256],\n          120249: [[90], 256],\n          120250: [[97], 256],\n          120251: [[98], 256],\n          120252: [[99], 256],\n          120253: [[100], 256],\n          120254: [[101], 256],\n          120255: [[102], 256],\n          120256: [[103], 256],\n          120257: [[104], 256],\n          120258: [[105], 256],\n          120259: [[106], 256],\n          120260: [[107], 256],\n          120261: [[108], 256],\n          120262: [[109], 256],\n          120263: [[110], 256],\n          120264: [[111], 256],\n          120265: [[112], 256],\n          120266: [[113], 256],\n          120267: [[114], 256],\n          120268: [[115], 256],\n          120269: [[116], 256],\n          120270: [[117], 256],\n          120271: [[118], 256],\n          120272: [[119], 256],\n          120273: [[120], 256],\n          120274: [[121], 256],\n          120275: [[122], 256],\n          120276: [[65], 256],\n          120277: [[66], 256],\n          120278: [[67], 256],\n          120279: [[68], 256],\n          120280: [[69], 256],\n          120281: [[70], 256],\n          120282: [[71], 256],\n          120283: [[72], 256],\n          120284: [[73], 256],\n          120285: [[74], 256],\n          120286: [[75], 256],\n          120287: [[76], 256],\n          120288: [[77], 256],\n          120289: [[78], 256],\n          120290: [[79], 256],\n          120291: [[80], 256],\n          120292: [[81], 256],\n          120293: [[82], 256],\n          120294: [[83], 256],\n          120295: [[84], 256],\n          120296: [[85], 256],\n          120297: [[86], 256],\n          120298: [[87], 256],\n          120299: [[88], 256],\n          120300: [[89], 256],\n          120301: [[90], 256],\n          120302: [[97], 256],\n          120303: [[98], 256],\n          120304: [[99], 256],\n          120305: [[100], 256],\n          120306: [[101], 256],\n          120307: [[102], 256],\n          120308: [[103], 256],\n          120309: [[104], 256],\n          120310: [[105], 256],\n          120311: [[106], 256],\n          120312: [[107], 256],\n          120313: [[108], 256],\n          120314: [[109], 256],\n          120315: [[110], 256],\n          120316: [[111], 256],\n          120317: [[112], 256],\n          120318: [[113], 256],\n          120319: [[114], 256]\n        },\n        54784: {\n          120320: [[115], 256],\n          120321: [[116], 256],\n          120322: [[117], 256],\n          120323: [[118], 256],\n          120324: [[119], 256],\n          120325: [[120], 256],\n          120326: [[121], 256],\n          120327: [[122], 256],\n          120328: [[65], 256],\n          120329: [[66], 256],\n          120330: [[67], 256],\n          120331: [[68], 256],\n          120332: [[69], 256],\n          120333: [[70], 256],\n          120334: [[71], 256],\n          120335: [[72], 256],\n          120336: [[73], 256],\n          120337: [[74], 256],\n          120338: [[75], 256],\n          120339: [[76], 256],\n          120340: [[77], 256],\n          120341: [[78], 256],\n          120342: [[79], 256],\n          120343: [[80], 256],\n          120344: [[81], 256],\n          120345: [[82], 256],\n          120346: [[83], 256],\n          120347: [[84], 256],\n          120348: [[85], 256],\n          120349: [[86], 256],\n          120350: [[87], 256],\n          120351: [[88], 256],\n          120352: [[89], 256],\n          120353: [[90], 256],\n          120354: [[97], 256],\n          120355: [[98], 256],\n          120356: [[99], 256],\n          120357: [[100], 256],\n          120358: [[101], 256],\n          120359: [[102], 256],\n          120360: [[103], 256],\n          120361: [[104], 256],\n          120362: [[105], 256],\n          120363: [[106], 256],\n          120364: [[107], 256],\n          120365: [[108], 256],\n          120366: [[109], 256],\n          120367: [[110], 256],\n          120368: [[111], 256],\n          120369: [[112], 256],\n          120370: [[113], 256],\n          120371: [[114], 256],\n          120372: [[115], 256],\n          120373: [[116], 256],\n          120374: [[117], 256],\n          120375: [[118], 256],\n          120376: [[119], 256],\n          120377: [[120], 256],\n          120378: [[121], 256],\n          120379: [[122], 256],\n          120380: [[65], 256],\n          120381: [[66], 256],\n          120382: [[67], 256],\n          120383: [[68], 256],\n          120384: [[69], 256],\n          120385: [[70], 256],\n          120386: [[71], 256],\n          120387: [[72], 256],\n          120388: [[73], 256],\n          120389: [[74], 256],\n          120390: [[75], 256],\n          120391: [[76], 256],\n          120392: [[77], 256],\n          120393: [[78], 256],\n          120394: [[79], 256],\n          120395: [[80], 256],\n          120396: [[81], 256],\n          120397: [[82], 256],\n          120398: [[83], 256],\n          120399: [[84], 256],\n          120400: [[85], 256],\n          120401: [[86], 256],\n          120402: [[87], 256],\n          120403: [[88], 256],\n          120404: [[89], 256],\n          120405: [[90], 256],\n          120406: [[97], 256],\n          120407: [[98], 256],\n          120408: [[99], 256],\n          120409: [[100], 256],\n          120410: [[101], 256],\n          120411: [[102], 256],\n          120412: [[103], 256],\n          120413: [[104], 256],\n          120414: [[105], 256],\n          120415: [[106], 256],\n          120416: [[107], 256],\n          120417: [[108], 256],\n          120418: [[109], 256],\n          120419: [[110], 256],\n          120420: [[111], 256],\n          120421: [[112], 256],\n          120422: [[113], 256],\n          120423: [[114], 256],\n          120424: [[115], 256],\n          120425: [[116], 256],\n          120426: [[117], 256],\n          120427: [[118], 256],\n          120428: [[119], 256],\n          120429: [[120], 256],\n          120430: [[121], 256],\n          120431: [[122], 256],\n          120432: [[65], 256],\n          120433: [[66], 256],\n          120434: [[67], 256],\n          120435: [[68], 256],\n          120436: [[69], 256],\n          120437: [[70], 256],\n          120438: [[71], 256],\n          120439: [[72], 256],\n          120440: [[73], 256],\n          120441: [[74], 256],\n          120442: [[75], 256],\n          120443: [[76], 256],\n          120444: [[77], 256],\n          120445: [[78], 256],\n          120446: [[79], 256],\n          120447: [[80], 256],\n          120448: [[81], 256],\n          120449: [[82], 256],\n          120450: [[83], 256],\n          120451: [[84], 256],\n          120452: [[85], 256],\n          120453: [[86], 256],\n          120454: [[87], 256],\n          120455: [[88], 256],\n          120456: [[89], 256],\n          120457: [[90], 256],\n          120458: [[97], 256],\n          120459: [[98], 256],\n          120460: [[99], 256],\n          120461: [[100], 256],\n          120462: [[101], 256],\n          120463: [[102], 256],\n          120464: [[103], 256],\n          120465: [[104], 256],\n          120466: [[105], 256],\n          120467: [[106], 256],\n          120468: [[107], 256],\n          120469: [[108], 256],\n          120470: [[109], 256],\n          120471: [[110], 256],\n          120472: [[111], 256],\n          120473: [[112], 256],\n          120474: [[113], 256],\n          120475: [[114], 256],\n          120476: [[115], 256],\n          120477: [[116], 256],\n          120478: [[117], 256],\n          120479: [[118], 256],\n          120480: [[119], 256],\n          120481: [[120], 256],\n          120482: [[121], 256],\n          120483: [[122], 256],\n          120484: [[305], 256],\n          120485: [[567], 256],\n          120488: [[913], 256],\n          120489: [[914], 256],\n          120490: [[915], 256],\n          120491: [[916], 256],\n          120492: [[917], 256],\n          120493: [[918], 256],\n          120494: [[919], 256],\n          120495: [[920], 256],\n          120496: [[921], 256],\n          120497: [[922], 256],\n          120498: [[923], 256],\n          120499: [[924], 256],\n          120500: [[925], 256],\n          120501: [[926], 256],\n          120502: [[927], 256],\n          120503: [[928], 256],\n          120504: [[929], 256],\n          120505: [[1012], 256],\n          120506: [[931], 256],\n          120507: [[932], 256],\n          120508: [[933], 256],\n          120509: [[934], 256],\n          120510: [[935], 256],\n          120511: [[936], 256],\n          120512: [[937], 256],\n          120513: [[8711], 256],\n          120514: [[945], 256],\n          120515: [[946], 256],\n          120516: [[947], 256],\n          120517: [[948], 256],\n          120518: [[949], 256],\n          120519: [[950], 256],\n          120520: [[951], 256],\n          120521: [[952], 256],\n          120522: [[953], 256],\n          120523: [[954], 256],\n          120524: [[955], 256],\n          120525: [[956], 256],\n          120526: [[957], 256],\n          120527: [[958], 256],\n          120528: [[959], 256],\n          120529: [[960], 256],\n          120530: [[961], 256],\n          120531: [[962], 256],\n          120532: [[963], 256],\n          120533: [[964], 256],\n          120534: [[965], 256],\n          120535: [[966], 256],\n          120536: [[967], 256],\n          120537: [[968], 256],\n          120538: [[969], 256],\n          120539: [[8706], 256],\n          120540: [[1013], 256],\n          120541: [[977], 256],\n          120542: [[1008], 256],\n          120543: [[981], 256],\n          120544: [[1009], 256],\n          120545: [[982], 256],\n          120546: [[913], 256],\n          120547: [[914], 256],\n          120548: [[915], 256],\n          120549: [[916], 256],\n          120550: [[917], 256],\n          120551: [[918], 256],\n          120552: [[919], 256],\n          120553: [[920], 256],\n          120554: [[921], 256],\n          120555: [[922], 256],\n          120556: [[923], 256],\n          120557: [[924], 256],\n          120558: [[925], 256],\n          120559: [[926], 256],\n          120560: [[927], 256],\n          120561: [[928], 256],\n          120562: [[929], 256],\n          120563: [[1012], 256],\n          120564: [[931], 256],\n          120565: [[932], 256],\n          120566: [[933], 256],\n          120567: [[934], 256],\n          120568: [[935], 256],\n          120569: [[936], 256],\n          120570: [[937], 256],\n          120571: [[8711], 256],\n          120572: [[945], 256],\n          120573: [[946], 256],\n          120574: [[947], 256],\n          120575: [[948], 256]\n        },\n        55040: {\n          120576: [[949], 256],\n          120577: [[950], 256],\n          120578: [[951], 256],\n          120579: [[952], 256],\n          120580: [[953], 256],\n          120581: [[954], 256],\n          120582: [[955], 256],\n          120583: [[956], 256],\n          120584: [[957], 256],\n          120585: [[958], 256],\n          120586: [[959], 256],\n          120587: [[960], 256],\n          120588: [[961], 256],\n          120589: [[962], 256],\n          120590: [[963], 256],\n          120591: [[964], 256],\n          120592: [[965], 256],\n          120593: [[966], 256],\n          120594: [[967], 256],\n          120595: [[968], 256],\n          120596: [[969], 256],\n          120597: [[8706], 256],\n          120598: [[1013], 256],\n          120599: [[977], 256],\n          120600: [[1008], 256],\n          120601: [[981], 256],\n          120602: [[1009], 256],\n          120603: [[982], 256],\n          120604: [[913], 256],\n          120605: [[914], 256],\n          120606: [[915], 256],\n          120607: [[916], 256],\n          120608: [[917], 256],\n          120609: [[918], 256],\n          120610: [[919], 256],\n          120611: [[920], 256],\n          120612: [[921], 256],\n          120613: [[922], 256],\n          120614: [[923], 256],\n          120615: [[924], 256],\n          120616: [[925], 256],\n          120617: [[926], 256],\n          120618: [[927], 256],\n          120619: [[928], 256],\n          120620: [[929], 256],\n          120621: [[1012], 256],\n          120622: [[931], 256],\n          120623: [[932], 256],\n          120624: [[933], 256],\n          120625: [[934], 256],\n          120626: [[935], 256],\n          120627: [[936], 256],\n          120628: [[937], 256],\n          120629: [[8711], 256],\n          120630: [[945], 256],\n          120631: [[946], 256],\n          120632: [[947], 256],\n          120633: [[948], 256],\n          120634: [[949], 256],\n          120635: [[950], 256],\n          120636: [[951], 256],\n          120637: [[952], 256],\n          120638: [[953], 256],\n          120639: [[954], 256],\n          120640: [[955], 256],\n          120641: [[956], 256],\n          120642: [[957], 256],\n          120643: [[958], 256],\n          120644: [[959], 256],\n          120645: [[960], 256],\n          120646: [[961], 256],\n          120647: [[962], 256],\n          120648: [[963], 256],\n          120649: [[964], 256],\n          120650: [[965], 256],\n          120651: [[966], 256],\n          120652: [[967], 256],\n          120653: [[968], 256],\n          120654: [[969], 256],\n          120655: [[8706], 256],\n          120656: [[1013], 256],\n          120657: [[977], 256],\n          120658: [[1008], 256],\n          120659: [[981], 256],\n          120660: [[1009], 256],\n          120661: [[982], 256],\n          120662: [[913], 256],\n          120663: [[914], 256],\n          120664: [[915], 256],\n          120665: [[916], 256],\n          120666: [[917], 256],\n          120667: [[918], 256],\n          120668: [[919], 256],\n          120669: [[920], 256],\n          120670: [[921], 256],\n          120671: [[922], 256],\n          120672: [[923], 256],\n          120673: [[924], 256],\n          120674: [[925], 256],\n          120675: [[926], 256],\n          120676: [[927], 256],\n          120677: [[928], 256],\n          120678: [[929], 256],\n          120679: [[1012], 256],\n          120680: [[931], 256],\n          120681: [[932], 256],\n          120682: [[933], 256],\n          120683: [[934], 256],\n          120684: [[935], 256],\n          120685: [[936], 256],\n          120686: [[937], 256],\n          120687: [[8711], 256],\n          120688: [[945], 256],\n          120689: [[946], 256],\n          120690: [[947], 256],\n          120691: [[948], 256],\n          120692: [[949], 256],\n          120693: [[950], 256],\n          120694: [[951], 256],\n          120695: [[952], 256],\n          120696: [[953], 256],\n          120697: [[954], 256],\n          120698: [[955], 256],\n          120699: [[956], 256],\n          120700: [[957], 256],\n          120701: [[958], 256],\n          120702: [[959], 256],\n          120703: [[960], 256],\n          120704: [[961], 256],\n          120705: [[962], 256],\n          120706: [[963], 256],\n          120707: [[964], 256],\n          120708: [[965], 256],\n          120709: [[966], 256],\n          120710: [[967], 256],\n          120711: [[968], 256],\n          120712: [[969], 256],\n          120713: [[8706], 256],\n          120714: [[1013], 256],\n          120715: [[977], 256],\n          120716: [[1008], 256],\n          120717: [[981], 256],\n          120718: [[1009], 256],\n          120719: [[982], 256],\n          120720: [[913], 256],\n          120721: [[914], 256],\n          120722: [[915], 256],\n          120723: [[916], 256],\n          120724: [[917], 256],\n          120725: [[918], 256],\n          120726: [[919], 256],\n          120727: [[920], 256],\n          120728: [[921], 256],\n          120729: [[922], 256],\n          120730: [[923], 256],\n          120731: [[924], 256],\n          120732: [[925], 256],\n          120733: [[926], 256],\n          120734: [[927], 256],\n          120735: [[928], 256],\n          120736: [[929], 256],\n          120737: [[1012], 256],\n          120738: [[931], 256],\n          120739: [[932], 256],\n          120740: [[933], 256],\n          120741: [[934], 256],\n          120742: [[935], 256],\n          120743: [[936], 256],\n          120744: [[937], 256],\n          120745: [[8711], 256],\n          120746: [[945], 256],\n          120747: [[946], 256],\n          120748: [[947], 256],\n          120749: [[948], 256],\n          120750: [[949], 256],\n          120751: [[950], 256],\n          120752: [[951], 256],\n          120753: [[952], 256],\n          120754: [[953], 256],\n          120755: [[954], 256],\n          120756: [[955], 256],\n          120757: [[956], 256],\n          120758: [[957], 256],\n          120759: [[958], 256],\n          120760: [[959], 256],\n          120761: [[960], 256],\n          120762: [[961], 256],\n          120763: [[962], 256],\n          120764: [[963], 256],\n          120765: [[964], 256],\n          120766: [[965], 256],\n          120767: [[966], 256],\n          120768: [[967], 256],\n          120769: [[968], 256],\n          120770: [[969], 256],\n          120771: [[8706], 256],\n          120772: [[1013], 256],\n          120773: [[977], 256],\n          120774: [[1008], 256],\n          120775: [[981], 256],\n          120776: [[1009], 256],\n          120777: [[982], 256],\n          120778: [[988], 256],\n          120779: [[989], 256],\n          120782: [[48], 256],\n          120783: [[49], 256],\n          120784: [[50], 256],\n          120785: [[51], 256],\n          120786: [[52], 256],\n          120787: [[53], 256],\n          120788: [[54], 256],\n          120789: [[55], 256],\n          120790: [[56], 256],\n          120791: [[57], 256],\n          120792: [[48], 256],\n          120793: [[49], 256],\n          120794: [[50], 256],\n          120795: [[51], 256],\n          120796: [[52], 256],\n          120797: [[53], 256],\n          120798: [[54], 256],\n          120799: [[55], 256],\n          120800: [[56], 256],\n          120801: [[57], 256],\n          120802: [[48], 256],\n          120803: [[49], 256],\n          120804: [[50], 256],\n          120805: [[51], 256],\n          120806: [[52], 256],\n          120807: [[53], 256],\n          120808: [[54], 256],\n          120809: [[55], 256],\n          120810: [[56], 256],\n          120811: [[57], 256],\n          120812: [[48], 256],\n          120813: [[49], 256],\n          120814: [[50], 256],\n          120815: [[51], 256],\n          120816: [[52], 256],\n          120817: [[53], 256],\n          120818: [[54], 256],\n          120819: [[55], 256],\n          120820: [[56], 256],\n          120821: [[57], 256],\n          120822: [[48], 256],\n          120823: [[49], 256],\n          120824: [[50], 256],\n          120825: [[51], 256],\n          120826: [[52], 256],\n          120827: [[53], 256],\n          120828: [[54], 256],\n          120829: [[55], 256],\n          120830: [[56], 256],\n          120831: [[57], 256]\n        },\n        59392: {\n          125136: [, 220],\n          125137: [, 220],\n          125138: [, 220],\n          125139: [, 220],\n          125140: [, 220],\n          125141: [, 220],\n          125142: [, 220]\n        },\n        60928: {\n          126464: [[1575], 256],\n          126465: [[1576], 256],\n          126466: [[1580], 256],\n          126467: [[1583], 256],\n          126469: [[1608], 256],\n          126470: [[1586], 256],\n          126471: [[1581], 256],\n          126472: [[1591], 256],\n          126473: [[1610], 256],\n          126474: [[1603], 256],\n          126475: [[1604], 256],\n          126476: [[1605], 256],\n          126477: [[1606], 256],\n          126478: [[1587], 256],\n          126479: [[1593], 256],\n          126480: [[1601], 256],\n          126481: [[1589], 256],\n          126482: [[1602], 256],\n          126483: [[1585], 256],\n          126484: [[1588], 256],\n          126485: [[1578], 256],\n          126486: [[1579], 256],\n          126487: [[1582], 256],\n          126488: [[1584], 256],\n          126489: [[1590], 256],\n          126490: [[1592], 256],\n          126491: [[1594], 256],\n          126492: [[1646], 256],\n          126493: [[1722], 256],\n          126494: [[1697], 256],\n          126495: [[1647], 256],\n          126497: [[1576], 256],\n          126498: [[1580], 256],\n          126500: [[1607], 256],\n          126503: [[1581], 256],\n          126505: [[1610], 256],\n          126506: [[1603], 256],\n          126507: [[1604], 256],\n          126508: [[1605], 256],\n          126509: [[1606], 256],\n          126510: [[1587], 256],\n          126511: [[1593], 256],\n          126512: [[1601], 256],\n          126513: [[1589], 256],\n          126514: [[1602], 256],\n          126516: [[1588], 256],\n          126517: [[1578], 256],\n          126518: [[1579], 256],\n          126519: [[1582], 256],\n          126521: [[1590], 256],\n          126523: [[1594], 256],\n          126530: [[1580], 256],\n          126535: [[1581], 256],\n          126537: [[1610], 256],\n          126539: [[1604], 256],\n          126541: [[1606], 256],\n          126542: [[1587], 256],\n          126543: [[1593], 256],\n          126545: [[1589], 256],\n          126546: [[1602], 256],\n          126548: [[1588], 256],\n          126551: [[1582], 256],\n          126553: [[1590], 256],\n          126555: [[1594], 256],\n          126557: [[1722], 256],\n          126559: [[1647], 256],\n          126561: [[1576], 256],\n          126562: [[1580], 256],\n          126564: [[1607], 256],\n          126567: [[1581], 256],\n          126568: [[1591], 256],\n          126569: [[1610], 256],\n          126570: [[1603], 256],\n          126572: [[1605], 256],\n          126573: [[1606], 256],\n          126574: [[1587], 256],\n          126575: [[1593], 256],\n          126576: [[1601], 256],\n          126577: [[1589], 256],\n          126578: [[1602], 256],\n          126580: [[1588], 256],\n          126581: [[1578], 256],\n          126582: [[1579], 256],\n          126583: [[1582], 256],\n          126585: [[1590], 256],\n          126586: [[1592], 256],\n          126587: [[1594], 256],\n          126588: [[1646], 256],\n          126590: [[1697], 256],\n          126592: [[1575], 256],\n          126593: [[1576], 256],\n          126594: [[1580], 256],\n          126595: [[1583], 256],\n          126596: [[1607], 256],\n          126597: [[1608], 256],\n          126598: [[1586], 256],\n          126599: [[1581], 256],\n          126600: [[1591], 256],\n          126601: [[1610], 256],\n          126603: [[1604], 256],\n          126604: [[1605], 256],\n          126605: [[1606], 256],\n          126606: [[1587], 256],\n          126607: [[1593], 256],\n          126608: [[1601], 256],\n          126609: [[1589], 256],\n          126610: [[1602], 256],\n          126611: [[1585], 256],\n          126612: [[1588], 256],\n          126613: [[1578], 256],\n          126614: [[1579], 256],\n          126615: [[1582], 256],\n          126616: [[1584], 256],\n          126617: [[1590], 256],\n          126618: [[1592], 256],\n          126619: [[1594], 256],\n          126625: [[1576], 256],\n          126626: [[1580], 256],\n          126627: [[1583], 256],\n          126629: [[1608], 256],\n          126630: [[1586], 256],\n          126631: [[1581], 256],\n          126632: [[1591], 256],\n          126633: [[1610], 256],\n          126635: [[1604], 256],\n          126636: [[1605], 256],\n          126637: [[1606], 256],\n          126638: [[1587], 256],\n          126639: [[1593], 256],\n          126640: [[1601], 256],\n          126641: [[1589], 256],\n          126642: [[1602], 256],\n          126643: [[1585], 256],\n          126644: [[1588], 256],\n          126645: [[1578], 256],\n          126646: [[1579], 256],\n          126647: [[1582], 256],\n          126648: [[1584], 256],\n          126649: [[1590], 256],\n          126650: [[1592], 256],\n          126651: [[1594], 256]\n        },\n        61696: {\n          127232: [[48, 46], 256],\n          127233: [[48, 44], 256],\n          127234: [[49, 44], 256],\n          127235: [[50, 44], 256],\n          127236: [[51, 44], 256],\n          127237: [[52, 44], 256],\n          127238: [[53, 44], 256],\n          127239: [[54, 44], 256],\n          127240: [[55, 44], 256],\n          127241: [[56, 44], 256],\n          127242: [[57, 44], 256],\n          127248: [[40, 65, 41], 256],\n          127249: [[40, 66, 41], 256],\n          127250: [[40, 67, 41], 256],\n          127251: [[40, 68, 41], 256],\n          127252: [[40, 69, 41], 256],\n          127253: [[40, 70, 41], 256],\n          127254: [[40, 71, 41], 256],\n          127255: [[40, 72, 41], 256],\n          127256: [[40, 73, 41], 256],\n          127257: [[40, 74, 41], 256],\n          127258: [[40, 75, 41], 256],\n          127259: [[40, 76, 41], 256],\n          127260: [[40, 77, 41], 256],\n          127261: [[40, 78, 41], 256],\n          127262: [[40, 79, 41], 256],\n          127263: [[40, 80, 41], 256],\n          127264: [[40, 81, 41], 256],\n          127265: [[40, 82, 41], 256],\n          127266: [[40, 83, 41], 256],\n          127267: [[40, 84, 41], 256],\n          127268: [[40, 85, 41], 256],\n          127269: [[40, 86, 41], 256],\n          127270: [[40, 87, 41], 256],\n          127271: [[40, 88, 41], 256],\n          127272: [[40, 89, 41], 256],\n          127273: [[40, 90, 41], 256],\n          127274: [[12308, 83, 12309], 256],\n          127275: [[67], 256],\n          127276: [[82], 256],\n          127277: [[67, 68], 256],\n          127278: [[87, 90], 256],\n          127280: [[65], 256],\n          127281: [[66], 256],\n          127282: [[67], 256],\n          127283: [[68], 256],\n          127284: [[69], 256],\n          127285: [[70], 256],\n          127286: [[71], 256],\n          127287: [[72], 256],\n          127288: [[73], 256],\n          127289: [[74], 256],\n          127290: [[75], 256],\n          127291: [[76], 256],\n          127292: [[77], 256],\n          127293: [[78], 256],\n          127294: [[79], 256],\n          127295: [[80], 256],\n          127296: [[81], 256],\n          127297: [[82], 256],\n          127298: [[83], 256],\n          127299: [[84], 256],\n          127300: [[85], 256],\n          127301: [[86], 256],\n          127302: [[87], 256],\n          127303: [[88], 256],\n          127304: [[89], 256],\n          127305: [[90], 256],\n          127306: [[72, 86], 256],\n          127307: [[77, 86], 256],\n          127308: [[83, 68], 256],\n          127309: [[83, 83], 256],\n          127310: [[80, 80, 86], 256],\n          127311: [[87, 67], 256],\n          127338: [[77, 67], 256],\n          127339: [[77, 68], 256],\n          127376: [[68, 74], 256]\n        },\n        61952: {\n          127488: [[12411, 12363], 256],\n          127489: [[12467, 12467], 256],\n          127490: [[12469], 256],\n          127504: [[25163], 256],\n          127505: [[23383], 256],\n          127506: [[21452], 256],\n          127507: [[12487], 256],\n          127508: [[20108], 256],\n          127509: [[22810], 256],\n          127510: [[35299], 256],\n          127511: [[22825], 256],\n          127512: [[20132], 256],\n          127513: [[26144], 256],\n          127514: [[28961], 256],\n          127515: [[26009], 256],\n          127516: [[21069], 256],\n          127517: [[24460], 256],\n          127518: [[20877], 256],\n          127519: [[26032], 256],\n          127520: [[21021], 256],\n          127521: [[32066], 256],\n          127522: [[29983], 256],\n          127523: [[36009], 256],\n          127524: [[22768], 256],\n          127525: [[21561], 256],\n          127526: [[28436], 256],\n          127527: [[25237], 256],\n          127528: [[25429], 256],\n          127529: [[19968], 256],\n          127530: [[19977], 256],\n          127531: [[36938], 256],\n          127532: [[24038], 256],\n          127533: [[20013], 256],\n          127534: [[21491], 256],\n          127535: [[25351], 256],\n          127536: [[36208], 256],\n          127537: [[25171], 256],\n          127538: [[31105], 256],\n          127539: [[31354], 256],\n          127540: [[21512], 256],\n          127541: [[28288], 256],\n          127542: [[26377], 256],\n          127543: [[26376], 256],\n          127544: [[30003], 256],\n          127545: [[21106], 256],\n          127546: [[21942], 256],\n          127552: [[12308, 26412, 12309], 256],\n          127553: [[12308, 19977, 12309], 256],\n          127554: [[12308, 20108, 12309], 256],\n          127555: [[12308, 23433, 12309], 256],\n          127556: [[12308, 28857, 12309], 256],\n          127557: [[12308, 25171, 12309], 256],\n          127558: [[12308, 30423, 12309], 256],\n          127559: [[12308, 21213, 12309], 256],\n          127560: [[12308, 25943, 12309], 256],\n          127568: [[24471], 256],\n          127569: [[21487], 256]\n        },\n        63488: {\n          194560: [[20029]],\n          194561: [[20024]],\n          194562: [[20033]],\n          194563: [[131362]],\n          194564: [[20320]],\n          194565: [[20398]],\n          194566: [[20411]],\n          194567: [[20482]],\n          194568: [[20602]],\n          194569: [[20633]],\n          194570: [[20711]],\n          194571: [[20687]],\n          194572: [[13470]],\n          194573: [[132666]],\n          194574: [[20813]],\n          194575: [[20820]],\n          194576: [[20836]],\n          194577: [[20855]],\n          194578: [[132380]],\n          194579: [[13497]],\n          194580: [[20839]],\n          194581: [[20877]],\n          194582: [[132427]],\n          194583: [[20887]],\n          194584: [[20900]],\n          194585: [[20172]],\n          194586: [[20908]],\n          194587: [[20917]],\n          194588: [[168415]],\n          194589: [[20981]],\n          194590: [[20995]],\n          194591: [[13535]],\n          194592: [[21051]],\n          194593: [[21062]],\n          194594: [[21106]],\n          194595: [[21111]],\n          194596: [[13589]],\n          194597: [[21191]],\n          194598: [[21193]],\n          194599: [[21220]],\n          194600: [[21242]],\n          194601: [[21253]],\n          194602: [[21254]],\n          194603: [[21271]],\n          194604: [[21321]],\n          194605: [[21329]],\n          194606: [[21338]],\n          194607: [[21363]],\n          194608: [[21373]],\n          194609: [[21375]],\n          194610: [[21375]],\n          194611: [[21375]],\n          194612: [[133676]],\n          194613: [[28784]],\n          194614: [[21450]],\n          194615: [[21471]],\n          194616: [[133987]],\n          194617: [[21483]],\n          194618: [[21489]],\n          194619: [[21510]],\n          194620: [[21662]],\n          194621: [[21560]],\n          194622: [[21576]],\n          194623: [[21608]],\n          194624: [[21666]],\n          194625: [[21750]],\n          194626: [[21776]],\n          194627: [[21843]],\n          194628: [[21859]],\n          194629: [[21892]],\n          194630: [[21892]],\n          194631: [[21913]],\n          194632: [[21931]],\n          194633: [[21939]],\n          194634: [[21954]],\n          194635: [[22294]],\n          194636: [[22022]],\n          194637: [[22295]],\n          194638: [[22097]],\n          194639: [[22132]],\n          194640: [[20999]],\n          194641: [[22766]],\n          194642: [[22478]],\n          194643: [[22516]],\n          194644: [[22541]],\n          194645: [[22411]],\n          194646: [[22578]],\n          194647: [[22577]],\n          194648: [[22700]],\n          194649: [[136420]],\n          194650: [[22770]],\n          194651: [[22775]],\n          194652: [[22790]],\n          194653: [[22810]],\n          194654: [[22818]],\n          194655: [[22882]],\n          194656: [[136872]],\n          194657: [[136938]],\n          194658: [[23020]],\n          194659: [[23067]],\n          194660: [[23079]],\n          194661: [[23000]],\n          194662: [[23142]],\n          194663: [[14062]],\n          194664: [[14076]],\n          194665: [[23304]],\n          194666: [[23358]],\n          194667: [[23358]],\n          194668: [[137672]],\n          194669: [[23491]],\n          194670: [[23512]],\n          194671: [[23527]],\n          194672: [[23539]],\n          194673: [[138008]],\n          194674: [[23551]],\n          194675: [[23558]],\n          194676: [[24403]],\n          194677: [[23586]],\n          194678: [[14209]],\n          194679: [[23648]],\n          194680: [[23662]],\n          194681: [[23744]],\n          194682: [[23693]],\n          194683: [[138724]],\n          194684: [[23875]],\n          194685: [[138726]],\n          194686: [[23918]],\n          194687: [[23915]],\n          194688: [[23932]],\n          194689: [[24033]],\n          194690: [[24034]],\n          194691: [[14383]],\n          194692: [[24061]],\n          194693: [[24104]],\n          194694: [[24125]],\n          194695: [[24169]],\n          194696: [[14434]],\n          194697: [[139651]],\n          194698: [[14460]],\n          194699: [[24240]],\n          194700: [[24243]],\n          194701: [[24246]],\n          194702: [[24266]],\n          194703: [[172946]],\n          194704: [[24318]],\n          194705: [[140081]],\n          194706: [[140081]],\n          194707: [[33281]],\n          194708: [[24354]],\n          194709: [[24354]],\n          194710: [[14535]],\n          194711: [[144056]],\n          194712: [[156122]],\n          194713: [[24418]],\n          194714: [[24427]],\n          194715: [[14563]],\n          194716: [[24474]],\n          194717: [[24525]],\n          194718: [[24535]],\n          194719: [[24569]],\n          194720: [[24705]],\n          194721: [[14650]],\n          194722: [[14620]],\n          194723: [[24724]],\n          194724: [[141012]],\n          194725: [[24775]],\n          194726: [[24904]],\n          194727: [[24908]],\n          194728: [[24910]],\n          194729: [[24908]],\n          194730: [[24954]],\n          194731: [[24974]],\n          194732: [[25010]],\n          194733: [[24996]],\n          194734: [[25007]],\n          194735: [[25054]],\n          194736: [[25074]],\n          194737: [[25078]],\n          194738: [[25104]],\n          194739: [[25115]],\n          194740: [[25181]],\n          194741: [[25265]],\n          194742: [[25300]],\n          194743: [[25424]],\n          194744: [[142092]],\n          194745: [[25405]],\n          194746: [[25340]],\n          194747: [[25448]],\n          194748: [[25475]],\n          194749: [[25572]],\n          194750: [[142321]],\n          194751: [[25634]],\n          194752: [[25541]],\n          194753: [[25513]],\n          194754: [[14894]],\n          194755: [[25705]],\n          194756: [[25726]],\n          194757: [[25757]],\n          194758: [[25719]],\n          194759: [[14956]],\n          194760: [[25935]],\n          194761: [[25964]],\n          194762: [[143370]],\n          194763: [[26083]],\n          194764: [[26360]],\n          194765: [[26185]],\n          194766: [[15129]],\n          194767: [[26257]],\n          194768: [[15112]],\n          194769: [[15076]],\n          194770: [[20882]],\n          194771: [[20885]],\n          194772: [[26368]],\n          194773: [[26268]],\n          194774: [[32941]],\n          194775: [[17369]],\n          194776: [[26391]],\n          194777: [[26395]],\n          194778: [[26401]],\n          194779: [[26462]],\n          194780: [[26451]],\n          194781: [[144323]],\n          194782: [[15177]],\n          194783: [[26618]],\n          194784: [[26501]],\n          194785: [[26706]],\n          194786: [[26757]],\n          194787: [[144493]],\n          194788: [[26766]],\n          194789: [[26655]],\n          194790: [[26900]],\n          194791: [[15261]],\n          194792: [[26946]],\n          194793: [[27043]],\n          194794: [[27114]],\n          194795: [[27304]],\n          194796: [[145059]],\n          194797: [[27355]],\n          194798: [[15384]],\n          194799: [[27425]],\n          194800: [[145575]],\n          194801: [[27476]],\n          194802: [[15438]],\n          194803: [[27506]],\n          194804: [[27551]],\n          194805: [[27578]],\n          194806: [[27579]],\n          194807: [[146061]],\n          194808: [[138507]],\n          194809: [[146170]],\n          194810: [[27726]],\n          194811: [[146620]],\n          194812: [[27839]],\n          194813: [[27853]],\n          194814: [[27751]],\n          194815: [[27926]]\n        },\n        63744: {\n          63744: [[35912]],\n          63745: [[26356]],\n          63746: [[36554]],\n          63747: [[36040]],\n          63748: [[28369]],\n          63749: [[20018]],\n          63750: [[21477]],\n          63751: [[40860]],\n          63752: [[40860]],\n          63753: [[22865]],\n          63754: [[37329]],\n          63755: [[21895]],\n          63756: [[22856]],\n          63757: [[25078]],\n          63758: [[30313]],\n          63759: [[32645]],\n          63760: [[34367]],\n          63761: [[34746]],\n          63762: [[35064]],\n          63763: [[37007]],\n          63764: [[27138]],\n          63765: [[27931]],\n          63766: [[28889]],\n          63767: [[29662]],\n          63768: [[33853]],\n          63769: [[37226]],\n          63770: [[39409]],\n          63771: [[20098]],\n          63772: [[21365]],\n          63773: [[27396]],\n          63774: [[29211]],\n          63775: [[34349]],\n          63776: [[40478]],\n          63777: [[23888]],\n          63778: [[28651]],\n          63779: [[34253]],\n          63780: [[35172]],\n          63781: [[25289]],\n          63782: [[33240]],\n          63783: [[34847]],\n          63784: [[24266]],\n          63785: [[26391]],\n          63786: [[28010]],\n          63787: [[29436]],\n          63788: [[37070]],\n          63789: [[20358]],\n          63790: [[20919]],\n          63791: [[21214]],\n          63792: [[25796]],\n          63793: [[27347]],\n          63794: [[29200]],\n          63795: [[30439]],\n          63796: [[32769]],\n          63797: [[34310]],\n          63798: [[34396]],\n          63799: [[36335]],\n          63800: [[38706]],\n          63801: [[39791]],\n          63802: [[40442]],\n          63803: [[30860]],\n          63804: [[31103]],\n          63805: [[32160]],\n          63806: [[33737]],\n          63807: [[37636]],\n          63808: [[40575]],\n          63809: [[35542]],\n          63810: [[22751]],\n          63811: [[24324]],\n          63812: [[31840]],\n          63813: [[32894]],\n          63814: [[29282]],\n          63815: [[30922]],\n          63816: [[36034]],\n          63817: [[38647]],\n          63818: [[22744]],\n          63819: [[23650]],\n          63820: [[27155]],\n          63821: [[28122]],\n          63822: [[28431]],\n          63823: [[32047]],\n          63824: [[32311]],\n          63825: [[38475]],\n          63826: [[21202]],\n          63827: [[32907]],\n          63828: [[20956]],\n          63829: [[20940]],\n          63830: [[31260]],\n          63831: [[32190]],\n          63832: [[33777]],\n          63833: [[38517]],\n          63834: [[35712]],\n          63835: [[25295]],\n          63836: [[27138]],\n          63837: [[35582]],\n          63838: [[20025]],\n          63839: [[23527]],\n          63840: [[24594]],\n          63841: [[29575]],\n          63842: [[30064]],\n          63843: [[21271]],\n          63844: [[30971]],\n          63845: [[20415]],\n          63846: [[24489]],\n          63847: [[19981]],\n          63848: [[27852]],\n          63849: [[25976]],\n          63850: [[32034]],\n          63851: [[21443]],\n          63852: [[22622]],\n          63853: [[30465]],\n          63854: [[33865]],\n          63855: [[35498]],\n          63856: [[27578]],\n          63857: [[36784]],\n          63858: [[27784]],\n          63859: [[25342]],\n          63860: [[33509]],\n          63861: [[25504]],\n          63862: [[30053]],\n          63863: [[20142]],\n          63864: [[20841]],\n          63865: [[20937]],\n          63866: [[26753]],\n          63867: [[31975]],\n          63868: [[33391]],\n          63869: [[35538]],\n          63870: [[37327]],\n          63871: [[21237]],\n          63872: [[21570]],\n          63873: [[22899]],\n          63874: [[24300]],\n          63875: [[26053]],\n          63876: [[28670]],\n          63877: [[31018]],\n          63878: [[38317]],\n          63879: [[39530]],\n          63880: [[40599]],\n          63881: [[40654]],\n          63882: [[21147]],\n          63883: [[26310]],\n          63884: [[27511]],\n          63885: [[36706]],\n          63886: [[24180]],\n          63887: [[24976]],\n          63888: [[25088]],\n          63889: [[25754]],\n          63890: [[28451]],\n          63891: [[29001]],\n          63892: [[29833]],\n          63893: [[31178]],\n          63894: [[32244]],\n          63895: [[32879]],\n          63896: [[36646]],\n          63897: [[34030]],\n          63898: [[36899]],\n          63899: [[37706]],\n          63900: [[21015]],\n          63901: [[21155]],\n          63902: [[21693]],\n          63903: [[28872]],\n          63904: [[35010]],\n          63905: [[35498]],\n          63906: [[24265]],\n          63907: [[24565]],\n          63908: [[25467]],\n          63909: [[27566]],\n          63910: [[31806]],\n          63911: [[29557]],\n          63912: [[20196]],\n          63913: [[22265]],\n          63914: [[23527]],\n          63915: [[23994]],\n          63916: [[24604]],\n          63917: [[29618]],\n          63918: [[29801]],\n          63919: [[32666]],\n          63920: [[32838]],\n          63921: [[37428]],\n          63922: [[38646]],\n          63923: [[38728]],\n          63924: [[38936]],\n          63925: [[20363]],\n          63926: [[31150]],\n          63927: [[37300]],\n          63928: [[38584]],\n          63929: [[24801]],\n          63930: [[20102]],\n          63931: [[20698]],\n          63932: [[23534]],\n          63933: [[23615]],\n          63934: [[26009]],\n          63935: [[27138]],\n          63936: [[29134]],\n          63937: [[30274]],\n          63938: [[34044]],\n          63939: [[36988]],\n          63940: [[40845]],\n          63941: [[26248]],\n          63942: [[38446]],\n          63943: [[21129]],\n          63944: [[26491]],\n          63945: [[26611]],\n          63946: [[27969]],\n          63947: [[28316]],\n          63948: [[29705]],\n          63949: [[30041]],\n          63950: [[30827]],\n          63951: [[32016]],\n          63952: [[39006]],\n          63953: [[20845]],\n          63954: [[25134]],\n          63955: [[38520]],\n          63956: [[20523]],\n          63957: [[23833]],\n          63958: [[28138]],\n          63959: [[36650]],\n          63960: [[24459]],\n          63961: [[24900]],\n          63962: [[26647]],\n          63963: [[29575]],\n          63964: [[38534]],\n          63965: [[21033]],\n          63966: [[21519]],\n          63967: [[23653]],\n          63968: [[26131]],\n          63969: [[26446]],\n          63970: [[26792]],\n          63971: [[27877]],\n          63972: [[29702]],\n          63973: [[30178]],\n          63974: [[32633]],\n          63975: [[35023]],\n          63976: [[35041]],\n          63977: [[37324]],\n          63978: [[38626]],\n          63979: [[21311]],\n          63980: [[28346]],\n          63981: [[21533]],\n          63982: [[29136]],\n          63983: [[29848]],\n          63984: [[34298]],\n          63985: [[38563]],\n          63986: [[40023]],\n          63987: [[40607]],\n          63988: [[26519]],\n          63989: [[28107]],\n          63990: [[33256]],\n          63991: [[31435]],\n          63992: [[31520]],\n          63993: [[31890]],\n          63994: [[29376]],\n          63995: [[28825]],\n          63996: [[35672]],\n          63997: [[20160]],\n          63998: [[33590]],\n          63999: [[21050]],\n          194816: [[27966]],\n          194817: [[28023]],\n          194818: [[27969]],\n          194819: [[28009]],\n          194820: [[28024]],\n          194821: [[28037]],\n          194822: [[146718]],\n          194823: [[27956]],\n          194824: [[28207]],\n          194825: [[28270]],\n          194826: [[15667]],\n          194827: [[28363]],\n          194828: [[28359]],\n          194829: [[147153]],\n          194830: [[28153]],\n          194831: [[28526]],\n          194832: [[147294]],\n          194833: [[147342]],\n          194834: [[28614]],\n          194835: [[28729]],\n          194836: [[28702]],\n          194837: [[28699]],\n          194838: [[15766]],\n          194839: [[28746]],\n          194840: [[28797]],\n          194841: [[28791]],\n          194842: [[28845]],\n          194843: [[132389]],\n          194844: [[28997]],\n          194845: [[148067]],\n          194846: [[29084]],\n          194847: [[148395]],\n          194848: [[29224]],\n          194849: [[29237]],\n          194850: [[29264]],\n          194851: [[149000]],\n          194852: [[29312]],\n          194853: [[29333]],\n          194854: [[149301]],\n          194855: [[149524]],\n          194856: [[29562]],\n          194857: [[29579]],\n          194858: [[16044]],\n          194859: [[29605]],\n          194860: [[16056]],\n          194861: [[16056]],\n          194862: [[29767]],\n          194863: [[29788]],\n          194864: [[29809]],\n          194865: [[29829]],\n          194866: [[29898]],\n          194867: [[16155]],\n          194868: [[29988]],\n          194869: [[150582]],\n          194870: [[30014]],\n          194871: [[150674]],\n          194872: [[30064]],\n          194873: [[139679]],\n          194874: [[30224]],\n          194875: [[151457]],\n          194876: [[151480]],\n          194877: [[151620]],\n          194878: [[16380]],\n          194879: [[16392]],\n          194880: [[30452]],\n          194881: [[151795]],\n          194882: [[151794]],\n          194883: [[151833]],\n          194884: [[151859]],\n          194885: [[30494]],\n          194886: [[30495]],\n          194887: [[30495]],\n          194888: [[30538]],\n          194889: [[16441]],\n          194890: [[30603]],\n          194891: [[16454]],\n          194892: [[16534]],\n          194893: [[152605]],\n          194894: [[30798]],\n          194895: [[30860]],\n          194896: [[30924]],\n          194897: [[16611]],\n          194898: [[153126]],\n          194899: [[31062]],\n          194900: [[153242]],\n          194901: [[153285]],\n          194902: [[31119]],\n          194903: [[31211]],\n          194904: [[16687]],\n          194905: [[31296]],\n          194906: [[31306]],\n          194907: [[31311]],\n          194908: [[153980]],\n          194909: [[154279]],\n          194910: [[154279]],\n          194911: [[31470]],\n          194912: [[16898]],\n          194913: [[154539]],\n          194914: [[31686]],\n          194915: [[31689]],\n          194916: [[16935]],\n          194917: [[154752]],\n          194918: [[31954]],\n          194919: [[17056]],\n          194920: [[31976]],\n          194921: [[31971]],\n          194922: [[32000]],\n          194923: [[155526]],\n          194924: [[32099]],\n          194925: [[17153]],\n          194926: [[32199]],\n          194927: [[32258]],\n          194928: [[32325]],\n          194929: [[17204]],\n          194930: [[156200]],\n          194931: [[156231]],\n          194932: [[17241]],\n          194933: [[156377]],\n          194934: [[32634]],\n          194935: [[156478]],\n          194936: [[32661]],\n          194937: [[32762]],\n          194938: [[32773]],\n          194939: [[156890]],\n          194940: [[156963]],\n          194941: [[32864]],\n          194942: [[157096]],\n          194943: [[32880]],\n          194944: [[144223]],\n          194945: [[17365]],\n          194946: [[32946]],\n          194947: [[33027]],\n          194948: [[17419]],\n          194949: [[33086]],\n          194950: [[23221]],\n          194951: [[157607]],\n          194952: [[157621]],\n          194953: [[144275]],\n          194954: [[144284]],\n          194955: [[33281]],\n          194956: [[33284]],\n          194957: [[36766]],\n          194958: [[17515]],\n          194959: [[33425]],\n          194960: [[33419]],\n          194961: [[33437]],\n          194962: [[21171]],\n          194963: [[33457]],\n          194964: [[33459]],\n          194965: [[33469]],\n          194966: [[33510]],\n          194967: [[158524]],\n          194968: [[33509]],\n          194969: [[33565]],\n          194970: [[33635]],\n          194971: [[33709]],\n          194972: [[33571]],\n          194973: [[33725]],\n          194974: [[33767]],\n          194975: [[33879]],\n          194976: [[33619]],\n          194977: [[33738]],\n          194978: [[33740]],\n          194979: [[33756]],\n          194980: [[158774]],\n          194981: [[159083]],\n          194982: [[158933]],\n          194983: [[17707]],\n          194984: [[34033]],\n          194985: [[34035]],\n          194986: [[34070]],\n          194987: [[160714]],\n          194988: [[34148]],\n          194989: [[159532]],\n          194990: [[17757]],\n          194991: [[17761]],\n          194992: [[159665]],\n          194993: [[159954]],\n          194994: [[17771]],\n          194995: [[34384]],\n          194996: [[34396]],\n          194997: [[34407]],\n          194998: [[34409]],\n          194999: [[34473]],\n          195000: [[34440]],\n          195001: [[34574]],\n          195002: [[34530]],\n          195003: [[34681]],\n          195004: [[34600]],\n          195005: [[34667]],\n          195006: [[34694]],\n          195007: [[17879]],\n          195008: [[34785]],\n          195009: [[34817]],\n          195010: [[17913]],\n          195011: [[34912]],\n          195012: [[34915]],\n          195013: [[161383]],\n          195014: [[35031]],\n          195015: [[35038]],\n          195016: [[17973]],\n          195017: [[35066]],\n          195018: [[13499]],\n          195019: [[161966]],\n          195020: [[162150]],\n          195021: [[18110]],\n          195022: [[18119]],\n          195023: [[35488]],\n          195024: [[35565]],\n          195025: [[35722]],\n          195026: [[35925]],\n          195027: [[162984]],\n          195028: [[36011]],\n          195029: [[36033]],\n          195030: [[36123]],\n          195031: [[36215]],\n          195032: [[163631]],\n          195033: [[133124]],\n          195034: [[36299]],\n          195035: [[36284]],\n          195036: [[36336]],\n          195037: [[133342]],\n          195038: [[36564]],\n          195039: [[36664]],\n          195040: [[165330]],\n          195041: [[165357]],\n          195042: [[37012]],\n          195043: [[37105]],\n          195044: [[37137]],\n          195045: [[165678]],\n          195046: [[37147]],\n          195047: [[37432]],\n          195048: [[37591]],\n          195049: [[37592]],\n          195050: [[37500]],\n          195051: [[37881]],\n          195052: [[37909]],\n          195053: [[166906]],\n          195054: [[38283]],\n          195055: [[18837]],\n          195056: [[38327]],\n          195057: [[167287]],\n          195058: [[18918]],\n          195059: [[38595]],\n          195060: [[23986]],\n          195061: [[38691]],\n          195062: [[168261]],\n          195063: [[168474]],\n          195064: [[19054]],\n          195065: [[19062]],\n          195066: [[38880]],\n          195067: [[168970]],\n          195068: [[19122]],\n          195069: [[169110]],\n          195070: [[38923]],\n          195071: [[38923]]\n        },\n        64000: {\n          64000: [[20999]],\n          64001: [[24230]],\n          64002: [[25299]],\n          64003: [[31958]],\n          64004: [[23429]],\n          64005: [[27934]],\n          64006: [[26292]],\n          64007: [[36667]],\n          64008: [[34892]],\n          64009: [[38477]],\n          64010: [[35211]],\n          64011: [[24275]],\n          64012: [[20800]],\n          64013: [[21952]],\n          64016: [[22618]],\n          64018: [[26228]],\n          64021: [[20958]],\n          64022: [[29482]],\n          64023: [[30410]],\n          64024: [[31036]],\n          64025: [[31070]],\n          64026: [[31077]],\n          64027: [[31119]],\n          64028: [[38742]],\n          64029: [[31934]],\n          64030: [[32701]],\n          64032: [[34322]],\n          64034: [[35576]],\n          64037: [[36920]],\n          64038: [[37117]],\n          64042: [[39151]],\n          64043: [[39164]],\n          64044: [[39208]],\n          64045: [[40372]],\n          64046: [[37086]],\n          64047: [[38583]],\n          64048: [[20398]],\n          64049: [[20711]],\n          64050: [[20813]],\n          64051: [[21193]],\n          64052: [[21220]],\n          64053: [[21329]],\n          64054: [[21917]],\n          64055: [[22022]],\n          64056: [[22120]],\n          64057: [[22592]],\n          64058: [[22696]],\n          64059: [[23652]],\n          64060: [[23662]],\n          64061: [[24724]],\n          64062: [[24936]],\n          64063: [[24974]],\n          64064: [[25074]],\n          64065: [[25935]],\n          64066: [[26082]],\n          64067: [[26257]],\n          64068: [[26757]],\n          64069: [[28023]],\n          64070: [[28186]],\n          64071: [[28450]],\n          64072: [[29038]],\n          64073: [[29227]],\n          64074: [[29730]],\n          64075: [[30865]],\n          64076: [[31038]],\n          64077: [[31049]],\n          64078: [[31048]],\n          64079: [[31056]],\n          64080: [[31062]],\n          64081: [[31069]],\n          64082: [[31117]],\n          64083: [[31118]],\n          64084: [[31296]],\n          64085: [[31361]],\n          64086: [[31680]],\n          64087: [[32244]],\n          64088: [[32265]],\n          64089: [[32321]],\n          64090: [[32626]],\n          64091: [[32773]],\n          64092: [[33261]],\n          64093: [[33401]],\n          64094: [[33401]],\n          64095: [[33879]],\n          64096: [[35088]],\n          64097: [[35222]],\n          64098: [[35585]],\n          64099: [[35641]],\n          64100: [[36051]],\n          64101: [[36104]],\n          64102: [[36790]],\n          64103: [[36920]],\n          64104: [[38627]],\n          64105: [[38911]],\n          64106: [[38971]],\n          64107: [[24693]],\n          64108: [[148206]],\n          64109: [[33304]],\n          64112: [[20006]],\n          64113: [[20917]],\n          64114: [[20840]],\n          64115: [[20352]],\n          64116: [[20805]],\n          64117: [[20864]],\n          64118: [[21191]],\n          64119: [[21242]],\n          64120: [[21917]],\n          64121: [[21845]],\n          64122: [[21913]],\n          64123: [[21986]],\n          64124: [[22618]],\n          64125: [[22707]],\n          64126: [[22852]],\n          64127: [[22868]],\n          64128: [[23138]],\n          64129: [[23336]],\n          64130: [[24274]],\n          64131: [[24281]],\n          64132: [[24425]],\n          64133: [[24493]],\n          64134: [[24792]],\n          64135: [[24910]],\n          64136: [[24840]],\n          64137: [[24974]],\n          64138: [[24928]],\n          64139: [[25074]],\n          64140: [[25140]],\n          64141: [[25540]],\n          64142: [[25628]],\n          64143: [[25682]],\n          64144: [[25942]],\n          64145: [[26228]],\n          64146: [[26391]],\n          64147: [[26395]],\n          64148: [[26454]],\n          64149: [[27513]],\n          64150: [[27578]],\n          64151: [[27969]],\n          64152: [[28379]],\n          64153: [[28363]],\n          64154: [[28450]],\n          64155: [[28702]],\n          64156: [[29038]],\n          64157: [[30631]],\n          64158: [[29237]],\n          64159: [[29359]],\n          64160: [[29482]],\n          64161: [[29809]],\n          64162: [[29958]],\n          64163: [[30011]],\n          64164: [[30237]],\n          64165: [[30239]],\n          64166: [[30410]],\n          64167: [[30427]],\n          64168: [[30452]],\n          64169: [[30538]],\n          64170: [[30528]],\n          64171: [[30924]],\n          64172: [[31409]],\n          64173: [[31680]],\n          64174: [[31867]],\n          64175: [[32091]],\n          64176: [[32244]],\n          64177: [[32574]],\n          64178: [[32773]],\n          64179: [[33618]],\n          64180: [[33775]],\n          64181: [[34681]],\n          64182: [[35137]],\n          64183: [[35206]],\n          64184: [[35222]],\n          64185: [[35519]],\n          64186: [[35576]],\n          64187: [[35531]],\n          64188: [[35585]],\n          64189: [[35582]],\n          64190: [[35565]],\n          64191: [[35641]],\n          64192: [[35722]],\n          64193: [[36104]],\n          64194: [[36664]],\n          64195: [[36978]],\n          64196: [[37273]],\n          64197: [[37494]],\n          64198: [[38524]],\n          64199: [[38627]],\n          64200: [[38742]],\n          64201: [[38875]],\n          64202: [[38911]],\n          64203: [[38923]],\n          64204: [[38971]],\n          64205: [[39698]],\n          64206: [[40860]],\n          64207: [[141386]],\n          64208: [[141380]],\n          64209: [[144341]],\n          64210: [[15261]],\n          64211: [[16408]],\n          64212: [[16441]],\n          64213: [[152137]],\n          64214: [[154832]],\n          64215: [[163539]],\n          64216: [[40771]],\n          64217: [[40846]],\n          195072: [[38953]],\n          195073: [[169398]],\n          195074: [[39138]],\n          195075: [[19251]],\n          195076: [[39209]],\n          195077: [[39335]],\n          195078: [[39362]],\n          195079: [[39422]],\n          195080: [[19406]],\n          195081: [[170800]],\n          195082: [[39698]],\n          195083: [[40000]],\n          195084: [[40189]],\n          195085: [[19662]],\n          195086: [[19693]],\n          195087: [[40295]],\n          195088: [[172238]],\n          195089: [[19704]],\n          195090: [[172293]],\n          195091: [[172558]],\n          195092: [[172689]],\n          195093: [[40635]],\n          195094: [[19798]],\n          195095: [[40697]],\n          195096: [[40702]],\n          195097: [[40709]],\n          195098: [[40719]],\n          195099: [[40726]],\n          195100: [[40763]],\n          195101: [[173568]]\n        },\n        64256: {\n          64256: [[102, 102], 256],\n          64257: [[102, 105], 256],\n          64258: [[102, 108], 256],\n          64259: [[102, 102, 105], 256],\n          64260: [[102, 102, 108], 256],\n          64261: [[383, 116], 256],\n          64262: [[115, 116], 256],\n          64275: [[1396, 1398], 256],\n          64276: [[1396, 1381], 256],\n          64277: [[1396, 1387], 256],\n          64278: [[1406, 1398], 256],\n          64279: [[1396, 1389], 256],\n          64285: [[1497, 1460], 512],\n          64286: [, 26],\n          64287: [[1522, 1463], 512],\n          64288: [[1506], 256],\n          64289: [[1488], 256],\n          64290: [[1491], 256],\n          64291: [[1492], 256],\n          64292: [[1499], 256],\n          64293: [[1500], 256],\n          64294: [[1501], 256],\n          64295: [[1512], 256],\n          64296: [[1514], 256],\n          64297: [[43], 256],\n          64298: [[1513, 1473], 512],\n          64299: [[1513, 1474], 512],\n          64300: [[64329, 1473], 512],\n          64301: [[64329, 1474], 512],\n          64302: [[1488, 1463], 512],\n          64303: [[1488, 1464], 512],\n          64304: [[1488, 1468], 512],\n          64305: [[1489, 1468], 512],\n          64306: [[1490, 1468], 512],\n          64307: [[1491, 1468], 512],\n          64308: [[1492, 1468], 512],\n          64309: [[1493, 1468], 512],\n          64310: [[1494, 1468], 512],\n          64312: [[1496, 1468], 512],\n          64313: [[1497, 1468], 512],\n          64314: [[1498, 1468], 512],\n          64315: [[1499, 1468], 512],\n          64316: [[1500, 1468], 512],\n          64318: [[1502, 1468], 512],\n          64320: [[1504, 1468], 512],\n          64321: [[1505, 1468], 512],\n          64323: [[1507, 1468], 512],\n          64324: [[1508, 1468], 512],\n          64326: [[1510, 1468], 512],\n          64327: [[1511, 1468], 512],\n          64328: [[1512, 1468], 512],\n          64329: [[1513, 1468], 512],\n          64330: [[1514, 1468], 512],\n          64331: [[1493, 1465], 512],\n          64332: [[1489, 1471], 512],\n          64333: [[1499, 1471], 512],\n          64334: [[1508, 1471], 512],\n          64335: [[1488, 1500], 256],\n          64336: [[1649], 256],\n          64337: [[1649], 256],\n          64338: [[1659], 256],\n          64339: [[1659], 256],\n          64340: [[1659], 256],\n          64341: [[1659], 256],\n          64342: [[1662], 256],\n          64343: [[1662], 256],\n          64344: [[1662], 256],\n          64345: [[1662], 256],\n          64346: [[1664], 256],\n          64347: [[1664], 256],\n          64348: [[1664], 256],\n          64349: [[1664], 256],\n          64350: [[1658], 256],\n          64351: [[1658], 256],\n          64352: [[1658], 256],\n          64353: [[1658], 256],\n          64354: [[1663], 256],\n          64355: [[1663], 256],\n          64356: [[1663], 256],\n          64357: [[1663], 256],\n          64358: [[1657], 256],\n          64359: [[1657], 256],\n          64360: [[1657], 256],\n          64361: [[1657], 256],\n          64362: [[1700], 256],\n          64363: [[1700], 256],\n          64364: [[1700], 256],\n          64365: [[1700], 256],\n          64366: [[1702], 256],\n          64367: [[1702], 256],\n          64368: [[1702], 256],\n          64369: [[1702], 256],\n          64370: [[1668], 256],\n          64371: [[1668], 256],\n          64372: [[1668], 256],\n          64373: [[1668], 256],\n          64374: [[1667], 256],\n          64375: [[1667], 256],\n          64376: [[1667], 256],\n          64377: [[1667], 256],\n          64378: [[1670], 256],\n          64379: [[1670], 256],\n          64380: [[1670], 256],\n          64381: [[1670], 256],\n          64382: [[1671], 256],\n          64383: [[1671], 256],\n          64384: [[1671], 256],\n          64385: [[1671], 256],\n          64386: [[1677], 256],\n          64387: [[1677], 256],\n          64388: [[1676], 256],\n          64389: [[1676], 256],\n          64390: [[1678], 256],\n          64391: [[1678], 256],\n          64392: [[1672], 256],\n          64393: [[1672], 256],\n          64394: [[1688], 256],\n          64395: [[1688], 256],\n          64396: [[1681], 256],\n          64397: [[1681], 256],\n          64398: [[1705], 256],\n          64399: [[1705], 256],\n          64400: [[1705], 256],\n          64401: [[1705], 256],\n          64402: [[1711], 256],\n          64403: [[1711], 256],\n          64404: [[1711], 256],\n          64405: [[1711], 256],\n          64406: [[1715], 256],\n          64407: [[1715], 256],\n          64408: [[1715], 256],\n          64409: [[1715], 256],\n          64410: [[1713], 256],\n          64411: [[1713], 256],\n          64412: [[1713], 256],\n          64413: [[1713], 256],\n          64414: [[1722], 256],\n          64415: [[1722], 256],\n          64416: [[1723], 256],\n          64417: [[1723], 256],\n          64418: [[1723], 256],\n          64419: [[1723], 256],\n          64420: [[1728], 256],\n          64421: [[1728], 256],\n          64422: [[1729], 256],\n          64423: [[1729], 256],\n          64424: [[1729], 256],\n          64425: [[1729], 256],\n          64426: [[1726], 256],\n          64427: [[1726], 256],\n          64428: [[1726], 256],\n          64429: [[1726], 256],\n          64430: [[1746], 256],\n          64431: [[1746], 256],\n          64432: [[1747], 256],\n          64433: [[1747], 256],\n          64467: [[1709], 256],\n          64468: [[1709], 256],\n          64469: [[1709], 256],\n          64470: [[1709], 256],\n          64471: [[1735], 256],\n          64472: [[1735], 256],\n          64473: [[1734], 256],\n          64474: [[1734], 256],\n          64475: [[1736], 256],\n          64476: [[1736], 256],\n          64477: [[1655], 256],\n          64478: [[1739], 256],\n          64479: [[1739], 256],\n          64480: [[1733], 256],\n          64481: [[1733], 256],\n          64482: [[1737], 256],\n          64483: [[1737], 256],\n          64484: [[1744], 256],\n          64485: [[1744], 256],\n          64486: [[1744], 256],\n          64487: [[1744], 256],\n          64488: [[1609], 256],\n          64489: [[1609], 256],\n          64490: [[1574, 1575], 256],\n          64491: [[1574, 1575], 256],\n          64492: [[1574, 1749], 256],\n          64493: [[1574, 1749], 256],\n          64494: [[1574, 1608], 256],\n          64495: [[1574, 1608], 256],\n          64496: [[1574, 1735], 256],\n          64497: [[1574, 1735], 256],\n          64498: [[1574, 1734], 256],\n          64499: [[1574, 1734], 256],\n          64500: [[1574, 1736], 256],\n          64501: [[1574, 1736], 256],\n          64502: [[1574, 1744], 256],\n          64503: [[1574, 1744], 256],\n          64504: [[1574, 1744], 256],\n          64505: [[1574, 1609], 256],\n          64506: [[1574, 1609], 256],\n          64507: [[1574, 1609], 256],\n          64508: [[1740], 256],\n          64509: [[1740], 256],\n          64510: [[1740], 256],\n          64511: [[1740], 256]\n        },\n        64512: {\n          64512: [[1574, 1580], 256],\n          64513: [[1574, 1581], 256],\n          64514: [[1574, 1605], 256],\n          64515: [[1574, 1609], 256],\n          64516: [[1574, 1610], 256],\n          64517: [[1576, 1580], 256],\n          64518: [[1576, 1581], 256],\n          64519: [[1576, 1582], 256],\n          64520: [[1576, 1605], 256],\n          64521: [[1576, 1609], 256],\n          64522: [[1576, 1610], 256],\n          64523: [[1578, 1580], 256],\n          64524: [[1578, 1581], 256],\n          64525: [[1578, 1582], 256],\n          64526: [[1578, 1605], 256],\n          64527: [[1578, 1609], 256],\n          64528: [[1578, 1610], 256],\n          64529: [[1579, 1580], 256],\n          64530: [[1579, 1605], 256],\n          64531: [[1579, 1609], 256],\n          64532: [[1579, 1610], 256],\n          64533: [[1580, 1581], 256],\n          64534: [[1580, 1605], 256],\n          64535: [[1581, 1580], 256],\n          64536: [[1581, 1605], 256],\n          64537: [[1582, 1580], 256],\n          64538: [[1582, 1581], 256],\n          64539: [[1582, 1605], 256],\n          64540: [[1587, 1580], 256],\n          64541: [[1587, 1581], 256],\n          64542: [[1587, 1582], 256],\n          64543: [[1587, 1605], 256],\n          64544: [[1589, 1581], 256],\n          64545: [[1589, 1605], 256],\n          64546: [[1590, 1580], 256],\n          64547: [[1590, 1581], 256],\n          64548: [[1590, 1582], 256],\n          64549: [[1590, 1605], 256],\n          64550: [[1591, 1581], 256],\n          64551: [[1591, 1605], 256],\n          64552: [[1592, 1605], 256],\n          64553: [[1593, 1580], 256],\n          64554: [[1593, 1605], 256],\n          64555: [[1594, 1580], 256],\n          64556: [[1594, 1605], 256],\n          64557: [[1601, 1580], 256],\n          64558: [[1601, 1581], 256],\n          64559: [[1601, 1582], 256],\n          64560: [[1601, 1605], 256],\n          64561: [[1601, 1609], 256],\n          64562: [[1601, 1610], 256],\n          64563: [[1602, 1581], 256],\n          64564: [[1602, 1605], 256],\n          64565: [[1602, 1609], 256],\n          64566: [[1602, 1610], 256],\n          64567: [[1603, 1575], 256],\n          64568: [[1603, 1580], 256],\n          64569: [[1603, 1581], 256],\n          64570: [[1603, 1582], 256],\n          64571: [[1603, 1604], 256],\n          64572: [[1603, 1605], 256],\n          64573: [[1603, 1609], 256],\n          64574: [[1603, 1610], 256],\n          64575: [[1604, 1580], 256],\n          64576: [[1604, 1581], 256],\n          64577: [[1604, 1582], 256],\n          64578: [[1604, 1605], 256],\n          64579: [[1604, 1609], 256],\n          64580: [[1604, 1610], 256],\n          64581: [[1605, 1580], 256],\n          64582: [[1605, 1581], 256],\n          64583: [[1605, 1582], 256],\n          64584: [[1605, 1605], 256],\n          64585: [[1605, 1609], 256],\n          64586: [[1605, 1610], 256],\n          64587: [[1606, 1580], 256],\n          64588: [[1606, 1581], 256],\n          64589: [[1606, 1582], 256],\n          64590: [[1606, 1605], 256],\n          64591: [[1606, 1609], 256],\n          64592: [[1606, 1610], 256],\n          64593: [[1607, 1580], 256],\n          64594: [[1607, 1605], 256],\n          64595: [[1607, 1609], 256],\n          64596: [[1607, 1610], 256],\n          64597: [[1610, 1580], 256],\n          64598: [[1610, 1581], 256],\n          64599: [[1610, 1582], 256],\n          64600: [[1610, 1605], 256],\n          64601: [[1610, 1609], 256],\n          64602: [[1610, 1610], 256],\n          64603: [[1584, 1648], 256],\n          64604: [[1585, 1648], 256],\n          64605: [[1609, 1648], 256],\n          64606: [[32, 1612, 1617], 256],\n          64607: [[32, 1613, 1617], 256],\n          64608: [[32, 1614, 1617], 256],\n          64609: [[32, 1615, 1617], 256],\n          64610: [[32, 1616, 1617], 256],\n          64611: [[32, 1617, 1648], 256],\n          64612: [[1574, 1585], 256],\n          64613: [[1574, 1586], 256],\n          64614: [[1574, 1605], 256],\n          64615: [[1574, 1606], 256],\n          64616: [[1574, 1609], 256],\n          64617: [[1574, 1610], 256],\n          64618: [[1576, 1585], 256],\n          64619: [[1576, 1586], 256],\n          64620: [[1576, 1605], 256],\n          64621: [[1576, 1606], 256],\n          64622: [[1576, 1609], 256],\n          64623: [[1576, 1610], 256],\n          64624: [[1578, 1585], 256],\n          64625: [[1578, 1586], 256],\n          64626: [[1578, 1605], 256],\n          64627: [[1578, 1606], 256],\n          64628: [[1578, 1609], 256],\n          64629: [[1578, 1610], 256],\n          64630: [[1579, 1585], 256],\n          64631: [[1579, 1586], 256],\n          64632: [[1579, 1605], 256],\n          64633: [[1579, 1606], 256],\n          64634: [[1579, 1609], 256],\n          64635: [[1579, 1610], 256],\n          64636: [[1601, 1609], 256],\n          64637: [[1601, 1610], 256],\n          64638: [[1602, 1609], 256],\n          64639: [[1602, 1610], 256],\n          64640: [[1603, 1575], 256],\n          64641: [[1603, 1604], 256],\n          64642: [[1603, 1605], 256],\n          64643: [[1603, 1609], 256],\n          64644: [[1603, 1610], 256],\n          64645: [[1604, 1605], 256],\n          64646: [[1604, 1609], 256],\n          64647: [[1604, 1610], 256],\n          64648: [[1605, 1575], 256],\n          64649: [[1605, 1605], 256],\n          64650: [[1606, 1585], 256],\n          64651: [[1606, 1586], 256],\n          64652: [[1606, 1605], 256],\n          64653: [[1606, 1606], 256],\n          64654: [[1606, 1609], 256],\n          64655: [[1606, 1610], 256],\n          64656: [[1609, 1648], 256],\n          64657: [[1610, 1585], 256],\n          64658: [[1610, 1586], 256],\n          64659: [[1610, 1605], 256],\n          64660: [[1610, 1606], 256],\n          64661: [[1610, 1609], 256],\n          64662: [[1610, 1610], 256],\n          64663: [[1574, 1580], 256],\n          64664: [[1574, 1581], 256],\n          64665: [[1574, 1582], 256],\n          64666: [[1574, 1605], 256],\n          64667: [[1574, 1607], 256],\n          64668: [[1576, 1580], 256],\n          64669: [[1576, 1581], 256],\n          64670: [[1576, 1582], 256],\n          64671: [[1576, 1605], 256],\n          64672: [[1576, 1607], 256],\n          64673: [[1578, 1580], 256],\n          64674: [[1578, 1581], 256],\n          64675: [[1578, 1582], 256],\n          64676: [[1578, 1605], 256],\n          64677: [[1578, 1607], 256],\n          64678: [[1579, 1605], 256],\n          64679: [[1580, 1581], 256],\n          64680: [[1580, 1605], 256],\n          64681: [[1581, 1580], 256],\n          64682: [[1581, 1605], 256],\n          64683: [[1582, 1580], 256],\n          64684: [[1582, 1605], 256],\n          64685: [[1587, 1580], 256],\n          64686: [[1587, 1581], 256],\n          64687: [[1587, 1582], 256],\n          64688: [[1587, 1605], 256],\n          64689: [[1589, 1581], 256],\n          64690: [[1589, 1582], 256],\n          64691: [[1589, 1605], 256],\n          64692: [[1590, 1580], 256],\n          64693: [[1590, 1581], 256],\n          64694: [[1590, 1582], 256],\n          64695: [[1590, 1605], 256],\n          64696: [[1591, 1581], 256],\n          64697: [[1592, 1605], 256],\n          64698: [[1593, 1580], 256],\n          64699: [[1593, 1605], 256],\n          64700: [[1594, 1580], 256],\n          64701: [[1594, 1605], 256],\n          64702: [[1601, 1580], 256],\n          64703: [[1601, 1581], 256],\n          64704: [[1601, 1582], 256],\n          64705: [[1601, 1605], 256],\n          64706: [[1602, 1581], 256],\n          64707: [[1602, 1605], 256],\n          64708: [[1603, 1580], 256],\n          64709: [[1603, 1581], 256],\n          64710: [[1603, 1582], 256],\n          64711: [[1603, 1604], 256],\n          64712: [[1603, 1605], 256],\n          64713: [[1604, 1580], 256],\n          64714: [[1604, 1581], 256],\n          64715: [[1604, 1582], 256],\n          64716: [[1604, 1605], 256],\n          64717: [[1604, 1607], 256],\n          64718: [[1605, 1580], 256],\n          64719: [[1605, 1581], 256],\n          64720: [[1605, 1582], 256],\n          64721: [[1605, 1605], 256],\n          64722: [[1606, 1580], 256],\n          64723: [[1606, 1581], 256],\n          64724: [[1606, 1582], 256],\n          64725: [[1606, 1605], 256],\n          64726: [[1606, 1607], 256],\n          64727: [[1607, 1580], 256],\n          64728: [[1607, 1605], 256],\n          64729: [[1607, 1648], 256],\n          64730: [[1610, 1580], 256],\n          64731: [[1610, 1581], 256],\n          64732: [[1610, 1582], 256],\n          64733: [[1610, 1605], 256],\n          64734: [[1610, 1607], 256],\n          64735: [[1574, 1605], 256],\n          64736: [[1574, 1607], 256],\n          64737: [[1576, 1605], 256],\n          64738: [[1576, 1607], 256],\n          64739: [[1578, 1605], 256],\n          64740: [[1578, 1607], 256],\n          64741: [[1579, 1605], 256],\n          64742: [[1579, 1607], 256],\n          64743: [[1587, 1605], 256],\n          64744: [[1587, 1607], 256],\n          64745: [[1588, 1605], 256],\n          64746: [[1588, 1607], 256],\n          64747: [[1603, 1604], 256],\n          64748: [[1603, 1605], 256],\n          64749: [[1604, 1605], 256],\n          64750: [[1606, 1605], 256],\n          64751: [[1606, 1607], 256],\n          64752: [[1610, 1605], 256],\n          64753: [[1610, 1607], 256],\n          64754: [[1600, 1614, 1617], 256],\n          64755: [[1600, 1615, 1617], 256],\n          64756: [[1600, 1616, 1617], 256],\n          64757: [[1591, 1609], 256],\n          64758: [[1591, 1610], 256],\n          64759: [[1593, 1609], 256],\n          64760: [[1593, 1610], 256],\n          64761: [[1594, 1609], 256],\n          64762: [[1594, 1610], 256],\n          64763: [[1587, 1609], 256],\n          64764: [[1587, 1610], 256],\n          64765: [[1588, 1609], 256],\n          64766: [[1588, 1610], 256],\n          64767: [[1581, 1609], 256]\n        },\n        64768: {\n          64768: [[1581, 1610], 256],\n          64769: [[1580, 1609], 256],\n          64770: [[1580, 1610], 256],\n          64771: [[1582, 1609], 256],\n          64772: [[1582, 1610], 256],\n          64773: [[1589, 1609], 256],\n          64774: [[1589, 1610], 256],\n          64775: [[1590, 1609], 256],\n          64776: [[1590, 1610], 256],\n          64777: [[1588, 1580], 256],\n          64778: [[1588, 1581], 256],\n          64779: [[1588, 1582], 256],\n          64780: [[1588, 1605], 256],\n          64781: [[1588, 1585], 256],\n          64782: [[1587, 1585], 256],\n          64783: [[1589, 1585], 256],\n          64784: [[1590, 1585], 256],\n          64785: [[1591, 1609], 256],\n          64786: [[1591, 1610], 256],\n          64787: [[1593, 1609], 256],\n          64788: [[1593, 1610], 256],\n          64789: [[1594, 1609], 256],\n          64790: [[1594, 1610], 256],\n          64791: [[1587, 1609], 256],\n          64792: [[1587, 1610], 256],\n          64793: [[1588, 1609], 256],\n          64794: [[1588, 1610], 256],\n          64795: [[1581, 1609], 256],\n          64796: [[1581, 1610], 256],\n          64797: [[1580, 1609], 256],\n          64798: [[1580, 1610], 256],\n          64799: [[1582, 1609], 256],\n          64800: [[1582, 1610], 256],\n          64801: [[1589, 1609], 256],\n          64802: [[1589, 1610], 256],\n          64803: [[1590, 1609], 256],\n          64804: [[1590, 1610], 256],\n          64805: [[1588, 1580], 256],\n          64806: [[1588, 1581], 256],\n          64807: [[1588, 1582], 256],\n          64808: [[1588, 1605], 256],\n          64809: [[1588, 1585], 256],\n          64810: [[1587, 1585], 256],\n          64811: [[1589, 1585], 256],\n          64812: [[1590, 1585], 256],\n          64813: [[1588, 1580], 256],\n          64814: [[1588, 1581], 256],\n          64815: [[1588, 1582], 256],\n          64816: [[1588, 1605], 256],\n          64817: [[1587, 1607], 256],\n          64818: [[1588, 1607], 256],\n          64819: [[1591, 1605], 256],\n          64820: [[1587, 1580], 256],\n          64821: [[1587, 1581], 256],\n          64822: [[1587, 1582], 256],\n          64823: [[1588, 1580], 256],\n          64824: [[1588, 1581], 256],\n          64825: [[1588, 1582], 256],\n          64826: [[1591, 1605], 256],\n          64827: [[1592, 1605], 256],\n          64828: [[1575, 1611], 256],\n          64829: [[1575, 1611], 256],\n          64848: [[1578, 1580, 1605], 256],\n          64849: [[1578, 1581, 1580], 256],\n          64850: [[1578, 1581, 1580], 256],\n          64851: [[1578, 1581, 1605], 256],\n          64852: [[1578, 1582, 1605], 256],\n          64853: [[1578, 1605, 1580], 256],\n          64854: [[1578, 1605, 1581], 256],\n          64855: [[1578, 1605, 1582], 256],\n          64856: [[1580, 1605, 1581], 256],\n          64857: [[1580, 1605, 1581], 256],\n          64858: [[1581, 1605, 1610], 256],\n          64859: [[1581, 1605, 1609], 256],\n          64860: [[1587, 1581, 1580], 256],\n          64861: [[1587, 1580, 1581], 256],\n          64862: [[1587, 1580, 1609], 256],\n          64863: [[1587, 1605, 1581], 256],\n          64864: [[1587, 1605, 1581], 256],\n          64865: [[1587, 1605, 1580], 256],\n          64866: [[1587, 1605, 1605], 256],\n          64867: [[1587, 1605, 1605], 256],\n          64868: [[1589, 1581, 1581], 256],\n          64869: [[1589, 1581, 1581], 256],\n          64870: [[1589, 1605, 1605], 256],\n          64871: [[1588, 1581, 1605], 256],\n          64872: [[1588, 1581, 1605], 256],\n          64873: [[1588, 1580, 1610], 256],\n          64874: [[1588, 1605, 1582], 256],\n          64875: [[1588, 1605, 1582], 256],\n          64876: [[1588, 1605, 1605], 256],\n          64877: [[1588, 1605, 1605], 256],\n          64878: [[1590, 1581, 1609], 256],\n          64879: [[1590, 1582, 1605], 256],\n          64880: [[1590, 1582, 1605], 256],\n          64881: [[1591, 1605, 1581], 256],\n          64882: [[1591, 1605, 1581], 256],\n          64883: [[1591, 1605, 1605], 256],\n          64884: [[1591, 1605, 1610], 256],\n          64885: [[1593, 1580, 1605], 256],\n          64886: [[1593, 1605, 1605], 256],\n          64887: [[1593, 1605, 1605], 256],\n          64888: [[1593, 1605, 1609], 256],\n          64889: [[1594, 1605, 1605], 256],\n          64890: [[1594, 1605, 1610], 256],\n          64891: [[1594, 1605, 1609], 256],\n          64892: [[1601, 1582, 1605], 256],\n          64893: [[1601, 1582, 1605], 256],\n          64894: [[1602, 1605, 1581], 256],\n          64895: [[1602, 1605, 1605], 256],\n          64896: [[1604, 1581, 1605], 256],\n          64897: [[1604, 1581, 1610], 256],\n          64898: [[1604, 1581, 1609], 256],\n          64899: [[1604, 1580, 1580], 256],\n          64900: [[1604, 1580, 1580], 256],\n          64901: [[1604, 1582, 1605], 256],\n          64902: [[1604, 1582, 1605], 256],\n          64903: [[1604, 1605, 1581], 256],\n          64904: [[1604, 1605, 1581], 256],\n          64905: [[1605, 1581, 1580], 256],\n          64906: [[1605, 1581, 1605], 256],\n          64907: [[1605, 1581, 1610], 256],\n          64908: [[1605, 1580, 1581], 256],\n          64909: [[1605, 1580, 1605], 256],\n          64910: [[1605, 1582, 1580], 256],\n          64911: [[1605, 1582, 1605], 256],\n          64914: [[1605, 1580, 1582], 256],\n          64915: [[1607, 1605, 1580], 256],\n          64916: [[1607, 1605, 1605], 256],\n          64917: [[1606, 1581, 1605], 256],\n          64918: [[1606, 1581, 1609], 256],\n          64919: [[1606, 1580, 1605], 256],\n          64920: [[1606, 1580, 1605], 256],\n          64921: [[1606, 1580, 1609], 256],\n          64922: [[1606, 1605, 1610], 256],\n          64923: [[1606, 1605, 1609], 256],\n          64924: [[1610, 1605, 1605], 256],\n          64925: [[1610, 1605, 1605], 256],\n          64926: [[1576, 1582, 1610], 256],\n          64927: [[1578, 1580, 1610], 256],\n          64928: [[1578, 1580, 1609], 256],\n          64929: [[1578, 1582, 1610], 256],\n          64930: [[1578, 1582, 1609], 256],\n          64931: [[1578, 1605, 1610], 256],\n          64932: [[1578, 1605, 1609], 256],\n          64933: [[1580, 1605, 1610], 256],\n          64934: [[1580, 1581, 1609], 256],\n          64935: [[1580, 1605, 1609], 256],\n          64936: [[1587, 1582, 1609], 256],\n          64937: [[1589, 1581, 1610], 256],\n          64938: [[1588, 1581, 1610], 256],\n          64939: [[1590, 1581, 1610], 256],\n          64940: [[1604, 1580, 1610], 256],\n          64941: [[1604, 1605, 1610], 256],\n          64942: [[1610, 1581, 1610], 256],\n          64943: [[1610, 1580, 1610], 256],\n          64944: [[1610, 1605, 1610], 256],\n          64945: [[1605, 1605, 1610], 256],\n          64946: [[1602, 1605, 1610], 256],\n          64947: [[1606, 1581, 1610], 256],\n          64948: [[1602, 1605, 1581], 256],\n          64949: [[1604, 1581, 1605], 256],\n          64950: [[1593, 1605, 1610], 256],\n          64951: [[1603, 1605, 1610], 256],\n          64952: [[1606, 1580, 1581], 256],\n          64953: [[1605, 1582, 1610], 256],\n          64954: [[1604, 1580, 1605], 256],\n          64955: [[1603, 1605, 1605], 256],\n          64956: [[1604, 1580, 1605], 256],\n          64957: [[1606, 1580, 1581], 256],\n          64958: [[1580, 1581, 1610], 256],\n          64959: [[1581, 1580, 1610], 256],\n          64960: [[1605, 1580, 1610], 256],\n          64961: [[1601, 1605, 1610], 256],\n          64962: [[1576, 1581, 1610], 256],\n          64963: [[1603, 1605, 1605], 256],\n          64964: [[1593, 1580, 1605], 256],\n          64965: [[1589, 1605, 1605], 256],\n          64966: [[1587, 1582, 1610], 256],\n          64967: [[1606, 1580, 1610], 256],\n          65008: [[1589, 1604, 1746], 256],\n          65009: [[1602, 1604, 1746], 256],\n          65010: [[1575, 1604, 1604, 1607], 256],\n          65011: [[1575, 1603, 1576, 1585], 256],\n          65012: [[1605, 1581, 1605, 1583], 256],\n          65013: [[1589, 1604, 1593, 1605], 256],\n          65014: [[1585, 1587, 1608, 1604], 256],\n          65015: [[1593, 1604, 1610, 1607], 256],\n          65016: [[1608, 1587, 1604, 1605], 256],\n          65017: [[1589, 1604, 1609], 256],\n          65018: [[1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593, 1604, 1610, 1607, 32, 1608, 1587, 1604, 1605], 256],\n          65019: [[1580, 1604, 32, 1580, 1604, 1575, 1604, 1607], 256],\n          65020: [[1585, 1740, 1575, 1604], 256]\n        },\n        65024: {\n          65040: [[44], 256],\n          65041: [[12289], 256],\n          65042: [[12290], 256],\n          65043: [[58], 256],\n          65044: [[59], 256],\n          65045: [[33], 256],\n          65046: [[63], 256],\n          65047: [[12310], 256],\n          65048: [[12311], 256],\n          65049: [[8230], 256],\n          65056: [, 230],\n          65057: [, 230],\n          65058: [, 230],\n          65059: [, 230],\n          65060: [, 230],\n          65061: [, 230],\n          65062: [, 230],\n          65063: [, 220],\n          65064: [, 220],\n          65065: [, 220],\n          65066: [, 220],\n          65067: [, 220],\n          65068: [, 220],\n          65069: [, 220],\n          65072: [[8229], 256],\n          65073: [[8212], 256],\n          65074: [[8211], 256],\n          65075: [[95], 256],\n          65076: [[95], 256],\n          65077: [[40], 256],\n          65078: [[41], 256],\n          65079: [[123], 256],\n          65080: [[125], 256],\n          65081: [[12308], 256],\n          65082: [[12309], 256],\n          65083: [[12304], 256],\n          65084: [[12305], 256],\n          65085: [[12298], 256],\n          65086: [[12299], 256],\n          65087: [[12296], 256],\n          65088: [[12297], 256],\n          65089: [[12300], 256],\n          65090: [[12301], 256],\n          65091: [[12302], 256],\n          65092: [[12303], 256],\n          65095: [[91], 256],\n          65096: [[93], 256],\n          65097: [[8254], 256],\n          65098: [[8254], 256],\n          65099: [[8254], 256],\n          65100: [[8254], 256],\n          65101: [[95], 256],\n          65102: [[95], 256],\n          65103: [[95], 256],\n          65104: [[44], 256],\n          65105: [[12289], 256],\n          65106: [[46], 256],\n          65108: [[59], 256],\n          65109: [[58], 256],\n          65110: [[63], 256],\n          65111: [[33], 256],\n          65112: [[8212], 256],\n          65113: [[40], 256],\n          65114: [[41], 256],\n          65115: [[123], 256],\n          65116: [[125], 256],\n          65117: [[12308], 256],\n          65118: [[12309], 256],\n          65119: [[35], 256],\n          65120: [[38], 256],\n          65121: [[42], 256],\n          65122: [[43], 256],\n          65123: [[45], 256],\n          65124: [[60], 256],\n          65125: [[62], 256],\n          65126: [[61], 256],\n          65128: [[92], 256],\n          65129: [[36], 256],\n          65130: [[37], 256],\n          65131: [[64], 256],\n          65136: [[32, 1611], 256],\n          65137: [[1600, 1611], 256],\n          65138: [[32, 1612], 256],\n          65140: [[32, 1613], 256],\n          65142: [[32, 1614], 256],\n          65143: [[1600, 1614], 256],\n          65144: [[32, 1615], 256],\n          65145: [[1600, 1615], 256],\n          65146: [[32, 1616], 256],\n          65147: [[1600, 1616], 256],\n          65148: [[32, 1617], 256],\n          65149: [[1600, 1617], 256],\n          65150: [[32, 1618], 256],\n          65151: [[1600, 1618], 256],\n          65152: [[1569], 256],\n          65153: [[1570], 256],\n          65154: [[1570], 256],\n          65155: [[1571], 256],\n          65156: [[1571], 256],\n          65157: [[1572], 256],\n          65158: [[1572], 256],\n          65159: [[1573], 256],\n          65160: [[1573], 256],\n          65161: [[1574], 256],\n          65162: [[1574], 256],\n          65163: [[1574], 256],\n          65164: [[1574], 256],\n          65165: [[1575], 256],\n          65166: [[1575], 256],\n          65167: [[1576], 256],\n          65168: [[1576], 256],\n          65169: [[1576], 256],\n          65170: [[1576], 256],\n          65171: [[1577], 256],\n          65172: [[1577], 256],\n          65173: [[1578], 256],\n          65174: [[1578], 256],\n          65175: [[1578], 256],\n          65176: [[1578], 256],\n          65177: [[1579], 256],\n          65178: [[1579], 256],\n          65179: [[1579], 256],\n          65180: [[1579], 256],\n          65181: [[1580], 256],\n          65182: [[1580], 256],\n          65183: [[1580], 256],\n          65184: [[1580], 256],\n          65185: [[1581], 256],\n          65186: [[1581], 256],\n          65187: [[1581], 256],\n          65188: [[1581], 256],\n          65189: [[1582], 256],\n          65190: [[1582], 256],\n          65191: [[1582], 256],\n          65192: [[1582], 256],\n          65193: [[1583], 256],\n          65194: [[1583], 256],\n          65195: [[1584], 256],\n          65196: [[1584], 256],\n          65197: [[1585], 256],\n          65198: [[1585], 256],\n          65199: [[1586], 256],\n          65200: [[1586], 256],\n          65201: [[1587], 256],\n          65202: [[1587], 256],\n          65203: [[1587], 256],\n          65204: [[1587], 256],\n          65205: [[1588], 256],\n          65206: [[1588], 256],\n          65207: [[1588], 256],\n          65208: [[1588], 256],\n          65209: [[1589], 256],\n          65210: [[1589], 256],\n          65211: [[1589], 256],\n          65212: [[1589], 256],\n          65213: [[1590], 256],\n          65214: [[1590], 256],\n          65215: [[1590], 256],\n          65216: [[1590], 256],\n          65217: [[1591], 256],\n          65218: [[1591], 256],\n          65219: [[1591], 256],\n          65220: [[1591], 256],\n          65221: [[1592], 256],\n          65222: [[1592], 256],\n          65223: [[1592], 256],\n          65224: [[1592], 256],\n          65225: [[1593], 256],\n          65226: [[1593], 256],\n          65227: [[1593], 256],\n          65228: [[1593], 256],\n          65229: [[1594], 256],\n          65230: [[1594], 256],\n          65231: [[1594], 256],\n          65232: [[1594], 256],\n          65233: [[1601], 256],\n          65234: [[1601], 256],\n          65235: [[1601], 256],\n          65236: [[1601], 256],\n          65237: [[1602], 256],\n          65238: [[1602], 256],\n          65239: [[1602], 256],\n          65240: [[1602], 256],\n          65241: [[1603], 256],\n          65242: [[1603], 256],\n          65243: [[1603], 256],\n          65244: [[1603], 256],\n          65245: [[1604], 256],\n          65246: [[1604], 256],\n          65247: [[1604], 256],\n          65248: [[1604], 256],\n          65249: [[1605], 256],\n          65250: [[1605], 256],\n          65251: [[1605], 256],\n          65252: [[1605], 256],\n          65253: [[1606], 256],\n          65254: [[1606], 256],\n          65255: [[1606], 256],\n          65256: [[1606], 256],\n          65257: [[1607], 256],\n          65258: [[1607], 256],\n          65259: [[1607], 256],\n          65260: [[1607], 256],\n          65261: [[1608], 256],\n          65262: [[1608], 256],\n          65263: [[1609], 256],\n          65264: [[1609], 256],\n          65265: [[1610], 256],\n          65266: [[1610], 256],\n          65267: [[1610], 256],\n          65268: [[1610], 256],\n          65269: [[1604, 1570], 256],\n          65270: [[1604, 1570], 256],\n          65271: [[1604, 1571], 256],\n          65272: [[1604, 1571], 256],\n          65273: [[1604, 1573], 256],\n          65274: [[1604, 1573], 256],\n          65275: [[1604, 1575], 256],\n          65276: [[1604, 1575], 256]\n        },\n        65280: {\n          65281: [[33], 256],\n          65282: [[34], 256],\n          65283: [[35], 256],\n          65284: [[36], 256],\n          65285: [[37], 256],\n          65286: [[38], 256],\n          65287: [[39], 256],\n          65288: [[40], 256],\n          65289: [[41], 256],\n          65290: [[42], 256],\n          65291: [[43], 256],\n          65292: [[44], 256],\n          65293: [[45], 256],\n          65294: [[46], 256],\n          65295: [[47], 256],\n          65296: [[48], 256],\n          65297: [[49], 256],\n          65298: [[50], 256],\n          65299: [[51], 256],\n          65300: [[52], 256],\n          65301: [[53], 256],\n          65302: [[54], 256],\n          65303: [[55], 256],\n          65304: [[56], 256],\n          65305: [[57], 256],\n          65306: [[58], 256],\n          65307: [[59], 256],\n          65308: [[60], 256],\n          65309: [[61], 256],\n          65310: [[62], 256],\n          65311: [[63], 256],\n          65312: [[64], 256],\n          65313: [[65], 256],\n          65314: [[66], 256],\n          65315: [[67], 256],\n          65316: [[68], 256],\n          65317: [[69], 256],\n          65318: [[70], 256],\n          65319: [[71], 256],\n          65320: [[72], 256],\n          65321: [[73], 256],\n          65322: [[74], 256],\n          65323: [[75], 256],\n          65324: [[76], 256],\n          65325: [[77], 256],\n          65326: [[78], 256],\n          65327: [[79], 256],\n          65328: [[80], 256],\n          65329: [[81], 256],\n          65330: [[82], 256],\n          65331: [[83], 256],\n          65332: [[84], 256],\n          65333: [[85], 256],\n          65334: [[86], 256],\n          65335: [[87], 256],\n          65336: [[88], 256],\n          65337: [[89], 256],\n          65338: [[90], 256],\n          65339: [[91], 256],\n          65340: [[92], 256],\n          65341: [[93], 256],\n          65342: [[94], 256],\n          65343: [[95], 256],\n          65344: [[96], 256],\n          65345: [[97], 256],\n          65346: [[98], 256],\n          65347: [[99], 256],\n          65348: [[100], 256],\n          65349: [[101], 256],\n          65350: [[102], 256],\n          65351: [[103], 256],\n          65352: [[104], 256],\n          65353: [[105], 256],\n          65354: [[106], 256],\n          65355: [[107], 256],\n          65356: [[108], 256],\n          65357: [[109], 256],\n          65358: [[110], 256],\n          65359: [[111], 256],\n          65360: [[112], 256],\n          65361: [[113], 256],\n          65362: [[114], 256],\n          65363: [[115], 256],\n          65364: [[116], 256],\n          65365: [[117], 256],\n          65366: [[118], 256],\n          65367: [[119], 256],\n          65368: [[120], 256],\n          65369: [[121], 256],\n          65370: [[122], 256],\n          65371: [[123], 256],\n          65372: [[124], 256],\n          65373: [[125], 256],\n          65374: [[126], 256],\n          65375: [[10629], 256],\n          65376: [[10630], 256],\n          65377: [[12290], 256],\n          65378: [[12300], 256],\n          65379: [[12301], 256],\n          65380: [[12289], 256],\n          65381: [[12539], 256],\n          65382: [[12530], 256],\n          65383: [[12449], 256],\n          65384: [[12451], 256],\n          65385: [[12453], 256],\n          65386: [[12455], 256],\n          65387: [[12457], 256],\n          65388: [[12515], 256],\n          65389: [[12517], 256],\n          65390: [[12519], 256],\n          65391: [[12483], 256],\n          65392: [[12540], 256],\n          65393: [[12450], 256],\n          65394: [[12452], 256],\n          65395: [[12454], 256],\n          65396: [[12456], 256],\n          65397: [[12458], 256],\n          65398: [[12459], 256],\n          65399: [[12461], 256],\n          65400: [[12463], 256],\n          65401: [[12465], 256],\n          65402: [[12467], 256],\n          65403: [[12469], 256],\n          65404: [[12471], 256],\n          65405: [[12473], 256],\n          65406: [[12475], 256],\n          65407: [[12477], 256],\n          65408: [[12479], 256],\n          65409: [[12481], 256],\n          65410: [[12484], 256],\n          65411: [[12486], 256],\n          65412: [[12488], 256],\n          65413: [[12490], 256],\n          65414: [[12491], 256],\n          65415: [[12492], 256],\n          65416: [[12493], 256],\n          65417: [[12494], 256],\n          65418: [[12495], 256],\n          65419: [[12498], 256],\n          65420: [[12501], 256],\n          65421: [[12504], 256],\n          65422: [[12507], 256],\n          65423: [[12510], 256],\n          65424: [[12511], 256],\n          65425: [[12512], 256],\n          65426: [[12513], 256],\n          65427: [[12514], 256],\n          65428: [[12516], 256],\n          65429: [[12518], 256],\n          65430: [[12520], 256],\n          65431: [[12521], 256],\n          65432: [[12522], 256],\n          65433: [[12523], 256],\n          65434: [[12524], 256],\n          65435: [[12525], 256],\n          65436: [[12527], 256],\n          65437: [[12531], 256],\n          65438: [[12441], 256],\n          65439: [[12442], 256],\n          65440: [[12644], 256],\n          65441: [[12593], 256],\n          65442: [[12594], 256],\n          65443: [[12595], 256],\n          65444: [[12596], 256],\n          65445: [[12597], 256],\n          65446: [[12598], 256],\n          65447: [[12599], 256],\n          65448: [[12600], 256],\n          65449: [[12601], 256],\n          65450: [[12602], 256],\n          65451: [[12603], 256],\n          65452: [[12604], 256],\n          65453: [[12605], 256],\n          65454: [[12606], 256],\n          65455: [[12607], 256],\n          65456: [[12608], 256],\n          65457: [[12609], 256],\n          65458: [[12610], 256],\n          65459: [[12611], 256],\n          65460: [[12612], 256],\n          65461: [[12613], 256],\n          65462: [[12614], 256],\n          65463: [[12615], 256],\n          65464: [[12616], 256],\n          65465: [[12617], 256],\n          65466: [[12618], 256],\n          65467: [[12619], 256],\n          65468: [[12620], 256],\n          65469: [[12621], 256],\n          65470: [[12622], 256],\n          65474: [[12623], 256],\n          65475: [[12624], 256],\n          65476: [[12625], 256],\n          65477: [[12626], 256],\n          65478: [[12627], 256],\n          65479: [[12628], 256],\n          65482: [[12629], 256],\n          65483: [[12630], 256],\n          65484: [[12631], 256],\n          65485: [[12632], 256],\n          65486: [[12633], 256],\n          65487: [[12634], 256],\n          65490: [[12635], 256],\n          65491: [[12636], 256],\n          65492: [[12637], 256],\n          65493: [[12638], 256],\n          65494: [[12639], 256],\n          65495: [[12640], 256],\n          65498: [[12641], 256],\n          65499: [[12642], 256],\n          65500: [[12643], 256],\n          65504: [[162], 256],\n          65505: [[163], 256],\n          65506: [[172], 256],\n          65507: [[175], 256],\n          65508: [[166], 256],\n          65509: [[165], 256],\n          65510: [[8361], 256],\n          65512: [[9474], 256],\n          65513: [[8592], 256],\n          65514: [[8593], 256],\n          65515: [[8594], 256],\n          65516: [[8595], 256],\n          65517: [[9632], 256],\n          65518: [[9675], 256]\n        }\n      };\n      /***** Module to export */\n\n      var unorm = {\n        nfc: nfc,\n        nfd: nfd,\n        nfkc: nfkc,\n        nfkd: nfkd\n      };\n      /*globals module:true,define:true*/\n      // CommonJS\n\n      {\n        module.exports = unorm; // AMD\n      }\n      /***** Export as shim for String::normalize method *****/\n\n      /*\n         http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#november_8_2013_draft_rev_21\n          21.1.3.12 String.prototype.normalize(form=\"NFC\")\n         When the normalize method is called with one argument form, the following steps are taken:\n          1. Let O be CheckObjectCoercible(this value).\n         2. Let S be ToString(O).\n         3. ReturnIfAbrupt(S).\n         4. If form is not provided or undefined let form be \"NFC\".\n         5. Let f be ToString(form).\n         6. ReturnIfAbrupt(f).\n         7. If f is not one of \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", then throw a RangeError Exception.\n         8. Let ns be the String value is the result of normalizing S into the normalization form named by f as specified in Unicode Standard Annex #15, UnicodeNormalizatoin Forms.\n         9. Return ns.\n          The length property of the normalize method is 0.\n          *NOTE* The normalize function is intentionally generic; it does not require that its this value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.\n      */\n\n      unorm.shimApplied = false;\n\n      if (!String.prototype.normalize) {\n        Object.defineProperty(String.prototype, \"normalize\", {\n          enumerable: false,\n          configurable: true,\n          writable: true,\n          value: function normalize()\n          /*form*/\n          {\n            var str = \"\" + this;\n            var form = arguments[0] === undefined ? \"NFC\" : arguments[0];\n\n            if (this === null || this === undefined) {\n              throw new TypeError(\"Cannot call method on \" + Object.prototype.toString.call(this));\n            }\n\n            if (form === \"NFC\") {\n              return unorm.nfc(str);\n            } else if (form === \"NFD\") {\n              return unorm.nfd(str);\n            } else if (form === \"NFKC\") {\n              return unorm.nfkc(str);\n            } else if (form === \"NFKD\") {\n              return unorm.nfkd(str);\n            } else {\n              throw new RangeError(\"Invalid normalization form: \" + form);\n            }\n          }\n        });\n        unorm.shimApplied = true;\n      }\n    })(commonjsGlobal);\n  });\n  var chinese_simplified = [\"的\", \"一\", \"是\", \"在\", \"不\", \"了\", \"有\", \"和\", \"人\", \"这\", \"中\", \"大\", \"为\", \"上\", \"个\", \"国\", \"我\", \"以\", \"要\", \"他\", \"时\", \"来\", \"用\", \"们\", \"生\", \"到\", \"作\", \"地\", \"于\", \"出\", \"就\", \"分\", \"对\", \"成\", \"会\", \"可\", \"主\", \"发\", \"年\", \"动\", \"同\", \"工\", \"也\", \"能\", \"下\", \"过\", \"子\", \"说\", \"产\", \"种\", \"面\", \"而\", \"方\", \"后\", \"多\", \"定\", \"行\", \"学\", \"法\", \"所\", \"民\", \"得\", \"经\", \"十\", \"三\", \"之\", \"进\", \"着\", \"等\", \"部\", \"度\", \"家\", \"电\", \"力\", \"里\", \"如\", \"水\", \"化\", \"高\", \"自\", \"二\", \"理\", \"起\", \"小\", \"物\", \"现\", \"实\", \"加\", \"量\", \"都\", \"两\", \"体\", \"制\", \"机\", \"当\", \"使\", \"点\", \"从\", \"业\", \"本\", \"去\", \"把\", \"性\", \"好\", \"应\", \"开\", \"它\", \"合\", \"还\", \"因\", \"由\", \"其\", \"些\", \"然\", \"前\", \"外\", \"天\", \"政\", \"四\", \"日\", \"那\", \"社\", \"义\", \"事\", \"平\", \"形\", \"相\", \"全\", \"表\", \"间\", \"样\", \"与\", \"关\", \"各\", \"重\", \"新\", \"线\", \"内\", \"数\", \"正\", \"心\", \"反\", \"你\", \"明\", \"看\", \"原\", \"又\", \"么\", \"利\", \"比\", \"或\", \"但\", \"质\", \"气\", \"第\", \"向\", \"道\", \"命\", \"此\", \"变\", \"条\", \"只\", \"没\", \"结\", \"解\", \"问\", \"意\", \"建\", \"月\", \"公\", \"无\", \"系\", \"军\", \"很\", \"情\", \"者\", \"最\", \"立\", \"代\", \"想\", \"已\", \"通\", \"并\", \"提\", \"直\", \"题\", \"党\", \"程\", \"展\", \"五\", \"果\", \"料\", \"象\", \"员\", \"革\", \"位\", \"入\", \"常\", \"文\", \"总\", \"次\", \"品\", \"式\", \"活\", \"设\", \"及\", \"管\", \"特\", \"件\", \"长\", \"求\", \"老\", \"头\", \"基\", \"资\", \"边\", \"流\", \"路\", \"级\", \"少\", \"图\", \"山\", \"统\", \"接\", \"知\", \"较\", \"将\", \"组\", \"见\", \"计\", \"别\", \"她\", \"手\", \"角\", \"期\", \"根\", \"论\", \"运\", \"农\", \"指\", \"几\", \"九\", \"区\", \"强\", \"放\", \"决\", \"西\", \"被\", \"干\", \"做\", \"必\", \"战\", \"先\", \"回\", \"则\", \"任\", \"取\", \"据\", \"处\", \"队\", \"南\", \"给\", \"色\", \"光\", \"门\", \"即\", \"保\", \"治\", \"北\", \"造\", \"百\", \"规\", \"热\", \"领\", \"七\", \"海\", \"口\", \"东\", \"导\", \"器\", \"压\", \"志\", \"世\", \"金\", \"增\", \"争\", \"济\", \"阶\", \"油\", \"思\", \"术\", \"极\", \"交\", \"受\", \"联\", \"什\", \"认\", \"六\", \"共\", \"权\", \"收\", \"证\", \"改\", \"清\", \"美\", \"再\", \"采\", \"转\", \"更\", \"单\", \"风\", \"切\", \"打\", \"白\", \"教\", \"速\", \"花\", \"带\", \"安\", \"场\", \"身\", \"车\", \"例\", \"真\", \"务\", \"具\", \"万\", \"每\", \"目\", \"至\", \"达\", \"走\", \"积\", \"示\", \"议\", \"声\", \"报\", \"斗\", \"完\", \"类\", \"八\", \"离\", \"华\", \"名\", \"确\", \"才\", \"科\", \"张\", \"信\", \"马\", \"节\", \"话\", \"米\", \"整\", \"空\", \"元\", \"况\", \"今\", \"集\", \"温\", \"传\", \"土\", \"许\", \"步\", \"群\", \"广\", \"石\", \"记\", \"需\", \"段\", \"研\", \"界\", \"拉\", \"林\", \"律\", \"叫\", \"且\", \"究\", \"观\", \"越\", \"织\", \"装\", \"影\", \"算\", \"低\", \"持\", \"音\", \"众\", \"书\", \"布\", \"复\", \"容\", \"儿\", \"须\", \"际\", \"商\", \"非\", \"验\", \"连\", \"断\", \"深\", \"难\", \"近\", \"矿\", \"千\", \"周\", \"委\", \"素\", \"技\", \"备\", \"半\", \"办\", \"青\", \"省\", \"列\", \"习\", \"响\", \"约\", \"支\", \"般\", \"史\", \"感\", \"劳\", \"便\", \"团\", \"往\", \"酸\", \"历\", \"市\", \"克\", \"何\", \"除\", \"消\", \"构\", \"府\", \"称\", \"太\", \"准\", \"精\", \"值\", \"号\", \"率\", \"族\", \"维\", \"划\", \"选\", \"标\", \"写\", \"存\", \"候\", \"毛\", \"亲\", \"快\", \"效\", \"斯\", \"院\", \"查\", \"江\", \"型\", \"眼\", \"王\", \"按\", \"格\", \"养\", \"易\", \"置\", \"派\", \"层\", \"片\", \"始\", \"却\", \"专\", \"状\", \"育\", \"厂\", \"京\", \"识\", \"适\", \"属\", \"圆\", \"包\", \"火\", \"住\", \"调\", \"满\", \"县\", \"局\", \"照\", \"参\", \"红\", \"细\", \"引\", \"听\", \"该\", \"铁\", \"价\", \"严\", \"首\", \"底\", \"液\", \"官\", \"德\", \"随\", \"病\", \"苏\", \"失\", \"尔\", \"死\", \"讲\", \"配\", \"女\", \"黄\", \"推\", \"显\", \"谈\", \"罪\", \"神\", \"艺\", \"呢\", \"席\", \"含\", \"企\", \"望\", \"密\", \"批\", \"营\", \"项\", \"防\", \"举\", \"球\", \"英\", \"氧\", \"势\", \"告\", \"李\", \"台\", \"落\", \"木\", \"帮\", \"轮\", \"破\", \"亚\", \"师\", \"围\", \"注\", \"远\", \"字\", \"材\", \"排\", \"供\", \"河\", \"态\", \"封\", \"另\", \"施\", \"减\", \"树\", \"溶\", \"怎\", \"止\", \"案\", \"言\", \"士\", \"均\", \"武\", \"固\", \"叶\", \"鱼\", \"波\", \"视\", \"仅\", \"费\", \"紧\", \"爱\", \"左\", \"章\", \"早\", \"朝\", \"害\", \"续\", \"轻\", \"服\", \"试\", \"食\", \"充\", \"兵\", \"源\", \"判\", \"护\", \"司\", \"足\", \"某\", \"练\", \"差\", \"致\", \"板\", \"田\", \"降\", \"黑\", \"犯\", \"负\", \"击\", \"范\", \"继\", \"兴\", \"似\", \"余\", \"坚\", \"曲\", \"输\", \"修\", \"故\", \"城\", \"夫\", \"够\", \"送\", \"笔\", \"船\", \"占\", \"右\", \"财\", \"吃\", \"富\", \"春\", \"职\", \"觉\", \"汉\", \"画\", \"功\", \"巴\", \"跟\", \"虽\", \"杂\", \"飞\", \"检\", \"吸\", \"助\", \"升\", \"阳\", \"互\", \"初\", \"创\", \"抗\", \"考\", \"投\", \"坏\", \"策\", \"古\", \"径\", \"换\", \"未\", \"跑\", \"留\", \"钢\", \"曾\", \"端\", \"责\", \"站\", \"简\", \"述\", \"钱\", \"副\", \"尽\", \"帝\", \"射\", \"草\", \"冲\", \"承\", \"独\", \"令\", \"限\", \"阿\", \"宣\", \"环\", \"双\", \"请\", \"超\", \"微\", \"让\", \"控\", \"州\", \"良\", \"轴\", \"找\", \"否\", \"纪\", \"益\", \"依\", \"优\", \"顶\", \"础\", \"载\", \"倒\", \"房\", \"突\", \"坐\", \"粉\", \"敌\", \"略\", \"客\", \"袁\", \"冷\", \"胜\", \"绝\", \"析\", \"块\", \"剂\", \"测\", \"丝\", \"协\", \"诉\", \"念\", \"陈\", \"仍\", \"罗\", \"盐\", \"友\", \"洋\", \"错\", \"苦\", \"夜\", \"刑\", \"移\", \"频\", \"逐\", \"靠\", \"混\", \"母\", \"短\", \"皮\", \"终\", \"聚\", \"汽\", \"村\", \"云\", \"哪\", \"既\", \"距\", \"卫\", \"停\", \"烈\", \"央\", \"察\", \"烧\", \"迅\", \"境\", \"若\", \"印\", \"洲\", \"刻\", \"括\", \"激\", \"孔\", \"搞\", \"甚\", \"室\", \"待\", \"核\", \"校\", \"散\", \"侵\", \"吧\", \"甲\", \"游\", \"久\", \"菜\", \"味\", \"旧\", \"模\", \"湖\", \"货\", \"损\", \"预\", \"阻\", \"毫\", \"普\", \"稳\", \"乙\", \"妈\", \"植\", \"息\", \"扩\", \"银\", \"语\", \"挥\", \"酒\", \"守\", \"拿\", \"序\", \"纸\", \"医\", \"缺\", \"雨\", \"吗\", \"针\", \"刘\", \"啊\", \"急\", \"唱\", \"误\", \"训\", \"愿\", \"审\", \"附\", \"获\", \"茶\", \"鲜\", \"粮\", \"斤\", \"孩\", \"脱\", \"硫\", \"肥\", \"善\", \"龙\", \"演\", \"父\", \"渐\", \"血\", \"欢\", \"械\", \"掌\", \"歌\", \"沙\", \"刚\", \"攻\", \"谓\", \"盾\", \"讨\", \"晚\", \"粒\", \"乱\", \"燃\", \"矛\", \"乎\", \"杀\", \"药\", \"宁\", \"鲁\", \"贵\", \"钟\", \"煤\", \"读\", \"班\", \"伯\", \"香\", \"介\", \"迫\", \"句\", \"丰\", \"培\", \"握\", \"兰\", \"担\", \"弦\", \"蛋\", \"沉\", \"假\", \"穿\", \"执\", \"答\", \"乐\", \"谁\", \"顺\", \"烟\", \"缩\", \"征\", \"脸\", \"喜\", \"松\", \"脚\", \"困\", \"异\", \"免\", \"背\", \"星\", \"福\", \"买\", \"染\", \"井\", \"概\", \"慢\", \"怕\", \"磁\", \"倍\", \"祖\", \"皇\", \"促\", \"静\", \"补\", \"评\", \"翻\", \"肉\", \"践\", \"尼\", \"衣\", \"宽\", \"扬\", \"棉\", \"希\", \"伤\", \"操\", \"垂\", \"秋\", \"宜\", \"氢\", \"套\", \"督\", \"振\", \"架\", \"亮\", \"末\", \"宪\", \"庆\", \"编\", \"牛\", \"触\", \"映\", \"雷\", \"销\", \"诗\", \"座\", \"居\", \"抓\", \"裂\", \"胞\", \"呼\", \"娘\", \"景\", \"威\", \"绿\", \"晶\", \"厚\", \"盟\", \"衡\", \"鸡\", \"孙\", \"延\", \"危\", \"胶\", \"屋\", \"乡\", \"临\", \"陆\", \"顾\", \"掉\", \"呀\", \"灯\", \"岁\", \"措\", \"束\", \"耐\", \"剧\", \"玉\", \"赵\", \"跳\", \"哥\", \"季\", \"课\", \"凯\", \"胡\", \"额\", \"款\", \"绍\", \"卷\", \"齐\", \"伟\", \"蒸\", \"殖\", \"永\", \"宗\", \"苗\", \"川\", \"炉\", \"岩\", \"弱\", \"零\", \"杨\", \"奏\", \"沿\", \"露\", \"杆\", \"探\", \"滑\", \"镇\", \"饭\", \"浓\", \"航\", \"怀\", \"赶\", \"库\", \"夺\", \"伊\", \"灵\", \"税\", \"途\", \"灭\", \"赛\", \"归\", \"召\", \"鼓\", \"播\", \"盘\", \"裁\", \"险\", \"康\", \"唯\", \"录\", \"菌\", \"纯\", \"借\", \"糖\", \"盖\", \"横\", \"符\", \"私\", \"努\", \"堂\", \"域\", \"枪\", \"润\", \"幅\", \"哈\", \"竟\", \"熟\", \"虫\", \"泽\", \"脑\", \"壤\", \"碳\", \"欧\", \"遍\", \"侧\", \"寨\", \"敢\", \"彻\", \"虑\", \"斜\", \"薄\", \"庭\", \"纳\", \"弹\", \"饲\", \"伸\", \"折\", \"麦\", \"湿\", \"暗\", \"荷\", \"瓦\", \"塞\", \"床\", \"筑\", \"恶\", \"户\", \"访\", \"塔\", \"奇\", \"透\", \"梁\", \"刀\", \"旋\", \"迹\", \"卡\", \"氯\", \"遇\", \"份\", \"毒\", \"泥\", \"退\", \"洗\", \"摆\", \"灰\", \"彩\", \"卖\", \"耗\", \"夏\", \"择\", \"忙\", \"铜\", \"献\", \"硬\", \"予\", \"繁\", \"圈\", \"雪\", \"函\", \"亦\", \"抽\", \"篇\", \"阵\", \"阴\", \"丁\", \"尺\", \"追\", \"堆\", \"雄\", \"迎\", \"泛\", \"爸\", \"楼\", \"避\", \"谋\", \"吨\", \"野\", \"猪\", \"旗\", \"累\", \"偏\", \"典\", \"馆\", \"索\", \"秦\", \"脂\", \"潮\", \"爷\", \"豆\", \"忽\", \"托\", \"惊\", \"塑\", \"遗\", \"愈\", \"朱\", \"替\", \"纤\", \"粗\", \"倾\", \"尚\", \"痛\", \"楚\", \"谢\", \"奋\", \"购\", \"磨\", \"君\", \"池\", \"旁\", \"碎\", \"骨\", \"监\", \"捕\", \"弟\", \"暴\", \"割\", \"贯\", \"殊\", \"释\", \"词\", \"亡\", \"壁\", \"顿\", \"宝\", \"午\", \"尘\", \"闻\", \"揭\", \"炮\", \"残\", \"冬\", \"桥\", \"妇\", \"警\", \"综\", \"招\", \"吴\", \"付\", \"浮\", \"遭\", \"徐\", \"您\", \"摇\", \"谷\", \"赞\", \"箱\", \"隔\", \"订\", \"男\", \"吹\", \"园\", \"纷\", \"唐\", \"败\", \"宋\", \"玻\", \"巨\", \"耕\", \"坦\", \"荣\", \"闭\", \"湾\", \"键\", \"凡\", \"驻\", \"锅\", \"救\", \"恩\", \"剥\", \"凝\", \"碱\", \"齿\", \"截\", \"炼\", \"麻\", \"纺\", \"禁\", \"废\", \"盛\", \"版\", \"缓\", \"净\", \"睛\", \"昌\", \"婚\", \"涉\", \"筒\", \"嘴\", \"插\", \"岸\", \"朗\", \"庄\", \"街\", \"藏\", \"姑\", \"贸\", \"腐\", \"奴\", \"啦\", \"惯\", \"乘\", \"伙\", \"恢\", \"匀\", \"纱\", \"扎\", \"辩\", \"耳\", \"彪\", \"臣\", \"亿\", \"璃\", \"抵\", \"脉\", \"秀\", \"萨\", \"俄\", \"网\", \"舞\", \"店\", \"喷\", \"纵\", \"寸\", \"汗\", \"挂\", \"洪\", \"贺\", \"闪\", \"柬\", \"爆\", \"烯\", \"津\", \"稻\", \"墙\", \"软\", \"勇\", \"像\", \"滚\", \"厘\", \"蒙\", \"芳\", \"肯\", \"坡\", \"柱\", \"荡\", \"腿\", \"仪\", \"旅\", \"尾\", \"轧\", \"冰\", \"贡\", \"登\", \"黎\", \"削\", \"钻\", \"勒\", \"逃\", \"障\", \"氨\", \"郭\", \"峰\", \"币\", \"港\", \"伏\", \"轨\", \"亩\", \"毕\", \"擦\", \"莫\", \"刺\", \"浪\", \"秘\", \"援\", \"株\", \"健\", \"售\", \"股\", \"岛\", \"甘\", \"泡\", \"睡\", \"童\", \"铸\", \"汤\", \"阀\", \"休\", \"汇\", \"舍\", \"牧\", \"绕\", \"炸\", \"哲\", \"磷\", \"绩\", \"朋\", \"淡\", \"尖\", \"启\", \"陷\", \"柴\", \"呈\", \"徒\", \"颜\", \"泪\", \"稍\", \"忘\", \"泵\", \"蓝\", \"拖\", \"洞\", \"授\", \"镜\", \"辛\", \"壮\", \"锋\", \"贫\", \"虚\", \"弯\", \"摩\", \"泰\", \"幼\", \"廷\", \"尊\", \"窗\", \"纲\", \"弄\", \"隶\", \"疑\", \"氏\", \"宫\", \"姐\", \"震\", \"瑞\", \"怪\", \"尤\", \"琴\", \"循\", \"描\", \"膜\", \"违\", \"夹\", \"腰\", \"缘\", \"珠\", \"穷\", \"森\", \"枝\", \"竹\", \"沟\", \"催\", \"绳\", \"忆\", \"邦\", \"剩\", \"幸\", \"浆\", \"栏\", \"拥\", \"牙\", \"贮\", \"礼\", \"滤\", \"钠\", \"纹\", \"罢\", \"拍\", \"咱\", \"喊\", \"袖\", \"埃\", \"勤\", \"罚\", \"焦\", \"潜\", \"伍\", \"墨\", \"欲\", \"缝\", \"姓\", \"刊\", \"饱\", \"仿\", \"奖\", \"铝\", \"鬼\", \"丽\", \"跨\", \"默\", \"挖\", \"链\", \"扫\", \"喝\", \"袋\", \"炭\", \"污\", \"幕\", \"诸\", \"弧\", \"励\", \"梅\", \"奶\", \"洁\", \"灾\", \"舟\", \"鉴\", \"苯\", \"讼\", \"抱\", \"毁\", \"懂\", \"寒\", \"智\", \"埔\", \"寄\", \"届\", \"跃\", \"渡\", \"挑\", \"丹\", \"艰\", \"贝\", \"碰\", \"拔\", \"爹\", \"戴\", \"码\", \"梦\", \"芽\", \"熔\", \"赤\", \"渔\", \"哭\", \"敬\", \"颗\", \"奔\", \"铅\", \"仲\", \"虎\", \"稀\", \"妹\", \"乏\", \"珍\", \"申\", \"桌\", \"遵\", \"允\", \"隆\", \"螺\", \"仓\", \"魏\", \"锐\", \"晓\", \"氮\", \"兼\", \"隐\", \"碍\", \"赫\", \"拨\", \"忠\", \"肃\", \"缸\", \"牵\", \"抢\", \"博\", \"巧\", \"壳\", \"兄\", \"杜\", \"讯\", \"诚\", \"碧\", \"祥\", \"柯\", \"页\", \"巡\", \"矩\", \"悲\", \"灌\", \"龄\", \"伦\", \"票\", \"寻\", \"桂\", \"铺\", \"圣\", \"恐\", \"恰\", \"郑\", \"趣\", \"抬\", \"荒\", \"腾\", \"贴\", \"柔\", \"滴\", \"猛\", \"阔\", \"辆\", \"妻\", \"填\", \"撤\", \"储\", \"签\", \"闹\", \"扰\", \"紫\", \"砂\", \"递\", \"戏\", \"吊\", \"陶\", \"伐\", \"喂\", \"疗\", \"瓶\", \"婆\", \"抚\", \"臂\", \"摸\", \"忍\", \"虾\", \"蜡\", \"邻\", \"胸\", \"巩\", \"挤\", \"偶\", \"弃\", \"槽\", \"劲\", \"乳\", \"邓\", \"吉\", \"仁\", \"烂\", \"砖\", \"租\", \"乌\", \"舰\", \"伴\", \"瓜\", \"浅\", \"丙\", \"暂\", \"燥\", \"橡\", \"柳\", \"迷\", \"暖\", \"牌\", \"秧\", \"胆\", \"详\", \"簧\", \"踏\", \"瓷\", \"谱\", \"呆\", \"宾\", \"糊\", \"洛\", \"辉\", \"愤\", \"竞\", \"隙\", \"怒\", \"粘\", \"乃\", \"绪\", \"肩\", \"籍\", \"敏\", \"涂\", \"熙\", \"皆\", \"侦\", \"悬\", \"掘\", \"享\", \"纠\", \"醒\", \"狂\", \"锁\", \"淀\", \"恨\", \"牲\", \"霸\", \"爬\", \"赏\", \"逆\", \"玩\", \"陵\", \"祝\", \"秒\", \"浙\", \"貌\", \"役\", \"彼\", \"悉\", \"鸭\", \"趋\", \"凤\", \"晨\", \"畜\", \"辈\", \"秩\", \"卵\", \"署\", \"梯\", \"炎\", \"滩\", \"棋\", \"驱\", \"筛\", \"峡\", \"冒\", \"啥\", \"寿\", \"译\", \"浸\", \"泉\", \"帽\", \"迟\", \"硅\", \"疆\", \"贷\", \"漏\", \"稿\", \"冠\", \"嫩\", \"胁\", \"芯\", \"牢\", \"叛\", \"蚀\", \"奥\", \"鸣\", \"岭\", \"羊\", \"凭\", \"串\", \"塘\", \"绘\", \"酵\", \"融\", \"盆\", \"锡\", \"庙\", \"筹\", \"冻\", \"辅\", \"摄\", \"袭\", \"筋\", \"拒\", \"僚\", \"旱\", \"钾\", \"鸟\", \"漆\", \"沈\", \"眉\", \"疏\", \"添\", \"棒\", \"穗\", \"硝\", \"韩\", \"逼\", \"扭\", \"侨\", \"凉\", \"挺\", \"碗\", \"栽\", \"炒\", \"杯\", \"患\", \"馏\", \"劝\", \"豪\", \"辽\", \"勃\", \"鸿\", \"旦\", \"吏\", \"拜\", \"狗\", \"埋\", \"辊\", \"掩\", \"饮\", \"搬\", \"骂\", \"辞\", \"勾\", \"扣\", \"估\", \"蒋\", \"绒\", \"雾\", \"丈\", \"朵\", \"姆\", \"拟\", \"宇\", \"辑\", \"陕\", \"雕\", \"偿\", \"蓄\", \"崇\", \"剪\", \"倡\", \"厅\", \"咬\", \"驶\", \"薯\", \"刷\", \"斥\", \"番\", \"赋\", \"奉\", \"佛\", \"浇\", \"漫\", \"曼\", \"扇\", \"钙\", \"桃\", \"扶\", \"仔\", \"返\", \"俗\", \"亏\", \"腔\", \"鞋\", \"棱\", \"覆\", \"框\", \"悄\", \"叔\", \"撞\", \"骗\", \"勘\", \"旺\", \"沸\", \"孤\", \"吐\", \"孟\", \"渠\", \"屈\", \"疾\", \"妙\", \"惜\", \"仰\", \"狠\", \"胀\", \"谐\", \"抛\", \"霉\", \"桑\", \"岗\", \"嘛\", \"衰\", \"盗\", \"渗\", \"脏\", \"赖\", \"涌\", \"甜\", \"曹\", \"阅\", \"肌\", \"哩\", \"厉\", \"烃\", \"纬\", \"毅\", \"昨\", \"伪\", \"症\", \"煮\", \"叹\", \"钉\", \"搭\", \"茎\", \"笼\", \"酷\", \"偷\", \"弓\", \"锥\", \"恒\", \"杰\", \"坑\", \"鼻\", \"翼\", \"纶\", \"叙\", \"狱\", \"逮\", \"罐\", \"络\", \"棚\", \"抑\", \"膨\", \"蔬\", \"寺\", \"骤\", \"穆\", \"冶\", \"枯\", \"册\", \"尸\", \"凸\", \"绅\", \"坯\", \"牺\", \"焰\", \"轰\", \"欣\", \"晋\", \"瘦\", \"御\", \"锭\", \"锦\", \"丧\", \"旬\", \"锻\", \"垄\", \"搜\", \"扑\", \"邀\", \"亭\", \"酯\", \"迈\", \"舒\", \"脆\", \"酶\", \"闲\", \"忧\", \"酚\", \"顽\", \"羽\", \"涨\", \"卸\", \"仗\", \"陪\", \"辟\", \"惩\", \"杭\", \"姚\", \"肚\", \"捉\", \"飘\", \"漂\", \"昆\", \"欺\", \"吾\", \"郎\", \"烷\", \"汁\", \"呵\", \"饰\", \"萧\", \"雅\", \"邮\", \"迁\", \"燕\", \"撒\", \"姻\", \"赴\", \"宴\", \"烦\", \"债\", \"帐\", \"斑\", \"铃\", \"旨\", \"醇\", \"董\", \"饼\", \"雏\", \"姿\", \"拌\", \"傅\", \"腹\", \"妥\", \"揉\", \"贤\", \"拆\", \"歪\", \"葡\", \"胺\", \"丢\", \"浩\", \"徽\", \"昂\", \"垫\", \"挡\", \"览\", \"贪\", \"慰\", \"缴\", \"汪\", \"慌\", \"冯\", \"诺\", \"姜\", \"谊\", \"凶\", \"劣\", \"诬\", \"耀\", \"昏\", \"躺\", \"盈\", \"骑\", \"乔\", \"溪\", \"丛\", \"卢\", \"抹\", \"闷\", \"咨\", \"刮\", \"驾\", \"缆\", \"悟\", \"摘\", \"铒\", \"掷\", \"颇\", \"幻\", \"柄\", \"惠\", \"惨\", \"佳\", \"仇\", \"腊\", \"窝\", \"涤\", \"剑\", \"瞧\", \"堡\", \"泼\", \"葱\", \"罩\", \"霍\", \"捞\", \"胎\", \"苍\", \"滨\", \"俩\", \"捅\", \"湘\", \"砍\", \"霞\", \"邵\", \"萄\", \"疯\", \"淮\", \"遂\", \"熊\", \"粪\", \"烘\", \"宿\", \"档\", \"戈\", \"驳\", \"嫂\", \"裕\", \"徙\", \"箭\", \"捐\", \"肠\", \"撑\", \"晒\", \"辨\", \"殿\", \"莲\", \"摊\", \"搅\", \"酱\", \"屏\", \"疫\", \"哀\", \"蔡\", \"堵\", \"沫\", \"皱\", \"畅\", \"叠\", \"阁\", \"莱\", \"敲\", \"辖\", \"钩\", \"痕\", \"坝\", \"巷\", \"饿\", \"祸\", \"丘\", \"玄\", \"溜\", \"曰\", \"逻\", \"彭\", \"尝\", \"卿\", \"妨\", \"艇\", \"吞\", \"韦\", \"怨\", \"矮\", \"歇\"];\n  var chinese_simplified$1 =\n  /*#__PURE__*/\n  Object.freeze({\n    default: chinese_simplified\n  });\n  var chinese_traditional = [\"的\", \"一\", \"是\", \"在\", \"不\", \"了\", \"有\", \"和\", \"人\", \"這\", \"中\", \"大\", \"為\", \"上\", \"個\", \"國\", \"我\", \"以\", \"要\", \"他\", \"時\", \"來\", \"用\", \"們\", \"生\", \"到\", \"作\", \"地\", \"於\", \"出\", \"就\", \"分\", \"對\", \"成\", \"會\", \"可\", \"主\", \"發\", \"年\", \"動\", \"同\", \"工\", \"也\", \"能\", \"下\", \"過\", \"子\", \"說\", \"產\", \"種\", \"面\", \"而\", \"方\", \"後\", \"多\", \"定\", \"行\", \"學\", \"法\", \"所\", \"民\", \"得\", \"經\", \"十\", \"三\", \"之\", \"進\", \"著\", \"等\", \"部\", \"度\", \"家\", \"電\", \"力\", \"裡\", \"如\", \"水\", \"化\", \"高\", \"自\", \"二\", \"理\", \"起\", \"小\", \"物\", \"現\", \"實\", \"加\", \"量\", \"都\", \"兩\", \"體\", \"制\", \"機\", \"當\", \"使\", \"點\", \"從\", \"業\", \"本\", \"去\", \"把\", \"性\", \"好\", \"應\", \"開\", \"它\", \"合\", \"還\", \"因\", \"由\", \"其\", \"些\", \"然\", \"前\", \"外\", \"天\", \"政\", \"四\", \"日\", \"那\", \"社\", \"義\", \"事\", \"平\", \"形\", \"相\", \"全\", \"表\", \"間\", \"樣\", \"與\", \"關\", \"各\", \"重\", \"新\", \"線\", \"內\", \"數\", \"正\", \"心\", \"反\", \"你\", \"明\", \"看\", \"原\", \"又\", \"麼\", \"利\", \"比\", \"或\", \"但\", \"質\", \"氣\", \"第\", \"向\", \"道\", \"命\", \"此\", \"變\", \"條\", \"只\", \"沒\", \"結\", \"解\", \"問\", \"意\", \"建\", \"月\", \"公\", \"無\", \"系\", \"軍\", \"很\", \"情\", \"者\", \"最\", \"立\", \"代\", \"想\", \"已\", \"通\", \"並\", \"提\", \"直\", \"題\", \"黨\", \"程\", \"展\", \"五\", \"果\", \"料\", \"象\", \"員\", \"革\", \"位\", \"入\", \"常\", \"文\", \"總\", \"次\", \"品\", \"式\", \"活\", \"設\", \"及\", \"管\", \"特\", \"件\", \"長\", \"求\", \"老\", \"頭\", \"基\", \"資\", \"邊\", \"流\", \"路\", \"級\", \"少\", \"圖\", \"山\", \"統\", \"接\", \"知\", \"較\", \"將\", \"組\", \"見\", \"計\", \"別\", \"她\", \"手\", \"角\", \"期\", \"根\", \"論\", \"運\", \"農\", \"指\", \"幾\", \"九\", \"區\", \"強\", \"放\", \"決\", \"西\", \"被\", \"幹\", \"做\", \"必\", \"戰\", \"先\", \"回\", \"則\", \"任\", \"取\", \"據\", \"處\", \"隊\", \"南\", \"給\", \"色\", \"光\", \"門\", \"即\", \"保\", \"治\", \"北\", \"造\", \"百\", \"規\", \"熱\", \"領\", \"七\", \"海\", \"口\", \"東\", \"導\", \"器\", \"壓\", \"志\", \"世\", \"金\", \"增\", \"爭\", \"濟\", \"階\", \"油\", \"思\", \"術\", \"極\", \"交\", \"受\", \"聯\", \"什\", \"認\", \"六\", \"共\", \"權\", \"收\", \"證\", \"改\", \"清\", \"美\", \"再\", \"採\", \"轉\", \"更\", \"單\", \"風\", \"切\", \"打\", \"白\", \"教\", \"速\", \"花\", \"帶\", \"安\", \"場\", \"身\", \"車\", \"例\", \"真\", \"務\", \"具\", \"萬\", \"每\", \"目\", \"至\", \"達\", \"走\", \"積\", \"示\", \"議\", \"聲\", \"報\", \"鬥\", \"完\", \"類\", \"八\", \"離\", \"華\", \"名\", \"確\", \"才\", \"科\", \"張\", \"信\", \"馬\", \"節\", \"話\", \"米\", \"整\", \"空\", \"元\", \"況\", \"今\", \"集\", \"溫\", \"傳\", \"土\", \"許\", \"步\", \"群\", \"廣\", \"石\", \"記\", \"需\", \"段\", \"研\", \"界\", \"拉\", \"林\", \"律\", \"叫\", \"且\", \"究\", \"觀\", \"越\", \"織\", \"裝\", \"影\", \"算\", \"低\", \"持\", \"音\", \"眾\", \"書\", \"布\", \"复\", \"容\", \"兒\", \"須\", \"際\", \"商\", \"非\", \"驗\", \"連\", \"斷\", \"深\", \"難\", \"近\", \"礦\", \"千\", \"週\", \"委\", \"素\", \"技\", \"備\", \"半\", \"辦\", \"青\", \"省\", \"列\", \"習\", \"響\", \"約\", \"支\", \"般\", \"史\", \"感\", \"勞\", \"便\", \"團\", \"往\", \"酸\", \"歷\", \"市\", \"克\", \"何\", \"除\", \"消\", \"構\", \"府\", \"稱\", \"太\", \"準\", \"精\", \"值\", \"號\", \"率\", \"族\", \"維\", \"劃\", \"選\", \"標\", \"寫\", \"存\", \"候\", \"毛\", \"親\", \"快\", \"效\", \"斯\", \"院\", \"查\", \"江\", \"型\", \"眼\", \"王\", \"按\", \"格\", \"養\", \"易\", \"置\", \"派\", \"層\", \"片\", \"始\", \"卻\", \"專\", \"狀\", \"育\", \"廠\", \"京\", \"識\", \"適\", \"屬\", \"圓\", \"包\", \"火\", \"住\", \"調\", \"滿\", \"縣\", \"局\", \"照\", \"參\", \"紅\", \"細\", \"引\", \"聽\", \"該\", \"鐵\", \"價\", \"嚴\", \"首\", \"底\", \"液\", \"官\", \"德\", \"隨\", \"病\", \"蘇\", \"失\", \"爾\", \"死\", \"講\", \"配\", \"女\", \"黃\", \"推\", \"顯\", \"談\", \"罪\", \"神\", \"藝\", \"呢\", \"席\", \"含\", \"企\", \"望\", \"密\", \"批\", \"營\", \"項\", \"防\", \"舉\", \"球\", \"英\", \"氧\", \"勢\", \"告\", \"李\", \"台\", \"落\", \"木\", \"幫\", \"輪\", \"破\", \"亞\", \"師\", \"圍\", \"注\", \"遠\", \"字\", \"材\", \"排\", \"供\", \"河\", \"態\", \"封\", \"另\", \"施\", \"減\", \"樹\", \"溶\", \"怎\", \"止\", \"案\", \"言\", \"士\", \"均\", \"武\", \"固\", \"葉\", \"魚\", \"波\", \"視\", \"僅\", \"費\", \"緊\", \"愛\", \"左\", \"章\", \"早\", \"朝\", \"害\", \"續\", \"輕\", \"服\", \"試\", \"食\", \"充\", \"兵\", \"源\", \"判\", \"護\", \"司\", \"足\", \"某\", \"練\", \"差\", \"致\", \"板\", \"田\", \"降\", \"黑\", \"犯\", \"負\", \"擊\", \"范\", \"繼\", \"興\", \"似\", \"餘\", \"堅\", \"曲\", \"輸\", \"修\", \"故\", \"城\", \"夫\", \"夠\", \"送\", \"筆\", \"船\", \"佔\", \"右\", \"財\", \"吃\", \"富\", \"春\", \"職\", \"覺\", \"漢\", \"畫\", \"功\", \"巴\", \"跟\", \"雖\", \"雜\", \"飛\", \"檢\", \"吸\", \"助\", \"昇\", \"陽\", \"互\", \"初\", \"創\", \"抗\", \"考\", \"投\", \"壞\", \"策\", \"古\", \"徑\", \"換\", \"未\", \"跑\", \"留\", \"鋼\", \"曾\", \"端\", \"責\", \"站\", \"簡\", \"述\", \"錢\", \"副\", \"盡\", \"帝\", \"射\", \"草\", \"衝\", \"承\", \"獨\", \"令\", \"限\", \"阿\", \"宣\", \"環\", \"雙\", \"請\", \"超\", \"微\", \"讓\", \"控\", \"州\", \"良\", \"軸\", \"找\", \"否\", \"紀\", \"益\", \"依\", \"優\", \"頂\", \"礎\", \"載\", \"倒\", \"房\", \"突\", \"坐\", \"粉\", \"敵\", \"略\", \"客\", \"袁\", \"冷\", \"勝\", \"絕\", \"析\", \"塊\", \"劑\", \"測\", \"絲\", \"協\", \"訴\", \"念\", \"陳\", \"仍\", \"羅\", \"鹽\", \"友\", \"洋\", \"錯\", \"苦\", \"夜\", \"刑\", \"移\", \"頻\", \"逐\", \"靠\", \"混\", \"母\", \"短\", \"皮\", \"終\", \"聚\", \"汽\", \"村\", \"雲\", \"哪\", \"既\", \"距\", \"衛\", \"停\", \"烈\", \"央\", \"察\", \"燒\", \"迅\", \"境\", \"若\", \"印\", \"洲\", \"刻\", \"括\", \"激\", \"孔\", \"搞\", \"甚\", \"室\", \"待\", \"核\", \"校\", \"散\", \"侵\", \"吧\", \"甲\", \"遊\", \"久\", \"菜\", \"味\", \"舊\", \"模\", \"湖\", \"貨\", \"損\", \"預\", \"阻\", \"毫\", \"普\", \"穩\", \"乙\", \"媽\", \"植\", \"息\", \"擴\", \"銀\", \"語\", \"揮\", \"酒\", \"守\", \"拿\", \"序\", \"紙\", \"醫\", \"缺\", \"雨\", \"嗎\", \"針\", \"劉\", \"啊\", \"急\", \"唱\", \"誤\", \"訓\", \"願\", \"審\", \"附\", \"獲\", \"茶\", \"鮮\", \"糧\", \"斤\", \"孩\", \"脫\", \"硫\", \"肥\", \"善\", \"龍\", \"演\", \"父\", \"漸\", \"血\", \"歡\", \"械\", \"掌\", \"歌\", \"沙\", \"剛\", \"攻\", \"謂\", \"盾\", \"討\", \"晚\", \"粒\", \"亂\", \"燃\", \"矛\", \"乎\", \"殺\", \"藥\", \"寧\", \"魯\", \"貴\", \"鐘\", \"煤\", \"讀\", \"班\", \"伯\", \"香\", \"介\", \"迫\", \"句\", \"豐\", \"培\", \"握\", \"蘭\", \"擔\", \"弦\", \"蛋\", \"沉\", \"假\", \"穿\", \"執\", \"答\", \"樂\", \"誰\", \"順\", \"煙\", \"縮\", \"徵\", \"臉\", \"喜\", \"松\", \"腳\", \"困\", \"異\", \"免\", \"背\", \"星\", \"福\", \"買\", \"染\", \"井\", \"概\", \"慢\", \"怕\", \"磁\", \"倍\", \"祖\", \"皇\", \"促\", \"靜\", \"補\", \"評\", \"翻\", \"肉\", \"踐\", \"尼\", \"衣\", \"寬\", \"揚\", \"棉\", \"希\", \"傷\", \"操\", \"垂\", \"秋\", \"宜\", \"氫\", \"套\", \"督\", \"振\", \"架\", \"亮\", \"末\", \"憲\", \"慶\", \"編\", \"牛\", \"觸\", \"映\", \"雷\", \"銷\", \"詩\", \"座\", \"居\", \"抓\", \"裂\", \"胞\", \"呼\", \"娘\", \"景\", \"威\", \"綠\", \"晶\", \"厚\", \"盟\", \"衡\", \"雞\", \"孫\", \"延\", \"危\", \"膠\", \"屋\", \"鄉\", \"臨\", \"陸\", \"顧\", \"掉\", \"呀\", \"燈\", \"歲\", \"措\", \"束\", \"耐\", \"劇\", \"玉\", \"趙\", \"跳\", \"哥\", \"季\", \"課\", \"凱\", \"胡\", \"額\", \"款\", \"紹\", \"卷\", \"齊\", \"偉\", \"蒸\", \"殖\", \"永\", \"宗\", \"苗\", \"川\", \"爐\", \"岩\", \"弱\", \"零\", \"楊\", \"奏\", \"沿\", \"露\", \"桿\", \"探\", \"滑\", \"鎮\", \"飯\", \"濃\", \"航\", \"懷\", \"趕\", \"庫\", \"奪\", \"伊\", \"靈\", \"稅\", \"途\", \"滅\", \"賽\", \"歸\", \"召\", \"鼓\", \"播\", \"盤\", \"裁\", \"險\", \"康\", \"唯\", \"錄\", \"菌\", \"純\", \"借\", \"糖\", \"蓋\", \"橫\", \"符\", \"私\", \"努\", \"堂\", \"域\", \"槍\", \"潤\", \"幅\", \"哈\", \"竟\", \"熟\", \"蟲\", \"澤\", \"腦\", \"壤\", \"碳\", \"歐\", \"遍\", \"側\", \"寨\", \"敢\", \"徹\", \"慮\", \"斜\", \"薄\", \"庭\", \"納\", \"彈\", \"飼\", \"伸\", \"折\", \"麥\", \"濕\", \"暗\", \"荷\", \"瓦\", \"塞\", \"床\", \"築\", \"惡\", \"戶\", \"訪\", \"塔\", \"奇\", \"透\", \"梁\", \"刀\", \"旋\", \"跡\", \"卡\", \"氯\", \"遇\", \"份\", \"毒\", \"泥\", \"退\", \"洗\", \"擺\", \"灰\", \"彩\", \"賣\", \"耗\", \"夏\", \"擇\", \"忙\", \"銅\", \"獻\", \"硬\", \"予\", \"繁\", \"圈\", \"雪\", \"函\", \"亦\", \"抽\", \"篇\", \"陣\", \"陰\", \"丁\", \"尺\", \"追\", \"堆\", \"雄\", \"迎\", \"泛\", \"爸\", \"樓\", \"避\", \"謀\", \"噸\", \"野\", \"豬\", \"旗\", \"累\", \"偏\", \"典\", \"館\", \"索\", \"秦\", \"脂\", \"潮\", \"爺\", \"豆\", \"忽\", \"托\", \"驚\", \"塑\", \"遺\", \"愈\", \"朱\", \"替\", \"纖\", \"粗\", \"傾\", \"尚\", \"痛\", \"楚\", \"謝\", \"奮\", \"購\", \"磨\", \"君\", \"池\", \"旁\", \"碎\", \"骨\", \"監\", \"捕\", \"弟\", \"暴\", \"割\", \"貫\", \"殊\", \"釋\", \"詞\", \"亡\", \"壁\", \"頓\", \"寶\", \"午\", \"塵\", \"聞\", \"揭\", \"炮\", \"殘\", \"冬\", \"橋\", \"婦\", \"警\", \"綜\", \"招\", \"吳\", \"付\", \"浮\", \"遭\", \"徐\", \"您\", \"搖\", \"谷\", \"贊\", \"箱\", \"隔\", \"訂\", \"男\", \"吹\", \"園\", \"紛\", \"唐\", \"敗\", \"宋\", \"玻\", \"巨\", \"耕\", \"坦\", \"榮\", \"閉\", \"灣\", \"鍵\", \"凡\", \"駐\", \"鍋\", \"救\", \"恩\", \"剝\", \"凝\", \"鹼\", \"齒\", \"截\", \"煉\", \"麻\", \"紡\", \"禁\", \"廢\", \"盛\", \"版\", \"緩\", \"淨\", \"睛\", \"昌\", \"婚\", \"涉\", \"筒\", \"嘴\", \"插\", \"岸\", \"朗\", \"莊\", \"街\", \"藏\", \"姑\", \"貿\", \"腐\", \"奴\", \"啦\", \"慣\", \"乘\", \"夥\", \"恢\", \"勻\", \"紗\", \"扎\", \"辯\", \"耳\", \"彪\", \"臣\", \"億\", \"璃\", \"抵\", \"脈\", \"秀\", \"薩\", \"俄\", \"網\", \"舞\", \"店\", \"噴\", \"縱\", \"寸\", \"汗\", \"掛\", \"洪\", \"賀\", \"閃\", \"柬\", \"爆\", \"烯\", \"津\", \"稻\", \"牆\", \"軟\", \"勇\", \"像\", \"滾\", \"厘\", \"蒙\", \"芳\", \"肯\", \"坡\", \"柱\", \"盪\", \"腿\", \"儀\", \"旅\", \"尾\", \"軋\", \"冰\", \"貢\", \"登\", \"黎\", \"削\", \"鑽\", \"勒\", \"逃\", \"障\", \"氨\", \"郭\", \"峰\", \"幣\", \"港\", \"伏\", \"軌\", \"畝\", \"畢\", \"擦\", \"莫\", \"刺\", \"浪\", \"秘\", \"援\", \"株\", \"健\", \"售\", \"股\", \"島\", \"甘\", \"泡\", \"睡\", \"童\", \"鑄\", \"湯\", \"閥\", \"休\", \"匯\", \"舍\", \"牧\", \"繞\", \"炸\", \"哲\", \"磷\", \"績\", \"朋\", \"淡\", \"尖\", \"啟\", \"陷\", \"柴\", \"呈\", \"徒\", \"顏\", \"淚\", \"稍\", \"忘\", \"泵\", \"藍\", \"拖\", \"洞\", \"授\", \"鏡\", \"辛\", \"壯\", \"鋒\", \"貧\", \"虛\", \"彎\", \"摩\", \"泰\", \"幼\", \"廷\", \"尊\", \"窗\", \"綱\", \"弄\", \"隸\", \"疑\", \"氏\", \"宮\", \"姐\", \"震\", \"瑞\", \"怪\", \"尤\", \"琴\", \"循\", \"描\", \"膜\", \"違\", \"夾\", \"腰\", \"緣\", \"珠\", \"窮\", \"森\", \"枝\", \"竹\", \"溝\", \"催\", \"繩\", \"憶\", \"邦\", \"剩\", \"幸\", \"漿\", \"欄\", \"擁\", \"牙\", \"貯\", \"禮\", \"濾\", \"鈉\", \"紋\", \"罷\", \"拍\", \"咱\", \"喊\", \"袖\", \"埃\", \"勤\", \"罰\", \"焦\", \"潛\", \"伍\", \"墨\", \"欲\", \"縫\", \"姓\", \"刊\", \"飽\", \"仿\", \"獎\", \"鋁\", \"鬼\", \"麗\", \"跨\", \"默\", \"挖\", \"鏈\", \"掃\", \"喝\", \"袋\", \"炭\", \"污\", \"幕\", \"諸\", \"弧\", \"勵\", \"梅\", \"奶\", \"潔\", \"災\", \"舟\", \"鑑\", \"苯\", \"訟\", \"抱\", \"毀\", \"懂\", \"寒\", \"智\", \"埔\", \"寄\", \"屆\", \"躍\", \"渡\", \"挑\", \"丹\", \"艱\", \"貝\", \"碰\", \"拔\", \"爹\", \"戴\", \"碼\", \"夢\", \"芽\", \"熔\", \"赤\", \"漁\", \"哭\", \"敬\", \"顆\", \"奔\", \"鉛\", \"仲\", \"虎\", \"稀\", \"妹\", \"乏\", \"珍\", \"申\", \"桌\", \"遵\", \"允\", \"隆\", \"螺\", \"倉\", \"魏\", \"銳\", \"曉\", \"氮\", \"兼\", \"隱\", \"礙\", \"赫\", \"撥\", \"忠\", \"肅\", \"缸\", \"牽\", \"搶\", \"博\", \"巧\", \"殼\", \"兄\", \"杜\", \"訊\", \"誠\", \"碧\", \"祥\", \"柯\", \"頁\", \"巡\", \"矩\", \"悲\", \"灌\", \"齡\", \"倫\", \"票\", \"尋\", \"桂\", \"鋪\", \"聖\", \"恐\", \"恰\", \"鄭\", \"趣\", \"抬\", \"荒\", \"騰\", \"貼\", \"柔\", \"滴\", \"猛\", \"闊\", \"輛\", \"妻\", \"填\", \"撤\", \"儲\", \"簽\", \"鬧\", \"擾\", \"紫\", \"砂\", \"遞\", \"戲\", \"吊\", \"陶\", \"伐\", \"餵\", \"療\", \"瓶\", \"婆\", \"撫\", \"臂\", \"摸\", \"忍\", \"蝦\", \"蠟\", \"鄰\", \"胸\", \"鞏\", \"擠\", \"偶\", \"棄\", \"槽\", \"勁\", \"乳\", \"鄧\", \"吉\", \"仁\", \"爛\", \"磚\", \"租\", \"烏\", \"艦\", \"伴\", \"瓜\", \"淺\", \"丙\", \"暫\", \"燥\", \"橡\", \"柳\", \"迷\", \"暖\", \"牌\", \"秧\", \"膽\", \"詳\", \"簧\", \"踏\", \"瓷\", \"譜\", \"呆\", \"賓\", \"糊\", \"洛\", \"輝\", \"憤\", \"競\", \"隙\", \"怒\", \"粘\", \"乃\", \"緒\", \"肩\", \"籍\", \"敏\", \"塗\", \"熙\", \"皆\", \"偵\", \"懸\", \"掘\", \"享\", \"糾\", \"醒\", \"狂\", \"鎖\", \"淀\", \"恨\", \"牲\", \"霸\", \"爬\", \"賞\", \"逆\", \"玩\", \"陵\", \"祝\", \"秒\", \"浙\", \"貌\", \"役\", \"彼\", \"悉\", \"鴨\", \"趨\", \"鳳\", \"晨\", \"畜\", \"輩\", \"秩\", \"卵\", \"署\", \"梯\", \"炎\", \"灘\", \"棋\", \"驅\", \"篩\", \"峽\", \"冒\", \"啥\", \"壽\", \"譯\", \"浸\", \"泉\", \"帽\", \"遲\", \"矽\", \"疆\", \"貸\", \"漏\", \"稿\", \"冠\", \"嫩\", \"脅\", \"芯\", \"牢\", \"叛\", \"蝕\", \"奧\", \"鳴\", \"嶺\", \"羊\", \"憑\", \"串\", \"塘\", \"繪\", \"酵\", \"融\", \"盆\", \"錫\", \"廟\", \"籌\", \"凍\", \"輔\", \"攝\", \"襲\", \"筋\", \"拒\", \"僚\", \"旱\", \"鉀\", \"鳥\", \"漆\", \"沈\", \"眉\", \"疏\", \"添\", \"棒\", \"穗\", \"硝\", \"韓\", \"逼\", \"扭\", \"僑\", \"涼\", \"挺\", \"碗\", \"栽\", \"炒\", \"杯\", \"患\", \"餾\", \"勸\", \"豪\", \"遼\", \"勃\", \"鴻\", \"旦\", \"吏\", \"拜\", \"狗\", \"埋\", \"輥\", \"掩\", \"飲\", \"搬\", \"罵\", \"辭\", \"勾\", \"扣\", \"估\", \"蔣\", \"絨\", \"霧\", \"丈\", \"朵\", \"姆\", \"擬\", \"宇\", \"輯\", \"陝\", \"雕\", \"償\", \"蓄\", \"崇\", \"剪\", \"倡\", \"廳\", \"咬\", \"駛\", \"薯\", \"刷\", \"斥\", \"番\", \"賦\", \"奉\", \"佛\", \"澆\", \"漫\", \"曼\", \"扇\", \"鈣\", \"桃\", \"扶\", \"仔\", \"返\", \"俗\", \"虧\", \"腔\", \"鞋\", \"棱\", \"覆\", \"框\", \"悄\", \"叔\", \"撞\", \"騙\", \"勘\", \"旺\", \"沸\", \"孤\", \"吐\", \"孟\", \"渠\", \"屈\", \"疾\", \"妙\", \"惜\", \"仰\", \"狠\", \"脹\", \"諧\", \"拋\", \"黴\", \"桑\", \"崗\", \"嘛\", \"衰\", \"盜\", \"滲\", \"臟\", \"賴\", \"湧\", \"甜\", \"曹\", \"閱\", \"肌\", \"哩\", \"厲\", \"烴\", \"緯\", \"毅\", \"昨\", \"偽\", \"症\", \"煮\", \"嘆\", \"釘\", \"搭\", \"莖\", \"籠\", \"酷\", \"偷\", \"弓\", \"錐\", \"恆\", \"傑\", \"坑\", \"鼻\", \"翼\", \"綸\", \"敘\", \"獄\", \"逮\", \"罐\", \"絡\", \"棚\", \"抑\", \"膨\", \"蔬\", \"寺\", \"驟\", \"穆\", \"冶\", \"枯\", \"冊\", \"屍\", \"凸\", \"紳\", \"坯\", \"犧\", \"焰\", \"轟\", \"欣\", \"晉\", \"瘦\", \"禦\", \"錠\", \"錦\", \"喪\", \"旬\", \"鍛\", \"壟\", \"搜\", \"撲\", \"邀\", \"亭\", \"酯\", \"邁\", \"舒\", \"脆\", \"酶\", \"閒\", \"憂\", \"酚\", \"頑\", \"羽\", \"漲\", \"卸\", \"仗\", \"陪\", \"闢\", \"懲\", \"杭\", \"姚\", \"肚\", \"捉\", \"飄\", \"漂\", \"昆\", \"欺\", \"吾\", \"郎\", \"烷\", \"汁\", \"呵\", \"飾\", \"蕭\", \"雅\", \"郵\", \"遷\", \"燕\", \"撒\", \"姻\", \"赴\", \"宴\", \"煩\", \"債\", \"帳\", \"斑\", \"鈴\", \"旨\", \"醇\", \"董\", \"餅\", \"雛\", \"姿\", \"拌\", \"傅\", \"腹\", \"妥\", \"揉\", \"賢\", \"拆\", \"歪\", \"葡\", \"胺\", \"丟\", \"浩\", \"徽\", \"昂\", \"墊\", \"擋\", \"覽\", \"貪\", \"慰\", \"繳\", \"汪\", \"慌\", \"馮\", \"諾\", \"姜\", \"誼\", \"兇\", \"劣\", \"誣\", \"耀\", \"昏\", \"躺\", \"盈\", \"騎\", \"喬\", \"溪\", \"叢\", \"盧\", \"抹\", \"悶\", \"諮\", \"刮\", \"駕\", \"纜\", \"悟\", \"摘\", \"鉺\", \"擲\", \"頗\", \"幻\", \"柄\", \"惠\", \"慘\", \"佳\", \"仇\", \"臘\", \"窩\", \"滌\", \"劍\", \"瞧\", \"堡\", \"潑\", \"蔥\", \"罩\", \"霍\", \"撈\", \"胎\", \"蒼\", \"濱\", \"倆\", \"捅\", \"湘\", \"砍\", \"霞\", \"邵\", \"萄\", \"瘋\", \"淮\", \"遂\", \"熊\", \"糞\", \"烘\", \"宿\", \"檔\", \"戈\", \"駁\", \"嫂\", \"裕\", \"徙\", \"箭\", \"捐\", \"腸\", \"撐\", \"曬\", \"辨\", \"殿\", \"蓮\", \"攤\", \"攪\", \"醬\", \"屏\", \"疫\", \"哀\", \"蔡\", \"堵\", \"沫\", \"皺\", \"暢\", \"疊\", \"閣\", \"萊\", \"敲\", \"轄\", \"鉤\", \"痕\", \"壩\", \"巷\", \"餓\", \"禍\", \"丘\", \"玄\", \"溜\", \"曰\", \"邏\", \"彭\", \"嘗\", \"卿\", \"妨\", \"艇\", \"吞\", \"韋\", \"怨\", \"矮\", \"歇\"];\n  var chinese_traditional$1 =\n  /*#__PURE__*/\n  Object.freeze({\n    default: chinese_traditional\n  });\n  var english = [\"abandon\", \"ability\", \"able\", \"about\", \"above\", \"absent\", \"absorb\", \"abstract\", \"absurd\", \"abuse\", \"access\", \"accident\", \"account\", \"accuse\", \"achieve\", \"acid\", \"acoustic\", \"acquire\", \"across\", \"act\", \"action\", \"actor\", \"actress\", \"actual\", \"adapt\", \"add\", \"addict\", \"address\", \"adjust\", \"admit\", \"adult\", \"advance\", \"advice\", \"aerobic\", \"affair\", \"afford\", \"afraid\", \"again\", \"age\", \"agent\", \"agree\", \"ahead\", \"aim\", \"air\", \"airport\", \"aisle\", \"alarm\", \"album\", \"alcohol\", \"alert\", \"alien\", \"all\", \"alley\", \"allow\", \"almost\", \"alone\", \"alpha\", \"already\", \"also\", \"alter\", \"always\", \"amateur\", \"amazing\", \"among\", \"amount\", \"amused\", \"analyst\", \"anchor\", \"ancient\", \"anger\", \"angle\", \"angry\", \"animal\", \"ankle\", \"announce\", \"annual\", \"another\", \"answer\", \"antenna\", \"antique\", \"anxiety\", \"any\", \"apart\", \"apology\", \"appear\", \"apple\", \"approve\", \"april\", \"arch\", \"arctic\", \"area\", \"arena\", \"argue\", \"arm\", \"armed\", \"armor\", \"army\", \"around\", \"arrange\", \"arrest\", \"arrive\", \"arrow\", \"art\", \"artefact\", \"artist\", \"artwork\", \"ask\", \"aspect\", \"assault\", \"asset\", \"assist\", \"assume\", \"asthma\", \"athlete\", \"atom\", \"attack\", \"attend\", \"attitude\", \"attract\", \"auction\", \"audit\", \"august\", \"aunt\", \"author\", \"auto\", \"autumn\", \"average\", \"avocado\", \"avoid\", \"awake\", \"aware\", \"away\", \"awesome\", \"awful\", \"awkward\", \"axis\", \"baby\", \"bachelor\", \"bacon\", \"badge\", \"bag\", \"balance\", \"balcony\", \"ball\", \"bamboo\", \"banana\", \"banner\", \"bar\", \"barely\", \"bargain\", \"barrel\", \"base\", \"basic\", \"basket\", \"battle\", \"beach\", \"bean\", \"beauty\", \"because\", \"become\", \"beef\", \"before\", \"begin\", \"behave\", \"behind\", \"believe\", \"below\", \"belt\", \"bench\", \"benefit\", \"best\", \"betray\", \"better\", \"between\", \"beyond\", \"bicycle\", \"bid\", \"bike\", \"bind\", \"biology\", \"bird\", \"birth\", \"bitter\", \"black\", \"blade\", \"blame\", \"blanket\", \"blast\", \"bleak\", \"bless\", \"blind\", \"blood\", \"blossom\", \"blouse\", \"blue\", \"blur\", \"blush\", \"board\", \"boat\", \"body\", \"boil\", \"bomb\", \"bone\", \"bonus\", \"book\", \"boost\", \"border\", \"boring\", \"borrow\", \"boss\", \"bottom\", \"bounce\", \"box\", \"boy\", \"bracket\", \"brain\", \"brand\", \"brass\", \"brave\", \"bread\", \"breeze\", \"brick\", \"bridge\", \"brief\", \"bright\", \"bring\", \"brisk\", \"broccoli\", \"broken\", \"bronze\", \"broom\", \"brother\", \"brown\", \"brush\", \"bubble\", \"buddy\", \"budget\", \"buffalo\", \"build\", \"bulb\", \"bulk\", \"bullet\", \"bundle\", \"bunker\", \"burden\", \"burger\", \"burst\", \"bus\", \"business\", \"busy\", \"butter\", \"buyer\", \"buzz\", \"cabbage\", \"cabin\", \"cable\", \"cactus\", \"cage\", \"cake\", \"call\", \"calm\", \"camera\", \"camp\", \"can\", \"canal\", \"cancel\", \"candy\", \"cannon\", \"canoe\", \"canvas\", \"canyon\", \"capable\", \"capital\", \"captain\", \"car\", \"carbon\", \"card\", \"cargo\", \"carpet\", \"carry\", \"cart\", \"case\", \"cash\", \"casino\", \"castle\", \"casual\", \"cat\", \"catalog\", \"catch\", \"category\", \"cattle\", \"caught\", \"cause\", \"caution\", \"cave\", \"ceiling\", \"celery\", \"cement\", \"census\", \"century\", \"cereal\", \"certain\", \"chair\", \"chalk\", \"champion\", \"change\", \"chaos\", \"chapter\", \"charge\", \"chase\", \"chat\", \"cheap\", \"check\", \"cheese\", \"chef\", \"cherry\", \"chest\", \"chicken\", \"chief\", \"child\", \"chimney\", \"choice\", \"choose\", \"chronic\", \"chuckle\", \"chunk\", \"churn\", \"cigar\", \"cinnamon\", \"circle\", \"citizen\", \"city\", \"civil\", \"claim\", \"clap\", \"clarify\", \"claw\", \"clay\", \"clean\", \"clerk\", \"clever\", \"click\", \"client\", \"cliff\", \"climb\", \"clinic\", \"clip\", \"clock\", \"clog\", \"close\", \"cloth\", \"cloud\", \"clown\", \"club\", \"clump\", \"cluster\", \"clutch\", \"coach\", \"coast\", \"coconut\", \"code\", \"coffee\", \"coil\", \"coin\", \"collect\", \"color\", \"column\", \"combine\", \"come\", \"comfort\", \"comic\", \"common\", \"company\", \"concert\", \"conduct\", \"confirm\", \"congress\", \"connect\", \"consider\", \"control\", \"convince\", \"cook\", \"cool\", \"copper\", \"copy\", \"coral\", \"core\", \"corn\", \"correct\", \"cost\", \"cotton\", \"couch\", \"country\", \"couple\", \"course\", \"cousin\", \"cover\", \"coyote\", \"crack\", \"cradle\", \"craft\", \"cram\", \"crane\", \"crash\", \"crater\", \"crawl\", \"crazy\", \"cream\", \"credit\", \"creek\", \"crew\", \"cricket\", \"crime\", \"crisp\", \"critic\", \"crop\", \"cross\", \"crouch\", \"crowd\", \"crucial\", \"cruel\", \"cruise\", \"crumble\", \"crunch\", \"crush\", \"cry\", \"crystal\", \"cube\", \"culture\", \"cup\", \"cupboard\", \"curious\", \"current\", \"curtain\", \"curve\", \"cushion\", \"custom\", \"cute\", \"cycle\", \"dad\", \"damage\", \"damp\", \"dance\", \"danger\", \"daring\", \"dash\", \"daughter\", \"dawn\", \"day\", \"deal\", \"debate\", \"debris\", \"decade\", \"december\", \"decide\", \"decline\", \"decorate\", \"decrease\", \"deer\", \"defense\", \"define\", \"defy\", \"degree\", \"delay\", \"deliver\", \"demand\", \"demise\", \"denial\", \"dentist\", \"deny\", \"depart\", \"depend\", \"deposit\", \"depth\", \"deputy\", \"derive\", \"describe\", \"desert\", \"design\", \"desk\", \"despair\", \"destroy\", \"detail\", \"detect\", \"develop\", \"device\", \"devote\", \"diagram\", \"dial\", \"diamond\", \"diary\", \"dice\", \"diesel\", \"diet\", \"differ\", \"digital\", \"dignity\", \"dilemma\", \"dinner\", \"dinosaur\", \"direct\", \"dirt\", \"disagree\", \"discover\", \"disease\", \"dish\", \"dismiss\", \"disorder\", \"display\", \"distance\", \"divert\", \"divide\", \"divorce\", \"dizzy\", \"doctor\", \"document\", \"dog\", \"doll\", \"dolphin\", \"domain\", \"donate\", \"donkey\", \"donor\", \"door\", \"dose\", \"double\", \"dove\", \"draft\", \"dragon\", \"drama\", \"drastic\", \"draw\", \"dream\", \"dress\", \"drift\", \"drill\", \"drink\", \"drip\", \"drive\", \"drop\", \"drum\", \"dry\", \"duck\", \"dumb\", \"dune\", \"during\", \"dust\", \"dutch\", \"duty\", \"dwarf\", \"dynamic\", \"eager\", \"eagle\", \"early\", \"earn\", \"earth\", \"easily\", \"east\", \"easy\", \"echo\", \"ecology\", \"economy\", \"edge\", \"edit\", \"educate\", \"effort\", \"egg\", \"eight\", \"either\", \"elbow\", \"elder\", \"electric\", \"elegant\", \"element\", \"elephant\", \"elevator\", \"elite\", \"else\", \"embark\", \"embody\", \"embrace\", \"emerge\", \"emotion\", \"employ\", \"empower\", \"empty\", \"enable\", \"enact\", \"end\", \"endless\", \"endorse\", \"enemy\", \"energy\", \"enforce\", \"engage\", \"engine\", \"enhance\", \"enjoy\", \"enlist\", \"enough\", \"enrich\", \"enroll\", \"ensure\", \"enter\", \"entire\", \"entry\", \"envelope\", \"episode\", \"equal\", \"equip\", \"era\", \"erase\", \"erode\", \"erosion\", \"error\", \"erupt\", \"escape\", \"essay\", \"essence\", \"estate\", \"eternal\", \"ethics\", \"evidence\", \"evil\", \"evoke\", \"evolve\", \"exact\", \"example\", \"excess\", \"exchange\", \"excite\", \"exclude\", \"excuse\", \"execute\", \"exercise\", \"exhaust\", \"exhibit\", \"exile\", \"exist\", \"exit\", \"exotic\", \"expand\", \"expect\", \"expire\", \"explain\", \"expose\", \"express\", \"extend\", \"extra\", \"eye\", \"eyebrow\", \"fabric\", \"face\", \"faculty\", \"fade\", \"faint\", \"faith\", \"fall\", \"false\", \"fame\", \"family\", \"famous\", \"fan\", \"fancy\", \"fantasy\", \"farm\", \"fashion\", \"fat\", \"fatal\", \"father\", \"fatigue\", \"fault\", \"favorite\", \"feature\", \"february\", \"federal\", \"fee\", \"feed\", \"feel\", \"female\", \"fence\", \"festival\", \"fetch\", \"fever\", \"few\", \"fiber\", \"fiction\", \"field\", \"figure\", \"file\", \"film\", \"filter\", \"final\", \"find\", \"fine\", \"finger\", \"finish\", \"fire\", \"firm\", \"first\", \"fiscal\", \"fish\", \"fit\", \"fitness\", \"fix\", \"flag\", \"flame\", \"flash\", \"flat\", \"flavor\", \"flee\", \"flight\", \"flip\", \"float\", \"flock\", \"floor\", \"flower\", \"fluid\", \"flush\", \"fly\", \"foam\", \"focus\", \"fog\", \"foil\", \"fold\", \"follow\", \"food\", \"foot\", \"force\", \"forest\", \"forget\", \"fork\", \"fortune\", \"forum\", \"forward\", \"fossil\", \"foster\", \"found\", \"fox\", \"fragile\", \"frame\", \"frequent\", \"fresh\", \"friend\", \"fringe\", \"frog\", \"front\", \"frost\", \"frown\", \"frozen\", \"fruit\", \"fuel\", \"fun\", \"funny\", \"furnace\", \"fury\", \"future\", \"gadget\", \"gain\", \"galaxy\", \"gallery\", \"game\", \"gap\", \"garage\", \"garbage\", \"garden\", \"garlic\", \"garment\", \"gas\", \"gasp\", \"gate\", \"gather\", \"gauge\", \"gaze\", \"general\", \"genius\", \"genre\", \"gentle\", \"genuine\", \"gesture\", \"ghost\", \"giant\", \"gift\", \"giggle\", \"ginger\", \"giraffe\", \"girl\", \"give\", \"glad\", \"glance\", \"glare\", \"glass\", \"glide\", \"glimpse\", \"globe\", \"gloom\", \"glory\", \"glove\", \"glow\", \"glue\", \"goat\", \"goddess\", \"gold\", \"good\", \"goose\", \"gorilla\", \"gospel\", \"gossip\", \"govern\", \"gown\", \"grab\", \"grace\", \"grain\", \"grant\", \"grape\", \"grass\", \"gravity\", \"great\", \"green\", \"grid\", \"grief\", \"grit\", \"grocery\", \"group\", \"grow\", \"grunt\", \"guard\", \"guess\", \"guide\", \"guilt\", \"guitar\", \"gun\", \"gym\", \"habit\", \"hair\", \"half\", \"hammer\", \"hamster\", \"hand\", \"happy\", \"harbor\", \"hard\", \"harsh\", \"harvest\", \"hat\", \"have\", \"hawk\", \"hazard\", \"head\", \"health\", \"heart\", \"heavy\", \"hedgehog\", \"height\", \"hello\", \"helmet\", \"help\", \"hen\", \"hero\", \"hidden\", \"high\", \"hill\", \"hint\", \"hip\", \"hire\", \"history\", \"hobby\", \"hockey\", \"hold\", \"hole\", \"holiday\", \"hollow\", \"home\", \"honey\", \"hood\", \"hope\", \"horn\", \"horror\", \"horse\", \"hospital\", \"host\", \"hotel\", \"hour\", \"hover\", \"hub\", \"huge\", \"human\", \"humble\", \"humor\", \"hundred\", \"hungry\", \"hunt\", \"hurdle\", \"hurry\", \"hurt\", \"husband\", \"hybrid\", \"ice\", \"icon\", \"idea\", \"identify\", \"idle\", \"ignore\", \"ill\", \"illegal\", \"illness\", \"image\", \"imitate\", \"immense\", \"immune\", \"impact\", \"impose\", \"improve\", \"impulse\", \"inch\", \"include\", \"income\", \"increase\", \"index\", \"indicate\", \"indoor\", \"industry\", \"infant\", \"inflict\", \"inform\", \"inhale\", \"inherit\", \"initial\", \"inject\", \"injury\", \"inmate\", \"inner\", \"innocent\", \"input\", \"inquiry\", \"insane\", \"insect\", \"inside\", \"inspire\", \"install\", \"intact\", \"interest\", \"into\", \"invest\", \"invite\", \"involve\", \"iron\", \"island\", \"isolate\", \"issue\", \"item\", \"ivory\", \"jacket\", \"jaguar\", \"jar\", \"jazz\", \"jealous\", \"jeans\", \"jelly\", \"jewel\", \"job\", \"join\", \"joke\", \"journey\", \"joy\", \"judge\", \"juice\", \"jump\", \"jungle\", \"junior\", \"junk\", \"just\", \"kangaroo\", \"keen\", \"keep\", \"ketchup\", \"key\", \"kick\", \"kid\", \"kidney\", \"kind\", \"kingdom\", \"kiss\", \"kit\", \"kitchen\", \"kite\", \"kitten\", \"kiwi\", \"knee\", \"knife\", \"knock\", \"know\", \"lab\", \"label\", \"labor\", \"ladder\", \"lady\", \"lake\", \"lamp\", \"language\", \"laptop\", \"large\", \"later\", \"latin\", \"laugh\", \"laundry\", \"lava\", \"law\", \"lawn\", \"lawsuit\", \"layer\", \"lazy\", \"leader\", \"leaf\", \"learn\", \"leave\", \"lecture\", \"left\", \"leg\", \"legal\", \"legend\", \"leisure\", \"lemon\", \"lend\", \"length\", \"lens\", \"leopard\", \"lesson\", \"letter\", \"level\", \"liar\", \"liberty\", \"library\", \"license\", \"life\", \"lift\", \"light\", \"like\", \"limb\", \"limit\", \"link\", \"lion\", \"liquid\", \"list\", \"little\", \"live\", \"lizard\", \"load\", \"loan\", \"lobster\", \"local\", \"lock\", \"logic\", \"lonely\", \"long\", \"loop\", \"lottery\", \"loud\", \"lounge\", \"love\", \"loyal\", \"lucky\", \"luggage\", \"lumber\", \"lunar\", \"lunch\", \"luxury\", \"lyrics\", \"machine\", \"mad\", \"magic\", \"magnet\", \"maid\", \"mail\", \"main\", \"major\", \"make\", \"mammal\", \"man\", \"manage\", \"mandate\", \"mango\", \"mansion\", \"manual\", \"maple\", \"marble\", \"march\", \"margin\", \"marine\", \"market\", \"marriage\", \"mask\", \"mass\", \"master\", \"match\", \"material\", \"math\", \"matrix\", \"matter\", \"maximum\", \"maze\", \"meadow\", \"mean\", \"measure\", \"meat\", \"mechanic\", \"medal\", \"media\", \"melody\", \"melt\", \"member\", \"memory\", \"mention\", \"menu\", \"mercy\", \"merge\", \"merit\", \"merry\", \"mesh\", \"message\", \"metal\", \"method\", \"middle\", \"midnight\", \"milk\", \"million\", \"mimic\", \"mind\", \"minimum\", \"minor\", \"minute\", \"miracle\", \"mirror\", \"misery\", \"miss\", \"mistake\", \"mix\", \"mixed\", \"mixture\", \"mobile\", \"model\", \"modify\", \"mom\", \"moment\", \"monitor\", \"monkey\", \"monster\", \"month\", \"moon\", \"moral\", \"more\", \"morning\", \"mosquito\", \"mother\", \"motion\", \"motor\", \"mountain\", \"mouse\", \"move\", \"movie\", \"much\", \"muffin\", \"mule\", \"multiply\", \"muscle\", \"museum\", \"mushroom\", \"music\", \"must\", \"mutual\", \"myself\", \"mystery\", \"myth\", \"naive\", \"name\", \"napkin\", \"narrow\", \"nasty\", \"nation\", \"nature\", \"near\", \"neck\", \"need\", \"negative\", \"neglect\", \"neither\", \"nephew\", \"nerve\", \"nest\", \"net\", \"network\", \"neutral\", \"never\", \"news\", \"next\", \"nice\", \"night\", \"noble\", \"noise\", \"nominee\", \"noodle\", \"normal\", \"north\", \"nose\", \"notable\", \"note\", \"nothing\", \"notice\", \"novel\", \"now\", \"nuclear\", \"number\", \"nurse\", \"nut\", \"oak\", \"obey\", \"object\", \"oblige\", \"obscure\", \"observe\", \"obtain\", \"obvious\", \"occur\", \"ocean\", \"october\", \"odor\", \"off\", \"offer\", \"office\", \"often\", \"oil\", \"okay\", \"old\", \"olive\", \"olympic\", \"omit\", \"once\", \"one\", \"onion\", \"online\", \"only\", \"open\", \"opera\", \"opinion\", \"oppose\", \"option\", \"orange\", \"orbit\", \"orchard\", \"order\", \"ordinary\", \"organ\", \"orient\", \"original\", \"orphan\", \"ostrich\", \"other\", \"outdoor\", \"outer\", \"output\", \"outside\", \"oval\", \"oven\", \"over\", \"own\", \"owner\", \"oxygen\", \"oyster\", \"ozone\", \"pact\", \"paddle\", \"page\", \"pair\", \"palace\", \"palm\", \"panda\", \"panel\", \"panic\", \"panther\", \"paper\", \"parade\", \"parent\", \"park\", \"parrot\", \"party\", \"pass\", \"patch\", \"path\", \"patient\", \"patrol\", \"pattern\", \"pause\", \"pave\", \"payment\", \"peace\", \"peanut\", \"pear\", \"peasant\", \"pelican\", \"pen\", \"penalty\", \"pencil\", \"people\", \"pepper\", \"perfect\", \"permit\", \"person\", \"pet\", \"phone\", \"photo\", \"phrase\", \"physical\", \"piano\", \"picnic\", \"picture\", \"piece\", \"pig\", \"pigeon\", \"pill\", \"pilot\", \"pink\", \"pioneer\", \"pipe\", \"pistol\", \"pitch\", \"pizza\", \"place\", \"planet\", \"plastic\", \"plate\", \"play\", \"please\", \"pledge\", \"pluck\", \"plug\", \"plunge\", \"poem\", \"poet\", \"point\", \"polar\", \"pole\", \"police\", \"pond\", \"pony\", \"pool\", \"popular\", \"portion\", \"position\", \"possible\", \"post\", \"potato\", \"pottery\", \"poverty\", \"powder\", \"power\", \"practice\", \"praise\", \"predict\", \"prefer\", \"prepare\", \"present\", \"pretty\", \"prevent\", \"price\", \"pride\", \"primary\", \"print\", \"priority\", \"prison\", \"private\", \"prize\", \"problem\", \"process\", \"produce\", \"profit\", \"program\", \"project\", \"promote\", \"proof\", \"property\", \"prosper\", \"protect\", \"proud\", \"provide\", \"public\", \"pudding\", \"pull\", \"pulp\", \"pulse\", \"pumpkin\", \"punch\", \"pupil\", \"puppy\", \"purchase\", \"purity\", \"purpose\", \"purse\", \"push\", \"put\", \"puzzle\", \"pyramid\", \"quality\", \"quantum\", \"quarter\", \"question\", \"quick\", \"quit\", \"quiz\", \"quote\", \"rabbit\", \"raccoon\", \"race\", \"rack\", \"radar\", \"radio\", \"rail\", \"rain\", \"raise\", \"rally\", \"ramp\", \"ranch\", \"random\", \"range\", \"rapid\", \"rare\", \"rate\", \"rather\", \"raven\", \"raw\", \"razor\", \"ready\", \"real\", \"reason\", \"rebel\", \"rebuild\", \"recall\", \"receive\", \"recipe\", \"record\", \"recycle\", \"reduce\", \"reflect\", \"reform\", \"refuse\", \"region\", \"regret\", \"regular\", \"reject\", \"relax\", \"release\", \"relief\", \"rely\", \"remain\", \"remember\", \"remind\", \"remove\", \"render\", \"renew\", \"rent\", \"reopen\", \"repair\", \"repeat\", \"replace\", \"report\", \"require\", \"rescue\", \"resemble\", \"resist\", \"resource\", \"response\", \"result\", \"retire\", \"retreat\", \"return\", \"reunion\", \"reveal\", \"review\", \"reward\", \"rhythm\", \"rib\", \"ribbon\", \"rice\", \"rich\", \"ride\", \"ridge\", \"rifle\", \"right\", \"rigid\", \"ring\", \"riot\", \"ripple\", \"risk\", \"ritual\", \"rival\", \"river\", \"road\", \"roast\", \"robot\", \"robust\", \"rocket\", \"romance\", \"roof\", \"rookie\", \"room\", \"rose\", \"rotate\", \"rough\", \"round\", \"route\", \"royal\", \"rubber\", \"rude\", \"rug\", \"rule\", \"run\", \"runway\", \"rural\", \"sad\", \"saddle\", \"sadness\", \"safe\", \"sail\", \"salad\", \"salmon\", \"salon\", \"salt\", \"salute\", \"same\", \"sample\", \"sand\", \"satisfy\", \"satoshi\", \"sauce\", \"sausage\", \"save\", \"say\", \"scale\", \"scan\", \"scare\", \"scatter\", \"scene\", \"scheme\", \"school\", \"science\", \"scissors\", \"scorpion\", \"scout\", \"scrap\", \"screen\", \"script\", \"scrub\", \"sea\", \"search\", \"season\", \"seat\", \"second\", \"secret\", \"section\", \"security\", \"seed\", \"seek\", \"segment\", \"select\", \"sell\", \"seminar\", \"senior\", \"sense\", \"sentence\", \"series\", \"service\", \"session\", \"settle\", \"setup\", \"seven\", \"shadow\", \"shaft\", \"shallow\", \"share\", \"shed\", \"shell\", \"sheriff\", \"shield\", \"shift\", \"shine\", \"ship\", \"shiver\", \"shock\", \"shoe\", \"shoot\", \"shop\", \"short\", \"shoulder\", \"shove\", \"shrimp\", \"shrug\", \"shuffle\", \"shy\", \"sibling\", \"sick\", \"side\", \"siege\", \"sight\", \"sign\", \"silent\", \"silk\", \"silly\", \"silver\", \"similar\", \"simple\", \"since\", \"sing\", \"siren\", \"sister\", \"situate\", \"six\", \"size\", \"skate\", \"sketch\", \"ski\", \"skill\", \"skin\", \"skirt\", \"skull\", \"slab\", \"slam\", \"sleep\", \"slender\", \"slice\", \"slide\", \"slight\", \"slim\", \"slogan\", \"slot\", \"slow\", \"slush\", \"small\", \"smart\", \"smile\", \"smoke\", \"smooth\", \"snack\", \"snake\", \"snap\", \"sniff\", \"snow\", \"soap\", \"soccer\", \"social\", \"sock\", \"soda\", \"soft\", \"solar\", \"soldier\", \"solid\", \"solution\", \"solve\", \"someone\", \"song\", \"soon\", \"sorry\", \"sort\", \"soul\", \"sound\", \"soup\", \"source\", \"south\", \"space\", \"spare\", \"spatial\", \"spawn\", \"speak\", \"special\", \"speed\", \"spell\", \"spend\", \"sphere\", \"spice\", \"spider\", \"spike\", \"spin\", \"spirit\", \"split\", \"spoil\", \"sponsor\", \"spoon\", \"sport\", \"spot\", \"spray\", \"spread\", \"spring\", \"spy\", \"square\", \"squeeze\", \"squirrel\", \"stable\", \"stadium\", \"staff\", \"stage\", \"stairs\", \"stamp\", \"stand\", \"start\", \"state\", \"stay\", \"steak\", \"steel\", \"stem\", \"step\", \"stereo\", \"stick\", \"still\", \"sting\", \"stock\", \"stomach\", \"stone\", \"stool\", \"story\", \"stove\", \"strategy\", \"street\", \"strike\", \"strong\", \"struggle\", \"student\", \"stuff\", \"stumble\", \"style\", \"subject\", \"submit\", \"subway\", \"success\", \"such\", \"sudden\", \"suffer\", \"sugar\", \"suggest\", \"suit\", \"summer\", \"sun\", \"sunny\", \"sunset\", \"super\", \"supply\", \"supreme\", \"sure\", \"surface\", \"surge\", \"surprise\", \"surround\", \"survey\", \"suspect\", \"sustain\", \"swallow\", \"swamp\", \"swap\", \"swarm\", \"swear\", \"sweet\", \"swift\", \"swim\", \"swing\", \"switch\", \"sword\", \"symbol\", \"symptom\", \"syrup\", \"system\", \"table\", \"tackle\", \"tag\", \"tail\", \"talent\", \"talk\", \"tank\", \"tape\", \"target\", \"task\", \"taste\", \"tattoo\", \"taxi\", \"teach\", \"team\", \"tell\", \"ten\", \"tenant\", \"tennis\", \"tent\", \"term\", \"test\", \"text\", \"thank\", \"that\", \"theme\", \"then\", \"theory\", \"there\", \"they\", \"thing\", \"this\", \"thought\", \"three\", \"thrive\", \"throw\", \"thumb\", \"thunder\", \"ticket\", \"tide\", \"tiger\", \"tilt\", \"timber\", \"time\", \"tiny\", \"tip\", \"tired\", \"tissue\", \"title\", \"toast\", \"tobacco\", \"today\", \"toddler\", \"toe\", \"together\", \"toilet\", \"token\", \"tomato\", \"tomorrow\", \"tone\", \"tongue\", \"tonight\", \"tool\", \"tooth\", \"top\", \"topic\", \"topple\", \"torch\", \"tornado\", \"tortoise\", \"toss\", \"total\", \"tourist\", \"toward\", \"tower\", \"town\", \"toy\", \"track\", \"trade\", \"traffic\", \"tragic\", \"train\", \"transfer\", \"trap\", \"trash\", \"travel\", \"tray\", \"treat\", \"tree\", \"trend\", \"trial\", \"tribe\", \"trick\", \"trigger\", \"trim\", \"trip\", \"trophy\", \"trouble\", \"truck\", \"true\", \"truly\", \"trumpet\", \"trust\", \"truth\", \"try\", \"tube\", \"tuition\", \"tumble\", \"tuna\", \"tunnel\", \"turkey\", \"turn\", \"turtle\", \"twelve\", \"twenty\", \"twice\", \"twin\", \"twist\", \"two\", \"type\", \"typical\", \"ugly\", \"umbrella\", \"unable\", \"unaware\", \"uncle\", \"uncover\", \"under\", \"undo\", \"unfair\", \"unfold\", \"unhappy\", \"uniform\", \"unique\", \"unit\", \"universe\", \"unknown\", \"unlock\", \"until\", \"unusual\", \"unveil\", \"update\", \"upgrade\", \"uphold\", \"upon\", \"upper\", \"upset\", \"urban\", \"urge\", \"usage\", \"use\", \"used\", \"useful\", \"useless\", \"usual\", \"utility\", \"vacant\", \"vacuum\", \"vague\", \"valid\", \"valley\", \"valve\", \"van\", \"vanish\", \"vapor\", \"various\", \"vast\", \"vault\", \"vehicle\", \"velvet\", \"vendor\", \"venture\", \"venue\", \"verb\", \"verify\", \"version\", \"very\", \"vessel\", \"veteran\", \"viable\", \"vibrant\", \"vicious\", \"victory\", \"video\", \"view\", \"village\", \"vintage\", \"violin\", \"virtual\", \"virus\", \"visa\", \"visit\", \"visual\", \"vital\", \"vivid\", \"vocal\", \"voice\", \"void\", \"volcano\", \"volume\", \"vote\", \"voyage\", \"wage\", \"wagon\", \"wait\", \"walk\", \"wall\", \"walnut\", \"want\", \"warfare\", \"warm\", \"warrior\", \"wash\", \"wasp\", \"waste\", \"water\", \"wave\", \"way\", \"wealth\", \"weapon\", \"wear\", \"weasel\", \"weather\", \"web\", \"wedding\", \"weekend\", \"weird\", \"welcome\", \"west\", \"wet\", \"whale\", \"what\", \"wheat\", \"wheel\", \"when\", \"where\", \"whip\", \"whisper\", \"wide\", \"width\", \"wife\", \"wild\", \"will\", \"win\", \"window\", \"wine\", \"wing\", \"wink\", \"winner\", \"winter\", \"wire\", \"wisdom\", \"wise\", \"wish\", \"witness\", \"wolf\", \"woman\", \"wonder\", \"wood\", \"wool\", \"word\", \"work\", \"world\", \"worry\", \"worth\", \"wrap\", \"wreck\", \"wrestle\", \"wrist\", \"write\", \"wrong\", \"yard\", \"year\", \"yellow\", \"you\", \"young\", \"youth\", \"zebra\", \"zero\", \"zone\", \"zoo\"];\n  var english$1 =\n  /*#__PURE__*/\n  Object.freeze({\n    default: english\n  });\n  var french = [\"abaisser\", \"abandon\", \"abdiquer\", \"abeille\", \"abolir\", \"aborder\", \"aboutir\", \"aboyer\", \"abrasif\", \"abreuver\", \"abriter\", \"abroger\", \"abrupt\", \"absence\", \"absolu\", \"absurde\", \"abusif\", \"abyssal\", \"académie\", \"acajou\", \"acarien\", \"accabler\", \"accepter\", \"acclamer\", \"accolade\", \"accroche\", \"accuser\", \"acerbe\", \"achat\", \"acheter\", \"aciduler\", \"acier\", \"acompte\", \"acquérir\", \"acronyme\", \"acteur\", \"actif\", \"actuel\", \"adepte\", \"adéquat\", \"adhésif\", \"adjectif\", \"adjuger\", \"admettre\", \"admirer\", \"adopter\", \"adorer\", \"adoucir\", \"adresse\", \"adroit\", \"adulte\", \"adverbe\", \"aérer\", \"aéronef\", \"affaire\", \"affecter\", \"affiche\", \"affreux\", \"affubler\", \"agacer\", \"agencer\", \"agile\", \"agiter\", \"agrafer\", \"agréable\", \"agrume\", \"aider\", \"aiguille\", \"ailier\", \"aimable\", \"aisance\", \"ajouter\", \"ajuster\", \"alarmer\", \"alchimie\", \"alerte\", \"algèbre\", \"algue\", \"aliéner\", \"aliment\", \"alléger\", \"alliage\", \"allouer\", \"allumer\", \"alourdir\", \"alpaga\", \"altesse\", \"alvéole\", \"amateur\", \"ambigu\", \"ambre\", \"aménager\", \"amertume\", \"amidon\", \"amiral\", \"amorcer\", \"amour\", \"amovible\", \"amphibie\", \"ampleur\", \"amusant\", \"analyse\", \"anaphore\", \"anarchie\", \"anatomie\", \"ancien\", \"anéantir\", \"angle\", \"angoisse\", \"anguleux\", \"animal\", \"annexer\", \"annonce\", \"annuel\", \"anodin\", \"anomalie\", \"anonyme\", \"anormal\", \"antenne\", \"antidote\", \"anxieux\", \"apaiser\", \"apéritif\", \"aplanir\", \"apologie\", \"appareil\", \"appeler\", \"apporter\", \"appuyer\", \"aquarium\", \"aqueduc\", \"arbitre\", \"arbuste\", \"ardeur\", \"ardoise\", \"argent\", \"arlequin\", \"armature\", \"armement\", \"armoire\", \"armure\", \"arpenter\", \"arracher\", \"arriver\", \"arroser\", \"arsenic\", \"artériel\", \"article\", \"aspect\", \"asphalte\", \"aspirer\", \"assaut\", \"asservir\", \"assiette\", \"associer\", \"assurer\", \"asticot\", \"astre\", \"astuce\", \"atelier\", \"atome\", \"atrium\", \"atroce\", \"attaque\", \"attentif\", \"attirer\", \"attraper\", \"aubaine\", \"auberge\", \"audace\", \"audible\", \"augurer\", \"aurore\", \"automne\", \"autruche\", \"avaler\", \"avancer\", \"avarice\", \"avenir\", \"averse\", \"aveugle\", \"aviateur\", \"avide\", \"avion\", \"aviser\", \"avoine\", \"avouer\", \"avril\", \"axial\", \"axiome\", \"badge\", \"bafouer\", \"bagage\", \"baguette\", \"baignade\", \"balancer\", \"balcon\", \"baleine\", \"balisage\", \"bambin\", \"bancaire\", \"bandage\", \"banlieue\", \"bannière\", \"banquier\", \"barbier\", \"baril\", \"baron\", \"barque\", \"barrage\", \"bassin\", \"bastion\", \"bataille\", \"bateau\", \"batterie\", \"baudrier\", \"bavarder\", \"belette\", \"bélier\", \"belote\", \"bénéfice\", \"berceau\", \"berger\", \"berline\", \"bermuda\", \"besace\", \"besogne\", \"bétail\", \"beurre\", \"biberon\", \"bicycle\", \"bidule\", \"bijou\", \"bilan\", \"bilingue\", \"billard\", \"binaire\", \"biologie\", \"biopsie\", \"biotype\", \"biscuit\", \"bison\", \"bistouri\", \"bitume\", \"bizarre\", \"blafard\", \"blague\", \"blanchir\", \"blessant\", \"blinder\", \"blond\", \"bloquer\", \"blouson\", \"bobard\", \"bobine\", \"boire\", \"boiser\", \"bolide\", \"bonbon\", \"bondir\", \"bonheur\", \"bonifier\", \"bonus\", \"bordure\", \"borne\", \"botte\", \"boucle\", \"boueux\", \"bougie\", \"boulon\", \"bouquin\", \"bourse\", \"boussole\", \"boutique\", \"boxeur\", \"branche\", \"brasier\", \"brave\", \"brebis\", \"brèche\", \"breuvage\", \"bricoler\", \"brigade\", \"brillant\", \"brioche\", \"brique\", \"brochure\", \"broder\", \"bronzer\", \"brousse\", \"broyeur\", \"brume\", \"brusque\", \"brutal\", \"bruyant\", \"buffle\", \"buisson\", \"bulletin\", \"bureau\", \"burin\", \"bustier\", \"butiner\", \"butoir\", \"buvable\", \"buvette\", \"cabanon\", \"cabine\", \"cachette\", \"cadeau\", \"cadre\", \"caféine\", \"caillou\", \"caisson\", \"calculer\", \"calepin\", \"calibre\", \"calmer\", \"calomnie\", \"calvaire\", \"camarade\", \"caméra\", \"camion\", \"campagne\", \"canal\", \"caneton\", \"canon\", \"cantine\", \"canular\", \"capable\", \"caporal\", \"caprice\", \"capsule\", \"capter\", \"capuche\", \"carabine\", \"carbone\", \"caresser\", \"caribou\", \"carnage\", \"carotte\", \"carreau\", \"carton\", \"cascade\", \"casier\", \"casque\", \"cassure\", \"causer\", \"caution\", \"cavalier\", \"caverne\", \"caviar\", \"cédille\", \"ceinture\", \"céleste\", \"cellule\", \"cendrier\", \"censurer\", \"central\", \"cercle\", \"cérébral\", \"cerise\", \"cerner\", \"cerveau\", \"cesser\", \"chagrin\", \"chaise\", \"chaleur\", \"chambre\", \"chance\", \"chapitre\", \"charbon\", \"chasseur\", \"chaton\", \"chausson\", \"chavirer\", \"chemise\", \"chenille\", \"chéquier\", \"chercher\", \"cheval\", \"chien\", \"chiffre\", \"chignon\", \"chimère\", \"chiot\", \"chlorure\", \"chocolat\", \"choisir\", \"chose\", \"chouette\", \"chrome\", \"chute\", \"cigare\", \"cigogne\", \"cimenter\", \"cinéma\", \"cintrer\", \"circuler\", \"cirer\", \"cirque\", \"citerne\", \"citoyen\", \"citron\", \"civil\", \"clairon\", \"clameur\", \"claquer\", \"classe\", \"clavier\", \"client\", \"cligner\", \"climat\", \"clivage\", \"cloche\", \"clonage\", \"cloporte\", \"cobalt\", \"cobra\", \"cocasse\", \"cocotier\", \"coder\", \"codifier\", \"coffre\", \"cogner\", \"cohésion\", \"coiffer\", \"coincer\", \"colère\", \"colibri\", \"colline\", \"colmater\", \"colonel\", \"combat\", \"comédie\", \"commande\", \"compact\", \"concert\", \"conduire\", \"confier\", \"congeler\", \"connoter\", \"consonne\", \"contact\", \"convexe\", \"copain\", \"copie\", \"corail\", \"corbeau\", \"cordage\", \"corniche\", \"corpus\", \"correct\", \"cortège\", \"cosmique\", \"costume\", \"coton\", \"coude\", \"coupure\", \"courage\", \"couteau\", \"couvrir\", \"coyote\", \"crabe\", \"crainte\", \"cravate\", \"crayon\", \"créature\", \"créditer\", \"crémeux\", \"creuser\", \"crevette\", \"cribler\", \"crier\", \"cristal\", \"critère\", \"croire\", \"croquer\", \"crotale\", \"crucial\", \"cruel\", \"crypter\", \"cubique\", \"cueillir\", \"cuillère\", \"cuisine\", \"cuivre\", \"culminer\", \"cultiver\", \"cumuler\", \"cupide\", \"curatif\", \"curseur\", \"cyanure\", \"cycle\", \"cylindre\", \"cynique\", \"daigner\", \"damier\", \"danger\", \"danseur\", \"dauphin\", \"débattre\", \"débiter\", \"déborder\", \"débrider\", \"débutant\", \"décaler\", \"décembre\", \"déchirer\", \"décider\", \"déclarer\", \"décorer\", \"décrire\", \"décupler\", \"dédale\", \"déductif\", \"déesse\", \"défensif\", \"défiler\", \"défrayer\", \"dégager\", \"dégivrer\", \"déglutir\", \"dégrafer\", \"déjeuner\", \"délice\", \"déloger\", \"demander\", \"demeurer\", \"démolir\", \"dénicher\", \"dénouer\", \"dentelle\", \"dénuder\", \"départ\", \"dépenser\", \"déphaser\", \"déplacer\", \"déposer\", \"déranger\", \"dérober\", \"désastre\", \"descente\", \"désert\", \"désigner\", \"désobéir\", \"dessiner\", \"destrier\", \"détacher\", \"détester\", \"détourer\", \"détresse\", \"devancer\", \"devenir\", \"deviner\", \"devoir\", \"diable\", \"dialogue\", \"diamant\", \"dicter\", \"différer\", \"digérer\", \"digital\", \"digne\", \"diluer\", \"dimanche\", \"diminuer\", \"dioxyde\", \"directif\", \"diriger\", \"discuter\", \"disposer\", \"dissiper\", \"distance\", \"divertir\", \"diviser\", \"docile\", \"docteur\", \"dogme\", \"doigt\", \"domaine\", \"domicile\", \"dompter\", \"donateur\", \"donjon\", \"donner\", \"dopamine\", \"dortoir\", \"dorure\", \"dosage\", \"doseur\", \"dossier\", \"dotation\", \"douanier\", \"double\", \"douceur\", \"douter\", \"doyen\", \"dragon\", \"draper\", \"dresser\", \"dribbler\", \"droiture\", \"duperie\", \"duplexe\", \"durable\", \"durcir\", \"dynastie\", \"éblouir\", \"écarter\", \"écharpe\", \"échelle\", \"éclairer\", \"éclipse\", \"éclore\", \"écluse\", \"école\", \"économie\", \"écorce\", \"écouter\", \"écraser\", \"écrémer\", \"écrivain\", \"écrou\", \"écume\", \"écureuil\", \"édifier\", \"éduquer\", \"effacer\", \"effectif\", \"effigie\", \"effort\", \"effrayer\", \"effusion\", \"égaliser\", \"égarer\", \"éjecter\", \"élaborer\", \"élargir\", \"électron\", \"élégant\", \"éléphant\", \"élève\", \"éligible\", \"élitisme\", \"éloge\", \"élucider\", \"éluder\", \"emballer\", \"embellir\", \"embryon\", \"émeraude\", \"émission\", \"emmener\", \"émotion\", \"émouvoir\", \"empereur\", \"employer\", \"emporter\", \"emprise\", \"émulsion\", \"encadrer\", \"enchère\", \"enclave\", \"encoche\", \"endiguer\", \"endosser\", \"endroit\", \"enduire\", \"énergie\", \"enfance\", \"enfermer\", \"enfouir\", \"engager\", \"engin\", \"englober\", \"énigme\", \"enjamber\", \"enjeu\", \"enlever\", \"ennemi\", \"ennuyeux\", \"enrichir\", \"enrobage\", \"enseigne\", \"entasser\", \"entendre\", \"entier\", \"entourer\", \"entraver\", \"énumérer\", \"envahir\", \"enviable\", \"envoyer\", \"enzyme\", \"éolien\", \"épaissir\", \"épargne\", \"épatant\", \"épaule\", \"épicerie\", \"épidémie\", \"épier\", \"épilogue\", \"épine\", \"épisode\", \"épitaphe\", \"époque\", \"épreuve\", \"éprouver\", \"épuisant\", \"équerre\", \"équipe\", \"ériger\", \"érosion\", \"erreur\", \"éruption\", \"escalier\", \"espadon\", \"espèce\", \"espiègle\", \"espoir\", \"esprit\", \"esquiver\", \"essayer\", \"essence\", \"essieu\", \"essorer\", \"estime\", \"estomac\", \"estrade\", \"étagère\", \"étaler\", \"étanche\", \"étatique\", \"éteindre\", \"étendoir\", \"éternel\", \"éthanol\", \"éthique\", \"ethnie\", \"étirer\", \"étoffer\", \"étoile\", \"étonnant\", \"étourdir\", \"étrange\", \"étroit\", \"étude\", \"euphorie\", \"évaluer\", \"évasion\", \"éventail\", \"évidence\", \"éviter\", \"évolutif\", \"évoquer\", \"exact\", \"exagérer\", \"exaucer\", \"exceller\", \"excitant\", \"exclusif\", \"excuse\", \"exécuter\", \"exemple\", \"exercer\", \"exhaler\", \"exhorter\", \"exigence\", \"exiler\", \"exister\", \"exotique\", \"expédier\", \"explorer\", \"exposer\", \"exprimer\", \"exquis\", \"extensif\", \"extraire\", \"exulter\", \"fable\", \"fabuleux\", \"facette\", \"facile\", \"facture\", \"faiblir\", \"falaise\", \"fameux\", \"famille\", \"farceur\", \"farfelu\", \"farine\", \"farouche\", \"fasciner\", \"fatal\", \"fatigue\", \"faucon\", \"fautif\", \"faveur\", \"favori\", \"fébrile\", \"féconder\", \"fédérer\", \"félin\", \"femme\", \"fémur\", \"fendoir\", \"féodal\", \"fermer\", \"féroce\", \"ferveur\", \"festival\", \"feuille\", \"feutre\", \"février\", \"fiasco\", \"ficeler\", \"fictif\", \"fidèle\", \"figure\", \"filature\", \"filetage\", \"filière\", \"filleul\", \"filmer\", \"filou\", \"filtrer\", \"financer\", \"finir\", \"fiole\", \"firme\", \"fissure\", \"fixer\", \"flairer\", \"flamme\", \"flasque\", \"flatteur\", \"fléau\", \"flèche\", \"fleur\", \"flexion\", \"flocon\", \"flore\", \"fluctuer\", \"fluide\", \"fluvial\", \"folie\", \"fonderie\", \"fongible\", \"fontaine\", \"forcer\", \"forgeron\", \"formuler\", \"fortune\", \"fossile\", \"foudre\", \"fougère\", \"fouiller\", \"foulure\", \"fourmi\", \"fragile\", \"fraise\", \"franchir\", \"frapper\", \"frayeur\", \"frégate\", \"freiner\", \"frelon\", \"frémir\", \"frénésie\", \"frère\", \"friable\", \"friction\", \"frisson\", \"frivole\", \"froid\", \"fromage\", \"frontal\", \"frotter\", \"fruit\", \"fugitif\", \"fuite\", \"fureur\", \"furieux\", \"furtif\", \"fusion\", \"futur\", \"gagner\", \"galaxie\", \"galerie\", \"gambader\", \"garantir\", \"gardien\", \"garnir\", \"garrigue\", \"gazelle\", \"gazon\", \"géant\", \"gélatine\", \"gélule\", \"gendarme\", \"général\", \"génie\", \"genou\", \"gentil\", \"géologie\", \"géomètre\", \"géranium\", \"germe\", \"gestuel\", \"geyser\", \"gibier\", \"gicler\", \"girafe\", \"givre\", \"glace\", \"glaive\", \"glisser\", \"globe\", \"gloire\", \"glorieux\", \"golfeur\", \"gomme\", \"gonfler\", \"gorge\", \"gorille\", \"goudron\", \"gouffre\", \"goulot\", \"goupille\", \"gourmand\", \"goutte\", \"graduel\", \"graffiti\", \"graine\", \"grand\", \"grappin\", \"gratuit\", \"gravir\", \"grenat\", \"griffure\", \"griller\", \"grimper\", \"grogner\", \"gronder\", \"grotte\", \"groupe\", \"gruger\", \"grutier\", \"gruyère\", \"guépard\", \"guerrier\", \"guide\", \"guimauve\", \"guitare\", \"gustatif\", \"gymnaste\", \"gyrostat\", \"habitude\", \"hachoir\", \"halte\", \"hameau\", \"hangar\", \"hanneton\", \"haricot\", \"harmonie\", \"harpon\", \"hasard\", \"hélium\", \"hématome\", \"herbe\", \"hérisson\", \"hermine\", \"héron\", \"hésiter\", \"heureux\", \"hiberner\", \"hibou\", \"hilarant\", \"histoire\", \"hiver\", \"homard\", \"hommage\", \"homogène\", \"honneur\", \"honorer\", \"honteux\", \"horde\", \"horizon\", \"horloge\", \"hormone\", \"horrible\", \"houleux\", \"housse\", \"hublot\", \"huileux\", \"humain\", \"humble\", \"humide\", \"humour\", \"hurler\", \"hydromel\", \"hygiène\", \"hymne\", \"hypnose\", \"idylle\", \"ignorer\", \"iguane\", \"illicite\", \"illusion\", \"image\", \"imbiber\", \"imiter\", \"immense\", \"immobile\", \"immuable\", \"impact\", \"impérial\", \"implorer\", \"imposer\", \"imprimer\", \"imputer\", \"incarner\", \"incendie\", \"incident\", \"incliner\", \"incolore\", \"indexer\", \"indice\", \"inductif\", \"inédit\", \"ineptie\", \"inexact\", \"infini\", \"infliger\", \"informer\", \"infusion\", \"ingérer\", \"inhaler\", \"inhiber\", \"injecter\", \"injure\", \"innocent\", \"inoculer\", \"inonder\", \"inscrire\", \"insecte\", \"insigne\", \"insolite\", \"inspirer\", \"instinct\", \"insulter\", \"intact\", \"intense\", \"intime\", \"intrigue\", \"intuitif\", \"inutile\", \"invasion\", \"inventer\", \"inviter\", \"invoquer\", \"ironique\", \"irradier\", \"irréel\", \"irriter\", \"isoler\", \"ivoire\", \"ivresse\", \"jaguar\", \"jaillir\", \"jambe\", \"janvier\", \"jardin\", \"jauger\", \"jaune\", \"javelot\", \"jetable\", \"jeton\", \"jeudi\", \"jeunesse\", \"joindre\", \"joncher\", \"jongler\", \"joueur\", \"jouissif\", \"journal\", \"jovial\", \"joyau\", \"joyeux\", \"jubiler\", \"jugement\", \"junior\", \"jupon\", \"juriste\", \"justice\", \"juteux\", \"juvénile\", \"kayak\", \"kimono\", \"kiosque\", \"label\", \"labial\", \"labourer\", \"lacérer\", \"lactose\", \"lagune\", \"laine\", \"laisser\", \"laitier\", \"lambeau\", \"lamelle\", \"lampe\", \"lanceur\", \"langage\", \"lanterne\", \"lapin\", \"largeur\", \"larme\", \"laurier\", \"lavabo\", \"lavoir\", \"lecture\", \"légal\", \"léger\", \"légume\", \"lessive\", \"lettre\", \"levier\", \"lexique\", \"lézard\", \"liasse\", \"libérer\", \"libre\", \"licence\", \"licorne\", \"liège\", \"lièvre\", \"ligature\", \"ligoter\", \"ligue\", \"limer\", \"limite\", \"limonade\", \"limpide\", \"linéaire\", \"lingot\", \"lionceau\", \"liquide\", \"lisière\", \"lister\", \"lithium\", \"litige\", \"littoral\", \"livreur\", \"logique\", \"lointain\", \"loisir\", \"lombric\", \"loterie\", \"louer\", \"lourd\", \"loutre\", \"louve\", \"loyal\", \"lubie\", \"lucide\", \"lucratif\", \"lueur\", \"lugubre\", \"luisant\", \"lumière\", \"lunaire\", \"lundi\", \"luron\", \"lutter\", \"luxueux\", \"machine\", \"magasin\", \"magenta\", \"magique\", \"maigre\", \"maillon\", \"maintien\", \"mairie\", \"maison\", \"majorer\", \"malaxer\", \"maléfice\", \"malheur\", \"malice\", \"mallette\", \"mammouth\", \"mandater\", \"maniable\", \"manquant\", \"manteau\", \"manuel\", \"marathon\", \"marbre\", \"marchand\", \"mardi\", \"maritime\", \"marqueur\", \"marron\", \"marteler\", \"mascotte\", \"massif\", \"matériel\", \"matière\", \"matraque\", \"maudire\", \"maussade\", \"mauve\", \"maximal\", \"méchant\", \"méconnu\", \"médaille\", \"médecin\", \"méditer\", \"méduse\", \"meilleur\", \"mélange\", \"mélodie\", \"membre\", \"mémoire\", \"menacer\", \"mener\", \"menhir\", \"mensonge\", \"mentor\", \"mercredi\", \"mérite\", \"merle\", \"messager\", \"mesure\", \"métal\", \"météore\", \"méthode\", \"métier\", \"meuble\", \"miauler\", \"microbe\", \"miette\", \"mignon\", \"migrer\", \"milieu\", \"million\", \"mimique\", \"mince\", \"minéral\", \"minimal\", \"minorer\", \"minute\", \"miracle\", \"miroiter\", \"missile\", \"mixte\", \"mobile\", \"moderne\", \"moelleux\", \"mondial\", \"moniteur\", \"monnaie\", \"monotone\", \"monstre\", \"montagne\", \"monument\", \"moqueur\", \"morceau\", \"morsure\", \"mortier\", \"moteur\", \"motif\", \"mouche\", \"moufle\", \"moulin\", \"mousson\", \"mouton\", \"mouvant\", \"multiple\", \"munition\", \"muraille\", \"murène\", \"murmure\", \"muscle\", \"muséum\", \"musicien\", \"mutation\", \"muter\", \"mutuel\", \"myriade\", \"myrtille\", \"mystère\", \"mythique\", \"nageur\", \"nappe\", \"narquois\", \"narrer\", \"natation\", \"nation\", \"nature\", \"naufrage\", \"nautique\", \"navire\", \"nébuleux\", \"nectar\", \"néfaste\", \"négation\", \"négliger\", \"négocier\", \"neige\", \"nerveux\", \"nettoyer\", \"neurone\", \"neutron\", \"neveu\", \"niche\", \"nickel\", \"nitrate\", \"niveau\", \"noble\", \"nocif\", \"nocturne\", \"noirceur\", \"noisette\", \"nomade\", \"nombreux\", \"nommer\", \"normatif\", \"notable\", \"notifier\", \"notoire\", \"nourrir\", \"nouveau\", \"novateur\", \"novembre\", \"novice\", \"nuage\", \"nuancer\", \"nuire\", \"nuisible\", \"numéro\", \"nuptial\", \"nuque\", \"nutritif\", \"obéir\", \"objectif\", \"obliger\", \"obscur\", \"observer\", \"obstacle\", \"obtenir\", \"obturer\", \"occasion\", \"occuper\", \"océan\", \"octobre\", \"octroyer\", \"octupler\", \"oculaire\", \"odeur\", \"odorant\", \"offenser\", \"officier\", \"offrir\", \"ogive\", \"oiseau\", \"oisillon\", \"olfactif\", \"olivier\", \"ombrage\", \"omettre\", \"onctueux\", \"onduler\", \"onéreux\", \"onirique\", \"opale\", \"opaque\", \"opérer\", \"opinion\", \"opportun\", \"opprimer\", \"opter\", \"optique\", \"orageux\", \"orange\", \"orbite\", \"ordonner\", \"oreille\", \"organe\", \"orgueil\", \"orifice\", \"ornement\", \"orque\", \"ortie\", \"osciller\", \"osmose\", \"ossature\", \"otarie\", \"ouragan\", \"ourson\", \"outil\", \"outrager\", \"ouvrage\", \"ovation\", \"oxyde\", \"oxygène\", \"ozone\", \"paisible\", \"palace\", \"palmarès\", \"palourde\", \"palper\", \"panache\", \"panda\", \"pangolin\", \"paniquer\", \"panneau\", \"panorama\", \"pantalon\", \"papaye\", \"papier\", \"papoter\", \"papyrus\", \"paradoxe\", \"parcelle\", \"paresse\", \"parfumer\", \"parler\", \"parole\", \"parrain\", \"parsemer\", \"partager\", \"parure\", \"parvenir\", \"passion\", \"pastèque\", \"paternel\", \"patience\", \"patron\", \"pavillon\", \"pavoiser\", \"payer\", \"paysage\", \"peigne\", \"peintre\", \"pelage\", \"pélican\", \"pelle\", \"pelouse\", \"peluche\", \"pendule\", \"pénétrer\", \"pénible\", \"pensif\", \"pénurie\", \"pépite\", \"péplum\", \"perdrix\", \"perforer\", \"période\", \"permuter\", \"perplexe\", \"persil\", \"perte\", \"peser\", \"pétale\", \"petit\", \"pétrir\", \"peuple\", \"pharaon\", \"phobie\", \"phoque\", \"photon\", \"phrase\", \"physique\", \"piano\", \"pictural\", \"pièce\", \"pierre\", \"pieuvre\", \"pilote\", \"pinceau\", \"pipette\", \"piquer\", \"pirogue\", \"piscine\", \"piston\", \"pivoter\", \"pixel\", \"pizza\", \"placard\", \"plafond\", \"plaisir\", \"planer\", \"plaque\", \"plastron\", \"plateau\", \"pleurer\", \"plexus\", \"pliage\", \"plomb\", \"plonger\", \"pluie\", \"plumage\", \"pochette\", \"poésie\", \"poète\", \"pointe\", \"poirier\", \"poisson\", \"poivre\", \"polaire\", \"policier\", \"pollen\", \"polygone\", \"pommade\", \"pompier\", \"ponctuel\", \"pondérer\", \"poney\", \"portique\", \"position\", \"posséder\", \"posture\", \"potager\", \"poteau\", \"potion\", \"pouce\", \"poulain\", \"poumon\", \"pourpre\", \"poussin\", \"pouvoir\", \"prairie\", \"pratique\", \"précieux\", \"prédire\", \"préfixe\", \"prélude\", \"prénom\", \"présence\", \"prétexte\", \"prévoir\", \"primitif\", \"prince\", \"prison\", \"priver\", \"problème\", \"procéder\", \"prodige\", \"profond\", \"progrès\", \"proie\", \"projeter\", \"prologue\", \"promener\", \"propre\", \"prospère\", \"protéger\", \"prouesse\", \"proverbe\", \"prudence\", \"pruneau\", \"psychose\", \"public\", \"puceron\", \"puiser\", \"pulpe\", \"pulsar\", \"punaise\", \"punitif\", \"pupitre\", \"purifier\", \"puzzle\", \"pyramide\", \"quasar\", \"querelle\", \"question\", \"quiétude\", \"quitter\", \"quotient\", \"racine\", \"raconter\", \"radieux\", \"ragondin\", \"raideur\", \"raisin\", \"ralentir\", \"rallonge\", \"ramasser\", \"rapide\", \"rasage\", \"ratisser\", \"ravager\", \"ravin\", \"rayonner\", \"réactif\", \"réagir\", \"réaliser\", \"réanimer\", \"recevoir\", \"réciter\", \"réclamer\", \"récolter\", \"recruter\", \"reculer\", \"recycler\", \"rédiger\", \"redouter\", \"refaire\", \"réflexe\", \"réformer\", \"refrain\", \"refuge\", \"régalien\", \"région\", \"réglage\", \"régulier\", \"réitérer\", \"rejeter\", \"rejouer\", \"relatif\", \"relever\", \"relief\", \"remarque\", \"remède\", \"remise\", \"remonter\", \"remplir\", \"remuer\", \"renard\", \"renfort\", \"renifler\", \"renoncer\", \"rentrer\", \"renvoi\", \"replier\", \"reporter\", \"reprise\", \"reptile\", \"requin\", \"réserve\", \"résineux\", \"résoudre\", \"respect\", \"rester\", \"résultat\", \"rétablir\", \"retenir\", \"réticule\", \"retomber\", \"retracer\", \"réunion\", \"réussir\", \"revanche\", \"revivre\", \"révolte\", \"révulsif\", \"richesse\", \"rideau\", \"rieur\", \"rigide\", \"rigoler\", \"rincer\", \"riposter\", \"risible\", \"risque\", \"rituel\", \"rival\", \"rivière\", \"rocheux\", \"romance\", \"rompre\", \"ronce\", \"rondin\", \"roseau\", \"rosier\", \"rotatif\", \"rotor\", \"rotule\", \"rouge\", \"rouille\", \"rouleau\", \"routine\", \"royaume\", \"ruban\", \"rubis\", \"ruche\", \"ruelle\", \"rugueux\", \"ruiner\", \"ruisseau\", \"ruser\", \"rustique\", \"rythme\", \"sabler\", \"saboter\", \"sabre\", \"sacoche\", \"safari\", \"sagesse\", \"saisir\", \"salade\", \"salive\", \"salon\", \"saluer\", \"samedi\", \"sanction\", \"sanglier\", \"sarcasme\", \"sardine\", \"saturer\", \"saugrenu\", \"saumon\", \"sauter\", \"sauvage\", \"savant\", \"savonner\", \"scalpel\", \"scandale\", \"scélérat\", \"scénario\", \"sceptre\", \"schéma\", \"science\", \"scinder\", \"score\", \"scrutin\", \"sculpter\", \"séance\", \"sécable\", \"sécher\", \"secouer\", \"sécréter\", \"sédatif\", \"séduire\", \"seigneur\", \"séjour\", \"sélectif\", \"semaine\", \"sembler\", \"semence\", \"séminal\", \"sénateur\", \"sensible\", \"sentence\", \"séparer\", \"séquence\", \"serein\", \"sergent\", \"sérieux\", \"serrure\", \"sérum\", \"service\", \"sésame\", \"sévir\", \"sevrage\", \"sextuple\", \"sidéral\", \"siècle\", \"siéger\", \"siffler\", \"sigle\", \"signal\", \"silence\", \"silicium\", \"simple\", \"sincère\", \"sinistre\", \"siphon\", \"sirop\", \"sismique\", \"situer\", \"skier\", \"social\", \"socle\", \"sodium\", \"soigneux\", \"soldat\", \"soleil\", \"solitude\", \"soluble\", \"sombre\", \"sommeil\", \"somnoler\", \"sonde\", \"songeur\", \"sonnette\", \"sonore\", \"sorcier\", \"sortir\", \"sosie\", \"sottise\", \"soucieux\", \"soudure\", \"souffle\", \"soulever\", \"soupape\", \"source\", \"soutirer\", \"souvenir\", \"spacieux\", \"spatial\", \"spécial\", \"sphère\", \"spiral\", \"stable\", \"station\", \"sternum\", \"stimulus\", \"stipuler\", \"strict\", \"studieux\", \"stupeur\", \"styliste\", \"sublime\", \"substrat\", \"subtil\", \"subvenir\", \"succès\", \"sucre\", \"suffixe\", \"suggérer\", \"suiveur\", \"sulfate\", \"superbe\", \"supplier\", \"surface\", \"suricate\", \"surmener\", \"surprise\", \"sursaut\", \"survie\", \"suspect\", \"syllabe\", \"symbole\", \"symétrie\", \"synapse\", \"syntaxe\", \"système\", \"tabac\", \"tablier\", \"tactile\", \"tailler\", \"talent\", \"talisman\", \"talonner\", \"tambour\", \"tamiser\", \"tangible\", \"tapis\", \"taquiner\", \"tarder\", \"tarif\", \"tartine\", \"tasse\", \"tatami\", \"tatouage\", \"taupe\", \"taureau\", \"taxer\", \"témoin\", \"temporel\", \"tenaille\", \"tendre\", \"teneur\", \"tenir\", \"tension\", \"terminer\", \"terne\", \"terrible\", \"tétine\", \"texte\", \"thème\", \"théorie\", \"thérapie\", \"thorax\", \"tibia\", \"tiède\", \"timide\", \"tirelire\", \"tiroir\", \"tissu\", \"titane\", \"titre\", \"tituber\", \"toboggan\", \"tolérant\", \"tomate\", \"tonique\", \"tonneau\", \"toponyme\", \"torche\", \"tordre\", \"tornade\", \"torpille\", \"torrent\", \"torse\", \"tortue\", \"totem\", \"toucher\", \"tournage\", \"tousser\", \"toxine\", \"traction\", \"trafic\", \"tragique\", \"trahir\", \"train\", \"trancher\", \"travail\", \"trèfle\", \"tremper\", \"trésor\", \"treuil\", \"triage\", \"tribunal\", \"tricoter\", \"trilogie\", \"triomphe\", \"tripler\", \"triturer\", \"trivial\", \"trombone\", \"tronc\", \"tropical\", \"troupeau\", \"tuile\", \"tulipe\", \"tumulte\", \"tunnel\", \"turbine\", \"tuteur\", \"tutoyer\", \"tuyau\", \"tympan\", \"typhon\", \"typique\", \"tyran\", \"ubuesque\", \"ultime\", \"ultrason\", \"unanime\", \"unifier\", \"union\", \"unique\", \"unitaire\", \"univers\", \"uranium\", \"urbain\", \"urticant\", \"usage\", \"usine\", \"usuel\", \"usure\", \"utile\", \"utopie\", \"vacarme\", \"vaccin\", \"vagabond\", \"vague\", \"vaillant\", \"vaincre\", \"vaisseau\", \"valable\", \"valise\", \"vallon\", \"valve\", \"vampire\", \"vanille\", \"vapeur\", \"varier\", \"vaseux\", \"vassal\", \"vaste\", \"vecteur\", \"vedette\", \"végétal\", \"véhicule\", \"veinard\", \"véloce\", \"vendredi\", \"vénérer\", \"venger\", \"venimeux\", \"ventouse\", \"verdure\", \"vérin\", \"vernir\", \"verrou\", \"verser\", \"vertu\", \"veston\", \"vétéran\", \"vétuste\", \"vexant\", \"vexer\", \"viaduc\", \"viande\", \"victoire\", \"vidange\", \"vidéo\", \"vignette\", \"vigueur\", \"vilain\", \"village\", \"vinaigre\", \"violon\", \"vipère\", \"virement\", \"virtuose\", \"virus\", \"visage\", \"viseur\", \"vision\", \"visqueux\", \"visuel\", \"vital\", \"vitesse\", \"viticole\", \"vitrine\", \"vivace\", \"vivipare\", \"vocation\", \"voguer\", \"voile\", \"voisin\", \"voiture\", \"volaille\", \"volcan\", \"voltiger\", \"volume\", \"vorace\", \"vortex\", \"voter\", \"vouloir\", \"voyage\", \"voyelle\", \"wagon\", \"xénon\", \"yacht\", \"zèbre\", \"zénith\", \"zeste\", \"zoologie\"];\n  var french$1 =\n  /*#__PURE__*/\n  Object.freeze({\n    default: french\n  });\n  var italian = [\"abaco\", \"abbaglio\", \"abbinato\", \"abete\", \"abisso\", \"abolire\", \"abrasivo\", \"abrogato\", \"accadere\", \"accenno\", \"accusato\", \"acetone\", \"achille\", \"acido\", \"acqua\", \"acre\", \"acrilico\", \"acrobata\", \"acuto\", \"adagio\", \"addebito\", \"addome\", \"adeguato\", \"aderire\", \"adipe\", \"adottare\", \"adulare\", \"affabile\", \"affetto\", \"affisso\", \"affranto\", \"aforisma\", \"afoso\", \"africano\", \"agave\", \"agente\", \"agevole\", \"aggancio\", \"agire\", \"agitare\", \"agonismo\", \"agricolo\", \"agrumeto\", \"aguzzo\", \"alabarda\", \"alato\", \"albatro\", \"alberato\", \"albo\", \"albume\", \"alce\", \"alcolico\", \"alettone\", \"alfa\", \"algebra\", \"aliante\", \"alibi\", \"alimento\", \"allagato\", \"allegro\", \"allievo\", \"allodola\", \"allusivo\", \"almeno\", \"alogeno\", \"alpaca\", \"alpestre\", \"altalena\", \"alterno\", \"alticcio\", \"altrove\", \"alunno\", \"alveolo\", \"alzare\", \"amalgama\", \"amanita\", \"amarena\", \"ambito\", \"ambrato\", \"ameba\", \"america\", \"ametista\", \"amico\", \"ammasso\", \"ammenda\", \"ammirare\", \"ammonito\", \"amore\", \"ampio\", \"ampliare\", \"amuleto\", \"anacardo\", \"anagrafe\", \"analista\", \"anarchia\", \"anatra\", \"anca\", \"ancella\", \"ancora\", \"andare\", \"andrea\", \"anello\", \"angelo\", \"angolare\", \"angusto\", \"anima\", \"annegare\", \"annidato\", \"anno\", \"annuncio\", \"anonimo\", \"anticipo\", \"anzi\", \"apatico\", \"apertura\", \"apode\", \"apparire\", \"appetito\", \"appoggio\", \"approdo\", \"appunto\", \"aprile\", \"arabica\", \"arachide\", \"aragosta\", \"araldica\", \"arancio\", \"aratura\", \"arazzo\", \"arbitro\", \"archivio\", \"ardito\", \"arenile\", \"argento\", \"argine\", \"arguto\", \"aria\", \"armonia\", \"arnese\", \"arredato\", \"arringa\", \"arrosto\", \"arsenico\", \"arso\", \"artefice\", \"arzillo\", \"asciutto\", \"ascolto\", \"asepsi\", \"asettico\", \"asfalto\", \"asino\", \"asola\", \"aspirato\", \"aspro\", \"assaggio\", \"asse\", \"assoluto\", \"assurdo\", \"asta\", \"astenuto\", \"astice\", \"astratto\", \"atavico\", \"ateismo\", \"atomico\", \"atono\", \"attesa\", \"attivare\", \"attorno\", \"attrito\", \"attuale\", \"ausilio\", \"austria\", \"autista\", \"autonomo\", \"autunno\", \"avanzato\", \"avere\", \"avvenire\", \"avviso\", \"avvolgere\", \"azione\", \"azoto\", \"azzimo\", \"azzurro\", \"babele\", \"baccano\", \"bacino\", \"baco\", \"badessa\", \"badilata\", \"bagnato\", \"baita\", \"balcone\", \"baldo\", \"balena\", \"ballata\", \"balzano\", \"bambino\", \"bandire\", \"baraonda\", \"barbaro\", \"barca\", \"baritono\", \"barlume\", \"barocco\", \"basilico\", \"basso\", \"batosta\", \"battuto\", \"baule\", \"bava\", \"bavosa\", \"becco\", \"beffa\", \"belgio\", \"belva\", \"benda\", \"benevole\", \"benigno\", \"benzina\", \"bere\", \"berlina\", \"beta\", \"bibita\", \"bici\", \"bidone\", \"bifido\", \"biga\", \"bilancia\", \"bimbo\", \"binocolo\", \"biologo\", \"bipede\", \"bipolare\", \"birbante\", \"birra\", \"biscotto\", \"bisesto\", \"bisnonno\", \"bisonte\", \"bisturi\", \"bizzarro\", \"blando\", \"blatta\", \"bollito\", \"bonifico\", \"bordo\", \"bosco\", \"botanico\", \"bottino\", \"bozzolo\", \"braccio\", \"bradipo\", \"brama\", \"branca\", \"bravura\", \"bretella\", \"brevetto\", \"brezza\", \"briglia\", \"brillante\", \"brindare\", \"broccolo\", \"brodo\", \"bronzina\", \"brullo\", \"bruno\", \"bubbone\", \"buca\", \"budino\", \"buffone\", \"buio\", \"bulbo\", \"buono\", \"burlone\", \"burrasca\", \"bussola\", \"busta\", \"cadetto\", \"caduco\", \"calamaro\", \"calcolo\", \"calesse\", \"calibro\", \"calmo\", \"caloria\", \"cambusa\", \"camerata\", \"camicia\", \"cammino\", \"camola\", \"campale\", \"canapa\", \"candela\", \"cane\", \"canino\", \"canotto\", \"cantina\", \"capace\", \"capello\", \"capitolo\", \"capogiro\", \"cappero\", \"capra\", \"capsula\", \"carapace\", \"carcassa\", \"cardo\", \"carisma\", \"carovana\", \"carretto\", \"cartolina\", \"casaccio\", \"cascata\", \"caserma\", \"caso\", \"cassone\", \"castello\", \"casuale\", \"catasta\", \"catena\", \"catrame\", \"cauto\", \"cavillo\", \"cedibile\", \"cedrata\", \"cefalo\", \"celebre\", \"cellulare\", \"cena\", \"cenone\", \"centesimo\", \"ceramica\", \"cercare\", \"certo\", \"cerume\", \"cervello\", \"cesoia\", \"cespo\", \"ceto\", \"chela\", \"chiaro\", \"chicca\", \"chiedere\", \"chimera\", \"china\", \"chirurgo\", \"chitarra\", \"ciao\", \"ciclismo\", \"cifrare\", \"cigno\", \"cilindro\", \"ciottolo\", \"circa\", \"cirrosi\", \"citrico\", \"cittadino\", \"ciuffo\", \"civetta\", \"civile\", \"classico\", \"clinica\", \"cloro\", \"cocco\", \"codardo\", \"codice\", \"coerente\", \"cognome\", \"collare\", \"colmato\", \"colore\", \"colposo\", \"coltivato\", \"colza\", \"coma\", \"cometa\", \"commando\", \"comodo\", \"computer\", \"comune\", \"conciso\", \"condurre\", \"conferma\", \"congelare\", \"coniuge\", \"connesso\", \"conoscere\", \"consumo\", \"continuo\", \"convegno\", \"coperto\", \"copione\", \"coppia\", \"copricapo\", \"corazza\", \"cordata\", \"coricato\", \"cornice\", \"corolla\", \"corpo\", \"corredo\", \"corsia\", \"cortese\", \"cosmico\", \"costante\", \"cottura\", \"covato\", \"cratere\", \"cravatta\", \"creato\", \"credere\", \"cremoso\", \"crescita\", \"creta\", \"criceto\", \"crinale\", \"crisi\", \"critico\", \"croce\", \"cronaca\", \"crostata\", \"cruciale\", \"crusca\", \"cucire\", \"cuculo\", \"cugino\", \"cullato\", \"cupola\", \"curatore\", \"cursore\", \"curvo\", \"cuscino\", \"custode\", \"dado\", \"daino\", \"dalmata\", \"damerino\", \"daniela\", \"dannoso\", \"danzare\", \"datato\", \"davanti\", \"davvero\", \"debutto\", \"decennio\", \"deciso\", \"declino\", \"decollo\", \"decreto\", \"dedicato\", \"definito\", \"deforme\", \"degno\", \"delegare\", \"delfino\", \"delirio\", \"delta\", \"demenza\", \"denotato\", \"dentro\", \"deposito\", \"derapata\", \"derivare\", \"deroga\", \"descritto\", \"deserto\", \"desiderio\", \"desumere\", \"detersivo\", \"devoto\", \"diametro\", \"dicembre\", \"diedro\", \"difeso\", \"diffuso\", \"digerire\", \"digitale\", \"diluvio\", \"dinamico\", \"dinnanzi\", \"dipinto\", \"diploma\", \"dipolo\", \"diradare\", \"dire\", \"dirotto\", \"dirupo\", \"disagio\", \"discreto\", \"disfare\", \"disgelo\", \"disposto\", \"distanza\", \"disumano\", \"dito\", \"divano\", \"divelto\", \"dividere\", \"divorato\", \"doblone\", \"docente\", \"doganale\", \"dogma\", \"dolce\", \"domato\", \"domenica\", \"dominare\", \"dondolo\", \"dono\", \"dormire\", \"dote\", \"dottore\", \"dovuto\", \"dozzina\", \"drago\", \"druido\", \"dubbio\", \"dubitare\", \"ducale\", \"duna\", \"duomo\", \"duplice\", \"duraturo\", \"ebano\", \"eccesso\", \"ecco\", \"eclissi\", \"economia\", \"edera\", \"edicola\", \"edile\", \"editoria\", \"educare\", \"egemonia\", \"egli\", \"egoismo\", \"egregio\", \"elaborato\", \"elargire\", \"elegante\", \"elencato\", \"eletto\", \"elevare\", \"elfico\", \"elica\", \"elmo\", \"elsa\", \"eluso\", \"emanato\", \"emblema\", \"emesso\", \"emiro\", \"emotivo\", \"emozione\", \"empirico\", \"emulo\", \"endemico\", \"enduro\", \"energia\", \"enfasi\", \"enoteca\", \"entrare\", \"enzima\", \"epatite\", \"epilogo\", \"episodio\", \"epocale\", \"eppure\", \"equatore\", \"erario\", \"erba\", \"erboso\", \"erede\", \"eremita\", \"erigere\", \"ermetico\", \"eroe\", \"erosivo\", \"errante\", \"esagono\", \"esame\", \"esanime\", \"esaudire\", \"esca\", \"esempio\", \"esercito\", \"esibito\", \"esigente\", \"esistere\", \"esito\", \"esofago\", \"esortato\", \"esoso\", \"espanso\", \"espresso\", \"essenza\", \"esso\", \"esteso\", \"estimare\", \"estonia\", \"estroso\", \"esultare\", \"etilico\", \"etnico\", \"etrusco\", \"etto\", \"euclideo\", \"europa\", \"evaso\", \"evidenza\", \"evitato\", \"evoluto\", \"evviva\", \"fabbrica\", \"faccenda\", \"fachiro\", \"falco\", \"famiglia\", \"fanale\", \"fanfara\", \"fango\", \"fantasma\", \"fare\", \"farfalla\", \"farinoso\", \"farmaco\", \"fascia\", \"fastoso\", \"fasullo\", \"faticare\", \"fato\", \"favoloso\", \"febbre\", \"fecola\", \"fede\", \"fegato\", \"felpa\", \"feltro\", \"femmina\", \"fendere\", \"fenomeno\", \"fermento\", \"ferro\", \"fertile\", \"fessura\", \"festivo\", \"fetta\", \"feudo\", \"fiaba\", \"fiducia\", \"fifa\", \"figurato\", \"filo\", \"finanza\", \"finestra\", \"finire\", \"fiore\", \"fiscale\", \"fisico\", \"fiume\", \"flacone\", \"flamenco\", \"flebo\", \"flemma\", \"florido\", \"fluente\", \"fluoro\", \"fobico\", \"focaccia\", \"focoso\", \"foderato\", \"foglio\", \"folata\", \"folclore\", \"folgore\", \"fondente\", \"fonetico\", \"fonia\", \"fontana\", \"forbito\", \"forchetta\", \"foresta\", \"formica\", \"fornaio\", \"foro\", \"fortezza\", \"forzare\", \"fosfato\", \"fosso\", \"fracasso\", \"frana\", \"frassino\", \"fratello\", \"freccetta\", \"frenata\", \"fresco\", \"frigo\", \"frollino\", \"fronde\", \"frugale\", \"frutta\", \"fucilata\", \"fucsia\", \"fuggente\", \"fulmine\", \"fulvo\", \"fumante\", \"fumetto\", \"fumoso\", \"fune\", \"funzione\", \"fuoco\", \"furbo\", \"furgone\", \"furore\", \"fuso\", \"futile\", \"gabbiano\", \"gaffe\", \"galateo\", \"gallina\", \"galoppo\", \"gambero\", \"gamma\", \"garanzia\", \"garbo\", \"garofano\", \"garzone\", \"gasdotto\", \"gasolio\", \"gastrico\", \"gatto\", \"gaudio\", \"gazebo\", \"gazzella\", \"geco\", \"gelatina\", \"gelso\", \"gemello\", \"gemmato\", \"gene\", \"genitore\", \"gennaio\", \"genotipo\", \"gergo\", \"ghepardo\", \"ghiaccio\", \"ghisa\", \"giallo\", \"gilda\", \"ginepro\", \"giocare\", \"gioiello\", \"giorno\", \"giove\", \"girato\", \"girone\", \"gittata\", \"giudizio\", \"giurato\", \"giusto\", \"globulo\", \"glutine\", \"gnomo\", \"gobba\", \"golf\", \"gomito\", \"gommone\", \"gonfio\", \"gonna\", \"governo\", \"gracile\", \"grado\", \"grafico\", \"grammo\", \"grande\", \"grattare\", \"gravoso\", \"grazia\", \"greca\", \"gregge\", \"grifone\", \"grigio\", \"grinza\", \"grotta\", \"gruppo\", \"guadagno\", \"guaio\", \"guanto\", \"guardare\", \"gufo\", \"guidare\", \"ibernato\", \"icona\", \"identico\", \"idillio\", \"idolo\", \"idra\", \"idrico\", \"idrogeno\", \"igiene\", \"ignaro\", \"ignorato\", \"ilare\", \"illeso\", \"illogico\", \"illudere\", \"imballo\", \"imbevuto\", \"imbocco\", \"imbuto\", \"immane\", \"immerso\", \"immolato\", \"impacco\", \"impeto\", \"impiego\", \"importo\", \"impronta\", \"inalare\", \"inarcare\", \"inattivo\", \"incanto\", \"incendio\", \"inchino\", \"incisivo\", \"incluso\", \"incontro\", \"incrocio\", \"incubo\", \"indagine\", \"india\", \"indole\", \"inedito\", \"infatti\", \"infilare\", \"inflitto\", \"ingaggio\", \"ingegno\", \"inglese\", \"ingordo\", \"ingrosso\", \"innesco\", \"inodore\", \"inoltrare\", \"inondato\", \"insano\", \"insetto\", \"insieme\", \"insonnia\", \"insulina\", \"intasato\", \"intero\", \"intonaco\", \"intuito\", \"inumidire\", \"invalido\", \"invece\", \"invito\", \"iperbole\", \"ipnotico\", \"ipotesi\", \"ippica\", \"iride\", \"irlanda\", \"ironico\", \"irrigato\", \"irrorare\", \"isolato\", \"isotopo\", \"isterico\", \"istituto\", \"istrice\", \"italia\", \"iterare\", \"labbro\", \"labirinto\", \"lacca\", \"lacerato\", \"lacrima\", \"lacuna\", \"laddove\", \"lago\", \"lampo\", \"lancetta\", \"lanterna\", \"lardoso\", \"larga\", \"laringe\", \"lastra\", \"latenza\", \"latino\", \"lattuga\", \"lavagna\", \"lavoro\", \"legale\", \"leggero\", \"lembo\", \"lentezza\", \"lenza\", \"leone\", \"lepre\", \"lesivo\", \"lessato\", \"lesto\", \"letterale\", \"leva\", \"levigato\", \"libero\", \"lido\", \"lievito\", \"lilla\", \"limatura\", \"limitare\", \"limpido\", \"lineare\", \"lingua\", \"liquido\", \"lira\", \"lirica\", \"lisca\", \"lite\", \"litigio\", \"livrea\", \"locanda\", \"lode\", \"logica\", \"lombare\", \"londra\", \"longevo\", \"loquace\", \"lorenzo\", \"loto\", \"lotteria\", \"luce\", \"lucidato\", \"lumaca\", \"luminoso\", \"lungo\", \"lupo\", \"luppolo\", \"lusinga\", \"lusso\", \"lutto\", \"macabro\", \"macchina\", \"macero\", \"macinato\", \"madama\", \"magico\", \"maglia\", \"magnete\", \"magro\", \"maiolica\", \"malafede\", \"malgrado\", \"malinteso\", \"malsano\", \"malto\", \"malumore\", \"mana\", \"mancia\", \"mandorla\", \"mangiare\", \"manifesto\", \"mannaro\", \"manovra\", \"mansarda\", \"mantide\", \"manubrio\", \"mappa\", \"maratona\", \"marcire\", \"maretta\", \"marmo\", \"marsupio\", \"maschera\", \"massaia\", \"mastino\", \"materasso\", \"matricola\", \"mattone\", \"maturo\", \"mazurca\", \"meandro\", \"meccanico\", \"mecenate\", \"medesimo\", \"meditare\", \"mega\", \"melassa\", \"melis\", \"melodia\", \"meninge\", \"meno\", \"mensola\", \"mercurio\", \"merenda\", \"merlo\", \"meschino\", \"mese\", \"messere\", \"mestolo\", \"metallo\", \"metodo\", \"mettere\", \"miagolare\", \"mica\", \"micelio\", \"michele\", \"microbo\", \"midollo\", \"miele\", \"migliore\", \"milano\", \"milite\", \"mimosa\", \"minerale\", \"mini\", \"minore\", \"mirino\", \"mirtillo\", \"miscela\", \"missiva\", \"misto\", \"misurare\", \"mitezza\", \"mitigare\", \"mitra\", \"mittente\", \"mnemonico\", \"modello\", \"modifica\", \"modulo\", \"mogano\", \"mogio\", \"mole\", \"molosso\", \"monastero\", \"monco\", \"mondina\", \"monetario\", \"monile\", \"monotono\", \"monsone\", \"montato\", \"monviso\", \"mora\", \"mordere\", \"morsicato\", \"mostro\", \"motivato\", \"motosega\", \"motto\", \"movenza\", \"movimento\", \"mozzo\", \"mucca\", \"mucosa\", \"muffa\", \"mughetto\", \"mugnaio\", \"mulatto\", \"mulinello\", \"multiplo\", \"mummia\", \"munto\", \"muovere\", \"murale\", \"musa\", \"muscolo\", \"musica\", \"mutevole\", \"muto\", \"nababbo\", \"nafta\", \"nanometro\", \"narciso\", \"narice\", \"narrato\", \"nascere\", \"nastrare\", \"naturale\", \"nautica\", \"naviglio\", \"nebulosa\", \"necrosi\", \"negativo\", \"negozio\", \"nemmeno\", \"neofita\", \"neretto\", \"nervo\", \"nessuno\", \"nettuno\", \"neutrale\", \"neve\", \"nevrotico\", \"nicchia\", \"ninfa\", \"nitido\", \"nobile\", \"nocivo\", \"nodo\", \"nome\", \"nomina\", \"nordico\", \"normale\", \"norvegese\", \"nostrano\", \"notare\", \"notizia\", \"notturno\", \"novella\", \"nucleo\", \"nulla\", \"numero\", \"nuovo\", \"nutrire\", \"nuvola\", \"nuziale\", \"oasi\", \"obbedire\", \"obbligo\", \"obelisco\", \"oblio\", \"obolo\", \"obsoleto\", \"occasione\", \"occhio\", \"occidente\", \"occorrere\", \"occultare\", \"ocra\", \"oculato\", \"odierno\", \"odorare\", \"offerta\", \"offrire\", \"offuscato\", \"oggetto\", \"oggi\", \"ognuno\", \"olandese\", \"olfatto\", \"oliato\", \"oliva\", \"ologramma\", \"oltre\", \"omaggio\", \"ombelico\", \"ombra\", \"omega\", \"omissione\", \"ondoso\", \"onere\", \"onice\", \"onnivoro\", \"onorevole\", \"onta\", \"operato\", \"opinione\", \"opposto\", \"oracolo\", \"orafo\", \"ordine\", \"orecchino\", \"orefice\", \"orfano\", \"organico\", \"origine\", \"orizzonte\", \"orma\", \"ormeggio\", \"ornativo\", \"orologio\", \"orrendo\", \"orribile\", \"ortensia\", \"ortica\", \"orzata\", \"orzo\", \"osare\", \"oscurare\", \"osmosi\", \"ospedale\", \"ospite\", \"ossa\", \"ossidare\", \"ostacolo\", \"oste\", \"otite\", \"otre\", \"ottagono\", \"ottimo\", \"ottobre\", \"ovale\", \"ovest\", \"ovino\", \"oviparo\", \"ovocito\", \"ovunque\", \"ovviare\", \"ozio\", \"pacchetto\", \"pace\", \"pacifico\", \"padella\", \"padrone\", \"paese\", \"paga\", \"pagina\", \"palazzina\", \"palesare\", \"pallido\", \"palo\", \"palude\", \"pandoro\", \"pannello\", \"paolo\", \"paonazzo\", \"paprica\", \"parabola\", \"parcella\", \"parere\", \"pargolo\", \"pari\", \"parlato\", \"parola\", \"partire\", \"parvenza\", \"parziale\", \"passivo\", \"pasticca\", \"patacca\", \"patologia\", \"pattume\", \"pavone\", \"peccato\", \"pedalare\", \"pedonale\", \"peggio\", \"peloso\", \"penare\", \"pendice\", \"penisola\", \"pennuto\", \"penombra\", \"pensare\", \"pentola\", \"pepe\", \"pepita\", \"perbene\", \"percorso\", \"perdonato\", \"perforare\", \"pergamena\", \"periodo\", \"permesso\", \"perno\", \"perplesso\", \"persuaso\", \"pertugio\", \"pervaso\", \"pesatore\", \"pesista\", \"peso\", \"pestifero\", \"petalo\", \"pettine\", \"petulante\", \"pezzo\", \"piacere\", \"pianta\", \"piattino\", \"piccino\", \"picozza\", \"piega\", \"pietra\", \"piffero\", \"pigiama\", \"pigolio\", \"pigro\", \"pila\", \"pilifero\", \"pillola\", \"pilota\", \"pimpante\", \"pineta\", \"pinna\", \"pinolo\", \"pioggia\", \"piombo\", \"piramide\", \"piretico\", \"pirite\", \"pirolisi\", \"pitone\", \"pizzico\", \"placebo\", \"planare\", \"plasma\", \"platano\", \"plenario\", \"pochezza\", \"poderoso\", \"podismo\", \"poesia\", \"poggiare\", \"polenta\", \"poligono\", \"pollice\", \"polmonite\", \"polpetta\", \"polso\", \"poltrona\", \"polvere\", \"pomice\", \"pomodoro\", \"ponte\", \"popoloso\", \"porfido\", \"poroso\", \"porpora\", \"porre\", \"portata\", \"posa\", \"positivo\", \"possesso\", \"postulato\", \"potassio\", \"potere\", \"pranzo\", \"prassi\", \"pratica\", \"precluso\", \"predica\", \"prefisso\", \"pregiato\", \"prelievo\", \"premere\", \"prenotare\", \"preparato\", \"presenza\", \"pretesto\", \"prevalso\", \"prima\", \"principe\", \"privato\", \"problema\", \"procura\", \"produrre\", \"profumo\", \"progetto\", \"prolunga\", \"promessa\", \"pronome\", \"proposta\", \"proroga\", \"proteso\", \"prova\", \"prudente\", \"prugna\", \"prurito\", \"psiche\", \"pubblico\", \"pudica\", \"pugilato\", \"pugno\", \"pulce\", \"pulito\", \"pulsante\", \"puntare\", \"pupazzo\", \"pupilla\", \"puro\", \"quadro\", \"qualcosa\", \"quasi\", \"querela\", \"quota\", \"raccolto\", \"raddoppio\", \"radicale\", \"radunato\", \"raffica\", \"ragazzo\", \"ragione\", \"ragno\", \"ramarro\", \"ramingo\", \"ramo\", \"randagio\", \"rantolare\", \"rapato\", \"rapina\", \"rappreso\", \"rasatura\", \"raschiato\", \"rasente\", \"rassegna\", \"rastrello\", \"rata\", \"ravveduto\", \"reale\", \"recepire\", \"recinto\", \"recluta\", \"recondito\", \"recupero\", \"reddito\", \"redimere\", \"regalato\", \"registro\", \"regola\", \"regresso\", \"relazione\", \"remare\", \"remoto\", \"renna\", \"replica\", \"reprimere\", \"reputare\", \"resa\", \"residente\", \"responso\", \"restauro\", \"rete\", \"retina\", \"retorica\", \"rettifica\", \"revocato\", \"riassunto\", \"ribadire\", \"ribelle\", \"ribrezzo\", \"ricarica\", \"ricco\", \"ricevere\", \"riciclato\", \"ricordo\", \"ricreduto\", \"ridicolo\", \"ridurre\", \"rifasare\", \"riflesso\", \"riforma\", \"rifugio\", \"rigare\", \"rigettato\", \"righello\", \"rilassato\", \"rilevato\", \"rimanere\", \"rimbalzo\", \"rimedio\", \"rimorchio\", \"rinascita\", \"rincaro\", \"rinforzo\", \"rinnovo\", \"rinomato\", \"rinsavito\", \"rintocco\", \"rinuncia\", \"rinvenire\", \"riparato\", \"ripetuto\", \"ripieno\", \"riportare\", \"ripresa\", \"ripulire\", \"risata\", \"rischio\", \"riserva\", \"risibile\", \"riso\", \"rispetto\", \"ristoro\", \"risultato\", \"risvolto\", \"ritardo\", \"ritegno\", \"ritmico\", \"ritrovo\", \"riunione\", \"riva\", \"riverso\", \"rivincita\", \"rivolto\", \"rizoma\", \"roba\", \"robotico\", \"robusto\", \"roccia\", \"roco\", \"rodaggio\", \"rodere\", \"roditore\", \"rogito\", \"rollio\", \"romantico\", \"rompere\", \"ronzio\", \"rosolare\", \"rospo\", \"rotante\", \"rotondo\", \"rotula\", \"rovescio\", \"rubizzo\", \"rubrica\", \"ruga\", \"rullino\", \"rumine\", \"rumoroso\", \"ruolo\", \"rupe\", \"russare\", \"rustico\", \"sabato\", \"sabbiare\", \"sabotato\", \"sagoma\", \"salasso\", \"saldatura\", \"salgemma\", \"salivare\", \"salmone\", \"salone\", \"saltare\", \"saluto\", \"salvo\", \"sapere\", \"sapido\", \"saporito\", \"saraceno\", \"sarcasmo\", \"sarto\", \"sassoso\", \"satellite\", \"satira\", \"satollo\", \"saturno\", \"savana\", \"savio\", \"saziato\", \"sbadiglio\", \"sbalzo\", \"sbancato\", \"sbarra\", \"sbattere\", \"sbavare\", \"sbendare\", \"sbirciare\", \"sbloccato\", \"sbocciato\", \"sbrinare\", \"sbruffone\", \"sbuffare\", \"scabroso\", \"scadenza\", \"scala\", \"scambiare\", \"scandalo\", \"scapola\", \"scarso\", \"scatenare\", \"scavato\", \"scelto\", \"scenico\", \"scettro\", \"scheda\", \"schiena\", \"sciarpa\", \"scienza\", \"scindere\", \"scippo\", \"sciroppo\", \"scivolo\", \"sclerare\", \"scodella\", \"scolpito\", \"scomparto\", \"sconforto\", \"scoprire\", \"scorta\", \"scossone\", \"scozzese\", \"scriba\", \"scrollare\", \"scrutinio\", \"scuderia\", \"scultore\", \"scuola\", \"scuro\", \"scusare\", \"sdebitare\", \"sdoganare\", \"seccatura\", \"secondo\", \"sedano\", \"seggiola\", \"segnalato\", \"segregato\", \"seguito\", \"selciato\", \"selettivo\", \"sella\", \"selvaggio\", \"semaforo\", \"sembrare\", \"seme\", \"seminato\", \"sempre\", \"senso\", \"sentire\", \"sepolto\", \"sequenza\", \"serata\", \"serbato\", \"sereno\", \"serio\", \"serpente\", \"serraglio\", \"servire\", \"sestina\", \"setola\", \"settimana\", \"sfacelo\", \"sfaldare\", \"sfamato\", \"sfarzoso\", \"sfaticato\", \"sfera\", \"sfida\", \"sfilato\", \"sfinge\", \"sfocato\", \"sfoderare\", \"sfogo\", \"sfoltire\", \"sforzato\", \"sfratto\", \"sfruttato\", \"sfuggito\", \"sfumare\", \"sfuso\", \"sgabello\", \"sgarbato\", \"sgonfiare\", \"sgorbio\", \"sgrassato\", \"sguardo\", \"sibilo\", \"siccome\", \"sierra\", \"sigla\", \"signore\", \"silenzio\", \"sillaba\", \"simbolo\", \"simpatico\", \"simulato\", \"sinfonia\", \"singolo\", \"sinistro\", \"sino\", \"sintesi\", \"sinusoide\", \"sipario\", \"sisma\", \"sistole\", \"situato\", \"slitta\", \"slogatura\", \"sloveno\", \"smarrito\", \"smemorato\", \"smentito\", \"smeraldo\", \"smilzo\", \"smontare\", \"smottato\", \"smussato\", \"snellire\", \"snervato\", \"snodo\", \"sobbalzo\", \"sobrio\", \"soccorso\", \"sociale\", \"sodale\", \"soffitto\", \"sogno\", \"soldato\", \"solenne\", \"solido\", \"sollazzo\", \"solo\", \"solubile\", \"solvente\", \"somatico\", \"somma\", \"sonda\", \"sonetto\", \"sonnifero\", \"sopire\", \"soppeso\", \"sopra\", \"sorgere\", \"sorpasso\", \"sorriso\", \"sorso\", \"sorteggio\", \"sorvolato\", \"sospiro\", \"sosta\", \"sottile\", \"spada\", \"spalla\", \"spargere\", \"spatola\", \"spavento\", \"spazzola\", \"specie\", \"spedire\", \"spegnere\", \"spelatura\", \"speranza\", \"spessore\", \"spettrale\", \"spezzato\", \"spia\", \"spigoloso\", \"spillato\", \"spinoso\", \"spirale\", \"splendido\", \"sportivo\", \"sposo\", \"spranga\", \"sprecare\", \"spronato\", \"spruzzo\", \"spuntino\", \"squillo\", \"sradicare\", \"srotolato\", \"stabile\", \"stacco\", \"staffa\", \"stagnare\", \"stampato\", \"stantio\", \"starnuto\", \"stasera\", \"statuto\", \"stelo\", \"steppa\", \"sterzo\", \"stiletto\", \"stima\", \"stirpe\", \"stivale\", \"stizzoso\", \"stonato\", \"storico\", \"strappo\", \"stregato\", \"stridulo\", \"strozzare\", \"strutto\", \"stuccare\", \"stufo\", \"stupendo\", \"subentro\", \"succoso\", \"sudore\", \"suggerito\", \"sugo\", \"sultano\", \"suonare\", \"superbo\", \"supporto\", \"surgelato\", \"surrogato\", \"sussurro\", \"sutura\", \"svagare\", \"svedese\", \"sveglio\", \"svelare\", \"svenuto\", \"svezia\", \"sviluppo\", \"svista\", \"svizzera\", \"svolta\", \"svuotare\", \"tabacco\", \"tabulato\", \"tacciare\", \"taciturno\", \"tale\", \"talismano\", \"tampone\", \"tannino\", \"tara\", \"tardivo\", \"targato\", \"tariffa\", \"tarpare\", \"tartaruga\", \"tasto\", \"tattico\", \"taverna\", \"tavolata\", \"tazza\", \"teca\", \"tecnico\", \"telefono\", \"temerario\", \"tempo\", \"temuto\", \"tendone\", \"tenero\", \"tensione\", \"tentacolo\", \"teorema\", \"terme\", \"terrazzo\", \"terzetto\", \"tesi\", \"tesserato\", \"testato\", \"tetro\", \"tettoia\", \"tifare\", \"tigella\", \"timbro\", \"tinto\", \"tipico\", \"tipografo\", \"tiraggio\", \"tiro\", \"titanio\", \"titolo\", \"titubante\", \"tizio\", \"tizzone\", \"toccare\", \"tollerare\", \"tolto\", \"tombola\", \"tomo\", \"tonfo\", \"tonsilla\", \"topazio\", \"topologia\", \"toppa\", \"torba\", \"tornare\", \"torrone\", \"tortora\", \"toscano\", \"tossire\", \"tostatura\", \"totano\", \"trabocco\", \"trachea\", \"trafila\", \"tragedia\", \"tralcio\", \"tramonto\", \"transito\", \"trapano\", \"trarre\", \"trasloco\", \"trattato\", \"trave\", \"treccia\", \"tremolio\", \"trespolo\", \"tributo\", \"tricheco\", \"trifoglio\", \"trillo\", \"trincea\", \"trio\", \"tristezza\", \"triturato\", \"trivella\", \"tromba\", \"trono\", \"troppo\", \"trottola\", \"trovare\", \"truccato\", \"tubatura\", \"tuffato\", \"tulipano\", \"tumulto\", \"tunisia\", \"turbare\", \"turchino\", \"tuta\", \"tutela\", \"ubicato\", \"uccello\", \"uccisore\", \"udire\", \"uditivo\", \"uffa\", \"ufficio\", \"uguale\", \"ulisse\", \"ultimato\", \"umano\", \"umile\", \"umorismo\", \"uncinetto\", \"ungere\", \"ungherese\", \"unicorno\", \"unificato\", \"unisono\", \"unitario\", \"unte\", \"uovo\", \"upupa\", \"uragano\", \"urgenza\", \"urlo\", \"usanza\", \"usato\", \"uscito\", \"usignolo\", \"usuraio\", \"utensile\", \"utilizzo\", \"utopia\", \"vacante\", \"vaccinato\", \"vagabondo\", \"vagliato\", \"valanga\", \"valgo\", \"valico\", \"valletta\", \"valoroso\", \"valutare\", \"valvola\", \"vampata\", \"vangare\", \"vanitoso\", \"vano\", \"vantaggio\", \"vanvera\", \"vapore\", \"varano\", \"varcato\", \"variante\", \"vasca\", \"vedetta\", \"vedova\", \"veduto\", \"vegetale\", \"veicolo\", \"velcro\", \"velina\", \"velluto\", \"veloce\", \"venato\", \"vendemmia\", \"vento\", \"verace\", \"verbale\", \"vergogna\", \"verifica\", \"vero\", \"verruca\", \"verticale\", \"vescica\", \"vessillo\", \"vestale\", \"veterano\", \"vetrina\", \"vetusto\", \"viandante\", \"vibrante\", \"vicenda\", \"vichingo\", \"vicinanza\", \"vidimare\", \"vigilia\", \"vigneto\", \"vigore\", \"vile\", \"villano\", \"vimini\", \"vincitore\", \"viola\", \"vipera\", \"virgola\", \"virologo\", \"virulento\", \"viscoso\", \"visione\", \"vispo\", \"vissuto\", \"visura\", \"vita\", \"vitello\", \"vittima\", \"vivanda\", \"vivido\", \"viziare\", \"voce\", \"voga\", \"volatile\", \"volere\", \"volpe\", \"voragine\", \"vulcano\", \"zampogna\", \"zanna\", \"zappato\", \"zattera\", \"zavorra\", \"zefiro\", \"zelante\", \"zelo\", \"zenzero\", \"zerbino\", \"zibetto\", \"zinco\", \"zircone\", \"zitto\", \"zolla\", \"zotico\", \"zucchero\", \"zufolo\", \"zulu\", \"zuppa\"];\n  var italian$1 =\n  /*#__PURE__*/\n  Object.freeze({\n    default: italian\n  });\n  var japanese = [\"あいこくしん\", \"あいさつ\", \"あいだ\", \"あおぞら\", \"あかちゃん\", \"あきる\", \"あけがた\", \"あける\", \"あこがれる\", \"あさい\", \"あさひ\", \"あしあと\", \"あじわう\", \"あずかる\", \"あずき\", \"あそぶ\", \"あたえる\", \"あたためる\", \"あたりまえ\", \"あたる\", \"あつい\", \"あつかう\", \"あっしゅく\", \"あつまり\", \"あつめる\", \"あてな\", \"あてはまる\", \"あひる\", \"あぶら\", \"あぶる\", \"あふれる\", \"あまい\", \"あまど\", \"あまやかす\", \"あまり\", \"あみもの\", \"あめりか\", \"あやまる\", \"あゆむ\", \"あらいぐま\", \"あらし\", \"あらすじ\", \"あらためる\", \"あらゆる\", \"あらわす\", \"ありがとう\", \"あわせる\", \"あわてる\", \"あんい\", \"あんがい\", \"あんこ\", \"あんぜん\", \"あんてい\", \"あんない\", \"あんまり\", \"いいだす\", \"いおん\", \"いがい\", \"いがく\", \"いきおい\", \"いきなり\", \"いきもの\", \"いきる\", \"いくじ\", \"いくぶん\", \"いけばな\", \"いけん\", \"いこう\", \"いこく\", \"いこつ\", \"いさましい\", \"いさん\", \"いしき\", \"いじゅう\", \"いじょう\", \"いじわる\", \"いずみ\", \"いずれ\", \"いせい\", \"いせえび\", \"いせかい\", \"いせき\", \"いぜん\", \"いそうろう\", \"いそがしい\", \"いだい\", \"いだく\", \"いたずら\", \"いたみ\", \"いたりあ\", \"いちおう\", \"いちじ\", \"いちど\", \"いちば\", \"いちぶ\", \"いちりゅう\", \"いつか\", \"いっしゅん\", \"いっせい\", \"いっそう\", \"いったん\", \"いっち\", \"いってい\", \"いっぽう\", \"いてざ\", \"いてん\", \"いどう\", \"いとこ\", \"いない\", \"いなか\", \"いねむり\", \"いのち\", \"いのる\", \"いはつ\", \"いばる\", \"いはん\", \"いびき\", \"いひん\", \"いふく\", \"いへん\", \"いほう\", \"いみん\", \"いもうと\", \"いもたれ\", \"いもり\", \"いやがる\", \"いやす\", \"いよかん\", \"いよく\", \"いらい\", \"いらすと\", \"いりぐち\", \"いりょう\", \"いれい\", \"いれもの\", \"いれる\", \"いろえんぴつ\", \"いわい\", \"いわう\", \"いわかん\", \"いわば\", \"いわゆる\", \"いんげんまめ\", \"いんさつ\", \"いんしょう\", \"いんよう\", \"うえき\", \"うえる\", \"うおざ\", \"うがい\", \"うかぶ\", \"うかべる\", \"うきわ\", \"うくらいな\", \"うくれれ\", \"うけたまわる\", \"うけつけ\", \"うけとる\", \"うけもつ\", \"うける\", \"うごかす\", \"うごく\", \"うこん\", \"うさぎ\", \"うしなう\", \"うしろがみ\", \"うすい\", \"うすぎ\", \"うすぐらい\", \"うすめる\", \"うせつ\", \"うちあわせ\", \"うちがわ\", \"うちき\", \"うちゅう\", \"うっかり\", \"うつくしい\", \"うったえる\", \"うつる\", \"うどん\", \"うなぎ\", \"うなじ\", \"うなずく\", \"うなる\", \"うねる\", \"うのう\", \"うぶげ\", \"うぶごえ\", \"うまれる\", \"うめる\", \"うもう\", \"うやまう\", \"うよく\", \"うらがえす\", \"うらぐち\", \"うらない\", \"うりあげ\", \"うりきれ\", \"うるさい\", \"うれしい\", \"うれゆき\", \"うれる\", \"うろこ\", \"うわき\", \"うわさ\", \"うんこう\", \"うんちん\", \"うんてん\", \"うんどう\", \"えいえん\", \"えいが\", \"えいきょう\", \"えいご\", \"えいせい\", \"えいぶん\", \"えいよう\", \"えいわ\", \"えおり\", \"えがお\", \"えがく\", \"えきたい\", \"えくせる\", \"えしゃく\", \"えすて\", \"えつらん\", \"えのぐ\", \"えほうまき\", \"えほん\", \"えまき\", \"えもじ\", \"えもの\", \"えらい\", \"えらぶ\", \"えりあ\", \"えんえん\", \"えんかい\", \"えんぎ\", \"えんげき\", \"えんしゅう\", \"えんぜつ\", \"えんそく\", \"えんちょう\", \"えんとつ\", \"おいかける\", \"おいこす\", \"おいしい\", \"おいつく\", \"おうえん\", \"おうさま\", \"おうじ\", \"おうせつ\", \"おうたい\", \"おうふく\", \"おうべい\", \"おうよう\", \"おえる\", \"おおい\", \"おおう\", \"おおどおり\", \"おおや\", \"おおよそ\", \"おかえり\", \"おかず\", \"おがむ\", \"おかわり\", \"おぎなう\", \"おきる\", \"おくさま\", \"おくじょう\", \"おくりがな\", \"おくる\", \"おくれる\", \"おこす\", \"おこなう\", \"おこる\", \"おさえる\", \"おさない\", \"おさめる\", \"おしいれ\", \"おしえる\", \"おじぎ\", \"おじさん\", \"おしゃれ\", \"おそらく\", \"おそわる\", \"おたがい\", \"おたく\", \"おだやか\", \"おちつく\", \"おっと\", \"おつり\", \"おでかけ\", \"おとしもの\", \"おとなしい\", \"おどり\", \"おどろかす\", \"おばさん\", \"おまいり\", \"おめでとう\", \"おもいで\", \"おもう\", \"おもたい\", \"おもちゃ\", \"おやつ\", \"おやゆび\", \"およぼす\", \"おらんだ\", \"おろす\", \"おんがく\", \"おんけい\", \"おんしゃ\", \"おんせん\", \"おんだん\", \"おんちゅう\", \"おんどけい\", \"かあつ\", \"かいが\", \"がいき\", \"がいけん\", \"がいこう\", \"かいさつ\", \"かいしゃ\", \"かいすいよく\", \"かいぜん\", \"かいぞうど\", \"かいつう\", \"かいてん\", \"かいとう\", \"かいふく\", \"がいへき\", \"かいほう\", \"かいよう\", \"がいらい\", \"かいわ\", \"かえる\", \"かおり\", \"かかえる\", \"かがく\", \"かがし\", \"かがみ\", \"かくご\", \"かくとく\", \"かざる\", \"がぞう\", \"かたい\", \"かたち\", \"がちょう\", \"がっきゅう\", \"がっこう\", \"がっさん\", \"がっしょう\", \"かなざわし\", \"かのう\", \"がはく\", \"かぶか\", \"かほう\", \"かほご\", \"かまう\", \"かまぼこ\", \"かめれおん\", \"かゆい\", \"かようび\", \"からい\", \"かるい\", \"かろう\", \"かわく\", \"かわら\", \"がんか\", \"かんけい\", \"かんこう\", \"かんしゃ\", \"かんそう\", \"かんたん\", \"かんち\", \"がんばる\", \"きあい\", \"きあつ\", \"きいろ\", \"ぎいん\", \"きうい\", \"きうん\", \"きえる\", \"きおう\", \"きおく\", \"きおち\", \"きおん\", \"きかい\", \"きかく\", \"きかんしゃ\", \"ききて\", \"きくばり\", \"きくらげ\", \"きけんせい\", \"きこう\", \"きこえる\", \"きこく\", \"きさい\", \"きさく\", \"きさま\", \"きさらぎ\", \"ぎじかがく\", \"ぎしき\", \"ぎじたいけん\", \"ぎじにってい\", \"ぎじゅつしゃ\", \"きすう\", \"きせい\", \"きせき\", \"きせつ\", \"きそう\", \"きぞく\", \"きぞん\", \"きたえる\", \"きちょう\", \"きつえん\", \"ぎっちり\", \"きつつき\", \"きつね\", \"きてい\", \"きどう\", \"きどく\", \"きない\", \"きなが\", \"きなこ\", \"きぬごし\", \"きねん\", \"きのう\", \"きのした\", \"きはく\", \"きびしい\", \"きひん\", \"きふく\", \"きぶん\", \"きぼう\", \"きほん\", \"きまる\", \"きみつ\", \"きむずかしい\", \"きめる\", \"きもだめし\", \"きもち\", \"きもの\", \"きゃく\", \"きやく\", \"ぎゅうにく\", \"きよう\", \"きょうりゅう\", \"きらい\", \"きらく\", \"きりん\", \"きれい\", \"きれつ\", \"きろく\", \"ぎろん\", \"きわめる\", \"ぎんいろ\", \"きんかくじ\", \"きんじょ\", \"きんようび\", \"ぐあい\", \"くいず\", \"くうかん\", \"くうき\", \"くうぐん\", \"くうこう\", \"ぐうせい\", \"くうそう\", \"ぐうたら\", \"くうふく\", \"くうぼ\", \"くかん\", \"くきょう\", \"くげん\", \"ぐこう\", \"くさい\", \"くさき\", \"くさばな\", \"くさる\", \"くしゃみ\", \"くしょう\", \"くすのき\", \"くすりゆび\", \"くせげ\", \"くせん\", \"ぐたいてき\", \"くださる\", \"くたびれる\", \"くちこみ\", \"くちさき\", \"くつした\", \"ぐっすり\", \"くつろぐ\", \"くとうてん\", \"くどく\", \"くなん\", \"くねくね\", \"くのう\", \"くふう\", \"くみあわせ\", \"くみたてる\", \"くめる\", \"くやくしょ\", \"くらす\", \"くらべる\", \"くるま\", \"くれる\", \"くろう\", \"くわしい\", \"ぐんかん\", \"ぐんしょく\", \"ぐんたい\", \"ぐんて\", \"けあな\", \"けいかく\", \"けいけん\", \"けいこ\", \"けいさつ\", \"げいじゅつ\", \"けいたい\", \"げいのうじん\", \"けいれき\", \"けいろ\", \"けおとす\", \"けおりもの\", \"げきか\", \"げきげん\", \"げきだん\", \"げきちん\", \"げきとつ\", \"げきは\", \"げきやく\", \"げこう\", \"げこくじょう\", \"げざい\", \"けさき\", \"げざん\", \"けしき\", \"けしごむ\", \"けしょう\", \"げすと\", \"けたば\", \"けちゃっぷ\", \"けちらす\", \"けつあつ\", \"けつい\", \"けつえき\", \"けっこん\", \"けつじょ\", \"けっせき\", \"けってい\", \"けつまつ\", \"げつようび\", \"げつれい\", \"けつろん\", \"げどく\", \"けとばす\", \"けとる\", \"けなげ\", \"けなす\", \"けなみ\", \"けぬき\", \"げねつ\", \"けねん\", \"けはい\", \"げひん\", \"けぶかい\", \"げぼく\", \"けまり\", \"けみかる\", \"けむし\", \"けむり\", \"けもの\", \"けらい\", \"けろけろ\", \"けわしい\", \"けんい\", \"けんえつ\", \"けんお\", \"けんか\", \"げんき\", \"けんげん\", \"けんこう\", \"けんさく\", \"けんしゅう\", \"けんすう\", \"げんそう\", \"けんちく\", \"けんてい\", \"けんとう\", \"けんない\", \"けんにん\", \"げんぶつ\", \"けんま\", \"けんみん\", \"けんめい\", \"けんらん\", \"けんり\", \"こあくま\", \"こいぬ\", \"こいびと\", \"ごうい\", \"こうえん\", \"こうおん\", \"こうかん\", \"ごうきゅう\", \"ごうけい\", \"こうこう\", \"こうさい\", \"こうじ\", \"こうすい\", \"ごうせい\", \"こうそく\", \"こうたい\", \"こうちゃ\", \"こうつう\", \"こうてい\", \"こうどう\", \"こうない\", \"こうはい\", \"ごうほう\", \"ごうまん\", \"こうもく\", \"こうりつ\", \"こえる\", \"こおり\", \"ごかい\", \"ごがつ\", \"ごかん\", \"こくご\", \"こくさい\", \"こくとう\", \"こくない\", \"こくはく\", \"こぐま\", \"こけい\", \"こける\", \"ここのか\", \"こころ\", \"こさめ\", \"こしつ\", \"こすう\", \"こせい\", \"こせき\", \"こぜん\", \"こそだて\", \"こたい\", \"こたえる\", \"こたつ\", \"こちょう\", \"こっか\", \"こつこつ\", \"こつばん\", \"こつぶ\", \"こてい\", \"こてん\", \"ことがら\", \"ことし\", \"ことば\", \"ことり\", \"こなごな\", \"こねこね\", \"このまま\", \"このみ\", \"このよ\", \"ごはん\", \"こひつじ\", \"こふう\", \"こふん\", \"こぼれる\", \"ごまあぶら\", \"こまかい\", \"ごますり\", \"こまつな\", \"こまる\", \"こむぎこ\", \"こもじ\", \"こもち\", \"こもの\", \"こもん\", \"こやく\", \"こやま\", \"こゆう\", \"こゆび\", \"こよい\", \"こよう\", \"こりる\", \"これくしょん\", \"ころっけ\", \"こわもて\", \"こわれる\", \"こんいん\", \"こんかい\", \"こんき\", \"こんしゅう\", \"こんすい\", \"こんだて\", \"こんとん\", \"こんなん\", \"こんびに\", \"こんぽん\", \"こんまけ\", \"こんや\", \"こんれい\", \"こんわく\", \"ざいえき\", \"さいかい\", \"さいきん\", \"ざいげん\", \"ざいこ\", \"さいしょ\", \"さいせい\", \"ざいたく\", \"ざいちゅう\", \"さいてき\", \"ざいりょう\", \"さうな\", \"さかいし\", \"さがす\", \"さかな\", \"さかみち\", \"さがる\", \"さぎょう\", \"さくし\", \"さくひん\", \"さくら\", \"さこく\", \"さこつ\", \"さずかる\", \"ざせき\", \"さたん\", \"さつえい\", \"ざつおん\", \"ざっか\", \"ざつがく\", \"さっきょく\", \"ざっし\", \"さつじん\", \"ざっそう\", \"さつたば\", \"さつまいも\", \"さてい\", \"さといも\", \"さとう\", \"さとおや\", \"さとし\", \"さとる\", \"さのう\", \"さばく\", \"さびしい\", \"さべつ\", \"さほう\", \"さほど\", \"さます\", \"さみしい\", \"さみだれ\", \"さむけ\", \"さめる\", \"さやえんどう\", \"さゆう\", \"さよう\", \"さよく\", \"さらだ\", \"ざるそば\", \"さわやか\", \"さわる\", \"さんいん\", \"さんか\", \"さんきゃく\", \"さんこう\", \"さんさい\", \"ざんしょ\", \"さんすう\", \"さんせい\", \"さんそ\", \"さんち\", \"さんま\", \"さんみ\", \"さんらん\", \"しあい\", \"しあげ\", \"しあさって\", \"しあわせ\", \"しいく\", \"しいん\", \"しうち\", \"しえい\", \"しおけ\", \"しかい\", \"しかく\", \"じかん\", \"しごと\", \"しすう\", \"じだい\", \"したうけ\", \"したぎ\", \"したて\", \"したみ\", \"しちょう\", \"しちりん\", \"しっかり\", \"しつじ\", \"しつもん\", \"してい\", \"してき\", \"してつ\", \"じてん\", \"じどう\", \"しなぎれ\", \"しなもの\", \"しなん\", \"しねま\", \"しねん\", \"しのぐ\", \"しのぶ\", \"しはい\", \"しばかり\", \"しはつ\", \"しはらい\", \"しはん\", \"しひょう\", \"しふく\", \"じぶん\", \"しへい\", \"しほう\", \"しほん\", \"しまう\", \"しまる\", \"しみん\", \"しむける\", \"じむしょ\", \"しめい\", \"しめる\", \"しもん\", \"しゃいん\", \"しゃうん\", \"しゃおん\", \"じゃがいも\", \"しやくしょ\", \"しゃくほう\", \"しゃけん\", \"しゃこ\", \"しゃざい\", \"しゃしん\", \"しゃせん\", \"しゃそう\", \"しゃたい\", \"しゃちょう\", \"しゃっきん\", \"じゃま\", \"しゃりん\", \"しゃれい\", \"じゆう\", \"じゅうしょ\", \"しゅくはく\", \"じゅしん\", \"しゅっせき\", \"しゅみ\", \"しゅらば\", \"じゅんばん\", \"しょうかい\", \"しょくたく\", \"しょっけん\", \"しょどう\", \"しょもつ\", \"しらせる\", \"しらべる\", \"しんか\", \"しんこう\", \"じんじゃ\", \"しんせいじ\", \"しんちく\", \"しんりん\", \"すあげ\", \"すあし\", \"すあな\", \"ずあん\", \"すいえい\", \"すいか\", \"すいとう\", \"ずいぶん\", \"すいようび\", \"すうがく\", \"すうじつ\", \"すうせん\", \"すおどり\", \"すきま\", \"すくう\", \"すくない\", \"すける\", \"すごい\", \"すこし\", \"ずさん\", \"すずしい\", \"すすむ\", \"すすめる\", \"すっかり\", \"ずっしり\", \"ずっと\", \"すてき\", \"すてる\", \"すねる\", \"すのこ\", \"すはだ\", \"すばらしい\", \"ずひょう\", \"ずぶぬれ\", \"すぶり\", \"すふれ\", \"すべて\", \"すべる\", \"ずほう\", \"すぼん\", \"すまい\", \"すめし\", \"すもう\", \"すやき\", \"すらすら\", \"するめ\", \"すれちがう\", \"すろっと\", \"すわる\", \"すんぜん\", \"すんぽう\", \"せあぶら\", \"せいかつ\", \"せいげん\", \"せいじ\", \"せいよう\", \"せおう\", \"せかいかん\", \"せきにん\", \"せきむ\", \"せきゆ\", \"せきらんうん\", \"せけん\", \"せこう\", \"せすじ\", \"せたい\", \"せたけ\", \"せっかく\", \"せっきゃく\", \"ぜっく\", \"せっけん\", \"せっこつ\", \"せっさたくま\", \"せつぞく\", \"せつだん\", \"せつでん\", \"せっぱん\", \"せつび\", \"せつぶん\", \"せつめい\", \"せつりつ\", \"せなか\", \"せのび\", \"せはば\", \"せびろ\", \"せぼね\", \"せまい\", \"せまる\", \"せめる\", \"せもたれ\", \"せりふ\", \"ぜんあく\", \"せんい\", \"せんえい\", \"せんか\", \"せんきょ\", \"せんく\", \"せんげん\", \"ぜんご\", \"せんさい\", \"せんしゅ\", \"せんすい\", \"せんせい\", \"せんぞ\", \"せんたく\", \"せんちょう\", \"せんてい\", \"せんとう\", \"せんぬき\", \"せんねん\", \"せんぱい\", \"ぜんぶ\", \"ぜんぽう\", \"せんむ\", \"せんめんじょ\", \"せんもん\", \"せんやく\", \"せんゆう\", \"せんよう\", \"ぜんら\", \"ぜんりゃく\", \"せんれい\", \"せんろ\", \"そあく\", \"そいとげる\", \"そいね\", \"そうがんきょう\", \"そうき\", \"そうご\", \"そうしん\", \"そうだん\", \"そうなん\", \"そうび\", \"そうめん\", \"そうり\", \"そえもの\", \"そえん\", \"そがい\", \"そげき\", \"そこう\", \"そこそこ\", \"そざい\", \"そしな\", \"そせい\", \"そせん\", \"そそぐ\", \"そだてる\", \"そつう\", \"そつえん\", \"そっかん\", \"そつぎょう\", \"そっけつ\", \"そっこう\", \"そっせん\", \"そっと\", \"そとがわ\", \"そとづら\", \"そなえる\", \"そなた\", \"そふぼ\", \"そぼく\", \"そぼろ\", \"そまつ\", \"そまる\", \"そむく\", \"そむりえ\", \"そめる\", \"そもそも\", \"そよかぜ\", \"そらまめ\", \"そろう\", \"そんかい\", \"そんけい\", \"そんざい\", \"そんしつ\", \"そんぞく\", \"そんちょう\", \"ぞんび\", \"ぞんぶん\", \"そんみん\", \"たあい\", \"たいいん\", \"たいうん\", \"たいえき\", \"たいおう\", \"だいがく\", \"たいき\", \"たいぐう\", \"たいけん\", \"たいこ\", \"たいざい\", \"だいじょうぶ\", \"だいすき\", \"たいせつ\", \"たいそう\", \"だいたい\", \"たいちょう\", \"たいてい\", \"だいどころ\", \"たいない\", \"たいねつ\", \"たいのう\", \"たいはん\", \"だいひょう\", \"たいふう\", \"たいへん\", \"たいほ\", \"たいまつばな\", \"たいみんぐ\", \"たいむ\", \"たいめん\", \"たいやき\", \"たいよう\", \"たいら\", \"たいりょく\", \"たいる\", \"たいわん\", \"たうえ\", \"たえる\", \"たおす\", \"たおる\", \"たおれる\", \"たかい\", \"たかね\", \"たきび\", \"たくさん\", \"たこく\", \"たこやき\", \"たさい\", \"たしざん\", \"だじゃれ\", \"たすける\", \"たずさわる\", \"たそがれ\", \"たたかう\", \"たたく\", \"ただしい\", \"たたみ\", \"たちばな\", \"だっかい\", \"だっきゃく\", \"だっこ\", \"だっしゅつ\", \"だったい\", \"たてる\", \"たとえる\", \"たなばた\", \"たにん\", \"たぬき\", \"たのしみ\", \"たはつ\", \"たぶん\", \"たべる\", \"たぼう\", \"たまご\", \"たまる\", \"だむる\", \"ためいき\", \"ためす\", \"ためる\", \"たもつ\", \"たやすい\", \"たよる\", \"たらす\", \"たりきほんがん\", \"たりょう\", \"たりる\", \"たると\", \"たれる\", \"たれんと\", \"たろっと\", \"たわむれる\", \"だんあつ\", \"たんい\", \"たんおん\", \"たんか\", \"たんき\", \"たんけん\", \"たんご\", \"たんさん\", \"たんじょうび\", \"だんせい\", \"たんそく\", \"たんたい\", \"だんち\", \"たんてい\", \"たんとう\", \"だんな\", \"たんにん\", \"だんねつ\", \"たんのう\", \"たんぴん\", \"だんぼう\", \"たんまつ\", \"たんめい\", \"だんれつ\", \"だんろ\", \"だんわ\", \"ちあい\", \"ちあん\", \"ちいき\", \"ちいさい\", \"ちえん\", \"ちかい\", \"ちから\", \"ちきゅう\", \"ちきん\", \"ちけいず\", \"ちけん\", \"ちこく\", \"ちさい\", \"ちしき\", \"ちしりょう\", \"ちせい\", \"ちそう\", \"ちたい\", \"ちたん\", \"ちちおや\", \"ちつじょ\", \"ちてき\", \"ちてん\", \"ちぬき\", \"ちぬり\", \"ちのう\", \"ちひょう\", \"ちへいせん\", \"ちほう\", \"ちまた\", \"ちみつ\", \"ちみどろ\", \"ちめいど\", \"ちゃんこなべ\", \"ちゅうい\", \"ちゆりょく\", \"ちょうし\", \"ちょさくけん\", \"ちらし\", \"ちらみ\", \"ちりがみ\", \"ちりょう\", \"ちるど\", \"ちわわ\", \"ちんたい\", \"ちんもく\", \"ついか\", \"ついたち\", \"つうか\", \"つうじょう\", \"つうはん\", \"つうわ\", \"つかう\", \"つかれる\", \"つくね\", \"つくる\", \"つけね\", \"つける\", \"つごう\", \"つたえる\", \"つづく\", \"つつじ\", \"つつむ\", \"つとめる\", \"つながる\", \"つなみ\", \"つねづね\", \"つのる\", \"つぶす\", \"つまらない\", \"つまる\", \"つみき\", \"つめたい\", \"つもり\", \"つもる\", \"つよい\", \"つるぼ\", \"つるみく\", \"つわもの\", \"つわり\", \"てあし\", \"てあて\", \"てあみ\", \"ていおん\", \"ていか\", \"ていき\", \"ていけい\", \"ていこく\", \"ていさつ\", \"ていし\", \"ていせい\", \"ていたい\", \"ていど\", \"ていねい\", \"ていひょう\", \"ていへん\", \"ていぼう\", \"てうち\", \"ておくれ\", \"てきとう\", \"てくび\", \"でこぼこ\", \"てさぎょう\", \"てさげ\", \"てすり\", \"てそう\", \"てちがい\", \"てちょう\", \"てつがく\", \"てつづき\", \"でっぱ\", \"てつぼう\", \"てつや\", \"でぬかえ\", \"てぬき\", \"てぬぐい\", \"てのひら\", \"てはい\", \"てぶくろ\", \"てふだ\", \"てほどき\", \"てほん\", \"てまえ\", \"てまきずし\", \"てみじか\", \"てみやげ\", \"てらす\", \"てれび\", \"てわけ\", \"てわたし\", \"でんあつ\", \"てんいん\", \"てんかい\", \"てんき\", \"てんぐ\", \"てんけん\", \"てんごく\", \"てんさい\", \"てんし\", \"てんすう\", \"でんち\", \"てんてき\", \"てんとう\", \"てんない\", \"てんぷら\", \"てんぼうだい\", \"てんめつ\", \"てんらんかい\", \"でんりょく\", \"でんわ\", \"どあい\", \"といれ\", \"どうかん\", \"とうきゅう\", \"どうぐ\", \"とうし\", \"とうむぎ\", \"とおい\", \"とおか\", \"とおく\", \"とおす\", \"とおる\", \"とかい\", \"とかす\", \"ときおり\", \"ときどき\", \"とくい\", \"とくしゅう\", \"とくてん\", \"とくに\", \"とくべつ\", \"とけい\", \"とける\", \"とこや\", \"とさか\", \"としょかん\", \"とそう\", \"とたん\", \"とちゅう\", \"とっきゅう\", \"とっくん\", \"とつぜん\", \"とつにゅう\", \"とどける\", \"ととのえる\", \"とない\", \"となえる\", \"となり\", \"とのさま\", \"とばす\", \"どぶがわ\", \"とほう\", \"とまる\", \"とめる\", \"ともだち\", \"ともる\", \"どようび\", \"とらえる\", \"とんかつ\", \"どんぶり\", \"ないかく\", \"ないこう\", \"ないしょ\", \"ないす\", \"ないせん\", \"ないそう\", \"なおす\", \"ながい\", \"なくす\", \"なげる\", \"なこうど\", \"なさけ\", \"なたでここ\", \"なっとう\", \"なつやすみ\", \"ななおし\", \"なにごと\", \"なにもの\", \"なにわ\", \"なのか\", \"なふだ\", \"なまいき\", \"なまえ\", \"なまみ\", \"なみだ\", \"なめらか\", \"なめる\", \"なやむ\", \"ならう\", \"ならび\", \"ならぶ\", \"なれる\", \"なわとび\", \"なわばり\", \"にあう\", \"にいがた\", \"にうけ\", \"におい\", \"にかい\", \"にがて\", \"にきび\", \"にくしみ\", \"にくまん\", \"にげる\", \"にさんかたんそ\", \"にしき\", \"にせもの\", \"にちじょう\", \"にちようび\", \"にっか\", \"にっき\", \"にっけい\", \"にっこう\", \"にっさん\", \"にっしょく\", \"にっすう\", \"にっせき\", \"にってい\", \"になう\", \"にほん\", \"にまめ\", \"にもつ\", \"にやり\", \"にゅういん\", \"にりんしゃ\", \"にわとり\", \"にんい\", \"にんか\", \"にんき\", \"にんげん\", \"にんしき\", \"にんずう\", \"にんそう\", \"にんたい\", \"にんち\", \"にんてい\", \"にんにく\", \"にんぷ\", \"にんまり\", \"にんむ\", \"にんめい\", \"にんよう\", \"ぬいくぎ\", \"ぬかす\", \"ぬぐいとる\", \"ぬぐう\", \"ぬくもり\", \"ぬすむ\", \"ぬまえび\", \"ぬめり\", \"ぬらす\", \"ぬんちゃく\", \"ねあげ\", \"ねいき\", \"ねいる\", \"ねいろ\", \"ねぐせ\", \"ねくたい\", \"ねくら\", \"ねこぜ\", \"ねこむ\", \"ねさげ\", \"ねすごす\", \"ねそべる\", \"ねだん\", \"ねつい\", \"ねっしん\", \"ねつぞう\", \"ねったいぎょ\", \"ねぶそく\", \"ねふだ\", \"ねぼう\", \"ねほりはほり\", \"ねまき\", \"ねまわし\", \"ねみみ\", \"ねむい\", \"ねむたい\", \"ねもと\", \"ねらう\", \"ねわざ\", \"ねんいり\", \"ねんおし\", \"ねんかん\", \"ねんきん\", \"ねんぐ\", \"ねんざ\", \"ねんし\", \"ねんちゃく\", \"ねんど\", \"ねんぴ\", \"ねんぶつ\", \"ねんまつ\", \"ねんりょう\", \"ねんれい\", \"のいず\", \"のおづま\", \"のがす\", \"のきなみ\", \"のこぎり\", \"のこす\", \"のこる\", \"のせる\", \"のぞく\", \"のぞむ\", \"のたまう\", \"のちほど\", \"のっく\", \"のばす\", \"のはら\", \"のべる\", \"のぼる\", \"のみもの\", \"のやま\", \"のらいぬ\", \"のらねこ\", \"のりもの\", \"のりゆき\", \"のれん\", \"のんき\", \"ばあい\", \"はあく\", \"ばあさん\", \"ばいか\", \"ばいく\", \"はいけん\", \"はいご\", \"はいしん\", \"はいすい\", \"はいせん\", \"はいそう\", \"はいち\", \"ばいばい\", \"はいれつ\", \"はえる\", \"はおる\", \"はかい\", \"ばかり\", \"はかる\", \"はくしゅ\", \"はけん\", \"はこぶ\", \"はさみ\", \"はさん\", \"はしご\", \"ばしょ\", \"はしる\", \"はせる\", \"ぱそこん\", \"はそん\", \"はたん\", \"はちみつ\", \"はつおん\", \"はっかく\", \"はづき\", \"はっきり\", \"はっくつ\", \"はっけん\", \"はっこう\", \"はっさん\", \"はっしん\", \"はったつ\", \"はっちゅう\", \"はってん\", \"はっぴょう\", \"はっぽう\", \"はなす\", \"はなび\", \"はにかむ\", \"はぶらし\", \"はみがき\", \"はむかう\", \"はめつ\", \"はやい\", \"はやし\", \"はらう\", \"はろうぃん\", \"はわい\", \"はんい\", \"はんえい\", \"はんおん\", \"はんかく\", \"はんきょう\", \"ばんぐみ\", \"はんこ\", \"はんしゃ\", \"はんすう\", \"はんだん\", \"ぱんち\", \"ぱんつ\", \"はんてい\", \"はんとし\", \"はんのう\", \"はんぱ\", \"はんぶん\", \"はんぺん\", \"はんぼうき\", \"はんめい\", \"はんらん\", \"はんろん\", \"ひいき\", \"ひうん\", \"ひえる\", \"ひかく\", \"ひかり\", \"ひかる\", \"ひかん\", \"ひくい\", \"ひけつ\", \"ひこうき\", \"ひこく\", \"ひさい\", \"ひさしぶり\", \"ひさん\", \"びじゅつかん\", \"ひしょ\", \"ひそか\", \"ひそむ\", \"ひたむき\", \"ひだり\", \"ひたる\", \"ひつぎ\", \"ひっこし\", \"ひっし\", \"ひつじゅひん\", \"ひっす\", \"ひつぜん\", \"ぴったり\", \"ぴっちり\", \"ひつよう\", \"ひてい\", \"ひとごみ\", \"ひなまつり\", \"ひなん\", \"ひねる\", \"ひはん\", \"ひびく\", \"ひひょう\", \"ひほう\", \"ひまわり\", \"ひまん\", \"ひみつ\", \"ひめい\", \"ひめじし\", \"ひやけ\", \"ひやす\", \"ひよう\", \"びょうき\", \"ひらがな\", \"ひらく\", \"ひりつ\", \"ひりょう\", \"ひるま\", \"ひるやすみ\", \"ひれい\", \"ひろい\", \"ひろう\", \"ひろき\", \"ひろゆき\", \"ひんかく\", \"ひんけつ\", \"ひんこん\", \"ひんしゅ\", \"ひんそう\", \"ぴんち\", \"ひんぱん\", \"びんぼう\", \"ふあん\", \"ふいうち\", \"ふうけい\", \"ふうせん\", \"ぷうたろう\", \"ふうとう\", \"ふうふ\", \"ふえる\", \"ふおん\", \"ふかい\", \"ふきん\", \"ふくざつ\", \"ふくぶくろ\", \"ふこう\", \"ふさい\", \"ふしぎ\", \"ふじみ\", \"ふすま\", \"ふせい\", \"ふせぐ\", \"ふそく\", \"ぶたにく\", \"ふたん\", \"ふちょう\", \"ふつう\", \"ふつか\", \"ふっかつ\", \"ふっき\", \"ふっこく\", \"ぶどう\", \"ふとる\", \"ふとん\", \"ふのう\", \"ふはい\", \"ふひょう\", \"ふへん\", \"ふまん\", \"ふみん\", \"ふめつ\", \"ふめん\", \"ふよう\", \"ふりこ\", \"ふりる\", \"ふるい\", \"ふんいき\", \"ぶんがく\", \"ぶんぐ\", \"ふんしつ\", \"ぶんせき\", \"ふんそう\", \"ぶんぽう\", \"へいあん\", \"へいおん\", \"へいがい\", \"へいき\", \"へいげん\", \"へいこう\", \"へいさ\", \"へいしゃ\", \"へいせつ\", \"へいそ\", \"へいたく\", \"へいてん\", \"へいねつ\", \"へいわ\", \"へきが\", \"へこむ\", \"べにいろ\", \"べにしょうが\", \"へらす\", \"へんかん\", \"べんきょう\", \"べんごし\", \"へんさい\", \"へんたい\", \"べんり\", \"ほあん\", \"ほいく\", \"ぼうぎょ\", \"ほうこく\", \"ほうそう\", \"ほうほう\", \"ほうもん\", \"ほうりつ\", \"ほえる\", \"ほおん\", \"ほかん\", \"ほきょう\", \"ぼきん\", \"ほくろ\", \"ほけつ\", \"ほけん\", \"ほこう\", \"ほこる\", \"ほしい\", \"ほしつ\", \"ほしゅ\", \"ほしょう\", \"ほせい\", \"ほそい\", \"ほそく\", \"ほたて\", \"ほたる\", \"ぽちぶくろ\", \"ほっきょく\", \"ほっさ\", \"ほったん\", \"ほとんど\", \"ほめる\", \"ほんい\", \"ほんき\", \"ほんけ\", \"ほんしつ\", \"ほんやく\", \"まいにち\", \"まかい\", \"まかせる\", \"まがる\", \"まける\", \"まこと\", \"まさつ\", \"まじめ\", \"ますく\", \"まぜる\", \"まつり\", \"まとめ\", \"まなぶ\", \"まぬけ\", \"まねく\", \"まほう\", \"まもる\", \"まゆげ\", \"まよう\", \"まろやか\", \"まわす\", \"まわり\", \"まわる\", \"まんが\", \"まんきつ\", \"まんぞく\", \"まんなか\", \"みいら\", \"みうち\", \"みえる\", \"みがく\", \"みかた\", \"みかん\", \"みけん\", \"みこん\", \"みじかい\", \"みすい\", \"みすえる\", \"みせる\", \"みっか\", \"みつかる\", \"みつける\", \"みてい\", \"みとめる\", \"みなと\", \"みなみかさい\", \"みねらる\", \"みのう\", \"みのがす\", \"みほん\", \"みもと\", \"みやげ\", \"みらい\", \"みりょく\", \"みわく\", \"みんか\", \"みんぞく\", \"むいか\", \"むえき\", \"むえん\", \"むかい\", \"むかう\", \"むかえ\", \"むかし\", \"むぎちゃ\", \"むける\", \"むげん\", \"むさぼる\", \"むしあつい\", \"むしば\", \"むじゅん\", \"むしろ\", \"むすう\", \"むすこ\", \"むすぶ\", \"むすめ\", \"むせる\", \"むせん\", \"むちゅう\", \"むなしい\", \"むのう\", \"むやみ\", \"むよう\", \"むらさき\", \"むりょう\", \"むろん\", \"めいあん\", \"めいうん\", \"めいえん\", \"めいかく\", \"めいきょく\", \"めいさい\", \"めいし\", \"めいそう\", \"めいぶつ\", \"めいれい\", \"めいわく\", \"めぐまれる\", \"めざす\", \"めした\", \"めずらしい\", \"めだつ\", \"めまい\", \"めやす\", \"めんきょ\", \"めんせき\", \"めんどう\", \"もうしあげる\", \"もうどうけん\", \"もえる\", \"もくし\", \"もくてき\", \"もくようび\", \"もちろん\", \"もどる\", \"もらう\", \"もんく\", \"もんだい\", \"やおや\", \"やける\", \"やさい\", \"やさしい\", \"やすい\", \"やすたろう\", \"やすみ\", \"やせる\", \"やそう\", \"やたい\", \"やちん\", \"やっと\", \"やっぱり\", \"やぶる\", \"やめる\", \"ややこしい\", \"やよい\", \"やわらかい\", \"ゆうき\", \"ゆうびんきょく\", \"ゆうべ\", \"ゆうめい\", \"ゆけつ\", \"ゆしゅつ\", \"ゆせん\", \"ゆそう\", \"ゆたか\", \"ゆちゃく\", \"ゆでる\", \"ゆにゅう\", \"ゆびわ\", \"ゆらい\", \"ゆれる\", \"ようい\", \"ようか\", \"ようきゅう\", \"ようじ\", \"ようす\", \"ようちえん\", \"よかぜ\", \"よかん\", \"よきん\", \"よくせい\", \"よくぼう\", \"よけい\", \"よごれる\", \"よさん\", \"よしゅう\", \"よそう\", \"よそく\", \"よっか\", \"よてい\", \"よどがわく\", \"よねつ\", \"よやく\", \"よゆう\", \"よろこぶ\", \"よろしい\", \"らいう\", \"らくがき\", \"らくご\", \"らくさつ\", \"らくだ\", \"らしんばん\", \"らせん\", \"らぞく\", \"らたい\", \"らっか\", \"られつ\", \"りえき\", \"りかい\", \"りきさく\", \"りきせつ\", \"りくぐん\", \"りくつ\", \"りけん\", \"りこう\", \"りせい\", \"りそう\", \"りそく\", \"りてん\", \"りねん\", \"りゆう\", \"りゅうがく\", \"りよう\", \"りょうり\", \"りょかん\", \"りょくちゃ\", \"りょこう\", \"りりく\", \"りれき\", \"りろん\", \"りんご\", \"るいけい\", \"るいさい\", \"るいじ\", \"るいせき\", \"るすばん\", \"るりがわら\", \"れいかん\", \"れいぎ\", \"れいせい\", \"れいぞうこ\", \"れいとう\", \"れいぼう\", \"れきし\", \"れきだい\", \"れんあい\", \"れんけい\", \"れんこん\", \"れんさい\", \"れんしゅう\", \"れんぞく\", \"れんらく\", \"ろうか\", \"ろうご\", \"ろうじん\", \"ろうそく\", \"ろくが\", \"ろこつ\", \"ろじうら\", \"ろしゅつ\", \"ろせん\", \"ろてん\", \"ろめん\", \"ろれつ\", \"ろんぎ\", \"ろんぱ\", \"ろんぶん\", \"ろんり\", \"わかす\", \"わかめ\", \"わかやま\", \"わかれる\", \"わしつ\", \"わじまし\", \"わすれもの\", \"わらう\", \"われる\"];\n  var japanese$1 =\n  /*#__PURE__*/\n  Object.freeze({\n    default: japanese\n  });\n  var korean = [\"가격\", \"가끔\", \"가난\", \"가능\", \"가득\", \"가르침\", \"가뭄\", \"가방\", \"가상\", \"가슴\", \"가운데\", \"가을\", \"가이드\", \"가입\", \"가장\", \"가정\", \"가족\", \"가죽\", \"각오\", \"각자\", \"간격\", \"간부\", \"간섭\", \"간장\", \"간접\", \"간판\", \"갈등\", \"갈비\", \"갈색\", \"갈증\", \"감각\", \"감기\", \"감소\", \"감수성\", \"감자\", \"감정\", \"갑자기\", \"강남\", \"강당\", \"강도\", \"강력히\", \"강변\", \"강북\", \"강사\", \"강수량\", \"강아지\", \"강원도\", \"강의\", \"강제\", \"강조\", \"같이\", \"개구리\", \"개나리\", \"개방\", \"개별\", \"개선\", \"개성\", \"개인\", \"객관적\", \"거실\", \"거액\", \"거울\", \"거짓\", \"거품\", \"걱정\", \"건강\", \"건물\", \"건설\", \"건조\", \"건축\", \"걸음\", \"검사\", \"검토\", \"게시판\", \"게임\", \"겨울\", \"견해\", \"결과\", \"결국\", \"결론\", \"결석\", \"결승\", \"결심\", \"결정\", \"결혼\", \"경계\", \"경고\", \"경기\", \"경력\", \"경복궁\", \"경비\", \"경상도\", \"경영\", \"경우\", \"경쟁\", \"경제\", \"경주\", \"경찰\", \"경치\", \"경향\", \"경험\", \"계곡\", \"계단\", \"계란\", \"계산\", \"계속\", \"계약\", \"계절\", \"계층\", \"계획\", \"고객\", \"고구려\", \"고궁\", \"고급\", \"고등학생\", \"고무신\", \"고민\", \"고양이\", \"고장\", \"고전\", \"고집\", \"고춧가루\", \"고통\", \"고향\", \"곡식\", \"골목\", \"골짜기\", \"골프\", \"공간\", \"공개\", \"공격\", \"공군\", \"공급\", \"공기\", \"공동\", \"공무원\", \"공부\", \"공사\", \"공식\", \"공업\", \"공연\", \"공원\", \"공장\", \"공짜\", \"공책\", \"공통\", \"공포\", \"공항\", \"공휴일\", \"과목\", \"과일\", \"과장\", \"과정\", \"과학\", \"관객\", \"관계\", \"관광\", \"관념\", \"관람\", \"관련\", \"관리\", \"관습\", \"관심\", \"관점\", \"관찰\", \"광경\", \"광고\", \"광장\", \"광주\", \"괴로움\", \"굉장히\", \"교과서\", \"교문\", \"교복\", \"교실\", \"교양\", \"교육\", \"교장\", \"교직\", \"교통\", \"교환\", \"교훈\", \"구경\", \"구름\", \"구멍\", \"구별\", \"구분\", \"구석\", \"구성\", \"구속\", \"구역\", \"구입\", \"구청\", \"구체적\", \"국가\", \"국기\", \"국내\", \"국립\", \"국물\", \"국민\", \"국수\", \"국어\", \"국왕\", \"국적\", \"국제\", \"국회\", \"군대\", \"군사\", \"군인\", \"궁극적\", \"권리\", \"권위\", \"권투\", \"귀국\", \"귀신\", \"규정\", \"규칙\", \"균형\", \"그날\", \"그냥\", \"그늘\", \"그러나\", \"그룹\", \"그릇\", \"그림\", \"그제서야\", \"그토록\", \"극복\", \"극히\", \"근거\", \"근교\", \"근래\", \"근로\", \"근무\", \"근본\", \"근원\", \"근육\", \"근처\", \"글씨\", \"글자\", \"금강산\", \"금고\", \"금년\", \"금메달\", \"금액\", \"금연\", \"금요일\", \"금지\", \"긍정적\", \"기간\", \"기관\", \"기념\", \"기능\", \"기독교\", \"기둥\", \"기록\", \"기름\", \"기법\", \"기본\", \"기분\", \"기쁨\", \"기숙사\", \"기술\", \"기억\", \"기업\", \"기온\", \"기운\", \"기원\", \"기적\", \"기준\", \"기침\", \"기혼\", \"기획\", \"긴급\", \"긴장\", \"길이\", \"김밥\", \"김치\", \"김포공항\", \"깍두기\", \"깜빡\", \"깨달음\", \"깨소금\", \"껍질\", \"꼭대기\", \"꽃잎\", \"나들이\", \"나란히\", \"나머지\", \"나물\", \"나침반\", \"나흘\", \"낙엽\", \"난방\", \"날개\", \"날씨\", \"날짜\", \"남녀\", \"남대문\", \"남매\", \"남산\", \"남자\", \"남편\", \"남학생\", \"낭비\", \"낱말\", \"내년\", \"내용\", \"내일\", \"냄비\", \"냄새\", \"냇물\", \"냉동\", \"냉면\", \"냉방\", \"냉장고\", \"넥타이\", \"넷째\", \"노동\", \"노란색\", \"노력\", \"노인\", \"녹음\", \"녹차\", \"녹화\", \"논리\", \"논문\", \"논쟁\", \"놀이\", \"농구\", \"농담\", \"농민\", \"농부\", \"농업\", \"농장\", \"농촌\", \"높이\", \"눈동자\", \"눈물\", \"눈썹\", \"뉴욕\", \"느낌\", \"늑대\", \"능동적\", \"능력\", \"다방\", \"다양성\", \"다음\", \"다이어트\", \"다행\", \"단계\", \"단골\", \"단독\", \"단맛\", \"단순\", \"단어\", \"단위\", \"단점\", \"단체\", \"단추\", \"단편\", \"단풍\", \"달걀\", \"달러\", \"달력\", \"달리\", \"닭고기\", \"담당\", \"담배\", \"담요\", \"담임\", \"답변\", \"답장\", \"당근\", \"당분간\", \"당연히\", \"당장\", \"대규모\", \"대낮\", \"대단히\", \"대답\", \"대도시\", \"대략\", \"대량\", \"대륙\", \"대문\", \"대부분\", \"대신\", \"대응\", \"대장\", \"대전\", \"대접\", \"대중\", \"대책\", \"대출\", \"대충\", \"대통령\", \"대학\", \"대한민국\", \"대합실\", \"대형\", \"덩어리\", \"데이트\", \"도대체\", \"도덕\", \"도둑\", \"도망\", \"도서관\", \"도심\", \"도움\", \"도입\", \"도자기\", \"도저히\", \"도전\", \"도중\", \"도착\", \"독감\", \"독립\", \"독서\", \"독일\", \"독창적\", \"동화책\", \"뒷모습\", \"뒷산\", \"딸아이\", \"마누라\", \"마늘\", \"마당\", \"마라톤\", \"마련\", \"마무리\", \"마사지\", \"마약\", \"마요네즈\", \"마을\", \"마음\", \"마이크\", \"마중\", \"마지막\", \"마찬가지\", \"마찰\", \"마흔\", \"막걸리\", \"막내\", \"막상\", \"만남\", \"만두\", \"만세\", \"만약\", \"만일\", \"만점\", \"만족\", \"만화\", \"많이\", \"말기\", \"말씀\", \"말투\", \"맘대로\", \"망원경\", \"매년\", \"매달\", \"매력\", \"매번\", \"매스컴\", \"매일\", \"매장\", \"맥주\", \"먹이\", \"먼저\", \"먼지\", \"멀리\", \"메일\", \"며느리\", \"며칠\", \"면담\", \"멸치\", \"명단\", \"명령\", \"명예\", \"명의\", \"명절\", \"명칭\", \"명함\", \"모금\", \"모니터\", \"모델\", \"모든\", \"모범\", \"모습\", \"모양\", \"모임\", \"모조리\", \"모집\", \"모퉁이\", \"목걸이\", \"목록\", \"목사\", \"목소리\", \"목숨\", \"목적\", \"목표\", \"몰래\", \"몸매\", \"몸무게\", \"몸살\", \"몸속\", \"몸짓\", \"몸통\", \"몹시\", \"무관심\", \"무궁화\", \"무더위\", \"무덤\", \"무릎\", \"무슨\", \"무엇\", \"무역\", \"무용\", \"무조건\", \"무지개\", \"무척\", \"문구\", \"문득\", \"문법\", \"문서\", \"문제\", \"문학\", \"문화\", \"물가\", \"물건\", \"물결\", \"물고기\", \"물론\", \"물리학\", \"물음\", \"물질\", \"물체\", \"미국\", \"미디어\", \"미사일\", \"미술\", \"미역\", \"미용실\", \"미움\", \"미인\", \"미팅\", \"미혼\", \"민간\", \"민족\", \"민주\", \"믿음\", \"밀가루\", \"밀리미터\", \"밑바닥\", \"바가지\", \"바구니\", \"바나나\", \"바늘\", \"바닥\", \"바닷가\", \"바람\", \"바이러스\", \"바탕\", \"박물관\", \"박사\", \"박수\", \"반대\", \"반드시\", \"반말\", \"반발\", \"반성\", \"반응\", \"반장\", \"반죽\", \"반지\", \"반찬\", \"받침\", \"발가락\", \"발걸음\", \"발견\", \"발달\", \"발레\", \"발목\", \"발바닥\", \"발생\", \"발음\", \"발자국\", \"발전\", \"발톱\", \"발표\", \"밤하늘\", \"밥그릇\", \"밥맛\", \"밥상\", \"밥솥\", \"방금\", \"방면\", \"방문\", \"방바닥\", \"방법\", \"방송\", \"방식\", \"방안\", \"방울\", \"방지\", \"방학\", \"방해\", \"방향\", \"배경\", \"배꼽\", \"배달\", \"배드민턴\", \"백두산\", \"백색\", \"백성\", \"백인\", \"백제\", \"백화점\", \"버릇\", \"버섯\", \"버튼\", \"번개\", \"번역\", \"번지\", \"번호\", \"벌금\", \"벌레\", \"벌써\", \"범위\", \"범인\", \"범죄\", \"법률\", \"법원\", \"법적\", \"법칙\", \"베이징\", \"벨트\", \"변경\", \"변동\", \"변명\", \"변신\", \"변호사\", \"변화\", \"별도\", \"별명\", \"별일\", \"병실\", \"병아리\", \"병원\", \"보관\", \"보너스\", \"보라색\", \"보람\", \"보름\", \"보상\", \"보안\", \"보자기\", \"보장\", \"보전\", \"보존\", \"보통\", \"보편적\", \"보험\", \"복도\", \"복사\", \"복숭아\", \"복습\", \"볶음\", \"본격적\", \"본래\", \"본부\", \"본사\", \"본성\", \"본인\", \"본질\", \"볼펜\", \"봉사\", \"봉지\", \"봉투\", \"부근\", \"부끄러움\", \"부담\", \"부동산\", \"부문\", \"부분\", \"부산\", \"부상\", \"부엌\", \"부인\", \"부작용\", \"부장\", \"부정\", \"부족\", \"부지런히\", \"부친\", \"부탁\", \"부품\", \"부회장\", \"북부\", \"북한\", \"분노\", \"분량\", \"분리\", \"분명\", \"분석\", \"분야\", \"분위기\", \"분필\", \"분홍색\", \"불고기\", \"불과\", \"불교\", \"불꽃\", \"불만\", \"불법\", \"불빛\", \"불안\", \"불이익\", \"불행\", \"브랜드\", \"비극\", \"비난\", \"비닐\", \"비둘기\", \"비디오\", \"비로소\", \"비만\", \"비명\", \"비밀\", \"비바람\", \"비빔밥\", \"비상\", \"비용\", \"비율\", \"비중\", \"비타민\", \"비판\", \"빌딩\", \"빗물\", \"빗방울\", \"빗줄기\", \"빛깔\", \"빨간색\", \"빨래\", \"빨리\", \"사건\", \"사계절\", \"사나이\", \"사냥\", \"사람\", \"사랑\", \"사립\", \"사모님\", \"사물\", \"사방\", \"사상\", \"사생활\", \"사설\", \"사슴\", \"사실\", \"사업\", \"사용\", \"사월\", \"사장\", \"사전\", \"사진\", \"사촌\", \"사춘기\", \"사탕\", \"사투리\", \"사흘\", \"산길\", \"산부인과\", \"산업\", \"산책\", \"살림\", \"살인\", \"살짝\", \"삼계탕\", \"삼국\", \"삼십\", \"삼월\", \"삼촌\", \"상관\", \"상금\", \"상대\", \"상류\", \"상반기\", \"상상\", \"상식\", \"상업\", \"상인\", \"상자\", \"상점\", \"상처\", \"상추\", \"상태\", \"상표\", \"상품\", \"상황\", \"새벽\", \"색깔\", \"색연필\", \"생각\", \"생명\", \"생물\", \"생방송\", \"생산\", \"생선\", \"생신\", \"생일\", \"생활\", \"서랍\", \"서른\", \"서명\", \"서민\", \"서비스\", \"서양\", \"서울\", \"서적\", \"서점\", \"서쪽\", \"서클\", \"석사\", \"석유\", \"선거\", \"선물\", \"선배\", \"선생\", \"선수\", \"선원\", \"선장\", \"선전\", \"선택\", \"선풍기\", \"설거지\", \"설날\", \"설렁탕\", \"설명\", \"설문\", \"설사\", \"설악산\", \"설치\", \"설탕\", \"섭씨\", \"성공\", \"성당\", \"성명\", \"성별\", \"성인\", \"성장\", \"성적\", \"성질\", \"성함\", \"세금\", \"세미나\", \"세상\", \"세월\", \"세종대왕\", \"세탁\", \"센터\", \"센티미터\", \"셋째\", \"소규모\", \"소극적\", \"소금\", \"소나기\", \"소년\", \"소득\", \"소망\", \"소문\", \"소설\", \"소속\", \"소아과\", \"소용\", \"소원\", \"소음\", \"소중히\", \"소지품\", \"소질\", \"소풍\", \"소형\", \"속담\", \"속도\", \"속옷\", \"손가락\", \"손길\", \"손녀\", \"손님\", \"손등\", \"손목\", \"손뼉\", \"손실\", \"손질\", \"손톱\", \"손해\", \"솔직히\", \"솜씨\", \"송아지\", \"송이\", \"송편\", \"쇠고기\", \"쇼핑\", \"수건\", \"수년\", \"수단\", \"수돗물\", \"수동적\", \"수면\", \"수명\", \"수박\", \"수상\", \"수석\", \"수술\", \"수시로\", \"수업\", \"수염\", \"수영\", \"수입\", \"수준\", \"수집\", \"수출\", \"수컷\", \"수필\", \"수학\", \"수험생\", \"수화기\", \"숙녀\", \"숙소\", \"숙제\", \"순간\", \"순서\", \"순수\", \"순식간\", \"순위\", \"숟가락\", \"술병\", \"술집\", \"숫자\", \"스님\", \"스물\", \"스스로\", \"스승\", \"스웨터\", \"스위치\", \"스케이트\", \"스튜디오\", \"스트레스\", \"스포츠\", \"슬쩍\", \"슬픔\", \"습관\", \"습기\", \"승객\", \"승리\", \"승부\", \"승용차\", \"승진\", \"시각\", \"시간\", \"시골\", \"시금치\", \"시나리오\", \"시댁\", \"시리즈\", \"시멘트\", \"시민\", \"시부모\", \"시선\", \"시설\", \"시스템\", \"시아버지\", \"시어머니\", \"시월\", \"시인\", \"시일\", \"시작\", \"시장\", \"시절\", \"시점\", \"시중\", \"시즌\", \"시집\", \"시청\", \"시합\", \"시험\", \"식구\", \"식기\", \"식당\", \"식량\", \"식료품\", \"식물\", \"식빵\", \"식사\", \"식생활\", \"식초\", \"식탁\", \"식품\", \"신고\", \"신규\", \"신념\", \"신문\", \"신발\", \"신비\", \"신사\", \"신세\", \"신용\", \"신제품\", \"신청\", \"신체\", \"신화\", \"실감\", \"실내\", \"실력\", \"실례\", \"실망\", \"실수\", \"실습\", \"실시\", \"실장\", \"실정\", \"실질적\", \"실천\", \"실체\", \"실컷\", \"실태\", \"실패\", \"실험\", \"실현\", \"심리\", \"심부름\", \"심사\", \"심장\", \"심정\", \"심판\", \"쌍둥이\", \"씨름\", \"씨앗\", \"아가씨\", \"아나운서\", \"아드님\", \"아들\", \"아쉬움\", \"아스팔트\", \"아시아\", \"아울러\", \"아저씨\", \"아줌마\", \"아직\", \"아침\", \"아파트\", \"아프리카\", \"아픔\", \"아홉\", \"아흔\", \"악기\", \"악몽\", \"악수\", \"안개\", \"안경\", \"안과\", \"안내\", \"안녕\", \"안동\", \"안방\", \"안부\", \"안주\", \"알루미늄\", \"알코올\", \"암시\", \"암컷\", \"압력\", \"앞날\", \"앞문\", \"애인\", \"애정\", \"액수\", \"앨범\", \"야간\", \"야단\", \"야옹\", \"약간\", \"약국\", \"약속\", \"약수\", \"약점\", \"약품\", \"약혼녀\", \"양념\", \"양력\", \"양말\", \"양배추\", \"양주\", \"양파\", \"어둠\", \"어려움\", \"어른\", \"어젯밤\", \"어쨌든\", \"어쩌다가\", \"어쩐지\", \"언니\", \"언덕\", \"언론\", \"언어\", \"얼굴\", \"얼른\", \"얼음\", \"얼핏\", \"엄마\", \"업무\", \"업종\", \"업체\", \"엉덩이\", \"엉망\", \"엉터리\", \"엊그제\", \"에너지\", \"에어컨\", \"엔진\", \"여건\", \"여고생\", \"여관\", \"여군\", \"여권\", \"여대생\", \"여덟\", \"여동생\", \"여든\", \"여론\", \"여름\", \"여섯\", \"여성\", \"여왕\", \"여인\", \"여전히\", \"여직원\", \"여학생\", \"여행\", \"역사\", \"역시\", \"역할\", \"연결\", \"연구\", \"연극\", \"연기\", \"연락\", \"연설\", \"연세\", \"연속\", \"연습\", \"연애\", \"연예인\", \"연인\", \"연장\", \"연주\", \"연출\", \"연필\", \"연합\", \"연휴\", \"열기\", \"열매\", \"열쇠\", \"열심히\", \"열정\", \"열차\", \"열흘\", \"염려\", \"엽서\", \"영국\", \"영남\", \"영상\", \"영양\", \"영역\", \"영웅\", \"영원히\", \"영하\", \"영향\", \"영혼\", \"영화\", \"옆구리\", \"옆방\", \"옆집\", \"예감\", \"예금\", \"예방\", \"예산\", \"예상\", \"예선\", \"예술\", \"예습\", \"예식장\", \"예약\", \"예전\", \"예절\", \"예정\", \"예컨대\", \"옛날\", \"오늘\", \"오락\", \"오랫동안\", \"오렌지\", \"오로지\", \"오른발\", \"오븐\", \"오십\", \"오염\", \"오월\", \"오전\", \"오직\", \"오징어\", \"오페라\", \"오피스텔\", \"오히려\", \"옥상\", \"옥수수\", \"온갖\", \"온라인\", \"온몸\", \"온종일\", \"온통\", \"올가을\", \"올림픽\", \"올해\", \"옷차림\", \"와이셔츠\", \"와인\", \"완성\", \"완전\", \"왕비\", \"왕자\", \"왜냐하면\", \"왠지\", \"외갓집\", \"외국\", \"외로움\", \"외삼촌\", \"외출\", \"외침\", \"외할머니\", \"왼발\", \"왼손\", \"왼쪽\", \"요금\", \"요일\", \"요즘\", \"요청\", \"용기\", \"용서\", \"용어\", \"우산\", \"우선\", \"우승\", \"우연히\", \"우정\", \"우체국\", \"우편\", \"운동\", \"운명\", \"운반\", \"운전\", \"운행\", \"울산\", \"울음\", \"움직임\", \"웃어른\", \"웃음\", \"워낙\", \"원고\", \"원래\", \"원서\", \"원숭이\", \"원인\", \"원장\", \"원피스\", \"월급\", \"월드컵\", \"월세\", \"월요일\", \"웨이터\", \"위반\", \"위법\", \"위성\", \"위원\", \"위험\", \"위협\", \"윗사람\", \"유난히\", \"유럽\", \"유명\", \"유물\", \"유산\", \"유적\", \"유치원\", \"유학\", \"유행\", \"유형\", \"육군\", \"육상\", \"육십\", \"육체\", \"은행\", \"음력\", \"음료\", \"음반\", \"음성\", \"음식\", \"음악\", \"음주\", \"의견\", \"의논\", \"의문\", \"의복\", \"의식\", \"의심\", \"의외로\", \"의욕\", \"의원\", \"의학\", \"이것\", \"이곳\", \"이념\", \"이놈\", \"이달\", \"이대로\", \"이동\", \"이렇게\", \"이력서\", \"이론적\", \"이름\", \"이민\", \"이발소\", \"이별\", \"이불\", \"이빨\", \"이상\", \"이성\", \"이슬\", \"이야기\", \"이용\", \"이웃\", \"이월\", \"이윽고\", \"이익\", \"이전\", \"이중\", \"이튿날\", \"이틀\", \"이혼\", \"인간\", \"인격\", \"인공\", \"인구\", \"인근\", \"인기\", \"인도\", \"인류\", \"인물\", \"인생\", \"인쇄\", \"인연\", \"인원\", \"인재\", \"인종\", \"인천\", \"인체\", \"인터넷\", \"인하\", \"인형\", \"일곱\", \"일기\", \"일단\", \"일대\", \"일등\", \"일반\", \"일본\", \"일부\", \"일상\", \"일생\", \"일손\", \"일요일\", \"일월\", \"일정\", \"일종\", \"일주일\", \"일찍\", \"일체\", \"일치\", \"일행\", \"일회용\", \"임금\", \"임무\", \"입대\", \"입력\", \"입맛\", \"입사\", \"입술\", \"입시\", \"입원\", \"입장\", \"입학\", \"자가용\", \"자격\", \"자극\", \"자동\", \"자랑\", \"자부심\", \"자식\", \"자신\", \"자연\", \"자원\", \"자율\", \"자전거\", \"자정\", \"자존심\", \"자판\", \"작가\", \"작년\", \"작성\", \"작업\", \"작용\", \"작은딸\", \"작품\", \"잔디\", \"잔뜩\", \"잔치\", \"잘못\", \"잠깐\", \"잠수함\", \"잠시\", \"잠옷\", \"잠자리\", \"잡지\", \"장관\", \"장군\", \"장기간\", \"장래\", \"장례\", \"장르\", \"장마\", \"장면\", \"장모\", \"장미\", \"장비\", \"장사\", \"장소\", \"장식\", \"장애인\", \"장인\", \"장점\", \"장차\", \"장학금\", \"재능\", \"재빨리\", \"재산\", \"재생\", \"재작년\", \"재정\", \"재채기\", \"재판\", \"재학\", \"재활용\", \"저것\", \"저고리\", \"저곳\", \"저녁\", \"저런\", \"저렇게\", \"저번\", \"저울\", \"저절로\", \"저축\", \"적극\", \"적당히\", \"적성\", \"적용\", \"적응\", \"전개\", \"전공\", \"전기\", \"전달\", \"전라도\", \"전망\", \"전문\", \"전반\", \"전부\", \"전세\", \"전시\", \"전용\", \"전자\", \"전쟁\", \"전주\", \"전철\", \"전체\", \"전통\", \"전혀\", \"전후\", \"절대\", \"절망\", \"절반\", \"절약\", \"절차\", \"점검\", \"점수\", \"점심\", \"점원\", \"점점\", \"점차\", \"접근\", \"접시\", \"접촉\", \"젓가락\", \"정거장\", \"정도\", \"정류장\", \"정리\", \"정말\", \"정면\", \"정문\", \"정반대\", \"정보\", \"정부\", \"정비\", \"정상\", \"정성\", \"정오\", \"정원\", \"정장\", \"정지\", \"정치\", \"정확히\", \"제공\", \"제과점\", \"제대로\", \"제목\", \"제발\", \"제법\", \"제삿날\", \"제안\", \"제일\", \"제작\", \"제주도\", \"제출\", \"제품\", \"제한\", \"조각\", \"조건\", \"조금\", \"조깅\", \"조명\", \"조미료\", \"조상\", \"조선\", \"조용히\", \"조절\", \"조정\", \"조직\", \"존댓말\", \"존재\", \"졸업\", \"졸음\", \"종교\", \"종로\", \"종류\", \"종소리\", \"종업원\", \"종종\", \"종합\", \"좌석\", \"죄인\", \"주관적\", \"주름\", \"주말\", \"주머니\", \"주먹\", \"주문\", \"주민\", \"주방\", \"주변\", \"주식\", \"주인\", \"주일\", \"주장\", \"주전자\", \"주택\", \"준비\", \"줄거리\", \"줄기\", \"줄무늬\", \"중간\", \"중계방송\", \"중국\", \"중년\", \"중단\", \"중독\", \"중반\", \"중부\", \"중세\", \"중소기업\", \"중순\", \"중앙\", \"중요\", \"중학교\", \"즉석\", \"즉시\", \"즐거움\", \"증가\", \"증거\", \"증권\", \"증상\", \"증세\", \"지각\", \"지갑\", \"지경\", \"지극히\", \"지금\", \"지급\", \"지능\", \"지름길\", \"지리산\", \"지방\", \"지붕\", \"지식\", \"지역\", \"지우개\", \"지원\", \"지적\", \"지점\", \"지진\", \"지출\", \"직선\", \"직업\", \"직원\", \"직장\", \"진급\", \"진동\", \"진로\", \"진료\", \"진리\", \"진짜\", \"진찰\", \"진출\", \"진통\", \"진행\", \"질문\", \"질병\", \"질서\", \"짐작\", \"집단\", \"집안\", \"집중\", \"짜증\", \"찌꺼기\", \"차남\", \"차라리\", \"차량\", \"차림\", \"차별\", \"차선\", \"차츰\", \"착각\", \"찬물\", \"찬성\", \"참가\", \"참기름\", \"참새\", \"참석\", \"참여\", \"참외\", \"참조\", \"찻잔\", \"창가\", \"창고\", \"창구\", \"창문\", \"창밖\", \"창작\", \"창조\", \"채널\", \"채점\", \"책가방\", \"책방\", \"책상\", \"책임\", \"챔피언\", \"처벌\", \"처음\", \"천국\", \"천둥\", \"천장\", \"천재\", \"천천히\", \"철도\", \"철저히\", \"철학\", \"첫날\", \"첫째\", \"청년\", \"청바지\", \"청소\", \"청춘\", \"체계\", \"체력\", \"체온\", \"체육\", \"체중\", \"체험\", \"초등학생\", \"초반\", \"초밥\", \"초상화\", \"초순\", \"초여름\", \"초원\", \"초저녁\", \"초점\", \"초청\", \"초콜릿\", \"촛불\", \"총각\", \"총리\", \"총장\", \"촬영\", \"최근\", \"최상\", \"최선\", \"최신\", \"최악\", \"최종\", \"추석\", \"추억\", \"추진\", \"추천\", \"추측\", \"축구\", \"축소\", \"축제\", \"축하\", \"출근\", \"출발\", \"출산\", \"출신\", \"출연\", \"출입\", \"출장\", \"출판\", \"충격\", \"충고\", \"충돌\", \"충분히\", \"충청도\", \"취업\", \"취직\", \"취향\", \"치약\", \"친구\", \"친척\", \"칠십\", \"칠월\", \"칠판\", \"침대\", \"침묵\", \"침실\", \"칫솔\", \"칭찬\", \"카메라\", \"카운터\", \"칼국수\", \"캐릭터\", \"캠퍼스\", \"캠페인\", \"커튼\", \"컨디션\", \"컬러\", \"컴퓨터\", \"코끼리\", \"코미디\", \"콘서트\", \"콜라\", \"콤플렉스\", \"콩나물\", \"쾌감\", \"쿠데타\", \"크림\", \"큰길\", \"큰딸\", \"큰소리\", \"큰아들\", \"큰어머니\", \"큰일\", \"큰절\", \"클래식\", \"클럽\", \"킬로\", \"타입\", \"타자기\", \"탁구\", \"탁자\", \"탄생\", \"태권도\", \"태양\", \"태풍\", \"택시\", \"탤런트\", \"터널\", \"터미널\", \"테니스\", \"테스트\", \"테이블\", \"텔레비전\", \"토론\", \"토마토\", \"토요일\", \"통계\", \"통과\", \"통로\", \"통신\", \"통역\", \"통일\", \"통장\", \"통제\", \"통증\", \"통합\", \"통화\", \"퇴근\", \"퇴원\", \"퇴직금\", \"튀김\", \"트럭\", \"특급\", \"특별\", \"특성\", \"특수\", \"특징\", \"특히\", \"튼튼히\", \"티셔츠\", \"파란색\", \"파일\", \"파출소\", \"판결\", \"판단\", \"판매\", \"판사\", \"팔십\", \"팔월\", \"팝송\", \"패션\", \"팩스\", \"팩시밀리\", \"팬티\", \"퍼센트\", \"페인트\", \"편견\", \"편의\", \"편지\", \"편히\", \"평가\", \"평균\", \"평생\", \"평소\", \"평양\", \"평일\", \"평화\", \"포스터\", \"포인트\", \"포장\", \"포함\", \"표면\", \"표정\", \"표준\", \"표현\", \"품목\", \"품질\", \"풍경\", \"풍속\", \"풍습\", \"프랑스\", \"프린터\", \"플라스틱\", \"피곤\", \"피망\", \"피아노\", \"필름\", \"필수\", \"필요\", \"필자\", \"필통\", \"핑계\", \"하느님\", \"하늘\", \"하드웨어\", \"하룻밤\", \"하반기\", \"하숙집\", \"하순\", \"하여튼\", \"하지만\", \"하천\", \"하품\", \"하필\", \"학과\", \"학교\", \"학급\", \"학기\", \"학년\", \"학력\", \"학번\", \"학부모\", \"학비\", \"학생\", \"학술\", \"학습\", \"학용품\", \"학원\", \"학위\", \"학자\", \"학점\", \"한계\", \"한글\", \"한꺼번에\", \"한낮\", \"한눈\", \"한동안\", \"한때\", \"한라산\", \"한마디\", \"한문\", \"한번\", \"한복\", \"한식\", \"한여름\", \"한쪽\", \"할머니\", \"할아버지\", \"할인\", \"함께\", \"함부로\", \"합격\", \"합리적\", \"항공\", \"항구\", \"항상\", \"항의\", \"해결\", \"해군\", \"해답\", \"해당\", \"해물\", \"해석\", \"해설\", \"해수욕장\", \"해안\", \"핵심\", \"핸드백\", \"햄버거\", \"햇볕\", \"햇살\", \"행동\", \"행복\", \"행사\", \"행운\", \"행위\", \"향기\", \"향상\", \"향수\", \"허락\", \"허용\", \"헬기\", \"현관\", \"현금\", \"현대\", \"현상\", \"현실\", \"현장\", \"현재\", \"현지\", \"혈액\", \"협력\", \"형부\", \"형사\", \"형수\", \"형식\", \"형제\", \"형태\", \"형편\", \"혜택\", \"호기심\", \"호남\", \"호랑이\", \"호박\", \"호텔\", \"호흡\", \"혹시\", \"홀로\", \"홈페이지\", \"홍보\", \"홍수\", \"홍차\", \"화면\", \"화분\", \"화살\", \"화요일\", \"화장\", \"화학\", \"확보\", \"확인\", \"확장\", \"확정\", \"환갑\", \"환경\", \"환영\", \"환율\", \"환자\", \"활기\", \"활동\", \"활발히\", \"활용\", \"활짝\", \"회견\", \"회관\", \"회복\", \"회색\", \"회원\", \"회장\", \"회전\", \"횟수\", \"횡단보도\", \"효율적\", \"후반\", \"후춧가루\", \"훈련\", \"훨씬\", \"휴식\", \"휴일\", \"흉내\", \"흐름\", \"흑백\", \"흑인\", \"흔적\", \"흔히\", \"흥미\", \"흥분\", \"희곡\", \"희망\", \"희생\", \"흰색\", \"힘껏\"];\n  var korean$1 =\n  /*#__PURE__*/\n  Object.freeze({\n    default: korean\n  });\n  var spanish = [\"ábaco\", \"abdomen\", \"abeja\", \"abierto\", \"abogado\", \"abono\", \"aborto\", \"abrazo\", \"abrir\", \"abuelo\", \"abuso\", \"acabar\", \"academia\", \"acceso\", \"acción\", \"aceite\", \"acelga\", \"acento\", \"aceptar\", \"ácido\", \"aclarar\", \"acné\", \"acoger\", \"acoso\", \"activo\", \"acto\", \"actriz\", \"actuar\", \"acudir\", \"acuerdo\", \"acusar\", \"adicto\", \"admitir\", \"adoptar\", \"adorno\", \"aduana\", \"adulto\", \"aéreo\", \"afectar\", \"afición\", \"afinar\", \"afirmar\", \"ágil\", \"agitar\", \"agonía\", \"agosto\", \"agotar\", \"agregar\", \"agrio\", \"agua\", \"agudo\", \"águila\", \"aguja\", \"ahogo\", \"ahorro\", \"aire\", \"aislar\", \"ajedrez\", \"ajeno\", \"ajuste\", \"alacrán\", \"alambre\", \"alarma\", \"alba\", \"álbum\", \"alcalde\", \"aldea\", \"alegre\", \"alejar\", \"alerta\", \"aleta\", \"alfiler\", \"alga\", \"algodón\", \"aliado\", \"aliento\", \"alivio\", \"alma\", \"almeja\", \"almíbar\", \"altar\", \"alteza\", \"altivo\", \"alto\", \"altura\", \"alumno\", \"alzar\", \"amable\", \"amante\", \"amapola\", \"amargo\", \"amasar\", \"ámbar\", \"ámbito\", \"ameno\", \"amigo\", \"amistad\", \"amor\", \"amparo\", \"amplio\", \"ancho\", \"anciano\", \"ancla\", \"andar\", \"andén\", \"anemia\", \"ángulo\", \"anillo\", \"ánimo\", \"anís\", \"anotar\", \"antena\", \"antiguo\", \"antojo\", \"anual\", \"anular\", \"anuncio\", \"añadir\", \"añejo\", \"año\", \"apagar\", \"aparato\", \"apetito\", \"apio\", \"aplicar\", \"apodo\", \"aporte\", \"apoyo\", \"aprender\", \"aprobar\", \"apuesta\", \"apuro\", \"arado\", \"araña\", \"arar\", \"árbitro\", \"árbol\", \"arbusto\", \"archivo\", \"arco\", \"arder\", \"ardilla\", \"arduo\", \"área\", \"árido\", \"aries\", \"armonía\", \"arnés\", \"aroma\", \"arpa\", \"arpón\", \"arreglo\", \"arroz\", \"arruga\", \"arte\", \"artista\", \"asa\", \"asado\", \"asalto\", \"ascenso\", \"asegurar\", \"aseo\", \"asesor\", \"asiento\", \"asilo\", \"asistir\", \"asno\", \"asombro\", \"áspero\", \"astilla\", \"astro\", \"astuto\", \"asumir\", \"asunto\", \"atajo\", \"ataque\", \"atar\", \"atento\", \"ateo\", \"ático\", \"atleta\", \"átomo\", \"atraer\", \"atroz\", \"atún\", \"audaz\", \"audio\", \"auge\", \"aula\", \"aumento\", \"ausente\", \"autor\", \"aval\", \"avance\", \"avaro\", \"ave\", \"avellana\", \"avena\", \"avestruz\", \"avión\", \"aviso\", \"ayer\", \"ayuda\", \"ayuno\", \"azafrán\", \"azar\", \"azote\", \"azúcar\", \"azufre\", \"azul\", \"baba\", \"babor\", \"bache\", \"bahía\", \"baile\", \"bajar\", \"balanza\", \"balcón\", \"balde\", \"bambú\", \"banco\", \"banda\", \"baño\", \"barba\", \"barco\", \"barniz\", \"barro\", \"báscula\", \"bastón\", \"basura\", \"batalla\", \"batería\", \"batir\", \"batuta\", \"baúl\", \"bazar\", \"bebé\", \"bebida\", \"bello\", \"besar\", \"beso\", \"bestia\", \"bicho\", \"bien\", \"bingo\", \"blanco\", \"bloque\", \"blusa\", \"boa\", \"bobina\", \"bobo\", \"boca\", \"bocina\", \"boda\", \"bodega\", \"boina\", \"bola\", \"bolero\", \"bolsa\", \"bomba\", \"bondad\", \"bonito\", \"bono\", \"bonsái\", \"borde\", \"borrar\", \"bosque\", \"bote\", \"botín\", \"bóveda\", \"bozal\", \"bravo\", \"brazo\", \"brecha\", \"breve\", \"brillo\", \"brinco\", \"brisa\", \"broca\", \"broma\", \"bronce\", \"brote\", \"bruja\", \"brusco\", \"bruto\", \"buceo\", \"bucle\", \"bueno\", \"buey\", \"bufanda\", \"bufón\", \"búho\", \"buitre\", \"bulto\", \"burbuja\", \"burla\", \"burro\", \"buscar\", \"butaca\", \"buzón\", \"caballo\", \"cabeza\", \"cabina\", \"cabra\", \"cacao\", \"cadáver\", \"cadena\", \"caer\", \"café\", \"caída\", \"caimán\", \"caja\", \"cajón\", \"cal\", \"calamar\", \"calcio\", \"caldo\", \"calidad\", \"calle\", \"calma\", \"calor\", \"calvo\", \"cama\", \"cambio\", \"camello\", \"camino\", \"campo\", \"cáncer\", \"candil\", \"canela\", \"canguro\", \"canica\", \"canto\", \"caña\", \"cañón\", \"caoba\", \"caos\", \"capaz\", \"capitán\", \"capote\", \"captar\", \"capucha\", \"cara\", \"carbón\", \"cárcel\", \"careta\", \"carga\", \"cariño\", \"carne\", \"carpeta\", \"carro\", \"carta\", \"casa\", \"casco\", \"casero\", \"caspa\", \"castor\", \"catorce\", \"catre\", \"caudal\", \"causa\", \"cazo\", \"cebolla\", \"ceder\", \"cedro\", \"celda\", \"célebre\", \"celoso\", \"célula\", \"cemento\", \"ceniza\", \"centro\", \"cerca\", \"cerdo\", \"cereza\", \"cero\", \"cerrar\", \"certeza\", \"césped\", \"cetro\", \"chacal\", \"chaleco\", \"champú\", \"chancla\", \"chapa\", \"charla\", \"chico\", \"chiste\", \"chivo\", \"choque\", \"choza\", \"chuleta\", \"chupar\", \"ciclón\", \"ciego\", \"cielo\", \"cien\", \"cierto\", \"cifra\", \"cigarro\", \"cima\", \"cinco\", \"cine\", \"cinta\", \"ciprés\", \"circo\", \"ciruela\", \"cisne\", \"cita\", \"ciudad\", \"clamor\", \"clan\", \"claro\", \"clase\", \"clave\", \"cliente\", \"clima\", \"clínica\", \"cobre\", \"cocción\", \"cochino\", \"cocina\", \"coco\", \"código\", \"codo\", \"cofre\", \"coger\", \"cohete\", \"cojín\", \"cojo\", \"cola\", \"colcha\", \"colegio\", \"colgar\", \"colina\", \"collar\", \"colmo\", \"columna\", \"combate\", \"comer\", \"comida\", \"cómodo\", \"compra\", \"conde\", \"conejo\", \"conga\", \"conocer\", \"consejo\", \"contar\", \"copa\", \"copia\", \"corazón\", \"corbata\", \"corcho\", \"cordón\", \"corona\", \"correr\", \"coser\", \"cosmos\", \"costa\", \"cráneo\", \"cráter\", \"crear\", \"crecer\", \"creído\", \"crema\", \"cría\", \"crimen\", \"cripta\", \"crisis\", \"cromo\", \"crónica\", \"croqueta\", \"crudo\", \"cruz\", \"cuadro\", \"cuarto\", \"cuatro\", \"cubo\", \"cubrir\", \"cuchara\", \"cuello\", \"cuento\", \"cuerda\", \"cuesta\", \"cueva\", \"cuidar\", \"culebra\", \"culpa\", \"culto\", \"cumbre\", \"cumplir\", \"cuna\", \"cuneta\", \"cuota\", \"cupón\", \"cúpula\", \"curar\", \"curioso\", \"curso\", \"curva\", \"cutis\", \"dama\", \"danza\", \"dar\", \"dardo\", \"dátil\", \"deber\", \"débil\", \"década\", \"decir\", \"dedo\", \"defensa\", \"definir\", \"dejar\", \"delfín\", \"delgado\", \"delito\", \"demora\", \"denso\", \"dental\", \"deporte\", \"derecho\", \"derrota\", \"desayuno\", \"deseo\", \"desfile\", \"desnudo\", \"destino\", \"desvío\", \"detalle\", \"detener\", \"deuda\", \"día\", \"diablo\", \"diadema\", \"diamante\", \"diana\", \"diario\", \"dibujo\", \"dictar\", \"diente\", \"dieta\", \"diez\", \"difícil\", \"digno\", \"dilema\", \"diluir\", \"dinero\", \"directo\", \"dirigir\", \"disco\", \"diseño\", \"disfraz\", \"diva\", \"divino\", \"doble\", \"doce\", \"dolor\", \"domingo\", \"don\", \"donar\", \"dorado\", \"dormir\", \"dorso\", \"dos\", \"dosis\", \"dragón\", \"droga\", \"ducha\", \"duda\", \"duelo\", \"dueño\", \"dulce\", \"dúo\", \"duque\", \"durar\", \"dureza\", \"duro\", \"ébano\", \"ebrio\", \"echar\", \"eco\", \"ecuador\", \"edad\", \"edición\", \"edificio\", \"editor\", \"educar\", \"efecto\", \"eficaz\", \"eje\", \"ejemplo\", \"elefante\", \"elegir\", \"elemento\", \"elevar\", \"elipse\", \"élite\", \"elixir\", \"elogio\", \"eludir\", \"embudo\", \"emitir\", \"emoción\", \"empate\", \"empeño\", \"empleo\", \"empresa\", \"enano\", \"encargo\", \"enchufe\", \"encía\", \"enemigo\", \"enero\", \"enfado\", \"enfermo\", \"engaño\", \"enigma\", \"enlace\", \"enorme\", \"enredo\", \"ensayo\", \"enseñar\", \"entero\", \"entrar\", \"envase\", \"envío\", \"época\", \"equipo\", \"erizo\", \"escala\", \"escena\", \"escolar\", \"escribir\", \"escudo\", \"esencia\", \"esfera\", \"esfuerzo\", \"espada\", \"espejo\", \"espía\", \"esposa\", \"espuma\", \"esquí\", \"estar\", \"este\", \"estilo\", \"estufa\", \"etapa\", \"eterno\", \"ética\", \"etnia\", \"evadir\", \"evaluar\", \"evento\", \"evitar\", \"exacto\", \"examen\", \"exceso\", \"excusa\", \"exento\", \"exigir\", \"exilio\", \"existir\", \"éxito\", \"experto\", \"explicar\", \"exponer\", \"extremo\", \"fábrica\", \"fábula\", \"fachada\", \"fácil\", \"factor\", \"faena\", \"faja\", \"falda\", \"fallo\", \"falso\", \"faltar\", \"fama\", \"familia\", \"famoso\", \"faraón\", \"farmacia\", \"farol\", \"farsa\", \"fase\", \"fatiga\", \"fauna\", \"favor\", \"fax\", \"febrero\", \"fecha\", \"feliz\", \"feo\", \"feria\", \"feroz\", \"fértil\", \"fervor\", \"festín\", \"fiable\", \"fianza\", \"fiar\", \"fibra\", \"ficción\", \"ficha\", \"fideo\", \"fiebre\", \"fiel\", \"fiera\", \"fiesta\", \"figura\", \"fijar\", \"fijo\", \"fila\", \"filete\", \"filial\", \"filtro\", \"fin\", \"finca\", \"fingir\", \"finito\", \"firma\", \"flaco\", \"flauta\", \"flecha\", \"flor\", \"flota\", \"fluir\", \"flujo\", \"flúor\", \"fobia\", \"foca\", \"fogata\", \"fogón\", \"folio\", \"folleto\", \"fondo\", \"forma\", \"forro\", \"fortuna\", \"forzar\", \"fosa\", \"foto\", \"fracaso\", \"frágil\", \"franja\", \"frase\", \"fraude\", \"freír\", \"freno\", \"fresa\", \"frío\", \"frito\", \"fruta\", \"fuego\", \"fuente\", \"fuerza\", \"fuga\", \"fumar\", \"función\", \"funda\", \"furgón\", \"furia\", \"fusil\", \"fútbol\", \"futuro\", \"gacela\", \"gafas\", \"gaita\", \"gajo\", \"gala\", \"galería\", \"gallo\", \"gamba\", \"ganar\", \"gancho\", \"ganga\", \"ganso\", \"garaje\", \"garza\", \"gasolina\", \"gastar\", \"gato\", \"gavilán\", \"gemelo\", \"gemir\", \"gen\", \"género\", \"genio\", \"gente\", \"geranio\", \"gerente\", \"germen\", \"gesto\", \"gigante\", \"gimnasio\", \"girar\", \"giro\", \"glaciar\", \"globo\", \"gloria\", \"gol\", \"golfo\", \"goloso\", \"golpe\", \"goma\", \"gordo\", \"gorila\", \"gorra\", \"gota\", \"goteo\", \"gozar\", \"grada\", \"gráfico\", \"grano\", \"grasa\", \"gratis\", \"grave\", \"grieta\", \"grillo\", \"gripe\", \"gris\", \"grito\", \"grosor\", \"grúa\", \"grueso\", \"grumo\", \"grupo\", \"guante\", \"guapo\", \"guardia\", \"guerra\", \"guía\", \"guiño\", \"guion\", \"guiso\", \"guitarra\", \"gusano\", \"gustar\", \"haber\", \"hábil\", \"hablar\", \"hacer\", \"hacha\", \"hada\", \"hallar\", \"hamaca\", \"harina\", \"haz\", \"hazaña\", \"hebilla\", \"hebra\", \"hecho\", \"helado\", \"helio\", \"hembra\", \"herir\", \"hermano\", \"héroe\", \"hervir\", \"hielo\", \"hierro\", \"hígado\", \"higiene\", \"hijo\", \"himno\", \"historia\", \"hocico\", \"hogar\", \"hoguera\", \"hoja\", \"hombre\", \"hongo\", \"honor\", \"honra\", \"hora\", \"hormiga\", \"horno\", \"hostil\", \"hoyo\", \"hueco\", \"huelga\", \"huerta\", \"hueso\", \"huevo\", \"huida\", \"huir\", \"humano\", \"húmedo\", \"humilde\", \"humo\", \"hundir\", \"huracán\", \"hurto\", \"icono\", \"ideal\", \"idioma\", \"ídolo\", \"iglesia\", \"iglú\", \"igual\", \"ilegal\", \"ilusión\", \"imagen\", \"imán\", \"imitar\", \"impar\", \"imperio\", \"imponer\", \"impulso\", \"incapaz\", \"índice\", \"inerte\", \"infiel\", \"informe\", \"ingenio\", \"inicio\", \"inmenso\", \"inmune\", \"innato\", \"insecto\", \"instante\", \"interés\", \"íntimo\", \"intuir\", \"inútil\", \"invierno\", \"ira\", \"iris\", \"ironía\", \"isla\", \"islote\", \"jabalí\", \"jabón\", \"jamón\", \"jarabe\", \"jardín\", \"jarra\", \"jaula\", \"jazmín\", \"jefe\", \"jeringa\", \"jinete\", \"jornada\", \"joroba\", \"joven\", \"joya\", \"juerga\", \"jueves\", \"juez\", \"jugador\", \"jugo\", \"juguete\", \"juicio\", \"junco\", \"jungla\", \"junio\", \"juntar\", \"júpiter\", \"jurar\", \"justo\", \"juvenil\", \"juzgar\", \"kilo\", \"koala\", \"labio\", \"lacio\", \"lacra\", \"lado\", \"ladrón\", \"lagarto\", \"lágrima\", \"laguna\", \"laico\", \"lamer\", \"lámina\", \"lámpara\", \"lana\", \"lancha\", \"langosta\", \"lanza\", \"lápiz\", \"largo\", \"larva\", \"lástima\", \"lata\", \"látex\", \"latir\", \"laurel\", \"lavar\", \"lazo\", \"leal\", \"lección\", \"leche\", \"lector\", \"leer\", \"legión\", \"legumbre\", \"lejano\", \"lengua\", \"lento\", \"leña\", \"león\", \"leopardo\", \"lesión\", \"letal\", \"letra\", \"leve\", \"leyenda\", \"libertad\", \"libro\", \"licor\", \"líder\", \"lidiar\", \"lienzo\", \"liga\", \"ligero\", \"lima\", \"límite\", \"limón\", \"limpio\", \"lince\", \"lindo\", \"línea\", \"lingote\", \"lino\", \"linterna\", \"líquido\", \"liso\", \"lista\", \"litera\", \"litio\", \"litro\", \"llaga\", \"llama\", \"llanto\", \"llave\", \"llegar\", \"llenar\", \"llevar\", \"llorar\", \"llover\", \"lluvia\", \"lobo\", \"loción\", \"loco\", \"locura\", \"lógica\", \"logro\", \"lombriz\", \"lomo\", \"lonja\", \"lote\", \"lucha\", \"lucir\", \"lugar\", \"lujo\", \"luna\", \"lunes\", \"lupa\", \"lustro\", \"luto\", \"luz\", \"maceta\", \"macho\", \"madera\", \"madre\", \"maduro\", \"maestro\", \"mafia\", \"magia\", \"mago\", \"maíz\", \"maldad\", \"maleta\", \"malla\", \"malo\", \"mamá\", \"mambo\", \"mamut\", \"manco\", \"mando\", \"manejar\", \"manga\", \"maniquí\", \"manjar\", \"mano\", \"manso\", \"manta\", \"mañana\", \"mapa\", \"máquina\", \"mar\", \"marco\", \"marea\", \"marfil\", \"margen\", \"marido\", \"mármol\", \"marrón\", \"martes\", \"marzo\", \"masa\", \"máscara\", \"masivo\", \"matar\", \"materia\", \"matiz\", \"matriz\", \"máximo\", \"mayor\", \"mazorca\", \"mecha\", \"medalla\", \"medio\", \"médula\", \"mejilla\", \"mejor\", \"melena\", \"melón\", \"memoria\", \"menor\", \"mensaje\", \"mente\", \"menú\", \"mercado\", \"merengue\", \"mérito\", \"mes\", \"mesón\", \"meta\", \"meter\", \"método\", \"metro\", \"mezcla\", \"miedo\", \"miel\", \"miembro\", \"miga\", \"mil\", \"milagro\", \"militar\", \"millón\", \"mimo\", \"mina\", \"minero\", \"mínimo\", \"minuto\", \"miope\", \"mirar\", \"misa\", \"miseria\", \"misil\", \"mismo\", \"mitad\", \"mito\", \"mochila\", \"moción\", \"moda\", \"modelo\", \"moho\", \"mojar\", \"molde\", \"moler\", \"molino\", \"momento\", \"momia\", \"monarca\", \"moneda\", \"monja\", \"monto\", \"moño\", \"morada\", \"morder\", \"moreno\", \"morir\", \"morro\", \"morsa\", \"mortal\", \"mosca\", \"mostrar\", \"motivo\", \"mover\", \"móvil\", \"mozo\", \"mucho\", \"mudar\", \"mueble\", \"muela\", \"muerte\", \"muestra\", \"mugre\", \"mujer\", \"mula\", \"muleta\", \"multa\", \"mundo\", \"muñeca\", \"mural\", \"muro\", \"músculo\", \"museo\", \"musgo\", \"música\", \"muslo\", \"nácar\", \"nación\", \"nadar\", \"naipe\", \"naranja\", \"nariz\", \"narrar\", \"nasal\", \"natal\", \"nativo\", \"natural\", \"náusea\", \"naval\", \"nave\", \"navidad\", \"necio\", \"néctar\", \"negar\", \"negocio\", \"negro\", \"neón\", \"nervio\", \"neto\", \"neutro\", \"nevar\", \"nevera\", \"nicho\", \"nido\", \"niebla\", \"nieto\", \"niñez\", \"niño\", \"nítido\", \"nivel\", \"nobleza\", \"noche\", \"nómina\", \"noria\", \"norma\", \"norte\", \"nota\", \"noticia\", \"novato\", \"novela\", \"novio\", \"nube\", \"nuca\", \"núcleo\", \"nudillo\", \"nudo\", \"nuera\", \"nueve\", \"nuez\", \"nulo\", \"número\", \"nutria\", \"oasis\", \"obeso\", \"obispo\", \"objeto\", \"obra\", \"obrero\", \"observar\", \"obtener\", \"obvio\", \"oca\", \"ocaso\", \"océano\", \"ochenta\", \"ocho\", \"ocio\", \"ocre\", \"octavo\", \"octubre\", \"oculto\", \"ocupar\", \"ocurrir\", \"odiar\", \"odio\", \"odisea\", \"oeste\", \"ofensa\", \"oferta\", \"oficio\", \"ofrecer\", \"ogro\", \"oído\", \"oír\", \"ojo\", \"ola\", \"oleada\", \"olfato\", \"olivo\", \"olla\", \"olmo\", \"olor\", \"olvido\", \"ombligo\", \"onda\", \"onza\", \"opaco\", \"opción\", \"ópera\", \"opinar\", \"oponer\", \"optar\", \"óptica\", \"opuesto\", \"oración\", \"orador\", \"oral\", \"órbita\", \"orca\", \"orden\", \"oreja\", \"órgano\", \"orgía\", \"orgullo\", \"oriente\", \"origen\", \"orilla\", \"oro\", \"orquesta\", \"oruga\", \"osadía\", \"oscuro\", \"osezno\", \"oso\", \"ostra\", \"otoño\", \"otro\", \"oveja\", \"óvulo\", \"óxido\", \"oxígeno\", \"oyente\", \"ozono\", \"pacto\", \"padre\", \"paella\", \"página\", \"pago\", \"país\", \"pájaro\", \"palabra\", \"palco\", \"paleta\", \"pálido\", \"palma\", \"paloma\", \"palpar\", \"pan\", \"panal\", \"pánico\", \"pantera\", \"pañuelo\", \"papá\", \"papel\", \"papilla\", \"paquete\", \"parar\", \"parcela\", \"pared\", \"parir\", \"paro\", \"párpado\", \"parque\", \"párrafo\", \"parte\", \"pasar\", \"paseo\", \"pasión\", \"paso\", \"pasta\", \"pata\", \"patio\", \"patria\", \"pausa\", \"pauta\", \"pavo\", \"payaso\", \"peatón\", \"pecado\", \"pecera\", \"pecho\", \"pedal\", \"pedir\", \"pegar\", \"peine\", \"pelar\", \"peldaño\", \"pelea\", \"peligro\", \"pellejo\", \"pelo\", \"peluca\", \"pena\", \"pensar\", \"peñón\", \"peón\", \"peor\", \"pepino\", \"pequeño\", \"pera\", \"percha\", \"perder\", \"pereza\", \"perfil\", \"perico\", \"perla\", \"permiso\", \"perro\", \"persona\", \"pesa\", \"pesca\", \"pésimo\", \"pestaña\", \"pétalo\", \"petróleo\", \"pez\", \"pezuña\", \"picar\", \"pichón\", \"pie\", \"piedra\", \"pierna\", \"pieza\", \"pijama\", \"pilar\", \"piloto\", \"pimienta\", \"pino\", \"pintor\", \"pinza\", \"piña\", \"piojo\", \"pipa\", \"pirata\", \"pisar\", \"piscina\", \"piso\", \"pista\", \"pitón\", \"pizca\", \"placa\", \"plan\", \"plata\", \"playa\", \"plaza\", \"pleito\", \"pleno\", \"plomo\", \"pluma\", \"plural\", \"pobre\", \"poco\", \"poder\", \"podio\", \"poema\", \"poesía\", \"poeta\", \"polen\", \"policía\", \"pollo\", \"polvo\", \"pomada\", \"pomelo\", \"pomo\", \"pompa\", \"poner\", \"porción\", \"portal\", \"posada\", \"poseer\", \"posible\", \"poste\", \"potencia\", \"potro\", \"pozo\", \"prado\", \"precoz\", \"pregunta\", \"premio\", \"prensa\", \"preso\", \"previo\", \"primo\", \"príncipe\", \"prisión\", \"privar\", \"proa\", \"probar\", \"proceso\", \"producto\", \"proeza\", \"profesor\", \"programa\", \"prole\", \"promesa\", \"pronto\", \"propio\", \"próximo\", \"prueba\", \"público\", \"puchero\", \"pudor\", \"pueblo\", \"puerta\", \"puesto\", \"pulga\", \"pulir\", \"pulmón\", \"pulpo\", \"pulso\", \"puma\", \"punto\", \"puñal\", \"puño\", \"pupa\", \"pupila\", \"puré\", \"quedar\", \"queja\", \"quemar\", \"querer\", \"queso\", \"quieto\", \"química\", \"quince\", \"quitar\", \"rábano\", \"rabia\", \"rabo\", \"ración\", \"radical\", \"raíz\", \"rama\", \"rampa\", \"rancho\", \"rango\", \"rapaz\", \"rápido\", \"rapto\", \"rasgo\", \"raspa\", \"rato\", \"rayo\", \"raza\", \"razón\", \"reacción\", \"realidad\", \"rebaño\", \"rebote\", \"recaer\", \"receta\", \"rechazo\", \"recoger\", \"recreo\", \"recto\", \"recurso\", \"red\", \"redondo\", \"reducir\", \"reflejo\", \"reforma\", \"refrán\", \"refugio\", \"regalo\", \"regir\", \"regla\", \"regreso\", \"rehén\", \"reino\", \"reír\", \"reja\", \"relato\", \"relevo\", \"relieve\", \"relleno\", \"reloj\", \"remar\", \"remedio\", \"remo\", \"rencor\", \"rendir\", \"renta\", \"reparto\", \"repetir\", \"reposo\", \"reptil\", \"res\", \"rescate\", \"resina\", \"respeto\", \"resto\", \"resumen\", \"retiro\", \"retorno\", \"retrato\", \"reunir\", \"revés\", \"revista\", \"rey\", \"rezar\", \"rico\", \"riego\", \"rienda\", \"riesgo\", \"rifa\", \"rígido\", \"rigor\", \"rincón\", \"riñón\", \"río\", \"riqueza\", \"risa\", \"ritmo\", \"rito\", \"rizo\", \"roble\", \"roce\", \"rociar\", \"rodar\", \"rodeo\", \"rodilla\", \"roer\", \"rojizo\", \"rojo\", \"romero\", \"romper\", \"ron\", \"ronco\", \"ronda\", \"ropa\", \"ropero\", \"rosa\", \"rosca\", \"rostro\", \"rotar\", \"rubí\", \"rubor\", \"rudo\", \"rueda\", \"rugir\", \"ruido\", \"ruina\", \"ruleta\", \"rulo\", \"rumbo\", \"rumor\", \"ruptura\", \"ruta\", \"rutina\", \"sábado\", \"saber\", \"sabio\", \"sable\", \"sacar\", \"sagaz\", \"sagrado\", \"sala\", \"saldo\", \"salero\", \"salir\", \"salmón\", \"salón\", \"salsa\", \"salto\", \"salud\", \"salvar\", \"samba\", \"sanción\", \"sandía\", \"sanear\", \"sangre\", \"sanidad\", \"sano\", \"santo\", \"sapo\", \"saque\", \"sardina\", \"sartén\", \"sastre\", \"satán\", \"sauna\", \"saxofón\", \"sección\", \"seco\", \"secreto\", \"secta\", \"sed\", \"seguir\", \"seis\", \"sello\", \"selva\", \"semana\", \"semilla\", \"senda\", \"sensor\", \"señal\", \"señor\", \"separar\", \"sepia\", \"sequía\", \"ser\", \"serie\", \"sermón\", \"servir\", \"sesenta\", \"sesión\", \"seta\", \"setenta\", \"severo\", \"sexo\", \"sexto\", \"sidra\", \"siesta\", \"siete\", \"siglo\", \"signo\", \"sílaba\", \"silbar\", \"silencio\", \"silla\", \"símbolo\", \"simio\", \"sirena\", \"sistema\", \"sitio\", \"situar\", \"sobre\", \"socio\", \"sodio\", \"sol\", \"solapa\", \"soldado\", \"soledad\", \"sólido\", \"soltar\", \"solución\", \"sombra\", \"sondeo\", \"sonido\", \"sonoro\", \"sonrisa\", \"sopa\", \"soplar\", \"soporte\", \"sordo\", \"sorpresa\", \"sorteo\", \"sostén\", \"sótano\", \"suave\", \"subir\", \"suceso\", \"sudor\", \"suegra\", \"suelo\", \"sueño\", \"suerte\", \"sufrir\", \"sujeto\", \"sultán\", \"sumar\", \"superar\", \"suplir\", \"suponer\", \"supremo\", \"sur\", \"surco\", \"sureño\", \"surgir\", \"susto\", \"sutil\", \"tabaco\", \"tabique\", \"tabla\", \"tabú\", \"taco\", \"tacto\", \"tajo\", \"talar\", \"talco\", \"talento\", \"talla\", \"talón\", \"tamaño\", \"tambor\", \"tango\", \"tanque\", \"tapa\", \"tapete\", \"tapia\", \"tapón\", \"taquilla\", \"tarde\", \"tarea\", \"tarifa\", \"tarjeta\", \"tarot\", \"tarro\", \"tarta\", \"tatuaje\", \"tauro\", \"taza\", \"tazón\", \"teatro\", \"techo\", \"tecla\", \"técnica\", \"tejado\", \"tejer\", \"tejido\", \"tela\", \"teléfono\", \"tema\", \"temor\", \"templo\", \"tenaz\", \"tender\", \"tener\", \"tenis\", \"tenso\", \"teoría\", \"terapia\", \"terco\", \"término\", \"ternura\", \"terror\", \"tesis\", \"tesoro\", \"testigo\", \"tetera\", \"texto\", \"tez\", \"tibio\", \"tiburón\", \"tiempo\", \"tienda\", \"tierra\", \"tieso\", \"tigre\", \"tijera\", \"tilde\", \"timbre\", \"tímido\", \"timo\", \"tinta\", \"tío\", \"típico\", \"tipo\", \"tira\", \"tirón\", \"titán\", \"títere\", \"título\", \"tiza\", \"toalla\", \"tobillo\", \"tocar\", \"tocino\", \"todo\", \"toga\", \"toldo\", \"tomar\", \"tono\", \"tonto\", \"topar\", \"tope\", \"toque\", \"tórax\", \"torero\", \"tormenta\", \"torneo\", \"toro\", \"torpedo\", \"torre\", \"torso\", \"tortuga\", \"tos\", \"tosco\", \"toser\", \"tóxico\", \"trabajo\", \"tractor\", \"traer\", \"tráfico\", \"trago\", \"traje\", \"tramo\", \"trance\", \"trato\", \"trauma\", \"trazar\", \"trébol\", \"tregua\", \"treinta\", \"tren\", \"trepar\", \"tres\", \"tribu\", \"trigo\", \"tripa\", \"triste\", \"triunfo\", \"trofeo\", \"trompa\", \"tronco\", \"tropa\", \"trote\", \"trozo\", \"truco\", \"trueno\", \"trufa\", \"tubería\", \"tubo\", \"tuerto\", \"tumba\", \"tumor\", \"túnel\", \"túnica\", \"turbina\", \"turismo\", \"turno\", \"tutor\", \"ubicar\", \"úlcera\", \"umbral\", \"unidad\", \"unir\", \"universo\", \"uno\", \"untar\", \"uña\", \"urbano\", \"urbe\", \"urgente\", \"urna\", \"usar\", \"usuario\", \"útil\", \"utopía\", \"uva\", \"vaca\", \"vacío\", \"vacuna\", \"vagar\", \"vago\", \"vaina\", \"vajilla\", \"vale\", \"válido\", \"valle\", \"valor\", \"válvula\", \"vampiro\", \"vara\", \"variar\", \"varón\", \"vaso\", \"vecino\", \"vector\", \"vehículo\", \"veinte\", \"vejez\", \"vela\", \"velero\", \"veloz\", \"vena\", \"vencer\", \"venda\", \"veneno\", \"vengar\", \"venir\", \"venta\", \"venus\", \"ver\", \"verano\", \"verbo\", \"verde\", \"vereda\", \"verja\", \"verso\", \"verter\", \"vía\", \"viaje\", \"vibrar\", \"vicio\", \"víctima\", \"vida\", \"vídeo\", \"vidrio\", \"viejo\", \"viernes\", \"vigor\", \"vil\", \"villa\", \"vinagre\", \"vino\", \"viñedo\", \"violín\", \"viral\", \"virgo\", \"virtud\", \"visor\", \"víspera\", \"vista\", \"vitamina\", \"viudo\", \"vivaz\", \"vivero\", \"vivir\", \"vivo\", \"volcán\", \"volumen\", \"volver\", \"voraz\", \"votar\", \"voto\", \"voz\", \"vuelo\", \"vulgar\", \"yacer\", \"yate\", \"yegua\", \"yema\", \"yerno\", \"yeso\", \"yodo\", \"yoga\", \"yogur\", \"zafiro\", \"zanja\", \"zapato\", \"zarza\", \"zona\", \"zorro\", \"zumo\", \"zurdo\"];\n  var spanish$1 =\n  /*#__PURE__*/\n  Object.freeze({\n    default: spanish\n  });\n  var CHINESE_SIMPLIFIED_WORDLIST = getCjsExportFromNamespace(chinese_simplified$1);\n  var CHINESE_TRADITIONAL_WORDLIST = getCjsExportFromNamespace(chinese_traditional$1);\n  var ENGLISH_WORDLIST = getCjsExportFromNamespace(english$1);\n  var FRENCH_WORDLIST = getCjsExportFromNamespace(french$1);\n  var ITALIAN_WORDLIST = getCjsExportFromNamespace(italian$1);\n  var JAPANESE_WORDLIST = getCjsExportFromNamespace(japanese$1);\n  var KOREAN_WORDLIST = getCjsExportFromNamespace(korean$1);\n  var SPANISH_WORDLIST = getCjsExportFromNamespace(spanish$1);\n  var Buffer$g = safeBuffer.Buffer;\n  var pbkdf2$2 = browser$3.pbkdf2Sync;\n  var pbkdf2Async = browser$3.pbkdf2; // use unorm until String.prototype.normalize gets better browser support\n\n  var DEFAULT_WORDLIST = ENGLISH_WORDLIST;\n  var INVALID_MNEMONIC = 'Invalid mnemonic';\n  var INVALID_ENTROPY = 'Invalid entropy';\n  var INVALID_CHECKSUM = 'Invalid mnemonic checksum';\n\n  function lpad(str, padString, length) {\n    while (str.length < length) str = padString + str;\n\n    return str;\n  }\n\n  function binaryToByte(bin) {\n    return parseInt(bin, 2);\n  }\n\n  function bytesToBinary(bytes) {\n    return bytes.map(function (x) {\n      return lpad(x.toString(2), '0', 8);\n    }).join('');\n  }\n\n  function deriveChecksumBits(entropyBuffer) {\n    var ENT = entropyBuffer.length * 8;\n    var CS = ENT / 32;\n    var hash = browser('sha256').update(entropyBuffer).digest();\n    return bytesToBinary([].slice.call(hash)).slice(0, CS);\n  }\n\n  function salt(password) {\n    return 'mnemonic' + (password || '');\n  }\n\n  function mnemonicToSeed(mnemonic, password) {\n    var mnemonicBuffer = Buffer$g.from(unorm.nfkd(mnemonic), 'utf8');\n    var saltBuffer = Buffer$g.from(salt(unorm.nfkd(password)), 'utf8');\n    return pbkdf2$2(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512');\n  }\n\n  function mnemonicToSeedHex(mnemonic, password) {\n    return mnemonicToSeed(mnemonic, password).toString('hex');\n  }\n\n  function mnemonicToSeedAsync(mnemonic, password) {\n    return new Promise(function (resolve, reject) {\n      try {\n        var mnemonicBuffer = Buffer$g.from(unorm.nfkd(mnemonic), 'utf8');\n        var saltBuffer = Buffer$g.from(salt(unorm.nfkd(password)), 'utf8');\n      } catch (error) {\n        return reject(error);\n      }\n\n      pbkdf2Async(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512', function (err, data) {\n        if (err) return reject(err);else return resolve(data);\n      });\n    });\n  }\n\n  function mnemonicToSeedHexAsync(mnemonic, password) {\n    return mnemonicToSeedAsync(mnemonic, password).then(function (buf) {\n      return buf.toString('hex');\n    });\n  }\n\n  function mnemonicToEntropy(mnemonic, wordlist) {\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    var words = unorm.nfkd(mnemonic).split(' ');\n    if (words.length % 3 !== 0) throw new Error(INVALID_MNEMONIC); // convert word indices to 11 bit binary strings\n\n    var bits = words.map(function (word) {\n      var index = wordlist.indexOf(word);\n      if (index === -1) throw new Error(INVALID_MNEMONIC);\n      return lpad(index.toString(2), '0', 11);\n    }).join(''); // split the binary string into ENT/CS\n\n    var dividerIndex = Math.floor(bits.length / 33) * 32;\n    var entropyBits = bits.slice(0, dividerIndex);\n    var checksumBits = bits.slice(dividerIndex); // calculate the checksum and compare\n\n    var entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);\n    if (entropyBytes.length < 16) throw new Error(INVALID_ENTROPY);\n    if (entropyBytes.length > 32) throw new Error(INVALID_ENTROPY);\n    if (entropyBytes.length % 4 !== 0) throw new Error(INVALID_ENTROPY);\n    var entropy = Buffer$g.from(entropyBytes);\n    var newChecksum = deriveChecksumBits(entropy);\n    if (newChecksum !== checksumBits) throw new Error(INVALID_CHECKSUM);\n    return entropy.toString('hex');\n  }\n\n  function entropyToMnemonic(entropy, wordlist) {\n    if (!Buffer$g.isBuffer(entropy)) entropy = Buffer$g.from(entropy, 'hex');\n    wordlist = wordlist || DEFAULT_WORDLIST; // 128 <= ENT <= 256\n\n    if (entropy.length < 16) throw new TypeError(INVALID_ENTROPY);\n    if (entropy.length > 32) throw new TypeError(INVALID_ENTROPY);\n    if (entropy.length % 4 !== 0) throw new TypeError(INVALID_ENTROPY);\n    var entropyBits = bytesToBinary([].slice.call(entropy));\n    var checksumBits = deriveChecksumBits(entropy);\n    var bits = entropyBits + checksumBits;\n    var chunks = bits.match(/(.{1,11})/g);\n    var words = chunks.map(function (binary) {\n      var index = binaryToByte(binary);\n      return wordlist[index];\n    });\n    return wordlist === JAPANESE_WORDLIST ? words.join('\\u3000') : words.join(' ');\n  }\n\n  function generateMnemonic(strength, rng, wordlist) {\n    strength = strength || 128;\n    if (strength % 32 !== 0) throw new TypeError(INVALID_ENTROPY);\n    rng = rng || browser$4;\n    return entropyToMnemonic(rng(strength / 8), wordlist);\n  }\n\n  function validateMnemonic(mnemonic, wordlist) {\n    try {\n      mnemonicToEntropy(mnemonic, wordlist);\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  }\n\n  var bip39 = {\n    mnemonicToSeed: mnemonicToSeed,\n    mnemonicToSeedAsync: mnemonicToSeedAsync,\n    mnemonicToSeedHex: mnemonicToSeedHex,\n    mnemonicToSeedHexAsync: mnemonicToSeedHexAsync,\n    mnemonicToEntropy: mnemonicToEntropy,\n    entropyToMnemonic: entropyToMnemonic,\n    generateMnemonic: generateMnemonic,\n    validateMnemonic: validateMnemonic,\n    wordlists: {\n      EN: ENGLISH_WORDLIST,\n      JA: JAPANESE_WORDLIST,\n      chinese_simplified: CHINESE_SIMPLIFIED_WORDLIST,\n      chinese_traditional: CHINESE_TRADITIONAL_WORDLIST,\n      english: ENGLISH_WORDLIST,\n      french: FRENCH_WORDLIST,\n      italian: ITALIAN_WORDLIST,\n      japanese: JAPANESE_WORDLIST,\n      korean: KOREAN_WORDLIST,\n      spanish: SPANISH_WORDLIST\n    }\n  };\n  /*\n  object-assign\n  (c) Sindre Sorhus\n  @license MIT\n  */\n\n  /* eslint-disable no-unused-vars */\n\n  var getOwnPropertySymbols = Object.getOwnPropertySymbols;\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  var propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\n  function toObject(val) {\n    if (val === null || val === undefined) {\n      throw new TypeError('Object.assign cannot be called with null or undefined');\n    }\n\n    return Object(val);\n  }\n\n  function shouldUseNative() {\n    try {\n      if (!Object.assign) {\n        return false;\n      } // Detect buggy property enumeration order in older V8 versions.\n      // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\n\n      var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n\n      test1[5] = 'de';\n\n      if (Object.getOwnPropertyNames(test1)[0] === '5') {\n        return false;\n      } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n      var test2 = {};\n\n      for (var i = 0; i < 10; i++) {\n        test2['_' + String.fromCharCode(i)] = i;\n      }\n\n      var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n        return test2[n];\n      });\n\n      if (order2.join('') !== '0123456789') {\n        return false;\n      } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n      var test3 = {};\n      'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n        test3[letter] = letter;\n      });\n\n      if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n        return false;\n      }\n\n      return true;\n    } catch (err) {\n      // We don't expect any of the above to throw, but better to be safe.\n      return false;\n    }\n  }\n\n  var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {\n    var from;\n    var to = toObject(target);\n    var symbols;\n\n    for (var s = 1; s < arguments.length; s++) {\n      from = Object(arguments[s]);\n\n      for (var key in from) {\n        if (hasOwnProperty.call(from, key)) {\n          to[key] = from[key];\n        }\n      }\n\n      if (getOwnPropertySymbols) {\n        symbols = getOwnPropertySymbols(from);\n\n        for (var i = 0; i < symbols.length; i++) {\n          if (propIsEnumerable.call(from, symbols[i])) {\n            to[symbols[i]] = from[symbols[i]];\n          }\n        }\n      }\n    }\n\n    return to;\n  };\n\n  var isBufferBrowser = function isBuffer(arg) {\n    return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';\n  };\n\n  var inherits_browser$1 = createCommonjsModule(function (module) {\n    if (typeof Object.create === 'function') {\n      // implementation from standard node.js 'util' module\n      module.exports = function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        ctor.prototype = Object.create(superCtor.prototype, {\n          constructor: {\n            value: ctor,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n      };\n    } else {\n      // old school shim for old browsers\n      module.exports = function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n\n        var TempCtor = function () {};\n\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n      };\n    }\n  });\n  var util$2 = createCommonjsModule(function (module, exports) {\n    // Copyright Joyent, Inc. and other Node contributors.\n    //\n    // Permission is hereby granted, free of charge, to any person obtaining a\n    // copy of this software and associated documentation files (the\n    // \"Software\"), to deal in the Software without restriction, including\n    // without limitation the rights to use, copy, modify, merge, publish,\n    // distribute, sublicense, and/or sell copies of the Software, and to permit\n    // persons to whom the Software is furnished to do so, subject to the\n    // following conditions:\n    //\n    // The above copyright notice and this permission notice shall be included\n    // in all copies or substantial portions of the Software.\n    //\n    // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n    // USE OR OTHER DEALINGS IN THE SOFTWARE.\n    var formatRegExp = /%[sdj%]/g;\n\n    exports.format = function (f) {\n      if (!isString(f)) {\n        var objects = [];\n\n        for (var i = 0; i < arguments.length; i++) {\n          objects.push(inspect(arguments[i]));\n        }\n\n        return objects.join(' ');\n      }\n\n      var i = 1;\n      var args = arguments;\n      var len = args.length;\n      var str = String(f).replace(formatRegExp, function (x) {\n        if (x === '%%') return '%';\n        if (i >= len) return x;\n\n        switch (x) {\n          case '%s':\n            return String(args[i++]);\n\n          case '%d':\n            return Number(args[i++]);\n\n          case '%j':\n            try {\n              return JSON.stringify(args[i++]);\n            } catch (_) {\n              return '[Circular]';\n            }\n\n          default:\n            return x;\n        }\n      });\n\n      for (var x = args[i]; i < len; x = args[++i]) {\n        if (isNull(x) || !isObject(x)) {\n          str += ' ' + x;\n        } else {\n          str += ' ' + inspect(x);\n        }\n      }\n\n      return str;\n    }; // Mark that a method should not be used.\n    // Returns a modified function which warns once by default.\n    // If --no-deprecation is set, then it is a no-op.\n\n\n    exports.deprecate = function (fn, msg) {\n      // Allow for deprecating things in the process of starting up.\n      if (isUndefined(commonjsGlobal.process)) {\n        return function () {\n          return exports.deprecate(fn, msg).apply(this, arguments);\n        };\n      }\n\n      var warned = false;\n\n      function deprecated() {\n        if (!warned) {\n          {\n            console.error(msg);\n          }\n          warned = true;\n        }\n\n        return fn.apply(this, arguments);\n      }\n\n      return deprecated;\n    };\n\n    var debugs = {};\n    var debugEnviron;\n\n    exports.debuglog = function (set) {\n      if (isUndefined(debugEnviron)) debugEnviron = '';\n      set = set.toUpperCase();\n\n      if (!debugs[set]) {\n        if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n          var pid = process.pid;\n\n          debugs[set] = function () {\n            var msg = exports.format.apply(exports, arguments);\n            console.error('%s %d: %s', set, pid, msg);\n          };\n        } else {\n          debugs[set] = function () {};\n        }\n      }\n\n      return debugs[set];\n    };\n    /**\n     * Echos the value of a value. Trys to print the value out\n     * in the best way possible given the different types.\n     *\n     * @param {Object} obj The object to print out.\n     * @param {Object} opts Optional options object that alters the output.\n     */\n\n    /* legacy: obj, showHidden, depth, colors*/\n\n\n    function inspect(obj, opts) {\n      // default options\n      var ctx = {\n        seen: [],\n        stylize: stylizeNoColor\n      }; // legacy...\n\n      if (arguments.length >= 3) ctx.depth = arguments[2];\n      if (arguments.length >= 4) ctx.colors = arguments[3];\n\n      if (isBoolean(opts)) {\n        // legacy...\n        ctx.showHidden = opts;\n      } else if (opts) {\n        // got an \"options\" object\n        exports._extend(ctx, opts);\n      } // set default options\n\n\n      if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n      if (isUndefined(ctx.depth)) ctx.depth = 2;\n      if (isUndefined(ctx.colors)) ctx.colors = false;\n      if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n      if (ctx.colors) ctx.stylize = stylizeWithColor;\n      return formatValue(ctx, obj, ctx.depth);\n    }\n\n    exports.inspect = inspect; // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\n\n    inspect.colors = {\n      'bold': [1, 22],\n      'italic': [3, 23],\n      'underline': [4, 24],\n      'inverse': [7, 27],\n      'white': [37, 39],\n      'grey': [90, 39],\n      'black': [30, 39],\n      'blue': [34, 39],\n      'cyan': [36, 39],\n      'green': [32, 39],\n      'magenta': [35, 39],\n      'red': [31, 39],\n      'yellow': [33, 39]\n    }; // Don't use 'blue' not visible on cmd.exe\n\n    inspect.styles = {\n      'special': 'cyan',\n      'number': 'yellow',\n      'boolean': 'yellow',\n      'undefined': 'grey',\n      'null': 'bold',\n      'string': 'green',\n      'date': 'magenta',\n      // \"name\": intentionally not styling\n      'regexp': 'red'\n    };\n\n    function stylizeWithColor(str, styleType) {\n      var style = inspect.styles[styleType];\n\n      if (style) {\n        return '\\u001b[' + inspect.colors[style][0] + 'm' + str + '\\u001b[' + inspect.colors[style][1] + 'm';\n      } else {\n        return str;\n      }\n    }\n\n    function stylizeNoColor(str, styleType) {\n      return str;\n    }\n\n    function arrayToHash(array) {\n      var hash = {};\n      array.forEach(function (val, idx) {\n        hash[val] = true;\n      });\n      return hash;\n    }\n\n    function formatValue(ctx, value, recurseTimes) {\n      // Provide a hook for user-specified inspect functions.\n      // Check that value is an object with an inspect function on it\n      if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n        var ret = value.inspect(recurseTimes, ctx);\n\n        if (!isString(ret)) {\n          ret = formatValue(ctx, ret, recurseTimes);\n        }\n\n        return ret;\n      } // Primitive types cannot have properties\n\n\n      var primitive = formatPrimitive(ctx, value);\n\n      if (primitive) {\n        return primitive;\n      } // Look up the keys of the object.\n\n\n      var keys = Object.keys(value);\n      var visibleKeys = arrayToHash(keys);\n\n      if (ctx.showHidden) {\n        keys = Object.getOwnPropertyNames(value);\n      } // IE doesn't make error fields non-enumerable\n      // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n\n\n      if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n        return formatError(value);\n      } // Some type of object without properties can be shortcutted.\n\n\n      if (keys.length === 0) {\n        if (isFunction(value)) {\n          var name = value.name ? ': ' + value.name : '';\n          return ctx.stylize('[Function' + name + ']', 'special');\n        }\n\n        if (isRegExp(value)) {\n          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n        }\n\n        if (isDate(value)) {\n          return ctx.stylize(Date.prototype.toString.call(value), 'date');\n        }\n\n        if (isError(value)) {\n          return formatError(value);\n        }\n      }\n\n      var base = '',\n          array = false,\n          braces = ['{', '}']; // Make Array say that they are Array\n\n      if (isArray(value)) {\n        array = true;\n        braces = ['[', ']'];\n      } // Make functions say that they are functions\n\n\n      if (isFunction(value)) {\n        var n = value.name ? ': ' + value.name : '';\n        base = ' [Function' + n + ']';\n      } // Make RegExps say that they are RegExps\n\n\n      if (isRegExp(value)) {\n        base = ' ' + RegExp.prototype.toString.call(value);\n      } // Make dates with properties first say the date\n\n\n      if (isDate(value)) {\n        base = ' ' + Date.prototype.toUTCString.call(value);\n      } // Make error with message first say the error\n\n\n      if (isError(value)) {\n        base = ' ' + formatError(value);\n      }\n\n      if (keys.length === 0 && (!array || value.length == 0)) {\n        return braces[0] + base + braces[1];\n      }\n\n      if (recurseTimes < 0) {\n        if (isRegExp(value)) {\n          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n        } else {\n          return ctx.stylize('[Object]', 'special');\n        }\n      }\n\n      ctx.seen.push(value);\n      var output;\n\n      if (array) {\n        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n      } else {\n        output = keys.map(function (key) {\n          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n        });\n      }\n\n      ctx.seen.pop();\n      return reduceToSingleString(output, base, braces);\n    }\n\n    function formatPrimitive(ctx, value) {\n      if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');\n\n      if (isString(value)) {\n        var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '').replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"') + '\\'';\n        return ctx.stylize(simple, 'string');\n      }\n\n      if (isNumber(value)) return ctx.stylize('' + value, 'number');\n      if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is \"object\", so special case here.\n\n      if (isNull(value)) return ctx.stylize('null', 'null');\n    }\n\n    function formatError(value) {\n      return '[' + Error.prototype.toString.call(value) + ']';\n    }\n\n    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n      var output = [];\n\n      for (var i = 0, l = value.length; i < l; ++i) {\n        if (hasOwnProperty(value, String(i))) {\n          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));\n        } else {\n          output.push('');\n        }\n      }\n\n      keys.forEach(function (key) {\n        if (!key.match(/^\\d+$/)) {\n          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));\n        }\n      });\n      return output;\n    }\n\n    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n      var name, str, desc;\n      desc = Object.getOwnPropertyDescriptor(value, key) || {\n        value: value[key]\n      };\n\n      if (desc.get) {\n        if (desc.set) {\n          str = ctx.stylize('[Getter/Setter]', 'special');\n        } else {\n          str = ctx.stylize('[Getter]', 'special');\n        }\n      } else {\n        if (desc.set) {\n          str = ctx.stylize('[Setter]', 'special');\n        }\n      }\n\n      if (!hasOwnProperty(visibleKeys, key)) {\n        name = '[' + key + ']';\n      }\n\n      if (!str) {\n        if (ctx.seen.indexOf(desc.value) < 0) {\n          if (isNull(recurseTimes)) {\n            str = formatValue(ctx, desc.value, null);\n          } else {\n            str = formatValue(ctx, desc.value, recurseTimes - 1);\n          }\n\n          if (str.indexOf('\\n') > -1) {\n            if (array) {\n              str = str.split('\\n').map(function (line) {\n                return '  ' + line;\n              }).join('\\n').substr(2);\n            } else {\n              str = '\\n' + str.split('\\n').map(function (line) {\n                return '   ' + line;\n              }).join('\\n');\n            }\n          }\n        } else {\n          str = ctx.stylize('[Circular]', 'special');\n        }\n      }\n\n      if (isUndefined(name)) {\n        if (array && key.match(/^\\d+$/)) {\n          return str;\n        }\n\n        name = JSON.stringify('' + key);\n\n        if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n          name = name.substr(1, name.length - 2);\n          name = ctx.stylize(name, 'name');\n        } else {\n          name = name.replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"').replace(/(^\"|\"$)/g, \"'\");\n          name = ctx.stylize(name, 'string');\n        }\n      }\n\n      return name + ': ' + str;\n    }\n\n    function reduceToSingleString(output, base, braces) {\n      var length = output.reduce(function (prev, cur) {\n        if (cur.indexOf('\\n') >= 0) ;\n        return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n      }, 0);\n\n      if (length > 60) {\n        return braces[0] + (base === '' ? '' : base + '\\n ') + ' ' + output.join(',\\n  ') + ' ' + braces[1];\n      }\n\n      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n    } // NOTE: These type checking functions intentionally don't use `instanceof`\n    // because it is fragile and can be easily faked with `Object.create()`.\n\n\n    function isArray(ar) {\n      return Array.isArray(ar);\n    }\n\n    exports.isArray = isArray;\n\n    function isBoolean(arg) {\n      return typeof arg === 'boolean';\n    }\n\n    exports.isBoolean = isBoolean;\n\n    function isNull(arg) {\n      return arg === null;\n    }\n\n    exports.isNull = isNull;\n\n    function isNullOrUndefined(arg) {\n      return arg == null;\n    }\n\n    exports.isNullOrUndefined = isNullOrUndefined;\n\n    function isNumber(arg) {\n      return typeof arg === 'number';\n    }\n\n    exports.isNumber = isNumber;\n\n    function isString(arg) {\n      return typeof arg === 'string';\n    }\n\n    exports.isString = isString;\n\n    function isSymbol(arg) {\n      return typeof arg === 'symbol';\n    }\n\n    exports.isSymbol = isSymbol;\n\n    function isUndefined(arg) {\n      return arg === void 0;\n    }\n\n    exports.isUndefined = isUndefined;\n\n    function isRegExp(re) {\n      return isObject(re) && objectToString(re) === '[object RegExp]';\n    }\n\n    exports.isRegExp = isRegExp;\n\n    function isObject(arg) {\n      return typeof arg === 'object' && arg !== null;\n    }\n\n    exports.isObject = isObject;\n\n    function isDate(d) {\n      return isObject(d) && objectToString(d) === '[object Date]';\n    }\n\n    exports.isDate = isDate;\n\n    function isError(e) {\n      return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);\n    }\n\n    exports.isError = isError;\n\n    function isFunction(arg) {\n      return typeof arg === 'function';\n    }\n\n    exports.isFunction = isFunction;\n\n    function isPrimitive(arg) {\n      return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol\n      typeof arg === 'undefined';\n    }\n\n    exports.isPrimitive = isPrimitive;\n    exports.isBuffer = isBufferBrowser;\n\n    function objectToString(o) {\n      return Object.prototype.toString.call(o);\n    }\n\n    function pad(n) {\n      return n < 10 ? '0' + n.toString(10) : n.toString(10);\n    }\n\n    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34\n\n    function timestamp() {\n      var d = new Date();\n      var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');\n      return [d.getDate(), months[d.getMonth()], time].join(' ');\n    } // log is just a thin wrapper to console.log that prepends a timestamp\n\n\n    exports.log = function () {\n      console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n    };\n    /**\n     * Inherit the prototype methods from one constructor into another.\n     *\n     * The Function.prototype.inherits from lang.js rewritten as a standalone\n     * function (not on Function.prototype). NOTE: If this file is to be loaded\n     * during bootstrapping this function needs to be rewritten using some native\n     * functions as prototype setup using normal JavaScript does not work as\n     * expected during bootstrapping (see mirror.js in r114903).\n     *\n     * @param {function} ctor Constructor function which needs to inherit the\n     *     prototype.\n     * @param {function} superCtor Constructor function to inherit prototype from.\n     */\n\n\n    exports.inherits = inherits_browser$1;\n\n    exports._extend = function (origin, add) {\n      // Don't do anything if add isn't an object\n      if (!add || !isObject(add)) return origin;\n      var keys = Object.keys(add);\n      var i = keys.length;\n\n      while (i--) {\n        origin[keys[i]] = add[keys[i]];\n      }\n\n      return origin;\n    };\n\n    function hasOwnProperty(obj, prop) {\n      return Object.prototype.hasOwnProperty.call(obj, prop);\n    }\n  });\n  var util_1 = util$2.format;\n  var util_2 = util$2.deprecate;\n  var util_3 = util$2.debuglog;\n  var util_4 = util$2.inspect;\n  var util_5 = util$2.isArray;\n  var util_6 = util$2.isBoolean;\n  var util_7 = util$2.isNull;\n  var util_8 = util$2.isNullOrUndefined;\n  var util_9 = util$2.isNumber;\n  var util_10 = util$2.isString;\n  var util_11 = util$2.isSymbol;\n  var util_12 = util$2.isUndefined;\n  var util_13 = util$2.isRegExp;\n  var util_14 = util$2.isObject;\n  var util_15 = util$2.isDate;\n  var util_16 = util$2.isError;\n  var util_17 = util$2.isFunction;\n  var util_18 = util$2.isPrimitive;\n  var util_19 = util$2.isBuffer;\n  var util_20 = util$2.log;\n  var util_21 = util$2.inherits;\n  var util_22 = util$2._extend;\n  var assert_1 = createCommonjsModule(function (module) {\n    // compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n    // original notice:\n\n    /*!\n     * The buffer module from node.js, for the browser.\n     *\n     * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n     * @license  MIT\n     */\n    function compare(a, b) {\n      if (a === b) {\n        return 0;\n      }\n\n      var x = a.length;\n      var y = b.length;\n\n      for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n        if (a[i] !== b[i]) {\n          x = a[i];\n          y = b[i];\n          break;\n        }\n      }\n\n      if (x < y) {\n        return -1;\n      }\n\n      if (y < x) {\n        return 1;\n      }\n\n      return 0;\n    }\n\n    function isBuffer(b) {\n      if (commonjsGlobal.Buffer && typeof commonjsGlobal.Buffer.isBuffer === 'function') {\n        return commonjsGlobal.Buffer.isBuffer(b);\n      }\n\n      return !!(b != null && b._isBuffer);\n    } // based on node assert, original notice:\n    // NB: The URL to the CommonJS spec is kept just for tradition.\n    //     node-assert has evolved a lot since then, both in API and behavior.\n    // http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n    //\n    // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n    //\n    // Originally from narwhal.js (http://narwhaljs.org)\n    // Copyright (c) 2009 Thomas Robinson <280north.com>\n    //\n    // Permission is hereby granted, free of charge, to any person obtaining a copy\n    // of this software and associated documentation files (the 'Software'), to\n    // deal in the Software without restriction, including without limitation the\n    // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n    // sell copies of the Software, and to permit persons to whom the Software is\n    // furnished to do so, subject to the following conditions:\n    //\n    // The above copyright notice and this permission notice shall be included in\n    // all copies or substantial portions of the Software.\n    //\n    // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n    // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n    // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n    var hasOwn = Object.prototype.hasOwnProperty;\n    var pSlice = Array.prototype.slice;\n\n    var functionsHaveNames = function () {\n      return function foo() {}.name === 'foo';\n    }();\n\n    function pToString(obj) {\n      return Object.prototype.toString.call(obj);\n    }\n\n    function isView(arrbuf) {\n      if (isBuffer(arrbuf)) {\n        return false;\n      }\n\n      if (typeof commonjsGlobal.ArrayBuffer !== 'function') {\n        return false;\n      }\n\n      if (typeof ArrayBuffer.isView === 'function') {\n        return ArrayBuffer.isView(arrbuf);\n      }\n\n      if (!arrbuf) {\n        return false;\n      }\n\n      if (arrbuf instanceof DataView) {\n        return true;\n      }\n\n      if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n        return true;\n      }\n\n      return false;\n    } // 1. The assert module provides functions that throw\n    // AssertionError's when particular conditions are not met. The\n    // assert module must conform to the following interface.\n\n\n    var assert = module.exports = ok; // 2. The AssertionError is defined in assert.\n    // new assert.AssertionError({ message: message,\n    //                             actual: actual,\n    //                             expected: expected })\n\n    var regex = /\\s*function\\s+([^\\(\\s]*)\\s*/; // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\n\n    function getName(func) {\n      if (!util$2.isFunction(func)) {\n        return;\n      }\n\n      if (functionsHaveNames) {\n        return func.name;\n      }\n\n      var str = func.toString();\n      var match = str.match(regex);\n      return match && match[1];\n    }\n\n    assert.AssertionError = function AssertionError(options) {\n      this.name = 'AssertionError';\n      this.actual = options.actual;\n      this.expected = options.expected;\n      this.operator = options.operator;\n\n      if (options.message) {\n        this.message = options.message;\n        this.generatedMessage = false;\n      } else {\n        this.message = getMessage(this);\n        this.generatedMessage = true;\n      }\n\n      var stackStartFunction = options.stackStartFunction || fail;\n\n      if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, stackStartFunction);\n      } else {\n        // non v8 browsers so we can have a stacktrace\n        var err = new Error();\n\n        if (err.stack) {\n          var out = err.stack; // try to strip useless frames\n\n          var fn_name = getName(stackStartFunction);\n          var idx = out.indexOf('\\n' + fn_name);\n\n          if (idx >= 0) {\n            // once we have located the function frame\n            // we need to strip out everything before it (and its line)\n            var next_line = out.indexOf('\\n', idx + 1);\n            out = out.substring(next_line + 1);\n          }\n\n          this.stack = out;\n        }\n      }\n    }; // assert.AssertionError instanceof Error\n\n\n    util$2.inherits(assert.AssertionError, Error);\n\n    function truncate(s, n) {\n      if (typeof s === 'string') {\n        return s.length < n ? s : s.slice(0, n);\n      } else {\n        return s;\n      }\n    }\n\n    function inspect(something) {\n      if (functionsHaveNames || !util$2.isFunction(something)) {\n        return util$2.inspect(something);\n      }\n\n      var rawname = getName(something);\n      var name = rawname ? ': ' + rawname : '';\n      return '[Function' + name + ']';\n    }\n\n    function getMessage(self) {\n      return truncate(inspect(self.actual), 128) + ' ' + self.operator + ' ' + truncate(inspect(self.expected), 128);\n    } // At present only the three keys mentioned above are used and\n    // understood by the spec. Implementations or sub modules can pass\n    // other keys to the AssertionError's constructor - they will be\n    // ignored.\n    // 3. All of the following functions must throw an AssertionError\n    // when a corresponding condition is not met, with a message that\n    // may be undefined if not provided.  All assertion methods provide\n    // both the actual and expected values to the assertion error for\n    // display purposes.\n\n\n    function fail(actual, expected, message, operator, stackStartFunction) {\n      throw new assert.AssertionError({\n        message: message,\n        actual: actual,\n        expected: expected,\n        operator: operator,\n        stackStartFunction: stackStartFunction\n      });\n    } // EXTENSION! allows for well behaved errors defined elsewhere.\n\n\n    assert.fail = fail; // 4. Pure assertion tests whether a value is truthy, as determined\n    // by !!guard.\n    // assert.ok(guard, message_opt);\n    // This statement is equivalent to assert.equal(true, !!guard,\n    // message_opt);. To test strictly for the value true, use\n    // assert.strictEqual(true, guard, message_opt);.\n\n    function ok(value, message) {\n      if (!value) fail(value, true, message, '==', assert.ok);\n    }\n\n    assert.ok = ok; // 5. The equality assertion tests shallow, coercive equality with\n    // ==.\n    // assert.equal(actual, expected, message_opt);\n\n    assert.equal = function equal(actual, expected, message) {\n      if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n    }; // 6. The non-equality assertion tests for whether two objects are not equal\n    // with != assert.notEqual(actual, expected, message_opt);\n\n\n    assert.notEqual = function notEqual(actual, expected, message) {\n      if (actual == expected) {\n        fail(actual, expected, message, '!=', assert.notEqual);\n      }\n    }; // 7. The equivalence assertion tests a deep equality relation.\n    // assert.deepEqual(actual, expected, message_opt);\n\n\n    assert.deepEqual = function deepEqual(actual, expected, message) {\n      if (!_deepEqual(actual, expected, false)) {\n        fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n      }\n    };\n\n    assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n      if (!_deepEqual(actual, expected, true)) {\n        fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);\n      }\n    };\n\n    function _deepEqual(actual, expected, strict, memos) {\n      // 7.1. All identical values are equivalent, as determined by ===.\n      if (actual === expected) {\n        return true;\n      } else if (isBuffer(actual) && isBuffer(expected)) {\n        return compare(actual, expected) === 0; // 7.2. If the expected value is a Date object, the actual value is\n        // equivalent if it is also a Date object that refers to the same time.\n      } else if (util$2.isDate(actual) && util$2.isDate(expected)) {\n        return actual.getTime() === expected.getTime(); // 7.3 If the expected value is a RegExp object, the actual value is\n        // equivalent if it is also a RegExp object with the same source and\n        // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n      } else if (util$2.isRegExp(actual) && util$2.isRegExp(expected)) {\n        return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase; // 7.4. Other pairs that do not both pass typeof value == 'object',\n        // equivalence is determined by ==.\n      } else if ((actual === null || typeof actual !== 'object') && (expected === null || typeof expected !== 'object')) {\n        return strict ? actual === expected : actual == expected; // If both values are instances of typed arrays, wrap their underlying\n        // ArrayBuffers in a Buffer each to increase performance\n        // This optimization requires the arrays to have the same type as checked by\n        // Object.prototype.toString (aka pToString). Never perform binary\n        // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n        // bit patterns are not identical.\n      } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {\n        return compare(new Uint8Array(actual.buffer), new Uint8Array(expected.buffer)) === 0; // 7.5 For all other Object pairs, including Array objects, equivalence is\n        // determined by having the same number of owned properties (as verified\n        // with Object.prototype.hasOwnProperty.call), the same set of keys\n        // (although not necessarily the same order), equivalent values for every\n        // corresponding key, and an identical 'prototype' property. Note: this\n        // accounts for both named and indexed properties on Arrays.\n      } else if (isBuffer(actual) !== isBuffer(expected)) {\n        return false;\n      } else {\n        memos = memos || {\n          actual: [],\n          expected: []\n        };\n        var actualIndex = memos.actual.indexOf(actual);\n\n        if (actualIndex !== -1) {\n          if (actualIndex === memos.expected.indexOf(expected)) {\n            return true;\n          }\n        }\n\n        memos.actual.push(actual);\n        memos.expected.push(expected);\n        return objEquiv(actual, expected, strict, memos);\n      }\n    }\n\n    function isArguments(object) {\n      return Object.prototype.toString.call(object) == '[object Arguments]';\n    }\n\n    function objEquiv(a, b, strict, actualVisitedObjects) {\n      if (a === null || a === undefined || b === null || b === undefined) return false; // if one is a primitive, the other must be same\n\n      if (util$2.isPrimitive(a) || util$2.isPrimitive(b)) return a === b;\n      if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;\n      var aIsArgs = isArguments(a);\n      var bIsArgs = isArguments(b);\n      if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;\n\n      if (aIsArgs) {\n        a = pSlice.call(a);\n        b = pSlice.call(b);\n        return _deepEqual(a, b, strict);\n      }\n\n      var ka = objectKeys(a);\n      var kb = objectKeys(b);\n      var key, i; // having the same number of owned properties (keys incorporates\n      // hasOwnProperty)\n\n      if (ka.length !== kb.length) return false; //the same set of keys (although not necessarily the same order),\n\n      ka.sort();\n      kb.sort(); //~~~cheap key test\n\n      for (i = ka.length - 1; i >= 0; i--) {\n        if (ka[i] !== kb[i]) return false;\n      } //equivalent values for every corresponding key, and\n      //~~~possibly expensive deep test\n\n\n      for (i = ka.length - 1; i >= 0; i--) {\n        key = ka[i];\n        if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects)) return false;\n      }\n\n      return true;\n    } // 8. The non-equivalence assertion tests for any deep inequality.\n    // assert.notDeepEqual(actual, expected, message_opt);\n\n\n    assert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n      if (_deepEqual(actual, expected, false)) {\n        fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n      }\n    };\n\n    assert.notDeepStrictEqual = notDeepStrictEqual;\n\n    function notDeepStrictEqual(actual, expected, message) {\n      if (_deepEqual(actual, expected, true)) {\n        fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n      }\n    } // 9. The strict equality assertion tests strict equality, as determined by ===.\n    // assert.strictEqual(actual, expected, message_opt);\n\n\n    assert.strictEqual = function strictEqual(actual, expected, message) {\n      if (actual !== expected) {\n        fail(actual, expected, message, '===', assert.strictEqual);\n      }\n    }; // 10. The strict non-equality assertion tests for strict inequality, as\n    // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\n\n    assert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n      if (actual === expected) {\n        fail(actual, expected, message, '!==', assert.notStrictEqual);\n      }\n    };\n\n    function expectedException(actual, expected) {\n      if (!actual || !expected) {\n        return false;\n      }\n\n      if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n        return expected.test(actual);\n      }\n\n      try {\n        if (actual instanceof expected) {\n          return true;\n        }\n      } catch (e) {// Ignore.  The instanceof check doesn't work for arrow functions.\n      }\n\n      if (Error.isPrototypeOf(expected)) {\n        return false;\n      }\n\n      return expected.call({}, actual) === true;\n    }\n\n    function _tryBlock(block) {\n      var error;\n\n      try {\n        block();\n      } catch (e) {\n        error = e;\n      }\n\n      return error;\n    }\n\n    function _throws(shouldThrow, block, expected, message) {\n      var actual;\n\n      if (typeof block !== 'function') {\n        throw new TypeError('\"block\" argument must be a function');\n      }\n\n      if (typeof expected === 'string') {\n        message = expected;\n        expected = null;\n      }\n\n      actual = _tryBlock(block);\n      message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');\n\n      if (shouldThrow && !actual) {\n        fail(actual, expected, 'Missing expected exception' + message);\n      }\n\n      var userProvidedMessage = typeof message === 'string';\n      var isUnwantedException = !shouldThrow && util$2.isError(actual);\n      var isUnexpectedException = !shouldThrow && actual && !expected;\n\n      if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {\n        fail(actual, expected, 'Got unwanted exception' + message);\n      }\n\n      if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {\n        throw actual;\n      }\n    } // 11. Expected to throw an error:\n    // assert.throws(block, Error_opt, message_opt);\n\n\n    assert.throws = function (block,\n    /*optional*/\n    error,\n    /*optional*/\n    message) {\n      _throws(true, block, error, message);\n    }; // EXTENSION! This is annoying to write outside this module.\n\n\n    assert.doesNotThrow = function (block,\n    /*optional*/\n    error,\n    /*optional*/\n    message) {\n      _throws(false, block, error, message);\n    };\n\n    assert.ifError = function (err) {\n      if (err) throw err;\n    }; // Expose a strict only variant of assert\n\n\n    function strict(value, message) {\n      if (!value) fail(value, true, message, '==', strict);\n    }\n\n    assert.strict = objectAssign(strict, assert, {\n      equal: assert.strictEqual,\n      deepEqual: assert.deepStrictEqual,\n      notEqual: assert.notStrictEqual,\n      notDeepEqual: assert.notDeepStrictEqual\n    });\n    assert.strict.strict = assert.strict;\n\n    var objectKeys = Object.keys || function (obj) {\n      var keys = [];\n\n      for (var key in obj) {\n        if (hasOwn.call(obj, key)) keys.push(key);\n      }\n\n      return keys;\n    };\n  }); // Base58 encoding/decoding\n  // Originally written by Mike Hearn for BitcoinJ\n  // Copyright (c) 2011 Google Inc\n  // Ported to JavaScript by Stefan Thomas\n  // Merged Buffer refactorings from base58-native by Stephen Pair\n  // Copyright (c) 2013 BitPay Inc\n\n  var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n  var ALPHABET_MAP = {};\n\n  for (var i = 0; i < ALPHABET.length; i++) {\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n  }\n\n  var BASE = 58;\n\n  function encode(buffer$$1) {\n    if (buffer$$1.length === 0) return '';\n    var i,\n        j,\n        digits = [0];\n\n    for (i = 0; i < buffer$$1.length; i++) {\n      for (j = 0; j < digits.length; j++) digits[j] <<= 8;\n\n      digits[0] += buffer$$1[i];\n      var carry = 0;\n\n      for (j = 0; j < digits.length; ++j) {\n        digits[j] += carry;\n        carry = digits[j] / BASE | 0;\n        digits[j] %= BASE;\n      }\n\n      while (carry) {\n        digits.push(carry % BASE);\n        carry = carry / BASE | 0;\n      }\n    } // deal with leading zeros\n\n\n    for (i = 0; buffer$$1[i] === 0 && i < buffer$$1.length - 1; i++) digits.push(0); // convert digits to a string\n\n\n    var stringOutput = \"\";\n\n    for (var i = digits.length - 1; i >= 0; i--) {\n      stringOutput = stringOutput + ALPHABET[digits[i]];\n    }\n\n    return stringOutput;\n  }\n\n  function decode(string) {\n    if (string.length === 0) return [];\n    var i,\n        j,\n        bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n      var c = string[i];\n      if (!(c in ALPHABET_MAP)) throw new Error('Non-base58 character');\n\n      for (j = 0; j < bytes.length; j++) bytes[j] *= BASE;\n\n      bytes[0] += ALPHABET_MAP[c];\n      var carry = 0;\n\n      for (j = 0; j < bytes.length; ++j) {\n        bytes[j] += carry;\n        carry = bytes[j] >> 8;\n        bytes[j] &= 0xff;\n      }\n\n      while (carry) {\n        bytes.push(carry & 0xff);\n        carry >>= 8;\n      }\n    } // deal with leading zeros\n\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++) bytes.push(0);\n\n    return bytes.reverse();\n  }\n\n  var bs58 = {\n    encode: encode,\n    decode: decode\n  };\n\n  function encode$1(payload, version) {\n    if (Array.isArray(payload) || payload instanceof Uint8Array) {\n      payload = new Buffer$d(payload);\n    }\n\n    var buf;\n\n    if (version != null) {\n      if (typeof version === 'number') {\n        version = new Buffer$d([version]);\n      }\n\n      buf = Buffer$d.concat([version, payload]);\n    } else {\n      buf = payload;\n    }\n\n    var checksum = sha256x2(buf).slice(0, 4);\n    var result = Buffer$d.concat([buf, checksum]);\n    return bs58.encode(result);\n  }\n\n  function decode$1(base58str, version) {\n    var arr = bs58.decode(base58str);\n    var buf = new Buffer$d(arr);\n    var versionLength;\n\n    if (version == null) {\n      versionLength = 0;\n    } else {\n      if (typeof version === 'number') version = new Buffer$d([version]);\n      versionLength = version.length;\n      var versionCompare = buf.slice(0, versionLength);\n\n      if (versionCompare.toString('hex') !== version.toString('hex')) {\n        throw new Error('Invalid version');\n      }\n    }\n\n    var checksum = buf.slice(-4);\n    var endPos = buf.length - 4;\n    var bytes = buf.slice(0, endPos);\n    var newChecksum = sha256x2(bytes).slice(0, 4);\n\n    if (checksum.toString('hex') !== newChecksum.toString('hex')) {\n      throw new Error('Invalid checksum');\n    }\n\n    return bytes.slice(versionLength);\n  }\n\n  function isValid(base58str, version) {\n    try {\n      decode$1(base58str, version);\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function createEncoder(version) {\n    return function (payload) {\n      return encode$1(payload, version);\n    };\n  }\n\n  function createDecoder(version) {\n    return function (base58str) {\n      return decode$1(base58str, version);\n    };\n  }\n\n  function createValidator(version) {\n    return function (base58str) {\n      return isValid(base58str, version);\n    };\n  }\n\n  function sha256x2(buffer$$1) {\n    var sha = browser('sha256').update(buffer$$1).digest();\n    return browser('sha256').update(sha).digest();\n  }\n\n  var coinstring = {\n    encode: encode$1,\n    decode: decode$1,\n    isValid: isValid,\n    createEncoder: createEncoder,\n    createDecoder: createDecoder,\n    createValidator: createValidator\n  };\n  var toString$1 = Object.prototype.toString; // TypeError\n\n  var isArray$1 = function (value, message) {\n    if (!Array.isArray(value)) throw TypeError(message);\n  };\n\n  var isBoolean = function (value, message) {\n    if (toString$1.call(value) !== '[object Boolean]') throw TypeError(message);\n  };\n\n  var isBuffer$1 = function (value, message) {\n    if (!isBuffer(value)) throw TypeError(message);\n  };\n\n  var isFunction = function (value, message) {\n    if (toString$1.call(value) !== '[object Function]') throw TypeError(message);\n  };\n\n  var isNumber = function (value, message) {\n    if (toString$1.call(value) !== '[object Number]') throw TypeError(message);\n  };\n\n  var isObject = function (value, message) {\n    if (toString$1.call(value) !== '[object Object]') throw TypeError(message);\n  }; // RangeError\n\n\n  var isBufferLength = function (buffer$$1, length, message) {\n    if (buffer$$1.length !== length) throw RangeError(message);\n  };\n\n  var isBufferLength2 = function (buffer$$1, length1, length2, message) {\n    if (buffer$$1.length !== length1 && buffer$$1.length !== length2) throw RangeError(message);\n  };\n\n  var isLengthGTZero = function (value, message) {\n    if (value.length === 0) throw RangeError(message);\n  };\n\n  var isNumberInInterval = function (number, x, y, message) {\n    if (number <= x || number >= y) throw RangeError(message);\n  };\n\n  var assert = {\n    isArray: isArray$1,\n    isBoolean: isBoolean,\n    isBuffer: isBuffer$1,\n    isFunction: isFunction,\n    isNumber: isNumber,\n    isObject: isObject,\n    isBufferLength: isBufferLength,\n    isBufferLength2: isBufferLength2,\n    isLengthGTZero: isLengthGTZero,\n    isNumberInInterval: isNumberInInterval\n  }; // Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki\n  // Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n  // NOTE: SIGHASH byte ignored AND restricted, truncate before use\n\n  var Buffer$h = safeBuffer.Buffer;\n\n  function check(buffer$$1) {\n    if (buffer$$1.length < 8) return false;\n    if (buffer$$1.length > 72) return false;\n    if (buffer$$1[0] !== 0x30) return false;\n    if (buffer$$1[1] !== buffer$$1.length - 2) return false;\n    if (buffer$$1[2] !== 0x02) return false;\n    var lenR = buffer$$1[3];\n    if (lenR === 0) return false;\n    if (5 + lenR >= buffer$$1.length) return false;\n    if (buffer$$1[4 + lenR] !== 0x02) return false;\n    var lenS = buffer$$1[5 + lenR];\n    if (lenS === 0) return false;\n    if (6 + lenR + lenS !== buffer$$1.length) return false;\n    if (buffer$$1[4] & 0x80) return false;\n    if (lenR > 1 && buffer$$1[4] === 0x00 && !(buffer$$1[5] & 0x80)) return false;\n    if (buffer$$1[lenR + 6] & 0x80) return false;\n    if (lenS > 1 && buffer$$1[lenR + 6] === 0x00 && !(buffer$$1[lenR + 7] & 0x80)) return false;\n    return true;\n  }\n\n  function decode$2(buffer$$1) {\n    if (buffer$$1.length < 8) throw new Error('DER sequence length is too short');\n    if (buffer$$1.length > 72) throw new Error('DER sequence length is too long');\n    if (buffer$$1[0] !== 0x30) throw new Error('Expected DER sequence');\n    if (buffer$$1[1] !== buffer$$1.length - 2) throw new Error('DER sequence length is invalid');\n    if (buffer$$1[2] !== 0x02) throw new Error('Expected DER integer');\n    var lenR = buffer$$1[3];\n    if (lenR === 0) throw new Error('R length is zero');\n    if (5 + lenR >= buffer$$1.length) throw new Error('R length is too long');\n    if (buffer$$1[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)');\n    var lenS = buffer$$1[5 + lenR];\n    if (lenS === 0) throw new Error('S length is zero');\n    if (6 + lenR + lenS !== buffer$$1.length) throw new Error('S length is invalid');\n    if (buffer$$1[4] & 0x80) throw new Error('R value is negative');\n    if (lenR > 1 && buffer$$1[4] === 0x00 && !(buffer$$1[5] & 0x80)) throw new Error('R value excessively padded');\n    if (buffer$$1[lenR + 6] & 0x80) throw new Error('S value is negative');\n    if (lenS > 1 && buffer$$1[lenR + 6] === 0x00 && !(buffer$$1[lenR + 7] & 0x80)) throw new Error('S value excessively padded'); // non-BIP66 - extract R, S values\n\n    return {\n      r: buffer$$1.slice(4, 4 + lenR),\n      s: buffer$$1.slice(6 + lenR)\n    };\n  }\n  /*\n   * Expects r and s to be positive DER integers.\n   *\n   * The DER format uses the most significant bit as a sign bit (& 0x80).\n   * If the significant bit is set AND the integer is positive, a 0x00 is prepended.\n   *\n   * Examples:\n   *\n   *      0 =>     0x00\n   *      1 =>     0x01\n   *     -1 =>     0xff\n   *    127 =>     0x7f\n   *   -127 =>     0x81\n   *    128 =>   0x0080\n   *   -128 =>     0x80\n   *    255 =>   0x00ff\n   *   -255 =>   0xff01\n   *  16300 =>   0x3fac\n   * -16300 =>   0xc054\n   *  62300 => 0x00f35c\n   * -62300 => 0xff0ca4\n  */\n\n\n  function encode$2(r, s) {\n    var lenR = r.length;\n    var lenS = s.length;\n    if (lenR === 0) throw new Error('R length is zero');\n    if (lenS === 0) throw new Error('S length is zero');\n    if (lenR > 33) throw new Error('R length is too long');\n    if (lenS > 33) throw new Error('S length is too long');\n    if (r[0] & 0x80) throw new Error('R value is negative');\n    if (s[0] & 0x80) throw new Error('S value is negative');\n    if (lenR > 1 && r[0] === 0x00 && !(r[1] & 0x80)) throw new Error('R value excessively padded');\n    if (lenS > 1 && s[0] === 0x00 && !(s[1] & 0x80)) throw new Error('S value excessively padded');\n    var signature = Buffer$h.allocUnsafe(6 + lenR + lenS); // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n\n    signature[0] = 0x30;\n    signature[1] = signature.length - 2;\n    signature[2] = 0x02;\n    signature[3] = r.length;\n    r.copy(signature, 4);\n    signature[4 + lenR] = 0x02;\n    signature[5 + lenR] = s.length;\n    s.copy(signature, 6 + lenR);\n    return signature;\n  }\n\n  var bip66 = {\n    check: check,\n    decode: decode$2,\n    encode: encode$2\n  };\n  var Buffer$i = safeBuffer.Buffer;\n  var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer$i.from([// begin\n  0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20, // private key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // middle\n  0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x21, 0x02, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00, // public key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\n  var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer$i.from([// begin\n  0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20, // private key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // middle\n  0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x41, 0x04, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0E, 0x11, 0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10, 0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00, // public key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\n\n  var privateKeyExport = function (privateKey, publicKey, compressed) {\n    var result = Buffer$i.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);\n    privateKey.copy(result, compressed ? 8 : 9);\n    publicKey.copy(result, compressed ? 181 : 214);\n    return result;\n  };\n\n  var privateKeyImport = function (privateKey) {\n    var length = privateKey.length; // sequence header\n\n    var index = 0;\n    if (length < index + 1 || privateKey[index] !== 0x30) return;\n    index += 1; // sequence length constructor\n\n    if (length < index + 1 || !(privateKey[index] & 0x80)) return;\n    var lenb = privateKey[index] & 0x7f;\n    index += 1;\n    if (lenb < 1 || lenb > 2) return;\n    if (length < index + lenb) return; // sequence length\n\n    var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);\n    index += lenb;\n    if (length < index + len) return; // sequence element 0: version number (=1)\n\n    if (length < index + 3 || privateKey[index] !== 0x02 || privateKey[index + 1] !== 0x01 || privateKey[index + 2] !== 0x01) {\n      return;\n    }\n\n    index += 3; // sequence element 1: octet string, up to 32 bytes\n\n    if (length < index + 2 || privateKey[index] !== 0x04 || privateKey[index + 1] > 0x20 || length < index + 2 + privateKey[index + 1]) {\n      return;\n    }\n\n    return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);\n  };\n\n  var signatureExport = function (sigObj) {\n    var r = Buffer$i.concat([Buffer$i.from([0]), sigObj.r]);\n\n    for (var lenR = 33, posR = 0; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n    var s = Buffer$i.concat([Buffer$i.from([0]), sigObj.s]);\n\n    for (var lenS = 33, posS = 0; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n    return bip66.encode(r.slice(posR), s.slice(posS));\n  };\n\n  var signatureImport = function (sig) {\n    var r = Buffer$i.alloc(32, 0);\n    var s = Buffer$i.alloc(32, 0);\n\n    try {\n      var sigObj = bip66.decode(sig);\n      if (sigObj.r.length === 33 && sigObj.r[0] === 0x00) sigObj.r = sigObj.r.slice(1);\n      if (sigObj.r.length > 32) throw new Error('R length is too long');\n      if (sigObj.s.length === 33 && sigObj.s[0] === 0x00) sigObj.s = sigObj.s.slice(1);\n      if (sigObj.s.length > 32) throw new Error('S length is too long');\n    } catch (err) {\n      return;\n    }\n\n    sigObj.r.copy(r, 32 - sigObj.r.length);\n    sigObj.s.copy(s, 32 - sigObj.s.length);\n    return {\n      r: r,\n      s: s\n    };\n  };\n\n  var signatureImportLax = function (sig) {\n    var r = Buffer$i.alloc(32, 0);\n    var s = Buffer$i.alloc(32, 0);\n    var length = sig.length;\n    var index = 0; // sequence tag byte\n\n    if (sig[index++] !== 0x30) return; // sequence length byte\n\n    var lenbyte = sig[index++];\n\n    if (lenbyte & 0x80) {\n      index += lenbyte - 0x80;\n      if (index > length) return;\n    } // sequence tag byte for r\n\n\n    if (sig[index++] !== 0x02) return; // length for r\n\n    var rlen = sig[index++];\n\n    if (rlen & 0x80) {\n      lenbyte = rlen - 0x80;\n      if (index + lenbyte > length) return;\n\n      for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);\n\n      for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) rlen = (rlen << 8) + sig[index];\n    }\n\n    if (rlen > length - index) return;\n    var rindex = index;\n    index += rlen; // sequence tag byte for s\n\n    if (sig[index++] !== 0x02) return; // length for s\n\n    var slen = sig[index++];\n\n    if (slen & 0x80) {\n      lenbyte = slen - 0x80;\n      if (index + lenbyte > length) return;\n\n      for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);\n\n      for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) slen = (slen << 8) + sig[index];\n    }\n\n    if (slen > length - index) return;\n    var sindex = index;\n    index += slen; // ignore leading zeros in r\n\n    for (; rlen > 0 && sig[rindex] === 0x00; rlen -= 1, rindex += 1); // copy r value\n\n\n    if (rlen > 32) return;\n    var rvalue = sig.slice(rindex, rindex + rlen);\n    rvalue.copy(r, 32 - rvalue.length); // ignore leading zeros in s\n\n    for (; slen > 0 && sig[sindex] === 0x00; slen -= 1, sindex += 1); // copy s value\n\n\n    if (slen > 32) return;\n    var svalue = sig.slice(sindex, sindex + slen);\n    svalue.copy(s, 32 - svalue.length);\n    return {\n      r: r,\n      s: s\n    };\n  };\n\n  var der = {\n    privateKeyExport: privateKeyExport,\n    privateKeyImport: privateKeyImport,\n    signatureExport: signatureExport,\n    signatureImport: signatureImport,\n    signatureImportLax: signatureImportLax\n  };\n  var COMPRESSED_TYPE_INVALID = \"compressed should be a boolean\";\n  var EC_PRIVATE_KEY_TYPE_INVALID = \"private key should be a Buffer\";\n  var EC_PRIVATE_KEY_LENGTH_INVALID = \"private key length is invalid\";\n  var EC_PRIVATE_KEY_RANGE_INVALID = \"private key range is invalid\";\n  var EC_PRIVATE_KEY_TWEAK_ADD_FAIL = \"tweak out of range or resulting private key is invalid\";\n  var EC_PRIVATE_KEY_TWEAK_MUL_FAIL = \"tweak out of range\";\n  var EC_PRIVATE_KEY_EXPORT_DER_FAIL = \"couldn't export to DER format\";\n  var EC_PRIVATE_KEY_IMPORT_DER_FAIL = \"couldn't import from DER format\";\n  var EC_PUBLIC_KEYS_TYPE_INVALID = \"public keys should be an Array\";\n  var EC_PUBLIC_KEYS_LENGTH_INVALID = \"public keys Array should have at least 1 element\";\n  var EC_PUBLIC_KEY_TYPE_INVALID = \"public key should be a Buffer\";\n  var EC_PUBLIC_KEY_LENGTH_INVALID = \"public key length is invalid\";\n  var EC_PUBLIC_KEY_PARSE_FAIL = \"the public key could not be parsed or is invalid\";\n  var EC_PUBLIC_KEY_CREATE_FAIL = \"private was invalid, try again\";\n  var EC_PUBLIC_KEY_TWEAK_ADD_FAIL = \"tweak out of range or resulting public key is invalid\";\n  var EC_PUBLIC_KEY_TWEAK_MUL_FAIL = \"tweak out of range\";\n  var EC_PUBLIC_KEY_COMBINE_FAIL = \"the sum of the public keys is not valid\";\n  var ECDH_FAIL = \"scalar was invalid (zero or overflow)\";\n  var ECDSA_SIGNATURE_TYPE_INVALID = \"signature should be a Buffer\";\n  var ECDSA_SIGNATURE_LENGTH_INVALID = \"signature length is invalid\";\n  var ECDSA_SIGNATURE_PARSE_FAIL = \"couldn't parse signature\";\n  var ECDSA_SIGNATURE_PARSE_DER_FAIL = \"couldn't parse DER signature\";\n  var ECDSA_SIGNATURE_SERIALIZE_DER_FAIL = \"couldn't serialize signature to DER format\";\n  var ECDSA_SIGN_FAIL = \"nonce generation function failed or private key is invalid\";\n  var ECDSA_RECOVER_FAIL = \"couldn't recover public key from signature\";\n  var MSG32_TYPE_INVALID = \"message should be a Buffer\";\n  var MSG32_LENGTH_INVALID = \"message length is invalid\";\n  var OPTIONS_TYPE_INVALID = \"options should be an Object\";\n  var OPTIONS_DATA_TYPE_INVALID = \"options.data should be a Buffer\";\n  var OPTIONS_DATA_LENGTH_INVALID = \"options.data length is invalid\";\n  var OPTIONS_NONCEFN_TYPE_INVALID = \"options.noncefn should be a Function\";\n  var RECOVERY_ID_TYPE_INVALID = \"recovery should be a Number\";\n  var RECOVERY_ID_VALUE_INVALID = \"recovery should have value between -1 and 4\";\n  var TWEAK_TYPE_INVALID = \"tweak should be a Buffer\";\n  var TWEAK_LENGTH_INVALID = \"tweak length is invalid\";\n  var messages = {\n    COMPRESSED_TYPE_INVALID: COMPRESSED_TYPE_INVALID,\n    EC_PRIVATE_KEY_TYPE_INVALID: EC_PRIVATE_KEY_TYPE_INVALID,\n    EC_PRIVATE_KEY_LENGTH_INVALID: EC_PRIVATE_KEY_LENGTH_INVALID,\n    EC_PRIVATE_KEY_RANGE_INVALID: EC_PRIVATE_KEY_RANGE_INVALID,\n    EC_PRIVATE_KEY_TWEAK_ADD_FAIL: EC_PRIVATE_KEY_TWEAK_ADD_FAIL,\n    EC_PRIVATE_KEY_TWEAK_MUL_FAIL: EC_PRIVATE_KEY_TWEAK_MUL_FAIL,\n    EC_PRIVATE_KEY_EXPORT_DER_FAIL: EC_PRIVATE_KEY_EXPORT_DER_FAIL,\n    EC_PRIVATE_KEY_IMPORT_DER_FAIL: EC_PRIVATE_KEY_IMPORT_DER_FAIL,\n    EC_PUBLIC_KEYS_TYPE_INVALID: EC_PUBLIC_KEYS_TYPE_INVALID,\n    EC_PUBLIC_KEYS_LENGTH_INVALID: EC_PUBLIC_KEYS_LENGTH_INVALID,\n    EC_PUBLIC_KEY_TYPE_INVALID: EC_PUBLIC_KEY_TYPE_INVALID,\n    EC_PUBLIC_KEY_LENGTH_INVALID: EC_PUBLIC_KEY_LENGTH_INVALID,\n    EC_PUBLIC_KEY_PARSE_FAIL: EC_PUBLIC_KEY_PARSE_FAIL,\n    EC_PUBLIC_KEY_CREATE_FAIL: EC_PUBLIC_KEY_CREATE_FAIL,\n    EC_PUBLIC_KEY_TWEAK_ADD_FAIL: EC_PUBLIC_KEY_TWEAK_ADD_FAIL,\n    EC_PUBLIC_KEY_TWEAK_MUL_FAIL: EC_PUBLIC_KEY_TWEAK_MUL_FAIL,\n    EC_PUBLIC_KEY_COMBINE_FAIL: EC_PUBLIC_KEY_COMBINE_FAIL,\n    ECDH_FAIL: ECDH_FAIL,\n    ECDSA_SIGNATURE_TYPE_INVALID: ECDSA_SIGNATURE_TYPE_INVALID,\n    ECDSA_SIGNATURE_LENGTH_INVALID: ECDSA_SIGNATURE_LENGTH_INVALID,\n    ECDSA_SIGNATURE_PARSE_FAIL: ECDSA_SIGNATURE_PARSE_FAIL,\n    ECDSA_SIGNATURE_PARSE_DER_FAIL: ECDSA_SIGNATURE_PARSE_DER_FAIL,\n    ECDSA_SIGNATURE_SERIALIZE_DER_FAIL: ECDSA_SIGNATURE_SERIALIZE_DER_FAIL,\n    ECDSA_SIGN_FAIL: ECDSA_SIGN_FAIL,\n    ECDSA_RECOVER_FAIL: ECDSA_RECOVER_FAIL,\n    MSG32_TYPE_INVALID: MSG32_TYPE_INVALID,\n    MSG32_LENGTH_INVALID: MSG32_LENGTH_INVALID,\n    OPTIONS_TYPE_INVALID: OPTIONS_TYPE_INVALID,\n    OPTIONS_DATA_TYPE_INVALID: OPTIONS_DATA_TYPE_INVALID,\n    OPTIONS_DATA_LENGTH_INVALID: OPTIONS_DATA_LENGTH_INVALID,\n    OPTIONS_NONCEFN_TYPE_INVALID: OPTIONS_NONCEFN_TYPE_INVALID,\n    RECOVERY_ID_TYPE_INVALID: RECOVERY_ID_TYPE_INVALID,\n    RECOVERY_ID_VALUE_INVALID: RECOVERY_ID_VALUE_INVALID,\n    TWEAK_TYPE_INVALID: TWEAK_TYPE_INVALID,\n    TWEAK_LENGTH_INVALID: TWEAK_LENGTH_INVALID\n  };\n  var messages$1 =\n  /*#__PURE__*/\n  Object.freeze({\n    COMPRESSED_TYPE_INVALID: COMPRESSED_TYPE_INVALID,\n    EC_PRIVATE_KEY_TYPE_INVALID: EC_PRIVATE_KEY_TYPE_INVALID,\n    EC_PRIVATE_KEY_LENGTH_INVALID: EC_PRIVATE_KEY_LENGTH_INVALID,\n    EC_PRIVATE_KEY_RANGE_INVALID: EC_PRIVATE_KEY_RANGE_INVALID,\n    EC_PRIVATE_KEY_TWEAK_ADD_FAIL: EC_PRIVATE_KEY_TWEAK_ADD_FAIL,\n    EC_PRIVATE_KEY_TWEAK_MUL_FAIL: EC_PRIVATE_KEY_TWEAK_MUL_FAIL,\n    EC_PRIVATE_KEY_EXPORT_DER_FAIL: EC_PRIVATE_KEY_EXPORT_DER_FAIL,\n    EC_PRIVATE_KEY_IMPORT_DER_FAIL: EC_PRIVATE_KEY_IMPORT_DER_FAIL,\n    EC_PUBLIC_KEYS_TYPE_INVALID: EC_PUBLIC_KEYS_TYPE_INVALID,\n    EC_PUBLIC_KEYS_LENGTH_INVALID: EC_PUBLIC_KEYS_LENGTH_INVALID,\n    EC_PUBLIC_KEY_TYPE_INVALID: EC_PUBLIC_KEY_TYPE_INVALID,\n    EC_PUBLIC_KEY_LENGTH_INVALID: EC_PUBLIC_KEY_LENGTH_INVALID,\n    EC_PUBLIC_KEY_PARSE_FAIL: EC_PUBLIC_KEY_PARSE_FAIL,\n    EC_PUBLIC_KEY_CREATE_FAIL: EC_PUBLIC_KEY_CREATE_FAIL,\n    EC_PUBLIC_KEY_TWEAK_ADD_FAIL: EC_PUBLIC_KEY_TWEAK_ADD_FAIL,\n    EC_PUBLIC_KEY_TWEAK_MUL_FAIL: EC_PUBLIC_KEY_TWEAK_MUL_FAIL,\n    EC_PUBLIC_KEY_COMBINE_FAIL: EC_PUBLIC_KEY_COMBINE_FAIL,\n    ECDH_FAIL: ECDH_FAIL,\n    ECDSA_SIGNATURE_TYPE_INVALID: ECDSA_SIGNATURE_TYPE_INVALID,\n    ECDSA_SIGNATURE_LENGTH_INVALID: ECDSA_SIGNATURE_LENGTH_INVALID,\n    ECDSA_SIGNATURE_PARSE_FAIL: ECDSA_SIGNATURE_PARSE_FAIL,\n    ECDSA_SIGNATURE_PARSE_DER_FAIL: ECDSA_SIGNATURE_PARSE_DER_FAIL,\n    ECDSA_SIGNATURE_SERIALIZE_DER_FAIL: ECDSA_SIGNATURE_SERIALIZE_DER_FAIL,\n    ECDSA_SIGN_FAIL: ECDSA_SIGN_FAIL,\n    ECDSA_RECOVER_FAIL: ECDSA_RECOVER_FAIL,\n    MSG32_TYPE_INVALID: MSG32_TYPE_INVALID,\n    MSG32_LENGTH_INVALID: MSG32_LENGTH_INVALID,\n    OPTIONS_TYPE_INVALID: OPTIONS_TYPE_INVALID,\n    OPTIONS_DATA_TYPE_INVALID: OPTIONS_DATA_TYPE_INVALID,\n    OPTIONS_DATA_LENGTH_INVALID: OPTIONS_DATA_LENGTH_INVALID,\n    OPTIONS_NONCEFN_TYPE_INVALID: OPTIONS_NONCEFN_TYPE_INVALID,\n    RECOVERY_ID_TYPE_INVALID: RECOVERY_ID_TYPE_INVALID,\n    RECOVERY_ID_VALUE_INVALID: RECOVERY_ID_VALUE_INVALID,\n    TWEAK_TYPE_INVALID: TWEAK_TYPE_INVALID,\n    TWEAK_LENGTH_INVALID: TWEAK_LENGTH_INVALID,\n    default: messages\n  });\n  var messages$2 = getCjsExportFromNamespace(messages$1);\n\n  function initCompressedValue(value, defaultValue) {\n    if (value === undefined) return defaultValue;\n    assert.isBoolean(value, messages$2.COMPRESSED_TYPE_INVALID);\n    return value;\n  }\n\n  var lib = function (secp256k1) {\n    return {\n      privateKeyVerify: function (privateKey) {\n        assert.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);\n        return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey);\n      },\n      privateKeyExport: function (privateKey, compressed) {\n        assert.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);\n        assert.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);\n        compressed = initCompressedValue(compressed, true);\n        var publicKey = secp256k1.privateKeyExport(privateKey, compressed);\n        return der.privateKeyExport(privateKey, publicKey, compressed);\n      },\n      privateKeyImport: function (privateKey) {\n        assert.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);\n        privateKey = der.privateKeyImport(privateKey);\n        if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey;\n        throw new Error(messages$2.EC_PRIVATE_KEY_IMPORT_DER_FAIL);\n      },\n      privateKeyNegate: function (privateKey) {\n        assert.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);\n        assert.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);\n        return secp256k1.privateKeyNegate(privateKey);\n      },\n      privateKeyModInverse: function (privateKey) {\n        assert.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);\n        assert.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);\n        return secp256k1.privateKeyModInverse(privateKey);\n      },\n      privateKeyTweakAdd: function (privateKey, tweak) {\n        assert.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);\n        assert.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);\n        assert.isBuffer(tweak, messages$2.TWEAK_TYPE_INVALID);\n        assert.isBufferLength(tweak, 32, messages$2.TWEAK_LENGTH_INVALID);\n        return secp256k1.privateKeyTweakAdd(privateKey, tweak);\n      },\n      privateKeyTweakMul: function (privateKey, tweak) {\n        assert.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);\n        assert.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);\n        assert.isBuffer(tweak, messages$2.TWEAK_TYPE_INVALID);\n        assert.isBufferLength(tweak, 32, messages$2.TWEAK_LENGTH_INVALID);\n        return secp256k1.privateKeyTweakMul(privateKey, tweak);\n      },\n      publicKeyCreate: function (privateKey, compressed) {\n        assert.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);\n        assert.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);\n        compressed = initCompressedValue(compressed, true);\n        return secp256k1.publicKeyCreate(privateKey, compressed);\n      },\n      publicKeyConvert: function (publicKey, compressed) {\n        assert.isBuffer(publicKey, messages$2.EC_PUBLIC_KEY_TYPE_INVALID);\n        assert.isBufferLength2(publicKey, 33, 65, messages$2.EC_PUBLIC_KEY_LENGTH_INVALID);\n        compressed = initCompressedValue(compressed, true);\n        return secp256k1.publicKeyConvert(publicKey, compressed);\n      },\n      publicKeyVerify: function (publicKey) {\n        assert.isBuffer(publicKey, messages$2.EC_PUBLIC_KEY_TYPE_INVALID);\n        return secp256k1.publicKeyVerify(publicKey);\n      },\n      publicKeyTweakAdd: function (publicKey, tweak, compressed) {\n        assert.isBuffer(publicKey, messages$2.EC_PUBLIC_KEY_TYPE_INVALID);\n        assert.isBufferLength2(publicKey, 33, 65, messages$2.EC_PUBLIC_KEY_LENGTH_INVALID);\n        assert.isBuffer(tweak, messages$2.TWEAK_TYPE_INVALID);\n        assert.isBufferLength(tweak, 32, messages$2.TWEAK_LENGTH_INVALID);\n        compressed = initCompressedValue(compressed, true);\n        return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed);\n      },\n      publicKeyTweakMul: function (publicKey, tweak, compressed) {\n        assert.isBuffer(publicKey, messages$2.EC_PUBLIC_KEY_TYPE_INVALID);\n        assert.isBufferLength2(publicKey, 33, 65, messages$2.EC_PUBLIC_KEY_LENGTH_INVALID);\n        assert.isBuffer(tweak, messages$2.TWEAK_TYPE_INVALID);\n        assert.isBufferLength(tweak, 32, messages$2.TWEAK_LENGTH_INVALID);\n        compressed = initCompressedValue(compressed, true);\n        return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed);\n      },\n      publicKeyCombine: function (publicKeys, compressed) {\n        assert.isArray(publicKeys, messages$2.EC_PUBLIC_KEYS_TYPE_INVALID);\n        assert.isLengthGTZero(publicKeys, messages$2.EC_PUBLIC_KEYS_LENGTH_INVALID);\n\n        for (var i = 0; i < publicKeys.length; ++i) {\n          assert.isBuffer(publicKeys[i], messages$2.EC_PUBLIC_KEY_TYPE_INVALID);\n          assert.isBufferLength2(publicKeys[i], 33, 65, messages$2.EC_PUBLIC_KEY_LENGTH_INVALID);\n        }\n\n        compressed = initCompressedValue(compressed, true);\n        return secp256k1.publicKeyCombine(publicKeys, compressed);\n      },\n      signatureNormalize: function (signature) {\n        assert.isBuffer(signature, messages$2.ECDSA_SIGNATURE_TYPE_INVALID);\n        assert.isBufferLength(signature, 64, messages$2.ECDSA_SIGNATURE_LENGTH_INVALID);\n        return secp256k1.signatureNormalize(signature);\n      },\n      signatureExport: function (signature) {\n        assert.isBuffer(signature, messages$2.ECDSA_SIGNATURE_TYPE_INVALID);\n        assert.isBufferLength(signature, 64, messages$2.ECDSA_SIGNATURE_LENGTH_INVALID);\n        var sigObj = secp256k1.signatureExport(signature);\n        return der.signatureExport(sigObj);\n      },\n      signatureImport: function (sig) {\n        assert.isBuffer(sig, messages$2.ECDSA_SIGNATURE_TYPE_INVALID);\n        assert.isLengthGTZero(sig, messages$2.ECDSA_SIGNATURE_LENGTH_INVALID);\n        var sigObj = der.signatureImport(sig);\n        if (sigObj) return secp256k1.signatureImport(sigObj);\n        throw new Error(messages$2.ECDSA_SIGNATURE_PARSE_DER_FAIL);\n      },\n      signatureImportLax: function (sig) {\n        assert.isBuffer(sig, messages$2.ECDSA_SIGNATURE_TYPE_INVALID);\n        assert.isLengthGTZero(sig, messages$2.ECDSA_SIGNATURE_LENGTH_INVALID);\n        var sigObj = der.signatureImportLax(sig);\n        if (sigObj) return secp256k1.signatureImport(sigObj);\n        throw new Error(messages$2.ECDSA_SIGNATURE_PARSE_DER_FAIL);\n      },\n      sign: function (message, privateKey, options) {\n        assert.isBuffer(message, messages$2.MSG32_TYPE_INVALID);\n        assert.isBufferLength(message, 32, messages$2.MSG32_LENGTH_INVALID);\n        assert.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);\n        assert.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);\n        var data = null;\n        var noncefn = null;\n\n        if (options !== undefined) {\n          assert.isObject(options, messages$2.OPTIONS_TYPE_INVALID);\n\n          if (options.data !== undefined) {\n            assert.isBuffer(options.data, messages$2.OPTIONS_DATA_TYPE_INVALID);\n            assert.isBufferLength(options.data, 32, messages$2.OPTIONS_DATA_LENGTH_INVALID);\n            data = options.data;\n          }\n\n          if (options.noncefn !== undefined) {\n            assert.isFunction(options.noncefn, messages$2.OPTIONS_NONCEFN_TYPE_INVALID);\n            noncefn = options.noncefn;\n          }\n        }\n\n        return secp256k1.sign(message, privateKey, noncefn, data);\n      },\n      verify: function (message, signature, publicKey) {\n        assert.isBuffer(message, messages$2.MSG32_TYPE_INVALID);\n        assert.isBufferLength(message, 32, messages$2.MSG32_LENGTH_INVALID);\n        assert.isBuffer(signature, messages$2.ECDSA_SIGNATURE_TYPE_INVALID);\n        assert.isBufferLength(signature, 64, messages$2.ECDSA_SIGNATURE_LENGTH_INVALID);\n        assert.isBuffer(publicKey, messages$2.EC_PUBLIC_KEY_TYPE_INVALID);\n        assert.isBufferLength2(publicKey, 33, 65, messages$2.EC_PUBLIC_KEY_LENGTH_INVALID);\n        return secp256k1.verify(message, signature, publicKey);\n      },\n      recover: function (message, signature, recovery, compressed) {\n        assert.isBuffer(message, messages$2.MSG32_TYPE_INVALID);\n        assert.isBufferLength(message, 32, messages$2.MSG32_LENGTH_INVALID);\n        assert.isBuffer(signature, messages$2.ECDSA_SIGNATURE_TYPE_INVALID);\n        assert.isBufferLength(signature, 64, messages$2.ECDSA_SIGNATURE_LENGTH_INVALID);\n        assert.isNumber(recovery, messages$2.RECOVERY_ID_TYPE_INVALID);\n        assert.isNumberInInterval(recovery, -1, 4, messages$2.RECOVERY_ID_VALUE_INVALID);\n        compressed = initCompressedValue(compressed, true);\n        return secp256k1.recover(message, signature, recovery, compressed);\n      },\n      ecdh: function (publicKey, privateKey) {\n        assert.isBuffer(publicKey, messages$2.EC_PUBLIC_KEY_TYPE_INVALID);\n        assert.isBufferLength2(publicKey, 33, 65, messages$2.EC_PUBLIC_KEY_LENGTH_INVALID);\n        assert.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);\n        assert.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);\n        return secp256k1.ecdh(publicKey, privateKey);\n      },\n      ecdhUnsafe: function (publicKey, privateKey, compressed) {\n        assert.isBuffer(publicKey, messages$2.EC_PUBLIC_KEY_TYPE_INVALID);\n        assert.isBufferLength2(publicKey, 33, 65, messages$2.EC_PUBLIC_KEY_LENGTH_INVALID);\n        assert.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);\n        assert.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);\n        compressed = initCompressedValue(compressed, true);\n        return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed);\n      }\n    };\n  };\n\n  var require$$0 = {};\n  var bn = createCommonjsModule(function (module) {\n    (function (module, exports) {\n      // Utils\n      function assert(val, msg) {\n        if (!val) throw new Error(msg || 'Assertion failed');\n      } // Could use `inherits` module, but don't want to move from single file\n      // architecture yet.\n\n\n      function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n\n        var TempCtor = function () {};\n\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n      } // BN\n\n\n      function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n          return number;\n        }\n\n        this.negative = 0;\n        this.words = null;\n        this.length = 0; // Reduction context\n\n        this.red = null;\n\n        if (number !== null) {\n          if (base === 'le' || base === 'be') {\n            endian = base;\n            base = 10;\n          }\n\n          this._init(number || 0, base || 10, endian || 'be');\n        }\n      }\n\n      if (typeof module === 'object') {\n        module.exports = BN;\n      } else {\n        exports.BN = BN;\n      }\n\n      BN.BN = BN;\n      BN.wordSize = 26;\n      var Buffer;\n\n      try {\n        Buffer = require$$0.Buffer;\n      } catch (e) {}\n\n      BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n          return true;\n        }\n\n        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n      };\n\n      BN.max = function max(left, right) {\n        if (left.cmp(right) > 0) return left;\n        return right;\n      };\n\n      BN.min = function min(left, right) {\n        if (left.cmp(right) < 0) return left;\n        return right;\n      };\n\n      BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === 'number') {\n          return this._initNumber(number, base, endian);\n        }\n\n        if (typeof number === 'object') {\n          return this._initArray(number, base, endian);\n        }\n\n        if (base === 'hex') {\n          base = 16;\n        }\n\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, '');\n        var start = 0;\n\n        if (number[0] === '-') {\n          start++;\n        }\n\n        if (base === 16) {\n          this._parseHex(number, start);\n        } else {\n          this._parseBase(number, base, start);\n        }\n\n        if (number[0] === '-') {\n          this.negative = 1;\n        }\n\n        this.strip();\n        if (endian !== 'le') return;\n\n        this._initArray(this.toArray(), base, endian);\n      };\n\n      BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n          this.negative = 1;\n          number = -number;\n        }\n\n        if (number < 0x4000000) {\n          this.words = [number & 0x3ffffff];\n          this.length = 1;\n        } else if (number < 0x10000000000000) {\n          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];\n          this.length = 2;\n        } else {\n          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n\n          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];\n          this.length = 3;\n        }\n\n        if (endian !== 'le') return; // Reverse the bytes\n\n        this._initArray(this.toArray(), base, endian);\n      };\n\n      BN.prototype._initArray = function _initArray(number, base, endian) {\n        // Perhaps a Uint8Array\n        assert(typeof number.length === 'number');\n\n        if (number.length <= 0) {\n          this.words = [0];\n          this.length = 1;\n          return this;\n        }\n\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n\n        var j, w;\n        var off = 0;\n\n        if (endian === 'be') {\n          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n            this.words[j] |= w << off & 0x3ffffff;\n            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n            off += 24;\n\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        } else if (endian === 'le') {\n          for (i = 0, j = 0; i < number.length; i += 3) {\n            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n            this.words[j] |= w << off & 0x3ffffff;\n            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n            off += 24;\n\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        }\n\n        return this.strip();\n      };\n\n      function parseHex(str, start, end) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r <<= 4; // 'a' - 'f'\n\n          if (c >= 49 && c <= 54) {\n            r |= c - 49 + 0xa; // 'A' - 'F'\n          } else if (c >= 17 && c <= 22) {\n            r |= c - 17 + 0xa; // '0' - '9'\n          } else {\n            r |= c & 0xf;\n          }\n        }\n\n        return r;\n      }\n\n      BN.prototype._parseHex = function _parseHex(number, start) {\n        // Create possibly bigger array to ensure that it fits the number\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n\n        var j, w; // Scan 24-bit chunks and add them to the number\n\n        var off = 0;\n\n        for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n          w = parseHex(number, i, i + 6);\n          this.words[j] |= w << off & 0x3ffffff; // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n\n          this.words[j + 1] |= w >>> 26 - off & 0x3fffff;\n          off += 24;\n\n          if (off >= 26) {\n            off -= 26;\n            j++;\n          }\n        }\n\n        if (i + 6 !== start) {\n          w = parseHex(number, start, i + 6);\n          this.words[j] |= w << off & 0x3ffffff;\n          this.words[j + 1] |= w >>> 26 - off & 0x3fffff;\n        }\n\n        this.strip();\n      };\n\n      function parseBase(str, start, end, mul) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r *= mul; // 'a'\n\n          if (c >= 49) {\n            r += c - 49 + 0xa; // 'A'\n          } else if (c >= 17) {\n            r += c - 17 + 0xa; // '0' - '9'\n          } else {\n            r += c;\n          }\n        }\n\n        return r;\n      }\n\n      BN.prototype._parseBase = function _parseBase(number, base, start) {\n        // Initialize as zero\n        this.words = [0];\n        this.length = 1; // Find length of limb in base\n\n        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n          limbLen++;\n        }\n\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n\n        for (var i = start; i < end; i += limbLen) {\n          word = parseBase(number, i, i + limbLen, base);\n          this.imuln(limbPow);\n\n          if (this.words[0] + word < 0x4000000) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n\n        if (mod !== 0) {\n          var pow = 1;\n          word = parseBase(number, i, number.length, base);\n\n          for (i = 0; i < mod; i++) {\n            pow *= base;\n          }\n\n          this.imuln(pow);\n\n          if (this.words[0] + word < 0x4000000) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n      };\n\n      BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n\n        for (var i = 0; i < this.length; i++) {\n          dest.words[i] = this.words[i];\n        }\n\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n      };\n\n      BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n      };\n\n      BN.prototype._expand = function _expand(size) {\n        while (this.length < size) {\n          this.words[this.length++] = 0;\n        }\n\n        return this;\n      }; // Remove leading `0` from `this`\n\n\n      BN.prototype.strip = function strip() {\n        while (this.length > 1 && this.words[this.length - 1] === 0) {\n          this.length--;\n        }\n\n        return this._normSign();\n      };\n\n      BN.prototype._normSign = function _normSign() {\n        // -0 = 0\n        if (this.length === 1 && this.words[0] === 0) {\n          this.negative = 0;\n        }\n\n        return this;\n      };\n\n      BN.prototype.inspect = function inspect() {\n        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n      };\n      /*\n       var zeros = [];\n      var groupSizes = [];\n      var groupBases = [];\n       var s = '';\n      var i = -1;\n      while (++i < BN.wordSize) {\n        zeros[i] = s;\n        s += '0';\n      }\n      groupSizes[0] = 0;\n      groupSizes[1] = 0;\n      groupBases[0] = 0;\n      groupBases[1] = 0;\n      var base = 2 - 1;\n      while (++base < 36 + 1) {\n        var groupSize = 0;\n        var groupBase = 1;\n        while (groupBase < (1 << BN.wordSize) / base) {\n          groupBase *= base;\n          groupSize += 1;\n        }\n        groupSizes[base] = groupSize;\n        groupBases[base] = groupBase;\n      }\n       */\n\n\n      var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];\n      var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];\n      var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];\n\n      BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n\n        if (base === 16 || base === 'hex') {\n          out = '';\n          var off = 0;\n          var carry = 0;\n\n          for (var i = 0; i < this.length; i++) {\n            var w = this.words[i];\n            var word = ((w << off | carry) & 0xffffff).toString(16);\n            carry = w >>> 24 - off & 0xffffff;\n\n            if (carry !== 0 || i !== this.length - 1) {\n              out = zeros[6 - word.length] + word + out;\n            } else {\n              out = word + out;\n            }\n\n            off += 2;\n\n            if (off >= 26) {\n              off -= 26;\n              i--;\n            }\n          }\n\n          if (carry !== 0) {\n            out = carry.toString(16) + out;\n          }\n\n          while (out.length % padding !== 0) {\n            out = '0' + out;\n          }\n\n          if (this.negative !== 0) {\n            out = '-' + out;\n          }\n\n          return out;\n        }\n\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n          var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);\n\n          var groupBase = groupBases[base];\n          out = '';\n          var c = this.clone();\n          c.negative = 0;\n\n          while (!c.isZero()) {\n            var r = c.modn(groupBase).toString(base);\n            c = c.idivn(groupBase);\n\n            if (!c.isZero()) {\n              out = zeros[groupSize - r.length] + r + out;\n            } else {\n              out = r + out;\n            }\n          }\n\n          if (this.isZero()) {\n            out = '0' + out;\n          }\n\n          while (out.length % padding !== 0) {\n            out = '0' + out;\n          }\n\n          if (this.negative !== 0) {\n            out = '-' + out;\n          }\n\n          return out;\n        }\n\n        assert(false, 'Base should be between 2 and 36');\n      };\n\n      BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n\n        if (this.length === 2) {\n          ret += this.words[1] * 0x4000000;\n        } else if (this.length === 3 && this.words[2] === 0x01) {\n          // NOTE: at this stage it is known that the top bit is set\n          ret += 0x10000000000000 + this.words[1] * 0x4000000;\n        } else if (this.length > 2) {\n          assert(false, 'Number can only safely store up to 53 bits');\n        }\n\n        return this.negative !== 0 ? -ret : ret;\n      };\n\n      BN.prototype.toJSON = function toJSON() {\n        return this.toString(16);\n      };\n\n      BN.prototype.toBuffer = function toBuffer(endian, length) {\n        assert(typeof Buffer !== 'undefined');\n        return this.toArrayLike(Buffer, endian, length);\n      };\n\n      BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n      };\n\n      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, 'byte array longer than desired length');\n        assert(reqLength > 0, 'Requested array length <= 0');\n        this.strip();\n        var littleEndian = endian === 'le';\n        var res = new ArrayType(reqLength);\n        var b, i;\n        var q = this.clone();\n\n        if (!littleEndian) {\n          // Assume big-endian\n          for (i = 0; i < reqLength - byteLength; i++) {\n            res[i] = 0;\n          }\n\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(0xff);\n            q.iushrn(8);\n            res[reqLength - i - 1] = b;\n          }\n        } else {\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(0xff);\n            q.iushrn(8);\n            res[i] = b;\n          }\n\n          for (; i < reqLength; i++) {\n            res[i] = 0;\n          }\n        }\n\n        return res;\n      };\n\n      if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n          return 32 - Math.clz32(w);\n        };\n      } else {\n        BN.prototype._countBits = function _countBits(w) {\n          var t = w;\n          var r = 0;\n\n          if (t >= 0x1000) {\n            r += 13;\n            t >>>= 13;\n          }\n\n          if (t >= 0x40) {\n            r += 7;\n            t >>>= 7;\n          }\n\n          if (t >= 0x8) {\n            r += 4;\n            t >>>= 4;\n          }\n\n          if (t >= 0x02) {\n            r += 2;\n            t >>>= 2;\n          }\n\n          return r + t;\n        };\n      }\n\n      BN.prototype._zeroBits = function _zeroBits(w) {\n        // Short-cut\n        if (w === 0) return 26;\n        var t = w;\n        var r = 0;\n\n        if ((t & 0x1fff) === 0) {\n          r += 13;\n          t >>>= 13;\n        }\n\n        if ((t & 0x7f) === 0) {\n          r += 7;\n          t >>>= 7;\n        }\n\n        if ((t & 0xf) === 0) {\n          r += 4;\n          t >>>= 4;\n        }\n\n        if ((t & 0x3) === 0) {\n          r += 2;\n          t >>>= 2;\n        }\n\n        if ((t & 0x1) === 0) {\n          r++;\n        }\n\n        return r;\n      }; // Return number of used bits in a BN\n\n\n      BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n\n        var hi = this._countBits(w);\n\n        return (this.length - 1) * 26 + hi;\n      };\n\n      function toBitArray(num) {\n        var w = new Array(num.bitLength());\n\n        for (var bit = 0; bit < w.length; bit++) {\n          var off = bit / 26 | 0;\n          var wbit = bit % 26;\n          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n        }\n\n        return w;\n      } // Number of trailing zero bits\n\n\n      BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero()) return 0;\n        var r = 0;\n\n        for (var i = 0; i < this.length; i++) {\n          var b = this._zeroBits(this.words[i]);\n\n          r += b;\n          if (b !== 26) break;\n        }\n\n        return r;\n      };\n\n      BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n      };\n\n      BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n          return this.abs().inotn(width).iaddn(1);\n        }\n\n        return this.clone();\n      };\n\n      BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n          return this.notn(width).iaddn(1).ineg();\n        }\n\n        return this.clone();\n      };\n\n      BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n      }; // Return negative clone of `this`\n\n\n      BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n      };\n\n      BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n          this.negative ^= 1;\n        }\n\n        return this;\n      }; // Or `num` with `this` in-place\n\n\n      BN.prototype.iuor = function iuor(num) {\n        while (this.length < num.length) {\n          this.words[this.length++] = 0;\n        }\n\n        for (var i = 0; i < num.length; i++) {\n          this.words[i] = this.words[i] | num.words[i];\n        }\n\n        return this.strip();\n      };\n\n      BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n      }; // Or `num` with `this`\n\n\n      BN.prototype.or = function or(num) {\n        if (this.length > num.length) return this.clone().ior(num);\n        return num.clone().ior(this);\n      };\n\n      BN.prototype.uor = function uor(num) {\n        if (this.length > num.length) return this.clone().iuor(num);\n        return num.clone().iuor(this);\n      }; // And `num` with `this` in-place\n\n\n      BN.prototype.iuand = function iuand(num) {\n        // b = min-length(num, this)\n        var b;\n\n        if (this.length > num.length) {\n          b = num;\n        } else {\n          b = this;\n        }\n\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = this.words[i] & num.words[i];\n        }\n\n        this.length = b.length;\n        return this.strip();\n      };\n\n      BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n      }; // And `num` with `this`\n\n\n      BN.prototype.and = function and(num) {\n        if (this.length > num.length) return this.clone().iand(num);\n        return num.clone().iand(this);\n      };\n\n      BN.prototype.uand = function uand(num) {\n        if (this.length > num.length) return this.clone().iuand(num);\n        return num.clone().iuand(this);\n      }; // Xor `num` with `this` in-place\n\n\n      BN.prototype.iuxor = function iuxor(num) {\n        // a.length > b.length\n        var a;\n        var b;\n\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = a.words[i] ^ b.words[i];\n        }\n\n        if (this !== a) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n\n        this.length = a.length;\n        return this.strip();\n      };\n\n      BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n      }; // Xor `num` with `this`\n\n\n      BN.prototype.xor = function xor(num) {\n        if (this.length > num.length) return this.clone().ixor(num);\n        return num.clone().ixor(this);\n      };\n\n      BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length) return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n      }; // Not ``this`` with ``width`` bitwidth\n\n\n      BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === 'number' && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26; // Extend the buffer with leading zeroes\n\n        this._expand(bytesNeeded);\n\n        if (bitsLeft > 0) {\n          bytesNeeded--;\n        } // Handle complete words\n\n\n        for (var i = 0; i < bytesNeeded; i++) {\n          this.words[i] = ~this.words[i] & 0x3ffffff;\n        } // Handle the residue\n\n\n        if (bitsLeft > 0) {\n          this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;\n        } // And remove leading zeroes\n\n\n        return this.strip();\n      };\n\n      BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n      }; // Set `bit` of `this`\n\n\n      BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === 'number' && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n\n        this._expand(off + 1);\n\n        if (val) {\n          this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n          this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n\n        return this.strip();\n      }; // Add `num` to `this` in-place\n\n\n      BN.prototype.iadd = function iadd(num) {\n        var r; // negative + positive\n\n        if (this.negative !== 0 && num.negative === 0) {\n          this.negative = 0;\n          r = this.isub(num);\n          this.negative ^= 1;\n          return this._normSign(); // positive + negative\n        } else if (this.negative === 0 && num.negative !== 0) {\n          num.negative = 0;\n          r = this.isub(num);\n          num.negative = 1;\n          return r._normSign();\n        } // a.length > b.length\n\n\n        var a, b;\n\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n\n        var carry = 0;\n\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n          this.words[i] = r & 0x3ffffff;\n          carry = r >>> 26;\n        }\n\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          this.words[i] = r & 0x3ffffff;\n          carry = r >>> 26;\n        }\n\n        this.length = a.length;\n\n        if (carry !== 0) {\n          this.words[this.length] = carry;\n          this.length++; // Copy the rest of the words\n        } else if (a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n\n        return this;\n      }; // Add `num` to `this`\n\n\n      BN.prototype.add = function add(num) {\n        var res;\n\n        if (num.negative !== 0 && this.negative === 0) {\n          num.negative = 0;\n          res = this.sub(num);\n          num.negative ^= 1;\n          return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n          this.negative = 0;\n          res = num.sub(this);\n          this.negative = 1;\n          return res;\n        }\n\n        if (this.length > num.length) return this.clone().iadd(num);\n        return num.clone().iadd(this);\n      }; // Subtract `num` from `this` in-place\n\n\n      BN.prototype.isub = function isub(num) {\n        // this - (-num) = this + num\n        if (num.negative !== 0) {\n          num.negative = 0;\n          var r = this.iadd(num);\n          num.negative = 1;\n          return r._normSign(); // -this - num = -(this + num)\n        } else if (this.negative !== 0) {\n          this.negative = 0;\n          this.iadd(num);\n          this.negative = 1;\n          return this._normSign();\n        } // At this point both numbers are positive\n\n\n        var cmp = this.cmp(num); // Optimization - zeroify\n\n        if (cmp === 0) {\n          this.negative = 0;\n          this.length = 1;\n          this.words[0] = 0;\n          return this;\n        } // a > b\n\n\n        var a, b;\n\n        if (cmp > 0) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n\n        var carry = 0;\n\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 0x3ffffff;\n        }\n\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 0x3ffffff;\n        } // Copy rest of the words\n\n\n        if (carry === 0 && i < a.length && a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n\n        this.length = Math.max(this.length, i);\n\n        if (a !== this) {\n          this.negative = 1;\n        }\n\n        return this.strip();\n      }; // Subtract `num` from `this`\n\n\n      BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n      };\n\n      function smallMulTo(self, num, out) {\n        out.negative = num.negative ^ self.negative;\n        var len = self.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)\n\n        var a = self.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 0x3ffffff;\n        var carry = r / 0x4000000 | 0;\n        out.words[0] = lo;\n\n        for (var k = 1; k < len; k++) {\n          // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n          // note that ncarry could be >= 0x3ffffff\n          var ncarry = carry >>> 26;\n          var rword = carry & 0x3ffffff;\n          var maxJ = Math.min(k, num.length - 1);\n\n          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n            var i = k - j | 0;\n            a = self.words[i] | 0;\n            b = num.words[j] | 0;\n            r = a * b + rword;\n            ncarry += r / 0x4000000 | 0;\n            rword = r & 0x3ffffff;\n          }\n\n          out.words[k] = rword | 0;\n          carry = ncarry | 0;\n        }\n\n        if (carry !== 0) {\n          out.words[k] = carry | 0;\n        } else {\n          out.length--;\n        }\n\n        return out.strip();\n      } // TODO(indutny): it may be reasonable to omit it for users who don't need\n      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n      // multiplication (like elliptic secp256k1).\n\n\n      var comb10MulTo = function comb10MulTo(self, num, out) {\n        var a = self.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 0x1fff;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 0x1fff;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 0x1fff;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 0x1fff;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 0x1fff;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 0x1fff;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 0x1fff;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 0x1fff;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 0x1fff;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 0x1fff;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 0x1fff;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 0x1fff;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 0x1fff;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 0x1fff;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 0x1fff;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 0x1fff;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 0x1fff;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 0x1fff;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 0x1fff;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 0x1fff;\n        var bh9 = b9 >>> 13;\n        out.negative = self.negative ^ num.negative;\n        out.length = 19;\n        /* k = 0 */\n\n        lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 0x3ffffff;\n        /* k = 1 */\n\n        lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 0x3ffffff;\n        /* k = 2 */\n\n        lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 0x3ffffff;\n        /* k = 3 */\n\n        lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 0x3ffffff;\n        /* k = 4 */\n\n        lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 0x3ffffff;\n        /* k = 5 */\n\n        lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 0x3ffffff;\n        /* k = 6 */\n\n        lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 0x3ffffff;\n        /* k = 7 */\n\n        lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 0x3ffffff;\n        /* k = 8 */\n\n        lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 0x3ffffff;\n        /* k = 9 */\n\n        lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 0x3ffffff;\n        /* k = 10 */\n\n        lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 0x3ffffff;\n        /* k = 11 */\n\n        lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 0x3ffffff;\n        /* k = 12 */\n\n        lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 0x3ffffff;\n        /* k = 13 */\n\n        lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 0x3ffffff;\n        /* k = 14 */\n\n        lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 0x3ffffff;\n        /* k = 15 */\n\n        lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 0x3ffffff;\n        /* k = 16 */\n\n        lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 0x3ffffff;\n        /* k = 17 */\n\n        lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 0x3ffffff;\n        /* k = 18 */\n\n        lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 0x3ffffff;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n\n        if (c !== 0) {\n          o[19] = c;\n          out.length++;\n        }\n\n        return out;\n      }; // Polyfill comb\n\n\n      if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n      }\n\n      function bigMulTo(self, num, out) {\n        out.negative = num.negative ^ self.negative;\n        out.length = self.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n\n        for (var k = 0; k < out.length - 1; k++) {\n          // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n          // note that ncarry could be >= 0x3ffffff\n          var ncarry = hncarry;\n          hncarry = 0;\n          var rword = carry & 0x3ffffff;\n          var maxJ = Math.min(k, num.length - 1);\n\n          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n            var i = k - j;\n            var a = self.words[i] | 0;\n            var b = num.words[j] | 0;\n            var r = a * b;\n            var lo = r & 0x3ffffff;\n            ncarry = ncarry + (r / 0x4000000 | 0) | 0;\n            lo = lo + rword | 0;\n            rword = lo & 0x3ffffff;\n            ncarry = ncarry + (lo >>> 26) | 0;\n            hncarry += ncarry >>> 26;\n            ncarry &= 0x3ffffff;\n          }\n\n          out.words[k] = rword;\n          carry = ncarry;\n          ncarry = hncarry;\n        }\n\n        if (carry !== 0) {\n          out.words[k] = carry;\n        } else {\n          out.length--;\n        }\n\n        return out.strip();\n      }\n\n      function jumboMulTo(self, num, out) {\n        var fftm = new FFTM();\n        return fftm.mulp(self, num, out);\n      }\n\n      BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n\n        if (this.length === 10 && num.length === 10) {\n          res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n          res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n          res = bigMulTo(this, num, out);\n        } else {\n          res = jumboMulTo(this, num, out);\n        }\n\n        return res;\n      }; // Cooley-Tukey algorithm for FFT\n      // slightly revisited to rely on looping instead of recursion\n\n\n      function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n\n      FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n\n        for (var i = 0; i < N; i++) {\n          t[i] = this.revBin(i, l, N);\n        }\n\n        return t;\n      }; // Returns binary-reversed representation of `x`\n\n\n      FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1) return x;\n        var rb = 0;\n\n        for (var i = 0; i < l; i++) {\n          rb |= (x & 1) << l - i - 1;\n          x >>= 1;\n        }\n\n        return rb;\n      }; // Performs \"tweedling\" phase, therefore 'emulating'\n      // behaviour of the recursive algorithm\n\n\n      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for (var i = 0; i < N; i++) {\n          rtws[i] = rws[rbt[i]];\n          itws[i] = iws[rbt[i]];\n        }\n      };\n\n      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n\n        for (var s = 1; s < N; s <<= 1) {\n          var l = s << 1;\n          var rtwdf = Math.cos(2 * Math.PI / l);\n          var itwdf = Math.sin(2 * Math.PI / l);\n\n          for (var p = 0; p < N; p += l) {\n            var rtwdf_ = rtwdf;\n            var itwdf_ = itwdf;\n\n            for (var j = 0; j < s; j++) {\n              var re = rtws[p + j];\n              var ie = itws[p + j];\n              var ro = rtws[p + j + s];\n              var io = itws[p + j + s];\n              var rx = rtwdf_ * ro - itwdf_ * io;\n              io = rtwdf_ * io + itwdf_ * ro;\n              ro = rx;\n              rtws[p + j] = re + ro;\n              itws[p + j] = ie + io;\n              rtws[p + j + s] = re - ro;\n              itws[p + j + s] = ie - io;\n              /* jshint maxdepth : false */\n\n              if (j !== l) {\n                rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                rtwdf_ = rx;\n              }\n            }\n          }\n        }\n      };\n\n      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n\n        for (N = N / 2 | 0; N; N = N >>> 1) {\n          i++;\n        }\n\n        return 1 << i + 1 + odd;\n      };\n\n      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1) return;\n\n        for (var i = 0; i < N / 2; i++) {\n          var t = rws[i];\n          rws[i] = rws[N - i - 1];\n          rws[N - i - 1] = t;\n          t = iws[i];\n          iws[i] = -iws[N - i - 1];\n          iws[N - i - 1] = -t;\n        }\n      };\n\n      FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n\n        for (var i = 0; i < N / 2; i++) {\n          var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;\n          ws[i] = w & 0x3ffffff;\n\n          if (w < 0x4000000) {\n            carry = 0;\n          } else {\n            carry = w / 0x4000000 | 0;\n          }\n        }\n\n        return ws;\n      };\n\n      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n\n        for (var i = 0; i < len; i++) {\n          carry = carry + (ws[i] | 0);\n          rws[2 * i] = carry & 0x1fff;\n          carry = carry >>> 13;\n          rws[2 * i + 1] = carry & 0x1fff;\n          carry = carry >>> 13;\n        } // Pad with zeroes\n\n\n        for (i = 2 * len; i < N; ++i) {\n          rws[i] = 0;\n        }\n\n        assert(carry === 0);\n        assert((carry & ~0x1fff) === 0);\n      };\n\n      FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n\n        for (var i = 0; i < N; i++) {\n          ph[i] = 0;\n        }\n\n        return ph;\n      };\n\n      FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n\n        var _ = this.stub(N);\n\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n        for (var i = 0; i < N; i++) {\n          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n          rwst[i] = rx;\n        }\n\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out.strip();\n      }; // Multiply `this` by `num`\n\n\n      BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n      }; // Multiply employing FFT\n\n\n      BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n      }; // In-place Multiplication\n\n\n      BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n      };\n\n      BN.prototype.imuln = function imuln(num) {\n        assert(typeof num === 'number');\n        assert(num < 0x4000000); // Carry\n\n        var carry = 0;\n\n        for (var i = 0; i < this.length; i++) {\n          var w = (this.words[i] | 0) * num;\n          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n          carry >>= 26;\n          carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum\n\n          carry += lo >>> 26;\n          this.words[i] = lo & 0x3ffffff;\n        }\n\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n\n        return this;\n      };\n\n      BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n      }; // `this` * `this`\n\n\n      BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n      }; // `this` * `this` in-place\n\n\n      BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n      }; // Math.pow(`this`, `num`)\n\n\n      BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0) return new BN(1); // Skip leading zeroes\n\n        var res = this;\n\n        for (var i = 0; i < w.length; i++, res = res.sqr()) {\n          if (w[i] !== 0) break;\n        }\n\n        if (++i < w.length) {\n          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n            if (w[i] === 0) continue;\n            res = res.mul(q);\n          }\n        }\n\n        return res;\n      }; // Shift-left in-place\n\n\n      BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === 'number' && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;\n        var i;\n\n        if (r !== 0) {\n          var carry = 0;\n\n          for (i = 0; i < this.length; i++) {\n            var newCarry = this.words[i] & carryMask;\n            var c = (this.words[i] | 0) - newCarry << r;\n            this.words[i] = c | carry;\n            carry = newCarry >>> 26 - r;\n          }\n\n          if (carry) {\n            this.words[i] = carry;\n            this.length++;\n          }\n        }\n\n        if (s !== 0) {\n          for (i = this.length - 1; i >= 0; i--) {\n            this.words[i + s] = this.words[i];\n          }\n\n          for (i = 0; i < s; i++) {\n            this.words[i] = 0;\n          }\n\n          this.length += s;\n        }\n\n        return this.strip();\n      };\n\n      BN.prototype.ishln = function ishln(bits) {\n        // TODO(indutny): implement me\n        assert(this.negative === 0);\n        return this.iushln(bits);\n      }; // Shift-right in-place\n      // NOTE: `hint` is a lowest bit before trailing zeroes\n      // NOTE: if `extended` is present - it will be filled with destroyed bits\n\n\n      BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === 'number' && bits >= 0);\n        var h;\n\n        if (hint) {\n          h = (hint - hint % 26) / 26;\n        } else {\n          h = 0;\n        }\n\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h); // Extended mode, copy masked part\n\n        if (maskedWords) {\n          for (var i = 0; i < s; i++) {\n            maskedWords.words[i] = this.words[i];\n          }\n\n          maskedWords.length = s;\n        }\n\n        if (s === 0) ;else if (this.length > s) {\n          this.length -= s;\n\n          for (i = 0; i < this.length; i++) {\n            this.words[i] = this.words[i + s];\n          }\n        } else {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        var carry = 0;\n\n        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n          var word = this.words[i] | 0;\n          this.words[i] = carry << 26 - r | word >>> r;\n          carry = word & mask;\n        } // Push carried bits as a mask\n\n\n        if (maskedWords && carry !== 0) {\n          maskedWords.words[maskedWords.length++] = carry;\n        }\n\n        if (this.length === 0) {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n\n        return this.strip();\n      };\n\n      BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        // TODO(indutny): implement me\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n      }; // Shift-left\n\n\n      BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n      };\n\n      BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n      }; // Shift-right\n\n\n      BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n      };\n\n      BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n      }; // Test if n bit is set\n\n\n      BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === 'number' && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r; // Fast case: bit is much higher than all existing words\n\n        if (this.length <= s) return false; // Check bit and return\n\n        var w = this.words[s];\n        return !!(w & q);\n      }; // Return only lowers bits of number (in-place)\n\n\n      BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === 'number' && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n        if (this.length <= s) {\n          return this;\n        }\n\n        if (r !== 0) {\n          s++;\n        }\n\n        this.length = Math.min(s, this.length);\n\n        if (r !== 0) {\n          var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n          this.words[this.length - 1] &= mask;\n        }\n\n        return this.strip();\n      }; // Return only lowers bits of number\n\n\n      BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n      }; // Add plain number `num` to `this`\n\n\n      BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === 'number');\n        assert(num < 0x4000000);\n        if (num < 0) return this.isubn(-num); // Possible sign change\n\n        if (this.negative !== 0) {\n          if (this.length === 1 && (this.words[0] | 0) < num) {\n            this.words[0] = num - (this.words[0] | 0);\n            this.negative = 0;\n            return this;\n          }\n\n          this.negative = 0;\n          this.isubn(num);\n          this.negative = 1;\n          return this;\n        } // Add without checks\n\n\n        return this._iaddn(num);\n      };\n\n      BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num; // Carry\n\n        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n          this.words[i] -= 0x4000000;\n\n          if (i === this.length - 1) {\n            this.words[i + 1] = 1;\n          } else {\n            this.words[i + 1]++;\n          }\n        }\n\n        this.length = Math.max(this.length, i + 1);\n        return this;\n      }; // Subtract plain number `num` from `this`\n\n\n      BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === 'number');\n        assert(num < 0x4000000);\n        if (num < 0) return this.iaddn(-num);\n\n        if (this.negative !== 0) {\n          this.negative = 0;\n          this.iaddn(num);\n          this.negative = 1;\n          return this;\n        }\n\n        this.words[0] -= num;\n\n        if (this.length === 1 && this.words[0] < 0) {\n          this.words[0] = -this.words[0];\n          this.negative = 1;\n        } else {\n          // Carry\n          for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n            this.words[i] += 0x4000000;\n            this.words[i + 1] -= 1;\n          }\n        }\n\n        return this.strip();\n      };\n\n      BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n      };\n\n      BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n      };\n\n      BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n      };\n\n      BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n      };\n\n      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n\n        this._expand(len);\n\n        var w;\n        var carry = 0;\n\n        for (i = 0; i < num.length; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          var right = (num.words[i] | 0) * mul;\n          w -= right & 0x3ffffff;\n          carry = (w >> 26) - (right / 0x4000000 | 0);\n          this.words[i + shift] = w & 0x3ffffff;\n        }\n\n        for (; i < this.length - shift; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          carry = w >> 26;\n          this.words[i + shift] = w & 0x3ffffff;\n        }\n\n        if (carry === 0) return this.strip(); // Subtraction overflow\n\n        assert(carry === -1);\n        carry = 0;\n\n        for (i = 0; i < this.length; i++) {\n          w = -(this.words[i] | 0) + carry;\n          carry = w >> 26;\n          this.words[i] = w & 0x3ffffff;\n        }\n\n        this.negative = 1;\n        return this.strip();\n      };\n\n      BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num; // Normalize\n\n        var bhi = b.words[b.length - 1] | 0;\n\n        var bhiBits = this._countBits(bhi);\n\n        shift = 26 - bhiBits;\n\n        if (shift !== 0) {\n          b = b.ushln(shift);\n          a.iushln(shift);\n          bhi = b.words[b.length - 1] | 0;\n        } // Initialize quotient\n\n\n        var m = a.length - b.length;\n        var q;\n\n        if (mode !== 'mod') {\n          q = new BN(null);\n          q.length = m + 1;\n          q.words = new Array(q.length);\n\n          for (var i = 0; i < q.length; i++) {\n            q.words[i] = 0;\n          }\n        }\n\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n\n        if (diff.negative === 0) {\n          a = diff;\n\n          if (q) {\n            q.words[m] = 1;\n          }\n        }\n\n        for (var j = m - 1; j >= 0; j--) {\n          var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n          // (0x7ffffff)\n\n          qj = Math.min(qj / bhi | 0, 0x3ffffff);\n\n          a._ishlnsubmul(b, qj, j);\n\n          while (a.negative !== 0) {\n            qj--;\n            a.negative = 0;\n\n            a._ishlnsubmul(b, 1, j);\n\n            if (!a.isZero()) {\n              a.negative ^= 1;\n            }\n          }\n\n          if (q) {\n            q.words[j] = qj;\n          }\n        }\n\n        if (q) {\n          q.strip();\n        }\n\n        a.strip(); // Denormalize\n\n        if (mode !== 'div' && shift !== 0) {\n          a.iushrn(shift);\n        }\n\n        return {\n          div: q || null,\n          mod: a\n        };\n      }; // NOTE: 1) `mode` can be set to `mod` to request mod only,\n      //       to `div` to request div only, or be absent to\n      //       request both div & mod\n      //       2) `positive` is true if unsigned mod is requested\n\n\n      BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n\n        if (this.isZero()) {\n          return {\n            div: new BN(0),\n            mod: new BN(0)\n          };\n        }\n\n        var div, mod, res;\n\n        if (this.negative !== 0 && num.negative === 0) {\n          res = this.neg().divmod(num, mode);\n\n          if (mode !== 'mod') {\n            div = res.div.neg();\n          }\n\n          if (mode !== 'div') {\n            mod = res.mod.neg();\n\n            if (positive && mod.negative !== 0) {\n              mod.iadd(num);\n            }\n          }\n\n          return {\n            div: div,\n            mod: mod\n          };\n        }\n\n        if (this.negative === 0 && num.negative !== 0) {\n          res = this.divmod(num.neg(), mode);\n\n          if (mode !== 'mod') {\n            div = res.div.neg();\n          }\n\n          return {\n            div: div,\n            mod: res.mod\n          };\n        }\n\n        if ((this.negative & num.negative) !== 0) {\n          res = this.neg().divmod(num.neg(), mode);\n\n          if (mode !== 'div') {\n            mod = res.mod.neg();\n\n            if (positive && mod.negative !== 0) {\n              mod.isub(num);\n            }\n          }\n\n          return {\n            div: res.div,\n            mod: mod\n          };\n        } // Both numbers are positive at this point\n        // Strip both numbers to approximate shift value\n\n\n        if (num.length > this.length || this.cmp(num) < 0) {\n          return {\n            div: new BN(0),\n            mod: this\n          };\n        } // Very short reduction\n\n\n        if (num.length === 1) {\n          if (mode === 'div') {\n            return {\n              div: this.divn(num.words[0]),\n              mod: null\n            };\n          }\n\n          if (mode === 'mod') {\n            return {\n              div: null,\n              mod: new BN(this.modn(num.words[0]))\n            };\n          }\n\n          return {\n            div: this.divn(num.words[0]),\n            mod: new BN(this.modn(num.words[0]))\n          };\n        }\n\n        return this._wordDiv(num, mode);\n      }; // Find `this` / `num`\n\n\n      BN.prototype.div = function div(num) {\n        return this.divmod(num, 'div', false).div;\n      }; // Find `this` % `num`\n\n\n      BN.prototype.mod = function mod(num) {\n        return this.divmod(num, 'mod', false).mod;\n      };\n\n      BN.prototype.umod = function umod(num) {\n        return this.divmod(num, 'mod', true).mod;\n      }; // Find Round(`this` / `num`)\n\n\n      BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num); // Fast case - exact division\n\n        if (dm.mod.isZero()) return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half); // Round down\n\n        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up\n\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n      };\n\n      BN.prototype.modn = function modn(num) {\n        assert(num <= 0x3ffffff);\n        var p = (1 << 26) % num;\n        var acc = 0;\n\n        for (var i = this.length - 1; i >= 0; i--) {\n          acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n\n        return acc;\n      }; // In-place division by number\n\n\n      BN.prototype.idivn = function idivn(num) {\n        assert(num <= 0x3ffffff);\n        var carry = 0;\n\n        for (var i = this.length - 1; i >= 0; i--) {\n          var w = (this.words[i] | 0) + carry * 0x4000000;\n          this.words[i] = w / num | 0;\n          carry = w % num;\n        }\n\n        return this.strip();\n      };\n\n      BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n      };\n\n      BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n\n        if (x.negative !== 0) {\n          x = x.umod(p);\n        } else {\n          x = x.clone();\n        } // A * x + B * y = x\n\n\n        var A = new BN(1);\n        var B = new BN(0); // C * x + D * y = y\n\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n\n        while (x.isEven() && y.isEven()) {\n          x.iushrn(1);\n          y.iushrn(1);\n          ++g;\n        }\n\n        var yp = y.clone();\n        var xp = x.clone();\n\n        while (!x.isZero()) {\n          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n\n          if (i > 0) {\n            x.iushrn(i);\n\n            while (i-- > 0) {\n              if (A.isOdd() || B.isOdd()) {\n                A.iadd(yp);\n                B.isub(xp);\n              }\n\n              A.iushrn(1);\n              B.iushrn(1);\n            }\n          }\n\n          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n\n          if (j > 0) {\n            y.iushrn(j);\n\n            while (j-- > 0) {\n              if (C.isOdd() || D.isOdd()) {\n                C.iadd(yp);\n                D.isub(xp);\n              }\n\n              C.iushrn(1);\n              D.iushrn(1);\n            }\n          }\n\n          if (x.cmp(y) >= 0) {\n            x.isub(y);\n            A.isub(C);\n            B.isub(D);\n          } else {\n            y.isub(x);\n            C.isub(A);\n            D.isub(B);\n          }\n        }\n\n        return {\n          a: C,\n          b: D,\n          gcd: y.iushln(g)\n        };\n      }; // This is reduced incarnation of the binary EEA\n      // above, designated to invert members of the\n      // _prime_ fields F(p) at a maximal speed\n\n\n      BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n\n        if (a.negative !== 0) {\n          a = a.umod(p);\n        } else {\n          a = a.clone();\n        }\n\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n\n        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n\n          if (i > 0) {\n            a.iushrn(i);\n\n            while (i-- > 0) {\n              if (x1.isOdd()) {\n                x1.iadd(delta);\n              }\n\n              x1.iushrn(1);\n            }\n          }\n\n          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n\n          if (j > 0) {\n            b.iushrn(j);\n\n            while (j-- > 0) {\n              if (x2.isOdd()) {\n                x2.iadd(delta);\n              }\n\n              x2.iushrn(1);\n            }\n          }\n\n          if (a.cmp(b) >= 0) {\n            a.isub(b);\n            x1.isub(x2);\n          } else {\n            b.isub(a);\n            x2.isub(x1);\n          }\n        }\n\n        var res;\n\n        if (a.cmpn(1) === 0) {\n          res = x1;\n        } else {\n          res = x2;\n        }\n\n        if (res.cmpn(0) < 0) {\n          res.iadd(p);\n        }\n\n        return res;\n      };\n\n      BN.prototype.gcd = function gcd(num) {\n        if (this.isZero()) return num.abs();\n        if (num.isZero()) return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0; // Remove common factor of two\n\n        for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n          a.iushrn(1);\n          b.iushrn(1);\n        }\n\n        do {\n          while (a.isEven()) {\n            a.iushrn(1);\n          }\n\n          while (b.isEven()) {\n            b.iushrn(1);\n          }\n\n          var r = a.cmp(b);\n\n          if (r < 0) {\n            // Swap `a` and `b` to make `a` always bigger than `b`\n            var t = a;\n            a = b;\n            b = t;\n          } else if (r === 0 || b.cmpn(1) === 0) {\n            break;\n          }\n\n          a.isub(b);\n        } while (true);\n\n        return b.iushln(shift);\n      }; // Invert number in the field F(num)\n\n\n      BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n      };\n\n      BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n      };\n\n      BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n      }; // And first word and num\n\n\n      BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n      }; // Increment at the bit position in-line\n\n\n      BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === 'number');\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r; // Fast case: bit is much higher than all existing words\n\n        if (this.length <= s) {\n          this._expand(s + 1);\n\n          this.words[s] |= q;\n          return this;\n        } // Add bit and propagate, if needed\n\n\n        var carry = q;\n\n        for (var i = s; carry !== 0 && i < this.length; i++) {\n          var w = this.words[i] | 0;\n          w += carry;\n          carry = w >>> 26;\n          w &= 0x3ffffff;\n          this.words[i] = w;\n        }\n\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n\n        return this;\n      };\n\n      BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n      };\n\n      BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative) return -1;\n        if (this.negative === 0 && negative) return 1;\n        this.strip();\n        var res;\n\n        if (this.length > 1) {\n          res = 1;\n        } else {\n          if (negative) {\n            num = -num;\n          }\n\n          assert(num <= 0x3ffffff, 'Number is too big');\n          var w = this.words[0] | 0;\n          res = w === num ? 0 : w < num ? -1 : 1;\n        }\n\n        if (this.negative !== 0) return -res | 0;\n        return res;\n      }; // Compare two numbers and return:\n      // 1 - if `this` > `num`\n      // 0 - if `this` == `num`\n      // -1 - if `this` < `num`\n\n\n      BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0) return -1;\n        if (this.negative === 0 && num.negative !== 0) return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0) return -res | 0;\n        return res;\n      }; // Unsigned comparison\n\n\n      BN.prototype.ucmp = function ucmp(num) {\n        // At this point both numbers have the same sign\n        if (this.length > num.length) return 1;\n        if (this.length < num.length) return -1;\n        var res = 0;\n\n        for (var i = this.length - 1; i >= 0; i--) {\n          var a = this.words[i] | 0;\n          var b = num.words[i] | 0;\n          if (a === b) continue;\n\n          if (a < b) {\n            res = -1;\n          } else if (a > b) {\n            res = 1;\n          }\n\n          break;\n        }\n\n        return res;\n      };\n\n      BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n      };\n\n      BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n      };\n\n      BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n      };\n\n      BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n      };\n\n      BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n      };\n\n      BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n      };\n\n      BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n      };\n\n      BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n      };\n\n      BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n      };\n\n      BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n      }; //\n      // A reduce context, could be using montgomery or something better, depending\n      // on the `m` itself.\n      //\n\n\n      BN.red = function red(num) {\n        return new Red(num);\n      };\n\n      BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, 'Already a number in reduction context');\n        assert(this.negative === 0, 'red works only with positives');\n        return ctx.convertTo(this)._forceRed(ctx);\n      };\n\n      BN.prototype.fromRed = function fromRed() {\n        assert(this.red, 'fromRed works only with numbers in reduction context');\n        return this.red.convertFrom(this);\n      };\n\n      BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n      };\n\n      BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, 'Already a number in reduction context');\n        return this._forceRed(ctx);\n      };\n\n      BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, 'redAdd works only with red numbers');\n        return this.red.add(this, num);\n      };\n\n      BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, 'redIAdd works only with red numbers');\n        return this.red.iadd(this, num);\n      };\n\n      BN.prototype.redSub = function redSub(num) {\n        assert(this.red, 'redSub works only with red numbers');\n        return this.red.sub(this, num);\n      };\n\n      BN.prototype.redISub = function redISub(num) {\n        assert(this.red, 'redISub works only with red numbers');\n        return this.red.isub(this, num);\n      };\n\n      BN.prototype.redShl = function redShl(num) {\n        assert(this.red, 'redShl works only with red numbers');\n        return this.red.shl(this, num);\n      };\n\n      BN.prototype.redMul = function redMul(num) {\n        assert(this.red, 'redMul works only with red numbers');\n\n        this.red._verify2(this, num);\n\n        return this.red.mul(this, num);\n      };\n\n      BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, 'redMul works only with red numbers');\n\n        this.red._verify2(this, num);\n\n        return this.red.imul(this, num);\n      };\n\n      BN.prototype.redSqr = function redSqr() {\n        assert(this.red, 'redSqr works only with red numbers');\n\n        this.red._verify1(this);\n\n        return this.red.sqr(this);\n      };\n\n      BN.prototype.redISqr = function redISqr() {\n        assert(this.red, 'redISqr works only with red numbers');\n\n        this.red._verify1(this);\n\n        return this.red.isqr(this);\n      }; // Square root over p\n\n\n      BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, 'redSqrt works only with red numbers');\n\n        this.red._verify1(this);\n\n        return this.red.sqrt(this);\n      };\n\n      BN.prototype.redInvm = function redInvm() {\n        assert(this.red, 'redInvm works only with red numbers');\n\n        this.red._verify1(this);\n\n        return this.red.invm(this);\n      }; // Return negative clone of `this` % `red modulo`\n\n\n      BN.prototype.redNeg = function redNeg() {\n        assert(this.red, 'redNeg works only with red numbers');\n\n        this.red._verify1(this);\n\n        return this.red.neg(this);\n      };\n\n      BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, 'redPow(normalNum)');\n\n        this.red._verify1(this);\n\n        return this.red.pow(this, num);\n      }; // Prime numbers with efficient reduction\n\n\n      var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n      }; // Pseudo-Mersenne prime\n\n      function MPrime(name, p) {\n        // P = 2 ^ N - K\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n      }\n\n      MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n      };\n\n      MPrime.prototype.ireduce = function ireduce(num) {\n        // Assumes that `num` is less than `P^2`\n        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n        var r = num;\n        var rlen;\n\n        do {\n          this.split(r, this.tmp);\n          r = this.imulK(r);\n          r = r.iadd(this.tmp);\n          rlen = r.bitLength();\n        } while (rlen > this.n);\n\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n\n        if (cmp === 0) {\n          r.words[0] = 0;\n          r.length = 1;\n        } else if (cmp > 0) {\n          r.isub(this.p);\n        } else {\n          r.strip();\n        }\n\n        return r;\n      };\n\n      MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n      };\n\n      MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n      };\n\n      function K256() {\n        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n      }\n\n      inherits(K256, MPrime);\n\n      K256.prototype.split = function split(input, output) {\n        // 256 = 9 * 26 + 22\n        var mask = 0x3fffff;\n        var outLen = Math.min(input.length, 9);\n\n        for (var i = 0; i < outLen; i++) {\n          output.words[i] = input.words[i];\n        }\n\n        output.length = outLen;\n\n        if (input.length <= 9) {\n          input.words[0] = 0;\n          input.length = 1;\n          return;\n        } // Shift by 9 limbs\n\n\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n\n        for (i = 10; i < input.length; i++) {\n          var next = input.words[i] | 0;\n          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n          prev = next;\n        }\n\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n\n        if (prev === 0 && input.length > 10) {\n          input.length -= 10;\n        } else {\n          input.length -= 9;\n        }\n      };\n\n      K256.prototype.imulK = function imulK(num) {\n        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n\n        var lo = 0;\n\n        for (var i = 0; i < num.length; i++) {\n          var w = num.words[i] | 0;\n          lo += w * 0x3d1;\n          num.words[i] = lo & 0x3ffffff;\n          lo = w * 0x40 + (lo / 0x4000000 | 0);\n        } // Fast length reduction\n\n\n        if (num.words[num.length - 1] === 0) {\n          num.length--;\n\n          if (num.words[num.length - 1] === 0) {\n            num.length--;\n          }\n        }\n\n        return num;\n      };\n\n      function P224() {\n        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n      }\n\n      inherits(P224, MPrime);\n\n      function P192() {\n        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n      }\n\n      inherits(P192, MPrime);\n\n      function P25519() {\n        // 2 ^ 255 - 19\n        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n      }\n\n      inherits(P25519, MPrime);\n\n      P25519.prototype.imulK = function imulK(num) {\n        // K = 0x13\n        var carry = 0;\n\n        for (var i = 0; i < num.length; i++) {\n          var hi = (num.words[i] | 0) * 0x13 + carry;\n          var lo = hi & 0x3ffffff;\n          hi >>>= 26;\n          num.words[i] = lo;\n          carry = hi;\n        }\n\n        if (carry !== 0) {\n          num.words[num.length++] = carry;\n        }\n\n        return num;\n      }; // Exported mostly for testing purposes, use plain name instead\n\n\n      BN._prime = function prime(name) {\n        // Cached version of prime\n        if (primes[name]) return primes[name];\n        var prime;\n\n        if (name === 'k256') {\n          prime = new K256();\n        } else if (name === 'p224') {\n          prime = new P224();\n        } else if (name === 'p192') {\n          prime = new P192();\n        } else if (name === 'p25519') {\n          prime = new P25519();\n        } else {\n          throw new Error('Unknown prime ' + name);\n        }\n\n        primes[name] = prime;\n        return prime;\n      }; //\n      // Base reduction engine\n      //\n\n\n      function Red(m) {\n        if (typeof m === 'string') {\n          var prime = BN._prime(m);\n\n          this.m = prime.p;\n          this.prime = prime;\n        } else {\n          assert(m.gtn(1), 'modulus must be greater than 1');\n          this.m = m;\n          this.prime = null;\n        }\n      }\n\n      Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, 'red works only with positives');\n        assert(a.red, 'red works only with red numbers');\n      };\n\n      Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, 'red works only with positives');\n        assert(a.red && a.red === b.red, 'red works only with red numbers');\n      };\n\n      Red.prototype.imod = function imod(a) {\n        if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n        return a.umod(this.m)._forceRed(this);\n      };\n\n      Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n          return a.clone();\n        }\n\n        return this.m.sub(a)._forceRed(this);\n      };\n\n      Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n\n        var res = a.add(b);\n\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n\n        return res._forceRed(this);\n      };\n\n      Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n\n        var res = a.iadd(b);\n\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n\n        return res;\n      };\n\n      Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n\n        var res = a.sub(b);\n\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n\n        return res._forceRed(this);\n      };\n\n      Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n\n        var res = a.isub(b);\n\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n\n        return res;\n      };\n\n      Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n\n        return this.imod(a.ushln(num));\n      };\n\n      Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n\n        return this.imod(a.imul(b));\n      };\n\n      Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n\n        return this.imod(a.mul(b));\n      };\n\n      Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n      };\n\n      Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n      };\n\n      Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero()) return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1); // Fast case\n\n        if (mod3 === 3) {\n          var pow = this.m.add(new BN(1)).iushrn(2);\n          return this.pow(a, pow);\n        } // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n        //\n        // Find Q and S, that Q * 2 ^ S = (P - 1)\n\n\n        var q = this.m.subn(1);\n        var s = 0;\n\n        while (!q.isZero() && q.andln(1) === 0) {\n          s++;\n          q.iushrn(1);\n        }\n\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg(); // Find quadratic non-residue\n        // NOTE: Max is such because of generalized Riemann hypothesis.\n\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n\n        while (this.pow(z, lpow).cmp(nOne) !== 0) {\n          z.redIAdd(nOne);\n        }\n\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n\n        while (t.cmp(one) !== 0) {\n          var tmp = t;\n\n          for (var i = 0; tmp.cmp(one) !== 0; i++) {\n            tmp = tmp.redSqr();\n          }\n\n          assert(i < m);\n          var b = this.pow(c, new BN(1).iushln(m - i - 1));\n          r = r.redMul(b);\n          c = b.redSqr();\n          t = t.redMul(c);\n          m = i;\n        }\n\n        return r;\n      };\n\n      Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n\n        if (inv.negative !== 0) {\n          inv.negative = 0;\n          return this.imod(inv).redNeg();\n        } else {\n          return this.imod(inv);\n        }\n      };\n\n      Red.prototype.pow = function pow(a, num) {\n        if (num.isZero()) return new BN(1).toRed(this);\n        if (num.cmpn(1) === 0) return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n\n        for (var i = 2; i < wnd.length; i++) {\n          wnd[i] = this.mul(wnd[i - 1], a);\n        }\n\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n\n        if (start === 0) {\n          start = 26;\n        }\n\n        for (i = num.length - 1; i >= 0; i--) {\n          var word = num.words[i];\n\n          for (var j = start - 1; j >= 0; j--) {\n            var bit = word >> j & 1;\n\n            if (res !== wnd[0]) {\n              res = this.sqr(res);\n            }\n\n            if (bit === 0 && current === 0) {\n              currentLen = 0;\n              continue;\n            }\n\n            current <<= 1;\n            current |= bit;\n            currentLen++;\n            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n            res = this.mul(res, wnd[current]);\n            currentLen = 0;\n            current = 0;\n          }\n\n          start = 26;\n        }\n\n        return res;\n      };\n\n      Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n      };\n\n      Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n      }; //\n      // Montgomery method engine\n      //\n\n\n      BN.mont = function mont(num) {\n        return new Mont(num);\n      };\n\n      function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n\n        if (this.shift % 26 !== 0) {\n          this.shift += 26 - this.shift % 26;\n        }\n\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n      }\n\n      inherits(Mont, Red);\n\n      Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n      };\n\n      Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n      };\n\n      Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n          a.words[0] = 0;\n          a.length = 1;\n          return a;\n        }\n\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n\n        return res._forceRed(this);\n      };\n\n      Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n\n        return res._forceRed(this);\n      };\n\n      Mont.prototype.invm = function invm(a) {\n        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n      };\n    })(module, commonjsGlobal);\n  });\n  var name = \"elliptic\";\n  var version$1 = \"6.5.1\";\n  var description = \"EC cryptography\";\n  var main = \"lib/elliptic.js\";\n  var files = [\"lib\"];\n  var scripts = {\n    jscs: \"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js\",\n    jshint: \"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js\",\n    lint: \"npm run jscs && npm run jshint\",\n    unit: \"istanbul test _mocha --reporter=spec test/index.js\",\n    test: \"npm run lint && npm run unit\",\n    version: \"grunt dist && git add dist/\"\n  };\n  var repository = {\n    type: \"git\",\n    url: \"git@github.com:indutny/elliptic\"\n  };\n  var keywords = [\"EC\", \"Elliptic\", \"curve\", \"Cryptography\"];\n  var author = \"Fedor Indutny <fedor@indutny.com>\";\n  var license = \"MIT\";\n  var bugs = {\n    url: \"https://github.com/indutny/elliptic/issues\"\n  };\n  var homepage = \"https://github.com/indutny/elliptic\";\n  var devDependencies = {\n    brfs: \"^1.4.3\",\n    coveralls: \"^3.0.4\",\n    grunt: \"^1.0.4\",\n    \"grunt-browserify\": \"^5.0.0\",\n    \"grunt-cli\": \"^1.2.0\",\n    \"grunt-contrib-connect\": \"^1.0.0\",\n    \"grunt-contrib-copy\": \"^1.0.0\",\n    \"grunt-contrib-uglify\": \"^1.0.1\",\n    \"grunt-mocha-istanbul\": \"^3.0.1\",\n    \"grunt-saucelabs\": \"^9.0.1\",\n    istanbul: \"^0.4.2\",\n    jscs: \"^3.0.7\",\n    jshint: \"^2.6.0\",\n    mocha: \"^6.1.4\"\n  };\n  var dependencies = {\n    \"bn.js\": \"^4.4.0\",\n    brorand: \"^1.0.1\",\n    \"hash.js\": \"^1.0.0\",\n    \"hmac-drbg\": \"^1.0.0\",\n    inherits: \"^2.0.1\",\n    \"minimalistic-assert\": \"^1.0.0\",\n    \"minimalistic-crypto-utils\": \"^1.0.0\"\n  };\n  var _package = {\n    name: name,\n    version: version$1,\n    description: description,\n    main: main,\n    files: files,\n    scripts: scripts,\n    repository: repository,\n    keywords: keywords,\n    author: author,\n    license: license,\n    bugs: bugs,\n    homepage: homepage,\n    devDependencies: devDependencies,\n    dependencies: dependencies\n  };\n\n  var _package$1 =\n  /*#__PURE__*/\n  Object.freeze({\n    name: name,\n    version: version$1,\n    description: description,\n    main: main,\n    files: files,\n    scripts: scripts,\n    repository: repository,\n    keywords: keywords,\n    author: author,\n    license: license,\n    bugs: bugs,\n    homepage: homepage,\n    devDependencies: devDependencies,\n    dependencies: dependencies,\n    default: _package\n  });\n\n  var minimalisticAssert = assert$1;\n\n  function assert$1(val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  assert$1.equal = function assertEqual(l, r, msg) {\n    if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);\n  };\n\n  var utils_1 = createCommonjsModule(function (module, exports) {\n    var utils = exports;\n\n    function toArray(msg, enc) {\n      if (Array.isArray(msg)) return msg.slice();\n      if (!msg) return [];\n      var res = [];\n\n      if (typeof msg !== 'string') {\n        for (var i = 0; i < msg.length; i++) res[i] = msg[i] | 0;\n\n        return res;\n      }\n\n      if (enc === 'hex') {\n        msg = msg.replace(/[^a-z0-9]+/ig, '');\n        if (msg.length % 2 !== 0) msg = '0' + msg;\n\n        for (var i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));\n      } else {\n        for (var i = 0; i < msg.length; i++) {\n          var c = msg.charCodeAt(i);\n          var hi = c >> 8;\n          var lo = c & 0xff;\n          if (hi) res.push(hi, lo);else res.push(lo);\n        }\n      }\n\n      return res;\n    }\n\n    utils.toArray = toArray;\n\n    function zero2(word) {\n      if (word.length === 1) return '0' + word;else return word;\n    }\n\n    utils.zero2 = zero2;\n\n    function toHex(msg) {\n      var res = '';\n\n      for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));\n\n      return res;\n    }\n\n    utils.toHex = toHex;\n\n    utils.encode = function encode(arr, enc) {\n      if (enc === 'hex') return toHex(arr);else return arr;\n    };\n  });\n  var utils_1$1 = createCommonjsModule(function (module, exports) {\n    var utils = exports;\n    utils.assert = minimalisticAssert;\n    utils.toArray = utils_1.toArray;\n    utils.zero2 = utils_1.zero2;\n    utils.toHex = utils_1.toHex;\n    utils.encode = utils_1.encode; // Represent num in a w-NAF form\n\n    function getNAF(num, w) {\n      var naf = [];\n      var ws = 1 << w + 1;\n      var k = num.clone();\n\n      while (k.cmpn(1) >= 0) {\n        var z;\n\n        if (k.isOdd()) {\n          var mod = k.andln(ws - 1);\n          if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;\n          k.isubn(z);\n        } else {\n          z = 0;\n        }\n\n        naf.push(z); // Optimization, shift by word if possible\n\n        var shift = k.cmpn(0) !== 0 && k.andln(ws - 1) === 0 ? w + 1 : 1;\n\n        for (var i = 1; i < shift; i++) naf.push(0);\n\n        k.iushrn(shift);\n      }\n\n      return naf;\n    }\n\n    utils.getNAF = getNAF; // Represent k1, k2 in a Joint Sparse Form\n\n    function getJSF(k1, k2) {\n      var jsf = [[], []];\n      k1 = k1.clone();\n      k2 = k2.clone();\n      var d1 = 0;\n      var d2 = 0;\n\n      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n        // First phase\n        var m14 = k1.andln(3) + d1 & 3;\n        var m24 = k2.andln(3) + d2 & 3;\n        if (m14 === 3) m14 = -1;\n        if (m24 === 3) m24 = -1;\n        var u1;\n\n        if ((m14 & 1) === 0) {\n          u1 = 0;\n        } else {\n          var m8 = k1.andln(7) + d1 & 7;\n          if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;\n        }\n\n        jsf[0].push(u1);\n        var u2;\n\n        if ((m24 & 1) === 0) {\n          u2 = 0;\n        } else {\n          var m8 = k2.andln(7) + d2 & 7;\n          if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;\n        }\n\n        jsf[1].push(u2); // Second phase\n\n        if (2 * d1 === u1 + 1) d1 = 1 - d1;\n        if (2 * d2 === u2 + 1) d2 = 1 - d2;\n        k1.iushrn(1);\n        k2.iushrn(1);\n      }\n\n      return jsf;\n    }\n\n    utils.getJSF = getJSF;\n\n    function cachedProperty(obj, name, computer) {\n      var key = '_' + name;\n\n      obj.prototype[name] = function cachedProperty() {\n        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);\n      };\n    }\n\n    utils.cachedProperty = cachedProperty;\n\n    function parseBytes(bytes) {\n      return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;\n    }\n\n    utils.parseBytes = parseBytes;\n\n    function intFromLE(bytes) {\n      return new bn(bytes, 'hex', 'le');\n    }\n\n    utils.intFromLE = intFromLE;\n  });\n  var r;\n\n  var brorand = function rand(len) {\n    if (!r) r = new Rand(null);\n    return r.generate(len);\n  };\n\n  function Rand(rand) {\n    this.rand = rand;\n  }\n\n  var Rand_1 = Rand;\n\n  Rand.prototype.generate = function generate(len) {\n    return this._rand(len);\n  }; // Emulate crypto API using randy\n\n\n  Rand.prototype._rand = function _rand(n) {\n    if (this.rand.getBytes) return this.rand.getBytes(n);\n    var res = new Uint8Array(n);\n\n    for (var i = 0; i < res.length; i++) res[i] = this.rand.getByte();\n\n    return res;\n  };\n\n  if (typeof self === 'object') {\n    if (self.crypto && self.crypto.getRandomValues) {\n      // Modern browsers\n      Rand.prototype._rand = function _rand(n) {\n        var arr = new Uint8Array(n);\n        self.crypto.getRandomValues(arr);\n        return arr;\n      };\n    } else if (self.msCrypto && self.msCrypto.getRandomValues) {\n      // IE\n      Rand.prototype._rand = function _rand(n) {\n        var arr = new Uint8Array(n);\n        self.msCrypto.getRandomValues(arr);\n        return arr;\n      }; // Safari's WebWorkers do not have `crypto`\n\n    } else if (typeof window === 'object') {\n      // Old junk\n      Rand.prototype._rand = function () {\n        throw new Error('Not implemented yet');\n      };\n    }\n  } else {\n    // Node.js or Web worker with no crypto support\n    try {\n      var crypto$1 = require$$0;\n      throw new Error('Not supported');\n\n      Rand.prototype._rand = function _rand(n) {\n        return crypto$1.randomBytes(n);\n      };\n    } catch (e) {}\n  }\n\n  brorand.Rand = Rand_1;\n  var getNAF = utils_1$1.getNAF;\n  var getJSF = utils_1$1.getJSF;\n  var assert$2 = utils_1$1.assert;\n\n  function BaseCurve(type, conf) {\n    this.type = type;\n    this.p = new bn(conf.p, 16); // Use Montgomery, when there is no fast reduction for the prime\n\n    this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p); // Useful for many curves\n\n    this.zero = new bn(0).toRed(this.red);\n    this.one = new bn(1).toRed(this.red);\n    this.two = new bn(2).toRed(this.red); // Curve configuration, optional\n\n    this.n = conf.n && new bn(conf.n, 16);\n    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed); // Temporary arrays\n\n    this._wnafT1 = new Array(4);\n    this._wnafT2 = new Array(4);\n    this._wnafT3 = new Array(4);\n    this._wnafT4 = new Array(4); // Generalized Greg Maxwell's trick\n\n    var adjustCount = this.n && this.p.div(this.n);\n\n    if (!adjustCount || adjustCount.cmpn(100) > 0) {\n      this.redN = null;\n    } else {\n      this._maxwellTrick = true;\n      this.redN = this.n.toRed(this.red);\n    }\n  }\n\n  var base = BaseCurve;\n\n  BaseCurve.prototype.point = function point() {\n    throw new Error('Not implemented');\n  };\n\n  BaseCurve.prototype.validate = function validate() {\n    throw new Error('Not implemented');\n  };\n\n  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n    assert$2(p.precomputed);\n\n    var doubles = p._getDoubles();\n\n    var naf = getNAF(k, 1);\n    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);\n    I /= 3; // Translate into more windowed form\n\n    var repr = [];\n\n    for (var j = 0; j < naf.length; j += doubles.step) {\n      var nafW = 0;\n\n      for (var k = j + doubles.step - 1; k >= j; k--) nafW = (nafW << 1) + naf[k];\n\n      repr.push(nafW);\n    }\n\n    var a = this.jpoint(null, null, null);\n    var b = this.jpoint(null, null, null);\n\n    for (var i = I; i > 0; i--) {\n      for (var j = 0; j < repr.length; j++) {\n        var nafW = repr[j];\n        if (nafW === i) b = b.mixedAdd(doubles.points[j]);else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());\n      }\n\n      a = a.add(b);\n    }\n\n    return a.toP();\n  };\n\n  BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n    var w = 4; // Precompute window\n\n    var nafPoints = p._getNAFPoints(w);\n\n    w = nafPoints.wnd;\n    var wnd = nafPoints.points; // Get NAF form\n\n    var naf = getNAF(k, w); // Add `this`*(N+1) for every w-NAF index\n\n    var acc = this.jpoint(null, null, null);\n\n    for (var i = naf.length - 1; i >= 0; i--) {\n      // Count zeroes\n      for (var k = 0; i >= 0 && naf[i] === 0; i--) k++;\n\n      if (i >= 0) k++;\n      acc = acc.dblp(k);\n      if (i < 0) break;\n      var z = naf[i];\n      assert$2(z !== 0);\n\n      if (p.type === 'affine') {\n        // J +- P\n        if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());\n      } else {\n        // J +- J\n        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());\n      }\n    }\n\n    return p.type === 'affine' ? acc.toP() : acc;\n  };\n\n  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {\n    var wndWidth = this._wnafT1;\n    var wnd = this._wnafT2;\n    var naf = this._wnafT3; // Fill all arrays\n\n    var max = 0;\n\n    for (var i = 0; i < len; i++) {\n      var p = points[i];\n\n      var nafPoints = p._getNAFPoints(defW);\n\n      wndWidth[i] = nafPoints.wnd;\n      wnd[i] = nafPoints.points;\n    } // Comb small window NAFs\n\n\n    for (var i = len - 1; i >= 1; i -= 2) {\n      var a = i - 1;\n      var b = i;\n\n      if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n        naf[a] = getNAF(coeffs[a], wndWidth[a]);\n        naf[b] = getNAF(coeffs[b], wndWidth[b]);\n        max = Math.max(naf[a].length, max);\n        max = Math.max(naf[b].length, max);\n        continue;\n      }\n\n      var comb = [points[a],\n      /* 1 */\n      null,\n      /* 3 */\n      null,\n      /* 5 */\n      points[b]\n      /* 7 */\n      ]; // Try to avoid Projective points, if possible\n\n      if (points[a].y.cmp(points[b].y) === 0) {\n        comb[1] = points[a].add(points[b]);\n        comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n      } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n        comb[1] = points[a].toJ().mixedAdd(points[b]);\n        comb[2] = points[a].add(points[b].neg());\n      } else {\n        comb[1] = points[a].toJ().mixedAdd(points[b]);\n        comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n      }\n\n      var index = [-3,\n      /* -1 -1 */\n      -1,\n      /* -1 0 */\n      -5,\n      /* -1 1 */\n      -7,\n      /* 0 -1 */\n      0,\n      /* 0 0 */\n      7,\n      /* 0 1 */\n      5,\n      /* 1 -1 */\n      1,\n      /* 1 0 */\n      3\n      /* 1 1 */\n      ];\n      var jsf = getJSF(coeffs[a], coeffs[b]);\n      max = Math.max(jsf[0].length, max);\n      naf[a] = new Array(max);\n      naf[b] = new Array(max);\n\n      for (var j = 0; j < max; j++) {\n        var ja = jsf[0][j] | 0;\n        var jb = jsf[1][j] | 0;\n        naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n        naf[b][j] = 0;\n        wnd[a] = comb;\n      }\n    }\n\n    var acc = this.jpoint(null, null, null);\n    var tmp = this._wnafT4;\n\n    for (var i = max; i >= 0; i--) {\n      var k = 0;\n\n      while (i >= 0) {\n        var zero = true;\n\n        for (var j = 0; j < len; j++) {\n          tmp[j] = naf[j][i] | 0;\n          if (tmp[j] !== 0) zero = false;\n        }\n\n        if (!zero) break;\n        k++;\n        i--;\n      }\n\n      if (i >= 0) k++;\n      acc = acc.dblp(k);\n      if (i < 0) break;\n\n      for (var j = 0; j < len; j++) {\n        var z = tmp[j];\n        var p;\n        if (z === 0) continue;else if (z > 0) p = wnd[j][z - 1 >> 1];else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();\n        if (p.type === 'affine') acc = acc.mixedAdd(p);else acc = acc.add(p);\n      }\n    } // Zeroify references\n\n\n    for (var i = 0; i < len; i++) wnd[i] = null;\n\n    if (jacobianResult) return acc;else return acc.toP();\n  };\n\n  function BasePoint(curve, type) {\n    this.curve = curve;\n    this.type = type;\n    this.precomputed = null;\n  }\n\n  BaseCurve.BasePoint = BasePoint;\n\n  BasePoint.prototype.eq = function eq()\n  /*other*/\n  {\n    throw new Error('Not implemented');\n  };\n\n  BasePoint.prototype.validate = function validate() {\n    return this.curve.validate(this);\n  };\n\n  BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n    bytes = utils_1$1.toArray(bytes, enc);\n    var len = this.p.byteLength(); // uncompressed, hybrid-odd, hybrid-even\n\n    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {\n      if (bytes[0] === 0x06) assert$2(bytes[bytes.length - 1] % 2 === 0);else if (bytes[0] === 0x07) assert$2(bytes[bytes.length - 1] % 2 === 1);\n      var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));\n      return res;\n    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {\n      return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n    }\n\n    throw new Error('Unknown point format');\n  };\n\n  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n    return this.encode(enc, true);\n  };\n\n  BasePoint.prototype._encode = function _encode(compact) {\n    var len = this.curve.p.byteLength();\n    var x = this.getX().toArray('be', len);\n    if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);\n    return [0x04].concat(x, this.getY().toArray('be', len));\n  };\n\n  BasePoint.prototype.encode = function encode(enc, compact) {\n    return utils_1$1.encode(this._encode(compact), enc);\n  };\n\n  BasePoint.prototype.precompute = function precompute(power) {\n    if (this.precomputed) return this;\n    var precomputed = {\n      doubles: null,\n      naf: null,\n      beta: null\n    };\n    precomputed.naf = this._getNAFPoints(8);\n    precomputed.doubles = this._getDoubles(4, power);\n    precomputed.beta = this._getBeta();\n    this.precomputed = precomputed;\n    return this;\n  };\n\n  BasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n    if (!this.precomputed) return false;\n    var doubles = this.precomputed.doubles;\n    if (!doubles) return false;\n    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n  };\n\n  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;\n    var doubles = [this];\n    var acc = this;\n\n    for (var i = 0; i < power; i += step) {\n      for (var j = 0; j < step; j++) acc = acc.dbl();\n\n      doubles.push(acc);\n    }\n\n    return {\n      step: step,\n      points: doubles\n    };\n  };\n\n  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;\n    var res = [this];\n    var max = (1 << wnd) - 1;\n    var dbl = max === 1 ? null : this.dbl();\n\n    for (var i = 1; i < max; i++) res[i] = res[i - 1].add(dbl);\n\n    return {\n      wnd: wnd,\n      points: res\n    };\n  };\n\n  BasePoint.prototype._getBeta = function _getBeta() {\n    return null;\n  };\n\n  BasePoint.prototype.dblp = function dblp(k) {\n    var r = this;\n\n    for (var i = 0; i < k; i++) r = r.dbl();\n\n    return r;\n  };\n\n  var assert$3 = utils_1$1.assert;\n\n  function ShortCurve(conf) {\n    base.call(this, 'short', conf);\n    this.a = new bn(conf.a, 16).toRed(this.red);\n    this.b = new bn(conf.b, 16).toRed(this.red);\n    this.tinv = this.two.redInvm();\n    this.zeroA = this.a.fromRed().cmpn(0) === 0;\n    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0; // If the curve is endomorphic, precalculate beta and lambda\n\n    this.endo = this._getEndomorphism(conf);\n    this._endoWnafT1 = new Array(4);\n    this._endoWnafT2 = new Array(4);\n  }\n\n  inherits_browser(ShortCurve, base);\n  var short_1 = ShortCurve;\n\n  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n    // No efficient endomorphism\n    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return; // Compute beta and lambda, that lambda * P = (beta * Px; Py)\n\n    var beta;\n    var lambda;\n\n    if (conf.beta) {\n      beta = new bn(conf.beta, 16).toRed(this.red);\n    } else {\n      var betas = this._getEndoRoots(this.p); // Choose the smallest beta\n\n\n      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n      beta = beta.toRed(this.red);\n    }\n\n    if (conf.lambda) {\n      lambda = new bn(conf.lambda, 16);\n    } else {\n      // Choose the lambda that is matching selected beta\n      var lambdas = this._getEndoRoots(this.n);\n\n      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n        lambda = lambdas[0];\n      } else {\n        lambda = lambdas[1];\n        assert$3(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n      }\n    } // Get basis vectors, used for balanced length-two representation\n\n\n    var basis;\n\n    if (conf.basis) {\n      basis = conf.basis.map(function (vec) {\n        return {\n          a: new bn(vec.a, 16),\n          b: new bn(vec.b, 16)\n        };\n      });\n    } else {\n      basis = this._getEndoBasis(lambda);\n    }\n\n    return {\n      beta: beta,\n      lambda: lambda,\n      basis: basis\n    };\n  };\n\n  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n    // Find roots of for x^2 + x + 1 in F\n    // Root = (-1 +- Sqrt(-3)) / 2\n    //\n    var red = num === this.p ? this.red : bn.mont(num);\n    var tinv = new bn(2).toRed(red).redInvm();\n    var ntinv = tinv.redNeg();\n    var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n    var l1 = ntinv.redAdd(s).fromRed();\n    var l2 = ntinv.redSub(s).fromRed();\n    return [l1, l2];\n  };\n\n  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n    // aprxSqrt >= sqrt(this.n)\n    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2)); // 3.74\n    // Run EGCD, until r(L + 1) < aprxSqrt\n\n    var u = lambda;\n    var v = this.n.clone();\n    var x1 = new bn(1);\n    var y1 = new bn(0);\n    var x2 = new bn(0);\n    var y2 = new bn(1); // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\n\n    var a0;\n    var b0; // First vector\n\n    var a1;\n    var b1; // Second vector\n\n    var a2;\n    var b2;\n    var prevR;\n    var i = 0;\n    var r;\n    var x;\n\n    while (u.cmpn(0) !== 0) {\n      var q = v.div(u);\n      r = v.sub(q.mul(u));\n      x = x2.sub(q.mul(x1));\n      var y = y2.sub(q.mul(y1));\n\n      if (!a1 && r.cmp(aprxSqrt) < 0) {\n        a0 = prevR.neg();\n        b0 = x1;\n        a1 = r.neg();\n        b1 = x;\n      } else if (a1 && ++i === 2) {\n        break;\n      }\n\n      prevR = r;\n      v = u;\n      u = r;\n      x2 = x1;\n      x1 = x;\n      y2 = y1;\n      y1 = y;\n    }\n\n    a2 = r.neg();\n    b2 = x;\n    var len1 = a1.sqr().add(b1.sqr());\n    var len2 = a2.sqr().add(b2.sqr());\n\n    if (len2.cmp(len1) >= 0) {\n      a2 = a0;\n      b2 = b0;\n    } // Normalize signs\n\n\n    if (a1.negative) {\n      a1 = a1.neg();\n      b1 = b1.neg();\n    }\n\n    if (a2.negative) {\n      a2 = a2.neg();\n      b2 = b2.neg();\n    }\n\n    return [{\n      a: a1,\n      b: b1\n    }, {\n      a: a2,\n      b: b2\n    }];\n  };\n\n  ShortCurve.prototype._endoSplit = function _endoSplit(k) {\n    var basis = this.endo.basis;\n    var v1 = basis[0];\n    var v2 = basis[1];\n    var c1 = v2.b.mul(k).divRound(this.n);\n    var c2 = v1.b.neg().mul(k).divRound(this.n);\n    var p1 = c1.mul(v1.a);\n    var p2 = c2.mul(v2.a);\n    var q1 = c1.mul(v1.b);\n    var q2 = c2.mul(v2.b); // Calculate answer\n\n    var k1 = k.sub(p1).sub(p2);\n    var k2 = q1.add(q2).neg();\n    return {\n      k1: k1,\n      k2: k2\n    };\n  };\n\n  ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n    x = new bn(x, 16);\n    if (!x.red) x = x.toRed(this.red);\n    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n    var y = y2.redSqrt();\n    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point'); // XXX Is there any way to tell if the number is odd without converting it\n    // to non-red form?\n\n    var isOdd = y.fromRed().isOdd();\n    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();\n    return this.point(x, y);\n  };\n\n  ShortCurve.prototype.validate = function validate(point) {\n    if (point.inf) return true;\n    var x = point.x;\n    var y = point.y;\n    var ax = this.a.redMul(x);\n    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n    return y.redSqr().redISub(rhs).cmpn(0) === 0;\n  };\n\n  ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n    var npoints = this._endoWnafT1;\n    var ncoeffs = this._endoWnafT2;\n\n    for (var i = 0; i < points.length; i++) {\n      var split = this._endoSplit(coeffs[i]);\n\n      var p = points[i];\n\n      var beta = p._getBeta();\n\n      if (split.k1.negative) {\n        split.k1.ineg();\n        p = p.neg(true);\n      }\n\n      if (split.k2.negative) {\n        split.k2.ineg();\n        beta = beta.neg(true);\n      }\n\n      npoints[i * 2] = p;\n      npoints[i * 2 + 1] = beta;\n      ncoeffs[i * 2] = split.k1;\n      ncoeffs[i * 2 + 1] = split.k2;\n    }\n\n    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult); // Clean-up references to points and coefficients\n\n\n    for (var j = 0; j < i * 2; j++) {\n      npoints[j] = null;\n      ncoeffs[j] = null;\n    }\n\n    return res;\n  };\n\n  function Point(curve, x, y, isRed) {\n    base.BasePoint.call(this, curve, 'affine');\n\n    if (x === null && y === null) {\n      this.x = null;\n      this.y = null;\n      this.inf = true;\n    } else {\n      this.x = new bn(x, 16);\n      this.y = new bn(y, 16); // Force redgomery representation when loading from JSON\n\n      if (isRed) {\n        this.x.forceRed(this.curve.red);\n        this.y.forceRed(this.curve.red);\n      }\n\n      if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n      if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n      this.inf = false;\n    }\n  }\n\n  inherits_browser(Point, base.BasePoint);\n\n  ShortCurve.prototype.point = function point(x, y, isRed) {\n    return new Point(this, x, y, isRed);\n  };\n\n  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n    return Point.fromJSON(this, obj, red);\n  };\n\n  Point.prototype._getBeta = function _getBeta() {\n    if (!this.curve.endo) return;\n    var pre = this.precomputed;\n    if (pre && pre.beta) return pre.beta;\n    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n\n    if (pre) {\n      var curve = this.curve;\n\n      var endoMul = function (p) {\n        return curve.point(p.x.redMul(curve.endo.beta), p.y);\n      };\n\n      pre.beta = beta;\n      beta.precomputed = {\n        beta: null,\n        naf: pre.naf && {\n          wnd: pre.naf.wnd,\n          points: pre.naf.points.map(endoMul)\n        },\n        doubles: pre.doubles && {\n          step: pre.doubles.step,\n          points: pre.doubles.points.map(endoMul)\n        }\n      };\n    }\n\n    return beta;\n  };\n\n  Point.prototype.toJSON = function toJSON() {\n    if (!this.precomputed) return [this.x, this.y];\n    return [this.x, this.y, this.precomputed && {\n      doubles: this.precomputed.doubles && {\n        step: this.precomputed.doubles.step,\n        points: this.precomputed.doubles.points.slice(1)\n      },\n      naf: this.precomputed.naf && {\n        wnd: this.precomputed.naf.wnd,\n        points: this.precomputed.naf.points.slice(1)\n      }\n    }];\n  };\n\n  Point.fromJSON = function fromJSON(curve, obj, red) {\n    if (typeof obj === 'string') obj = JSON.parse(obj);\n    var res = curve.point(obj[0], obj[1], red);\n    if (!obj[2]) return res;\n\n    function obj2point(obj) {\n      return curve.point(obj[0], obj[1], red);\n    }\n\n    var pre = obj[2];\n    res.precomputed = {\n      beta: null,\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: [res].concat(pre.doubles.points.map(obj2point))\n      },\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: [res].concat(pre.naf.points.map(obj2point))\n      }\n    };\n    return res;\n  };\n\n  Point.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return '<EC Point Infinity>';\n    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';\n  };\n\n  Point.prototype.isInfinity = function isInfinity() {\n    return this.inf;\n  };\n\n  Point.prototype.add = function add(p) {\n    // O + P = P\n    if (this.inf) return p; // P + O = P\n\n    if (p.inf) return this; // P + P = 2P\n\n    if (this.eq(p)) return this.dbl(); // P + (-P) = O\n\n    if (this.neg().eq(p)) return this.curve.point(null, null); // P + Q = O\n\n    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);\n    var c = this.y.redSub(p.y);\n    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());\n    var nx = c.redSqr().redISub(this.x).redISub(p.x);\n    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n    return this.curve.point(nx, ny);\n  };\n\n  Point.prototype.dbl = function dbl() {\n    if (this.inf) return this; // 2P = O\n\n    var ys1 = this.y.redAdd(this.y);\n    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);\n    var a = this.curve.a;\n    var x2 = this.x.redSqr();\n    var dyinv = ys1.redInvm();\n    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n    var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n    return this.curve.point(nx, ny);\n  };\n\n  Point.prototype.getX = function getX() {\n    return this.x.fromRed();\n  };\n\n  Point.prototype.getY = function getY() {\n    return this.y.fromRed();\n  };\n\n  Point.prototype.mul = function mul(k) {\n    k = new bn(k, 16);\n    if (this.isInfinity()) return this;else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);else return this.curve._wnafMul(this, k);\n  };\n\n  Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n    var points = [this, p2];\n    var coeffs = [k1, k2];\n    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);else return this.curve._wnafMulAdd(1, points, coeffs, 2);\n  };\n\n  Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n    var points = [this, p2];\n    var coeffs = [k1, k2];\n    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n  };\n\n  Point.prototype.eq = function eq(p) {\n    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n  };\n\n  Point.prototype.neg = function neg(_precompute) {\n    if (this.inf) return this;\n    var res = this.curve.point(this.x, this.y.redNeg());\n\n    if (_precompute && this.precomputed) {\n      var pre = this.precomputed;\n\n      var negate = function (p) {\n        return p.neg();\n      };\n\n      res.precomputed = {\n        naf: pre.naf && {\n          wnd: pre.naf.wnd,\n          points: pre.naf.points.map(negate)\n        },\n        doubles: pre.doubles && {\n          step: pre.doubles.step,\n          points: pre.doubles.points.map(negate)\n        }\n      };\n    }\n\n    return res;\n  };\n\n  Point.prototype.toJ = function toJ() {\n    if (this.inf) return this.curve.jpoint(null, null, null);\n    var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n    return res;\n  };\n\n  function JPoint(curve, x, y, z) {\n    base.BasePoint.call(this, curve, 'jacobian');\n\n    if (x === null && y === null && z === null) {\n      this.x = this.curve.one;\n      this.y = this.curve.one;\n      this.z = new bn(0);\n    } else {\n      this.x = new bn(x, 16);\n      this.y = new bn(y, 16);\n      this.z = new bn(z, 16);\n    }\n\n    if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n    if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n    this.zOne = this.z === this.curve.one;\n  }\n\n  inherits_browser(JPoint, base.BasePoint);\n\n  ShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n    return new JPoint(this, x, y, z);\n  };\n\n  JPoint.prototype.toP = function toP() {\n    if (this.isInfinity()) return this.curve.point(null, null);\n    var zinv = this.z.redInvm();\n    var zinv2 = zinv.redSqr();\n    var ax = this.x.redMul(zinv2);\n    var ay = this.y.redMul(zinv2).redMul(zinv);\n    return this.curve.point(ax, ay);\n  };\n\n  JPoint.prototype.neg = function neg() {\n    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n  };\n\n  JPoint.prototype.add = function add(p) {\n    // O + P = P\n    if (this.isInfinity()) return p; // P + O = P\n\n    if (p.isInfinity()) return this; // 12M + 4S + 7A\n\n    var pz2 = p.z.redSqr();\n    var z2 = this.z.redSqr();\n    var u1 = this.x.redMul(pz2);\n    var u2 = p.x.redMul(z2);\n    var s1 = this.y.redMul(pz2.redMul(p.z));\n    var s2 = p.y.redMul(z2.redMul(this.z));\n    var h = u1.redSub(u2);\n    var r = s1.redSub(s2);\n\n    if (h.cmpn(0) === 0) {\n      if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();\n    }\n\n    var h2 = h.redSqr();\n    var h3 = h2.redMul(h);\n    var v = u1.redMul(h2);\n    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n    var nz = this.z.redMul(p.z).redMul(h);\n    return this.curve.jpoint(nx, ny, nz);\n  };\n\n  JPoint.prototype.mixedAdd = function mixedAdd(p) {\n    // O + P = P\n    if (this.isInfinity()) return p.toJ(); // P + O = P\n\n    if (p.isInfinity()) return this; // 8M + 3S + 7A\n\n    var z2 = this.z.redSqr();\n    var u1 = this.x;\n    var u2 = p.x.redMul(z2);\n    var s1 = this.y;\n    var s2 = p.y.redMul(z2).redMul(this.z);\n    var h = u1.redSub(u2);\n    var r = s1.redSub(s2);\n\n    if (h.cmpn(0) === 0) {\n      if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();\n    }\n\n    var h2 = h.redSqr();\n    var h3 = h2.redMul(h);\n    var v = u1.redMul(h2);\n    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n    var nz = this.z.redMul(h);\n    return this.curve.jpoint(nx, ny, nz);\n  };\n\n  JPoint.prototype.dblp = function dblp(pow) {\n    if (pow === 0) return this;\n    if (this.isInfinity()) return this;\n    if (!pow) return this.dbl();\n\n    if (this.curve.zeroA || this.curve.threeA) {\n      var r = this;\n\n      for (var i = 0; i < pow; i++) r = r.dbl();\n\n      return r;\n    } // 1M + 2S + 1A + N * (4S + 5M + 8A)\n    // N = 1 => 6M + 6S + 9A\n\n\n    var a = this.curve.a;\n    var tinv = this.curve.tinv;\n    var jx = this.x;\n    var jy = this.y;\n    var jz = this.z;\n    var jz4 = jz.redSqr().redSqr(); // Reuse results\n\n    var jyd = jy.redAdd(jy);\n\n    for (var i = 0; i < pow; i++) {\n      var jx2 = jx.redSqr();\n      var jyd2 = jyd.redSqr();\n      var jyd4 = jyd2.redSqr();\n      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n      var t1 = jx.redMul(jyd2);\n      var nx = c.redSqr().redISub(t1.redAdd(t1));\n      var t2 = t1.redISub(nx);\n      var dny = c.redMul(t2);\n      dny = dny.redIAdd(dny).redISub(jyd4);\n      var nz = jyd.redMul(jz);\n      if (i + 1 < pow) jz4 = jz4.redMul(jyd4);\n      jx = nx;\n      jz = nz;\n      jyd = dny;\n    }\n\n    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n  };\n\n  JPoint.prototype.dbl = function dbl() {\n    if (this.isInfinity()) return this;\n    if (this.curve.zeroA) return this._zeroDbl();else if (this.curve.threeA) return this._threeDbl();else return this._dbl();\n  };\n\n  JPoint.prototype._zeroDbl = function _zeroDbl() {\n    var nx;\n    var ny;\n    var nz; // Z = 1\n\n    if (this.zOne) {\n      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n      //     #doubling-mdbl-2007-bl\n      // 1M + 5S + 14A\n      // XX = X1^2\n      var xx = this.x.redSqr(); // YY = Y1^2\n\n      var yy = this.y.redSqr(); // YYYY = YY^2\n\n      var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n\n      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n      s = s.redIAdd(s); // M = 3 * XX + a; a = 0\n\n      var m = xx.redAdd(xx).redIAdd(xx); // T = M ^ 2 - 2*S\n\n      var t = m.redSqr().redISub(s).redISub(s); // 8 * YYYY\n\n      var yyyy8 = yyyy.redIAdd(yyyy);\n      yyyy8 = yyyy8.redIAdd(yyyy8);\n      yyyy8 = yyyy8.redIAdd(yyyy8); // X3 = T\n\n      nx = t; // Y3 = M * (S - T) - 8 * YYYY\n\n      ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2*Y1\n\n      nz = this.y.redAdd(this.y);\n    } else {\n      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n      //     #doubling-dbl-2009-l\n      // 2M + 5S + 13A\n      // A = X1^2\n      var a = this.x.redSqr(); // B = Y1^2\n\n      var b = this.y.redSqr(); // C = B^2\n\n      var c = b.redSqr(); // D = 2 * ((X1 + B)^2 - A - C)\n\n      var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n      d = d.redIAdd(d); // E = 3 * A\n\n      var e = a.redAdd(a).redIAdd(a); // F = E^2\n\n      var f = e.redSqr(); // 8 * C\n\n      var c8 = c.redIAdd(c);\n      c8 = c8.redIAdd(c8);\n      c8 = c8.redIAdd(c8); // X3 = F - 2 * D\n\n      nx = f.redISub(d).redISub(d); // Y3 = E * (D - X3) - 8 * C\n\n      ny = e.redMul(d.redISub(nx)).redISub(c8); // Z3 = 2 * Y1 * Z1\n\n      nz = this.y.redMul(this.z);\n      nz = nz.redIAdd(nz);\n    }\n\n    return this.curve.jpoint(nx, ny, nz);\n  };\n\n  JPoint.prototype._threeDbl = function _threeDbl() {\n    var nx;\n    var ny;\n    var nz; // Z = 1\n\n    if (this.zOne) {\n      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html\n      //     #doubling-mdbl-2007-bl\n      // 1M + 5S + 15A\n      // XX = X1^2\n      var xx = this.x.redSqr(); // YY = Y1^2\n\n      var yy = this.y.redSqr(); // YYYY = YY^2\n\n      var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n\n      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n      s = s.redIAdd(s); // M = 3 * XX + a\n\n      var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a); // T = M^2 - 2 * S\n\n      var t = m.redSqr().redISub(s).redISub(s); // X3 = T\n\n      nx = t; // Y3 = M * (S - T) - 8 * YYYY\n\n      var yyyy8 = yyyy.redIAdd(yyyy);\n      yyyy8 = yyyy8.redIAdd(yyyy8);\n      yyyy8 = yyyy8.redIAdd(yyyy8);\n      ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2 * Y1\n\n      nz = this.y.redAdd(this.y);\n    } else {\n      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n      // 3M + 5S\n      // delta = Z1^2\n      var delta = this.z.redSqr(); // gamma = Y1^2\n\n      var gamma = this.y.redSqr(); // beta = X1 * gamma\n\n      var beta = this.x.redMul(gamma); // alpha = 3 * (X1 - delta) * (X1 + delta)\n\n      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n      alpha = alpha.redAdd(alpha).redIAdd(alpha); // X3 = alpha^2 - 8 * beta\n\n      var beta4 = beta.redIAdd(beta);\n      beta4 = beta4.redIAdd(beta4);\n      var beta8 = beta4.redAdd(beta4);\n      nx = alpha.redSqr().redISub(beta8); // Z3 = (Y1 + Z1)^2 - gamma - delta\n\n      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta); // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n\n      var ggamma8 = gamma.redSqr();\n      ggamma8 = ggamma8.redIAdd(ggamma8);\n      ggamma8 = ggamma8.redIAdd(ggamma8);\n      ggamma8 = ggamma8.redIAdd(ggamma8);\n      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n    }\n\n    return this.curve.jpoint(nx, ny, nz);\n  };\n\n  JPoint.prototype._dbl = function _dbl() {\n    var a = this.curve.a; // 4M + 6S + 10A\n\n    var jx = this.x;\n    var jy = this.y;\n    var jz = this.z;\n    var jz4 = jz.redSqr().redSqr();\n    var jx2 = jx.redSqr();\n    var jy2 = jy.redSqr();\n    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n    var jxd4 = jx.redAdd(jx);\n    jxd4 = jxd4.redIAdd(jxd4);\n    var t1 = jxd4.redMul(jy2);\n    var nx = c.redSqr().redISub(t1.redAdd(t1));\n    var t2 = t1.redISub(nx);\n    var jyd8 = jy2.redSqr();\n    jyd8 = jyd8.redIAdd(jyd8);\n    jyd8 = jyd8.redIAdd(jyd8);\n    jyd8 = jyd8.redIAdd(jyd8);\n    var ny = c.redMul(t2).redISub(jyd8);\n    var nz = jy.redAdd(jy).redMul(jz);\n    return this.curve.jpoint(nx, ny, nz);\n  };\n\n  JPoint.prototype.trpl = function trpl() {\n    if (!this.curve.zeroA) return this.dbl().add(this); // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl\n    // 5M + 10S + ...\n    // XX = X1^2\n\n    var xx = this.x.redSqr(); // YY = Y1^2\n\n    var yy = this.y.redSqr(); // ZZ = Z1^2\n\n    var zz = this.z.redSqr(); // YYYY = YY^2\n\n    var yyyy = yy.redSqr(); // M = 3 * XX + a * ZZ2; a = 0\n\n    var m = xx.redAdd(xx).redIAdd(xx); // MM = M^2\n\n    var mm = m.redSqr(); // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM\n\n    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    e = e.redIAdd(e);\n    e = e.redAdd(e).redIAdd(e);\n    e = e.redISub(mm); // EE = E^2\n\n    var ee = e.redSqr(); // T = 16*YYYY\n\n    var t = yyyy.redIAdd(yyyy);\n    t = t.redIAdd(t);\n    t = t.redIAdd(t);\n    t = t.redIAdd(t); // U = (M + E)^2 - MM - EE - T\n\n    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t); // X3 = 4 * (X1 * EE - 4 * YY * U)\n\n    var yyu4 = yy.redMul(u);\n    yyu4 = yyu4.redIAdd(yyu4);\n    yyu4 = yyu4.redIAdd(yyu4);\n    var nx = this.x.redMul(ee).redISub(yyu4);\n    nx = nx.redIAdd(nx);\n    nx = nx.redIAdd(nx); // Y3 = 8 * Y1 * (U * (T - U) - E * EE)\n\n    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n    ny = ny.redIAdd(ny);\n    ny = ny.redIAdd(ny);\n    ny = ny.redIAdd(ny); // Z3 = (Z1 + E)^2 - ZZ - EE\n\n    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n    return this.curve.jpoint(nx, ny, nz);\n  };\n\n  JPoint.prototype.mul = function mul(k, kbase) {\n    k = new bn(k, kbase);\n    return this.curve._wnafMul(this, k);\n  };\n\n  JPoint.prototype.eq = function eq(p) {\n    if (p.type === 'affine') return this.eq(p.toJ());\n    if (this === p) return true; // x1 * z2^2 == x2 * z1^2\n\n    var z2 = this.z.redSqr();\n    var pz2 = p.z.redSqr();\n    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false; // y1 * z2^3 == y2 * z1^3\n\n    var z3 = z2.redMul(this.z);\n    var pz3 = pz2.redMul(p.z);\n    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n  };\n\n  JPoint.prototype.eqXToP = function eqXToP(x) {\n    var zs = this.z.redSqr();\n    var rx = x.toRed(this.curve.red).redMul(zs);\n    if (this.x.cmp(rx) === 0) return true;\n    var xc = x.clone();\n    var t = this.curve.redN.redMul(zs);\n\n    for (;;) {\n      xc.iadd(this.curve.n);\n      if (xc.cmp(this.curve.p) >= 0) return false;\n      rx.redIAdd(t);\n      if (this.x.cmp(rx) === 0) return true;\n    }\n  };\n\n  JPoint.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return '<EC JPoint Infinity>';\n    return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';\n  };\n\n  JPoint.prototype.isInfinity = function isInfinity() {\n    // XXX This code assumes that zero is always zero in red\n    return this.z.cmpn(0) === 0;\n  };\n\n  function MontCurve(conf) {\n    base.call(this, 'mont', conf);\n    this.a = new bn(conf.a, 16).toRed(this.red);\n    this.b = new bn(conf.b, 16).toRed(this.red);\n    this.i4 = new bn(4).toRed(this.red).redInvm();\n    this.two = new bn(2).toRed(this.red);\n    this.a24 = this.i4.redMul(this.a.redAdd(this.two));\n  }\n\n  inherits_browser(MontCurve, base);\n  var mont = MontCurve;\n\n  MontCurve.prototype.validate = function validate(point) {\n    var x = point.normalize().x;\n    var x2 = x.redSqr();\n    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);\n    var y = rhs.redSqrt();\n    return y.redSqr().cmp(rhs) === 0;\n  };\n\n  function Point$1(curve, x, z) {\n    base.BasePoint.call(this, curve, 'projective');\n\n    if (x === null && z === null) {\n      this.x = this.curve.one;\n      this.z = this.curve.zero;\n    } else {\n      this.x = new bn(x, 16);\n      this.z = new bn(z, 16);\n      if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n      if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n    }\n  }\n\n  inherits_browser(Point$1, base.BasePoint);\n\n  MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n    return this.point(utils_1$1.toArray(bytes, enc), 1);\n  };\n\n  MontCurve.prototype.point = function point(x, z) {\n    return new Point$1(this, x, z);\n  };\n\n  MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n    return Point$1.fromJSON(this, obj);\n  };\n\n  Point$1.prototype.precompute = function precompute() {// No-op\n  };\n\n  Point$1.prototype._encode = function _encode() {\n    return this.getX().toArray('be', this.curve.p.byteLength());\n  };\n\n  Point$1.fromJSON = function fromJSON(curve, obj) {\n    return new Point$1(curve, obj[0], obj[1] || curve.one);\n  };\n\n  Point$1.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return '<EC Point Infinity>';\n    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n  };\n\n  Point$1.prototype.isInfinity = function isInfinity() {\n    // XXX This code assumes that zero is always zero in red\n    return this.z.cmpn(0) === 0;\n  };\n\n  Point$1.prototype.dbl = function dbl() {\n    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3\n    // 2M + 2S + 4A\n    // A = X1 + Z1\n    var a = this.x.redAdd(this.z); // AA = A^2\n\n    var aa = a.redSqr(); // B = X1 - Z1\n\n    var b = this.x.redSub(this.z); // BB = B^2\n\n    var bb = b.redSqr(); // C = AA - BB\n\n    var c = aa.redSub(bb); // X3 = AA * BB\n\n    var nx = aa.redMul(bb); // Z3 = C * (BB + A24 * C)\n\n    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));\n    return this.curve.point(nx, nz);\n  };\n\n  Point$1.prototype.add = function add() {\n    throw new Error('Not supported on Montgomery curve');\n  };\n\n  Point$1.prototype.diffAdd = function diffAdd(p, diff) {\n    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3\n    // 4M + 2S + 6A\n    // A = X2 + Z2\n    var a = this.x.redAdd(this.z); // B = X2 - Z2\n\n    var b = this.x.redSub(this.z); // C = X3 + Z3\n\n    var c = p.x.redAdd(p.z); // D = X3 - Z3\n\n    var d = p.x.redSub(p.z); // DA = D * A\n\n    var da = d.redMul(a); // CB = C * B\n\n    var cb = c.redMul(b); // X5 = Z1 * (DA + CB)^2\n\n    var nx = diff.z.redMul(da.redAdd(cb).redSqr()); // Z5 = X1 * (DA - CB)^2\n\n    var nz = diff.x.redMul(da.redISub(cb).redSqr());\n    return this.curve.point(nx, nz);\n  };\n\n  Point$1.prototype.mul = function mul(k) {\n    var t = k.clone();\n    var a = this; // (N / 2) * Q + Q\n\n    var b = this.curve.point(null, null); // (N / 2) * Q\n\n    var c = this; // Q\n\n    for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1)) bits.push(t.andln(1));\n\n    for (var i = bits.length - 1; i >= 0; i--) {\n      if (bits[i] === 0) {\n        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q\n        a = a.diffAdd(b, c); // N * Q = 2 * ((N / 2) * Q + Q))\n\n        b = b.dbl();\n      } else {\n        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)\n        b = a.diffAdd(b, c); // N * Q + Q = 2 * ((N / 2) * Q + Q)\n\n        a = a.dbl();\n      }\n    }\n\n    return b;\n  };\n\n  Point$1.prototype.mulAdd = function mulAdd() {\n    throw new Error('Not supported on Montgomery curve');\n  };\n\n  Point$1.prototype.jumlAdd = function jumlAdd() {\n    throw new Error('Not supported on Montgomery curve');\n  };\n\n  Point$1.prototype.eq = function eq(other) {\n    return this.getX().cmp(other.getX()) === 0;\n  };\n\n  Point$1.prototype.normalize = function normalize() {\n    this.x = this.x.redMul(this.z.redInvm());\n    this.z = this.curve.one;\n    return this;\n  };\n\n  Point$1.prototype.getX = function getX() {\n    // Normalize coordinates\n    this.normalize();\n    return this.x.fromRed();\n  };\n\n  var assert$4 = utils_1$1.assert;\n\n  function EdwardsCurve(conf) {\n    // NOTE: Important as we are creating point in Base.call()\n    this.twisted = (conf.a | 0) !== 1;\n    this.mOneA = this.twisted && (conf.a | 0) === -1;\n    this.extended = this.mOneA;\n    base.call(this, 'edwards', conf);\n    this.a = new bn(conf.a, 16).umod(this.red.m);\n    this.a = this.a.toRed(this.red);\n    this.c = new bn(conf.c, 16).toRed(this.red);\n    this.c2 = this.c.redSqr();\n    this.d = new bn(conf.d, 16).toRed(this.red);\n    this.dd = this.d.redAdd(this.d);\n    assert$4(!this.twisted || this.c.fromRed().cmpn(1) === 0);\n    this.oneC = (conf.c | 0) === 1;\n  }\n\n  inherits_browser(EdwardsCurve, base);\n  var edwards = EdwardsCurve;\n\n  EdwardsCurve.prototype._mulA = function _mulA(num) {\n    if (this.mOneA) return num.redNeg();else return this.a.redMul(num);\n  };\n\n  EdwardsCurve.prototype._mulC = function _mulC(num) {\n    if (this.oneC) return num;else return this.c.redMul(num);\n  }; // Just for compatibility with Short curve\n\n\n  EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {\n    return this.point(x, y, z, t);\n  };\n\n  EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {\n    x = new bn(x, 16);\n    if (!x.red) x = x.toRed(this.red);\n    var x2 = x.redSqr();\n    var rhs = this.c2.redSub(this.a.redMul(x2));\n    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));\n    var y2 = rhs.redMul(lhs.redInvm());\n    var y = y2.redSqrt();\n    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');\n    var isOdd = y.fromRed().isOdd();\n    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();\n    return this.point(x, y);\n  };\n\n  EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {\n    y = new bn(y, 16);\n    if (!y.red) y = y.toRed(this.red); // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)\n\n    var y2 = y.redSqr();\n    var lhs = y2.redSub(this.c2);\n    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);\n    var x2 = lhs.redMul(rhs.redInvm());\n\n    if (x2.cmp(this.zero) === 0) {\n      if (odd) throw new Error('invalid point');else return this.point(this.zero, y);\n    }\n\n    var x = x2.redSqrt();\n    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');\n    if (x.fromRed().isOdd() !== odd) x = x.redNeg();\n    return this.point(x, y);\n  };\n\n  EdwardsCurve.prototype.validate = function validate(point) {\n    if (point.isInfinity()) return true; // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)\n\n    point.normalize();\n    var x2 = point.x.redSqr();\n    var y2 = point.y.redSqr();\n    var lhs = x2.redMul(this.a).redAdd(y2);\n    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));\n    return lhs.cmp(rhs) === 0;\n  };\n\n  function Point$2(curve, x, y, z, t) {\n    base.BasePoint.call(this, curve, 'projective');\n\n    if (x === null && y === null && z === null) {\n      this.x = this.curve.zero;\n      this.y = this.curve.one;\n      this.z = this.curve.one;\n      this.t = this.curve.zero;\n      this.zOne = true;\n    } else {\n      this.x = new bn(x, 16);\n      this.y = new bn(y, 16);\n      this.z = z ? new bn(z, 16) : this.curve.one;\n      this.t = t && new bn(t, 16);\n      if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n      if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n      if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n      if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);\n      this.zOne = this.z === this.curve.one; // Use extended coordinates\n\n      if (this.curve.extended && !this.t) {\n        this.t = this.x.redMul(this.y);\n        if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());\n      }\n    }\n  }\n\n  inherits_browser(Point$2, base.BasePoint);\n\n  EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n    return Point$2.fromJSON(this, obj);\n  };\n\n  EdwardsCurve.prototype.point = function point(x, y, z, t) {\n    return new Point$2(this, x, y, z, t);\n  };\n\n  Point$2.fromJSON = function fromJSON(curve, obj) {\n    return new Point$2(curve, obj[0], obj[1], obj[2]);\n  };\n\n  Point$2.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return '<EC Point Infinity>';\n    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n  };\n\n  Point$2.prototype.isInfinity = function isInfinity() {\n    // XXX This code assumes that zero is always zero in red\n    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);\n  };\n\n  Point$2.prototype._extDbl = function _extDbl() {\n    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n    //     #doubling-dbl-2008-hwcd\n    // 4M + 4S\n    // A = X1^2\n    var a = this.x.redSqr(); // B = Y1^2\n\n    var b = this.y.redSqr(); // C = 2 * Z1^2\n\n    var c = this.z.redSqr();\n    c = c.redIAdd(c); // D = a * A\n\n    var d = this.curve._mulA(a); // E = (X1 + Y1)^2 - A - B\n\n\n    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b); // G = D + B\n\n    var g = d.redAdd(b); // F = G - C\n\n    var f = g.redSub(c); // H = D - B\n\n    var h = d.redSub(b); // X3 = E * F\n\n    var nx = e.redMul(f); // Y3 = G * H\n\n    var ny = g.redMul(h); // T3 = E * H\n\n    var nt = e.redMul(h); // Z3 = F * G\n\n    var nz = f.redMul(g);\n    return this.curve.point(nx, ny, nz, nt);\n  };\n\n  Point$2.prototype._projDbl = function _projDbl() {\n    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n    //     #doubling-dbl-2008-bbjlp\n    //     #doubling-dbl-2007-bl\n    // and others\n    // Generally 3M + 4S or 2M + 4S\n    // B = (X1 + Y1)^2\n    var b = this.x.redAdd(this.y).redSqr(); // C = X1^2\n\n    var c = this.x.redSqr(); // D = Y1^2\n\n    var d = this.y.redSqr();\n    var nx;\n    var ny;\n    var nz;\n\n    if (this.curve.twisted) {\n      // E = a * C\n      var e = this.curve._mulA(c); // F = E + D\n\n\n      var f = e.redAdd(d);\n\n      if (this.zOne) {\n        // X3 = (B - C - D) * (F - 2)\n        nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two)); // Y3 = F * (E - D)\n\n        ny = f.redMul(e.redSub(d)); // Z3 = F^2 - 2 * F\n\n        nz = f.redSqr().redSub(f).redSub(f);\n      } else {\n        // H = Z1^2\n        var h = this.z.redSqr(); // J = F - 2 * H\n\n        var j = f.redSub(h).redISub(h); // X3 = (B-C-D)*J\n\n        nx = b.redSub(c).redISub(d).redMul(j); // Y3 = F * (E - D)\n\n        ny = f.redMul(e.redSub(d)); // Z3 = F * J\n\n        nz = f.redMul(j);\n      }\n    } else {\n      // E = C + D\n      var e = c.redAdd(d); // H = (c * Z1)^2\n\n      var h = this.curve._mulC(this.z).redSqr(); // J = E - 2 * H\n\n\n      var j = e.redSub(h).redSub(h); // X3 = c * (B - E) * J\n\n      nx = this.curve._mulC(b.redISub(e)).redMul(j); // Y3 = c * E * (C - D)\n\n      ny = this.curve._mulC(e).redMul(c.redISub(d)); // Z3 = E * J\n\n      nz = e.redMul(j);\n    }\n\n    return this.curve.point(nx, ny, nz);\n  };\n\n  Point$2.prototype.dbl = function dbl() {\n    if (this.isInfinity()) return this; // Double in extended coordinates\n\n    if (this.curve.extended) return this._extDbl();else return this._projDbl();\n  };\n\n  Point$2.prototype._extAdd = function _extAdd(p) {\n    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n    //     #addition-add-2008-hwcd-3\n    // 8M\n    // A = (Y1 - X1) * (Y2 - X2)\n    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x)); // B = (Y1 + X1) * (Y2 + X2)\n\n    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x)); // C = T1 * k * T2\n\n    var c = this.t.redMul(this.curve.dd).redMul(p.t); // D = Z1 * 2 * Z2\n\n    var d = this.z.redMul(p.z.redAdd(p.z)); // E = B - A\n\n    var e = b.redSub(a); // F = D - C\n\n    var f = d.redSub(c); // G = D + C\n\n    var g = d.redAdd(c); // H = B + A\n\n    var h = b.redAdd(a); // X3 = E * F\n\n    var nx = e.redMul(f); // Y3 = G * H\n\n    var ny = g.redMul(h); // T3 = E * H\n\n    var nt = e.redMul(h); // Z3 = F * G\n\n    var nz = f.redMul(g);\n    return this.curve.point(nx, ny, nz, nt);\n  };\n\n  Point$2.prototype._projAdd = function _projAdd(p) {\n    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n    //     #addition-add-2008-bbjlp\n    //     #addition-add-2007-bl\n    // 10M + 1S\n    // A = Z1 * Z2\n    var a = this.z.redMul(p.z); // B = A^2\n\n    var b = a.redSqr(); // C = X1 * X2\n\n    var c = this.x.redMul(p.x); // D = Y1 * Y2\n\n    var d = this.y.redMul(p.y); // E = d * C * D\n\n    var e = this.curve.d.redMul(c).redMul(d); // F = B - E\n\n    var f = b.redSub(e); // G = B + E\n\n    var g = b.redAdd(e); // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)\n\n    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);\n    var nx = a.redMul(f).redMul(tmp);\n    var ny;\n    var nz;\n\n    if (this.curve.twisted) {\n      // Y3 = A * G * (D - a * C)\n      ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c))); // Z3 = F * G\n\n      nz = f.redMul(g);\n    } else {\n      // Y3 = A * G * (D - C)\n      ny = a.redMul(g).redMul(d.redSub(c)); // Z3 = c * F * G\n\n      nz = this.curve._mulC(f).redMul(g);\n    }\n\n    return this.curve.point(nx, ny, nz);\n  };\n\n  Point$2.prototype.add = function add(p) {\n    if (this.isInfinity()) return p;\n    if (p.isInfinity()) return this;\n    if (this.curve.extended) return this._extAdd(p);else return this._projAdd(p);\n  };\n\n  Point$2.prototype.mul = function mul(k) {\n    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else return this.curve._wnafMul(this, k);\n  };\n\n  Point$2.prototype.mulAdd = function mulAdd(k1, p, k2) {\n    return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);\n  };\n\n  Point$2.prototype.jmulAdd = function jmulAdd(k1, p, k2) {\n    return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);\n  };\n\n  Point$2.prototype.normalize = function normalize() {\n    if (this.zOne) return this; // Normalize coordinates\n\n    var zi = this.z.redInvm();\n    this.x = this.x.redMul(zi);\n    this.y = this.y.redMul(zi);\n    if (this.t) this.t = this.t.redMul(zi);\n    this.z = this.curve.one;\n    this.zOne = true;\n    return this;\n  };\n\n  Point$2.prototype.neg = function neg() {\n    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());\n  };\n\n  Point$2.prototype.getX = function getX() {\n    this.normalize();\n    return this.x.fromRed();\n  };\n\n  Point$2.prototype.getY = function getY() {\n    this.normalize();\n    return this.y.fromRed();\n  };\n\n  Point$2.prototype.eq = function eq(other) {\n    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;\n  };\n\n  Point$2.prototype.eqXToP = function eqXToP(x) {\n    var rx = x.toRed(this.curve.red).redMul(this.z);\n    if (this.x.cmp(rx) === 0) return true;\n    var xc = x.clone();\n    var t = this.curve.redN.redMul(this.z);\n\n    for (;;) {\n      xc.iadd(this.curve.n);\n      if (xc.cmp(this.curve.p) >= 0) return false;\n      rx.redIAdd(t);\n      if (this.x.cmp(rx) === 0) return true;\n    }\n  }; // Compatibility with BaseCurve\n\n\n  Point$2.prototype.toP = Point$2.prototype.normalize;\n  Point$2.prototype.mixedAdd = Point$2.prototype.add;\n  var curve_1 = createCommonjsModule(function (module, exports) {\n    var curve = exports;\n    curve.base = base;\n    curve.short = short_1;\n    curve.mont = mont;\n    curve.edwards = edwards;\n  });\n  var inherits_1 = inherits_browser;\n\n  function isSurrogatePair(msg, i) {\n    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n      return false;\n    }\n\n    if (i < 0 || i + 1 >= msg.length) {\n      return false;\n    }\n\n    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n  }\n\n  function toArray(msg, enc) {\n    if (Array.isArray(msg)) return msg.slice();\n    if (!msg) return [];\n    var res = [];\n\n    if (typeof msg === 'string') {\n      if (!enc) {\n        // Inspired by stringToUtf8ByteArray() in closure-library by Google\n        // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n        // Apache License 2.0\n        // https://github.com/google/closure-library/blob/master/LICENSE\n        var p = 0;\n\n        for (var i = 0; i < msg.length; i++) {\n          var c = msg.charCodeAt(i);\n\n          if (c < 128) {\n            res[p++] = c;\n          } else if (c < 2048) {\n            res[p++] = c >> 6 | 192;\n            res[p++] = c & 63 | 128;\n          } else if (isSurrogatePair(msg, i)) {\n            c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n            res[p++] = c >> 18 | 240;\n            res[p++] = c >> 12 & 63 | 128;\n            res[p++] = c >> 6 & 63 | 128;\n            res[p++] = c & 63 | 128;\n          } else {\n            res[p++] = c >> 12 | 224;\n            res[p++] = c >> 6 & 63 | 128;\n            res[p++] = c & 63 | 128;\n          }\n        }\n      } else if (enc === 'hex') {\n        msg = msg.replace(/[^a-z0-9]+/ig, '');\n        if (msg.length % 2 !== 0) msg = '0' + msg;\n\n        for (i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));\n      }\n    } else {\n      for (i = 0; i < msg.length; i++) res[i] = msg[i] | 0;\n    }\n\n    return res;\n  }\n\n  var toArray_1 = toArray;\n\n  function toHex$1(msg) {\n    var res = '';\n\n    for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));\n\n    return res;\n  }\n\n  var toHex_1 = toHex$1;\n\n  function htonl(w) {\n    var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;\n    return res >>> 0;\n  }\n\n  var htonl_1 = htonl;\n\n  function toHex32(msg, endian) {\n    var res = '';\n\n    for (var i = 0; i < msg.length; i++) {\n      var w = msg[i];\n      if (endian === 'little') w = htonl(w);\n      res += zero8(w.toString(16));\n    }\n\n    return res;\n  }\n\n  var toHex32_1 = toHex32;\n\n  function zero2(word) {\n    if (word.length === 1) return '0' + word;else return word;\n  }\n\n  var zero2_1 = zero2;\n\n  function zero8(word) {\n    if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;\n  }\n\n  var zero8_1 = zero8;\n\n  function join32(msg, start, end, endian) {\n    var len = end - start;\n    minimalisticAssert(len % 4 === 0);\n    var res = new Array(len / 4);\n\n    for (var i = 0, k = start; i < res.length; i++, k += 4) {\n      var w;\n      if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n      res[i] = w >>> 0;\n    }\n\n    return res;\n  }\n\n  var join32_1 = join32;\n\n  function split32(msg, endian) {\n    var res = new Array(msg.length * 4);\n\n    for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n      var m = msg[i];\n\n      if (endian === 'big') {\n        res[k] = m >>> 24;\n        res[k + 1] = m >>> 16 & 0xff;\n        res[k + 2] = m >>> 8 & 0xff;\n        res[k + 3] = m & 0xff;\n      } else {\n        res[k + 3] = m >>> 24;\n        res[k + 2] = m >>> 16 & 0xff;\n        res[k + 1] = m >>> 8 & 0xff;\n        res[k] = m & 0xff;\n      }\n    }\n\n    return res;\n  }\n\n  var split32_1 = split32;\n\n  function rotr32(w, b) {\n    return w >>> b | w << 32 - b;\n  }\n\n  var rotr32_1 = rotr32;\n\n  function rotl32(w, b) {\n    return w << b | w >>> 32 - b;\n  }\n\n  var rotl32_1 = rotl32;\n\n  function sum32(a, b) {\n    return a + b >>> 0;\n  }\n\n  var sum32_1 = sum32;\n\n  function sum32_3(a, b, c) {\n    return a + b + c >>> 0;\n  }\n\n  var sum32_3_1 = sum32_3;\n\n  function sum32_4(a, b, c, d) {\n    return a + b + c + d >>> 0;\n  }\n\n  var sum32_4_1 = sum32_4;\n\n  function sum32_5(a, b, c, d, e) {\n    return a + b + c + d + e >>> 0;\n  }\n\n  var sum32_5_1 = sum32_5;\n\n  function sum64(buf, pos, ah, al) {\n    var bh = buf[pos];\n    var bl = buf[pos + 1];\n    var lo = al + bl >>> 0;\n    var hi = (lo < al ? 1 : 0) + ah + bh;\n    buf[pos] = hi >>> 0;\n    buf[pos + 1] = lo;\n  }\n\n  var sum64_1 = sum64;\n\n  function sum64_hi(ah, al, bh, bl) {\n    var lo = al + bl >>> 0;\n    var hi = (lo < al ? 1 : 0) + ah + bh;\n    return hi >>> 0;\n  }\n\n  var sum64_hi_1 = sum64_hi;\n\n  function sum64_lo(ah, al, bh, bl) {\n    var lo = al + bl;\n    return lo >>> 0;\n  }\n\n  var sum64_lo_1 = sum64_lo;\n\n  function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n    var carry = 0;\n    var lo = al;\n    lo = lo + bl >>> 0;\n    carry += lo < al ? 1 : 0;\n    lo = lo + cl >>> 0;\n    carry += lo < cl ? 1 : 0;\n    lo = lo + dl >>> 0;\n    carry += lo < dl ? 1 : 0;\n    var hi = ah + bh + ch + dh + carry;\n    return hi >>> 0;\n  }\n\n  var sum64_4_hi_1 = sum64_4_hi;\n\n  function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n    var lo = al + bl + cl + dl;\n    return lo >>> 0;\n  }\n\n  var sum64_4_lo_1 = sum64_4_lo;\n\n  function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n    var carry = 0;\n    var lo = al;\n    lo = lo + bl >>> 0;\n    carry += lo < al ? 1 : 0;\n    lo = lo + cl >>> 0;\n    carry += lo < cl ? 1 : 0;\n    lo = lo + dl >>> 0;\n    carry += lo < dl ? 1 : 0;\n    lo = lo + el >>> 0;\n    carry += lo < el ? 1 : 0;\n    var hi = ah + bh + ch + dh + eh + carry;\n    return hi >>> 0;\n  }\n\n  var sum64_5_hi_1 = sum64_5_hi;\n\n  function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n    var lo = al + bl + cl + dl + el;\n    return lo >>> 0;\n  }\n\n  var sum64_5_lo_1 = sum64_5_lo;\n\n  function rotr64_hi(ah, al, num) {\n    var r = al << 32 - num | ah >>> num;\n    return r >>> 0;\n  }\n\n  var rotr64_hi_1 = rotr64_hi;\n\n  function rotr64_lo(ah, al, num) {\n    var r = ah << 32 - num | al >>> num;\n    return r >>> 0;\n  }\n\n  var rotr64_lo_1 = rotr64_lo;\n\n  function shr64_hi(ah, al, num) {\n    return ah >>> num;\n  }\n\n  var shr64_hi_1 = shr64_hi;\n\n  function shr64_lo(ah, al, num) {\n    var r = ah << 32 - num | al >>> num;\n    return r >>> 0;\n  }\n\n  var shr64_lo_1 = shr64_lo;\n  var utils = {\n    inherits: inherits_1,\n    toArray: toArray_1,\n    toHex: toHex_1,\n    htonl: htonl_1,\n    toHex32: toHex32_1,\n    zero2: zero2_1,\n    zero8: zero8_1,\n    join32: join32_1,\n    split32: split32_1,\n    rotr32: rotr32_1,\n    rotl32: rotl32_1,\n    sum32: sum32_1,\n    sum32_3: sum32_3_1,\n    sum32_4: sum32_4_1,\n    sum32_5: sum32_5_1,\n    sum64: sum64_1,\n    sum64_hi: sum64_hi_1,\n    sum64_lo: sum64_lo_1,\n    sum64_4_hi: sum64_4_hi_1,\n    sum64_4_lo: sum64_4_lo_1,\n    sum64_5_hi: sum64_5_hi_1,\n    sum64_5_lo: sum64_5_lo_1,\n    rotr64_hi: rotr64_hi_1,\n    rotr64_lo: rotr64_lo_1,\n    shr64_hi: shr64_hi_1,\n    shr64_lo: shr64_lo_1\n  };\n\n  function BlockHash() {\n    this.pending = null;\n    this.pendingTotal = 0;\n    this.blockSize = this.constructor.blockSize;\n    this.outSize = this.constructor.outSize;\n    this.hmacStrength = this.constructor.hmacStrength;\n    this.padLength = this.constructor.padLength / 8;\n    this.endian = 'big';\n    this._delta8 = this.blockSize / 8;\n    this._delta32 = this.blockSize / 32;\n  }\n\n  var BlockHash_1 = BlockHash;\n\n  BlockHash.prototype.update = function update(msg, enc) {\n    // Convert message to array, pad it, and join into 32bit blocks\n    msg = utils.toArray(msg, enc);\n    if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);\n    this.pendingTotal += msg.length; // Enough data, try updating\n\n    if (this.pending.length >= this._delta8) {\n      msg = this.pending; // Process pending data in blocks\n\n      var r = msg.length % this._delta8;\n      this.pending = msg.slice(msg.length - r, msg.length);\n      if (this.pending.length === 0) this.pending = null;\n      msg = utils.join32(msg, 0, msg.length - r, this.endian);\n\n      for (var i = 0; i < msg.length; i += this._delta32) this._update(msg, i, i + this._delta32);\n    }\n\n    return this;\n  };\n\n  BlockHash.prototype.digest = function digest(enc) {\n    this.update(this._pad());\n    minimalisticAssert(this.pending === null);\n    return this._digest(enc);\n  };\n\n  BlockHash.prototype._pad = function pad() {\n    var len = this.pendingTotal;\n    var bytes = this._delta8;\n    var k = bytes - (len + this.padLength) % bytes;\n    var res = new Array(k + this.padLength);\n    res[0] = 0x80;\n\n    for (var i = 1; i < k; i++) res[i] = 0; // Append length\n\n\n    len <<= 3;\n\n    if (this.endian === 'big') {\n      for (var t = 8; t < this.padLength; t++) res[i++] = 0;\n\n      res[i++] = 0;\n      res[i++] = 0;\n      res[i++] = 0;\n      res[i++] = 0;\n      res[i++] = len >>> 24 & 0xff;\n      res[i++] = len >>> 16 & 0xff;\n      res[i++] = len >>> 8 & 0xff;\n      res[i++] = len & 0xff;\n    } else {\n      res[i++] = len & 0xff;\n      res[i++] = len >>> 8 & 0xff;\n      res[i++] = len >>> 16 & 0xff;\n      res[i++] = len >>> 24 & 0xff;\n      res[i++] = 0;\n      res[i++] = 0;\n      res[i++] = 0;\n      res[i++] = 0;\n\n      for (t = 8; t < this.padLength; t++) res[i++] = 0;\n    }\n\n    return res;\n  };\n\n  var common = {\n    BlockHash: BlockHash_1\n  };\n  var rotr32$1 = utils.rotr32;\n\n  function ft_1(s, x, y, z) {\n    if (s === 0) return ch32(x, y, z);\n    if (s === 1 || s === 3) return p32(x, y, z);\n    if (s === 2) return maj32(x, y, z);\n  }\n\n  var ft_1_1 = ft_1;\n\n  function ch32(x, y, z) {\n    return x & y ^ ~x & z;\n  }\n\n  var ch32_1 = ch32;\n\n  function maj32(x, y, z) {\n    return x & y ^ x & z ^ y & z;\n  }\n\n  var maj32_1 = maj32;\n\n  function p32(x, y, z) {\n    return x ^ y ^ z;\n  }\n\n  var p32_1 = p32;\n\n  function s0_256(x) {\n    return rotr32$1(x, 2) ^ rotr32$1(x, 13) ^ rotr32$1(x, 22);\n  }\n\n  var s0_256_1 = s0_256;\n\n  function s1_256(x) {\n    return rotr32$1(x, 6) ^ rotr32$1(x, 11) ^ rotr32$1(x, 25);\n  }\n\n  var s1_256_1 = s1_256;\n\n  function g0_256(x) {\n    return rotr32$1(x, 7) ^ rotr32$1(x, 18) ^ x >>> 3;\n  }\n\n  var g0_256_1 = g0_256;\n\n  function g1_256(x) {\n    return rotr32$1(x, 17) ^ rotr32$1(x, 19) ^ x >>> 10;\n  }\n\n  var g1_256_1 = g1_256;\n  var common$1 = {\n    ft_1: ft_1_1,\n    ch32: ch32_1,\n    maj32: maj32_1,\n    p32: p32_1,\n    s0_256: s0_256_1,\n    s1_256: s1_256_1,\n    g0_256: g0_256_1,\n    g1_256: g1_256_1\n  };\n  var rotl32$1 = utils.rotl32;\n  var sum32$1 = utils.sum32;\n  var sum32_5$1 = utils.sum32_5;\n  var ft_1$1 = common$1.ft_1;\n  var BlockHash$1 = common.BlockHash;\n  var sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];\n\n  function SHA1() {\n    if (!(this instanceof SHA1)) return new SHA1();\n    BlockHash$1.call(this);\n    this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n    this.W = new Array(80);\n  }\n\n  utils.inherits(SHA1, BlockHash$1);\n  var _1 = SHA1;\n  SHA1.blockSize = 512;\n  SHA1.outSize = 160;\n  SHA1.hmacStrength = 80;\n  SHA1.padLength = 64;\n\n  SHA1.prototype._update = function _update(msg, start) {\n    var W = this.W;\n\n    for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n\n    for (; i < W.length; i++) W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n    var a = this.h[0];\n    var b = this.h[1];\n    var c = this.h[2];\n    var d = this.h[3];\n    var e = this.h[4];\n\n    for (i = 0; i < W.length; i++) {\n      var s = ~~(i / 20);\n      var t = sum32_5$1(rotl32$1(a, 5), ft_1$1(s, b, c, d), e, W[i], sha1_K[s]);\n      e = d;\n      d = c;\n      c = rotl32$1(b, 30);\n      b = a;\n      a = t;\n    }\n\n    this.h[0] = sum32$1(this.h[0], a);\n    this.h[1] = sum32$1(this.h[1], b);\n    this.h[2] = sum32$1(this.h[2], c);\n    this.h[3] = sum32$1(this.h[3], d);\n    this.h[4] = sum32$1(this.h[4], e);\n  };\n\n  SHA1.prototype._digest = function digest(enc) {\n    if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');\n  };\n\n  var sum32$2 = utils.sum32;\n  var sum32_4$1 = utils.sum32_4;\n  var sum32_5$2 = utils.sum32_5;\n  var ch32$1 = common$1.ch32;\n  var maj32$1 = common$1.maj32;\n  var s0_256$1 = common$1.s0_256;\n  var s1_256$1 = common$1.s1_256;\n  var g0_256$1 = common$1.g0_256;\n  var g1_256$1 = common$1.g1_256;\n  var BlockHash$2 = common.BlockHash;\n  var sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\n  function SHA256() {\n    if (!(this instanceof SHA256)) return new SHA256();\n    BlockHash$2.call(this);\n    this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n    this.k = sha256_K;\n    this.W = new Array(64);\n  }\n\n  utils.inherits(SHA256, BlockHash$2);\n  var _256 = SHA256;\n  SHA256.blockSize = 512;\n  SHA256.outSize = 256;\n  SHA256.hmacStrength = 192;\n  SHA256.padLength = 64;\n\n  SHA256.prototype._update = function _update(msg, start) {\n    var W = this.W;\n\n    for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n\n    for (; i < W.length; i++) W[i] = sum32_4$1(g1_256$1(W[i - 2]), W[i - 7], g0_256$1(W[i - 15]), W[i - 16]);\n\n    var a = this.h[0];\n    var b = this.h[1];\n    var c = this.h[2];\n    var d = this.h[3];\n    var e = this.h[4];\n    var f = this.h[5];\n    var g = this.h[6];\n    var h = this.h[7];\n    minimalisticAssert(this.k.length === W.length);\n\n    for (i = 0; i < W.length; i++) {\n      var T1 = sum32_5$2(h, s1_256$1(e), ch32$1(e, f, g), this.k[i], W[i]);\n      var T2 = sum32$2(s0_256$1(a), maj32$1(a, b, c));\n      h = g;\n      g = f;\n      f = e;\n      e = sum32$2(d, T1);\n      d = c;\n      c = b;\n      b = a;\n      a = sum32$2(T1, T2);\n    }\n\n    this.h[0] = sum32$2(this.h[0], a);\n    this.h[1] = sum32$2(this.h[1], b);\n    this.h[2] = sum32$2(this.h[2], c);\n    this.h[3] = sum32$2(this.h[3], d);\n    this.h[4] = sum32$2(this.h[4], e);\n    this.h[5] = sum32$2(this.h[5], f);\n    this.h[6] = sum32$2(this.h[6], g);\n    this.h[7] = sum32$2(this.h[7], h);\n  };\n\n  SHA256.prototype._digest = function digest(enc) {\n    if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');\n  };\n\n  function SHA224() {\n    if (!(this instanceof SHA224)) return new SHA224();\n\n    _256.call(this);\n\n    this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];\n  }\n\n  utils.inherits(SHA224, _256);\n  var _224 = SHA224;\n  SHA224.blockSize = 512;\n  SHA224.outSize = 224;\n  SHA224.hmacStrength = 192;\n  SHA224.padLength = 64;\n\n  SHA224.prototype._digest = function digest(enc) {\n    // Just truncate output\n    if (enc === 'hex') return utils.toHex32(this.h.slice(0, 7), 'big');else return utils.split32(this.h.slice(0, 7), 'big');\n  };\n\n  var rotr64_hi$1 = utils.rotr64_hi;\n  var rotr64_lo$1 = utils.rotr64_lo;\n  var shr64_hi$1 = utils.shr64_hi;\n  var shr64_lo$1 = utils.shr64_lo;\n  var sum64$1 = utils.sum64;\n  var sum64_hi$1 = utils.sum64_hi;\n  var sum64_lo$1 = utils.sum64_lo;\n  var sum64_4_hi$1 = utils.sum64_4_hi;\n  var sum64_4_lo$1 = utils.sum64_4_lo;\n  var sum64_5_hi$1 = utils.sum64_5_hi;\n  var sum64_5_lo$1 = utils.sum64_5_lo;\n  var BlockHash$3 = common.BlockHash;\n  var sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];\n\n  function SHA512() {\n    if (!(this instanceof SHA512)) return new SHA512();\n    BlockHash$3.call(this);\n    this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];\n    this.k = sha512_K;\n    this.W = new Array(160);\n  }\n\n  utils.inherits(SHA512, BlockHash$3);\n  var _512 = SHA512;\n  SHA512.blockSize = 1024;\n  SHA512.outSize = 512;\n  SHA512.hmacStrength = 192;\n  SHA512.padLength = 128;\n\n  SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n    var W = this.W; // 32 x 32bit words\n\n    for (var i = 0; i < 32; i++) W[i] = msg[start + i];\n\n    for (; i < W.length; i += 2) {\n      var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2\n\n      var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n      var c1_hi = W[i - 14]; // i - 7\n\n      var c1_lo = W[i - 13];\n      var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15\n\n      var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n      var c3_hi = W[i - 32]; // i - 16\n\n      var c3_lo = W[i - 31];\n      W[i] = sum64_4_hi$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n      W[i + 1] = sum64_4_lo$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n    }\n  };\n\n  SHA512.prototype._update = function _update(msg, start) {\n    this._prepareBlock(msg, start);\n\n    var W = this.W;\n    var ah = this.h[0];\n    var al = this.h[1];\n    var bh = this.h[2];\n    var bl = this.h[3];\n    var ch = this.h[4];\n    var cl = this.h[5];\n    var dh = this.h[6];\n    var dl = this.h[7];\n    var eh = this.h[8];\n    var el = this.h[9];\n    var fh = this.h[10];\n    var fl = this.h[11];\n    var gh = this.h[12];\n    var gl = this.h[13];\n    var hh = this.h[14];\n    var hl = this.h[15];\n    minimalisticAssert(this.k.length === W.length);\n\n    for (var i = 0; i < W.length; i += 2) {\n      var c0_hi = hh;\n      var c0_lo = hl;\n      var c1_hi = s1_512_hi(eh, el);\n      var c1_lo = s1_512_lo(eh, el);\n      var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n      var c3_hi = this.k[i];\n      var c3_lo = this.k[i + 1];\n      var c4_hi = W[i];\n      var c4_lo = W[i + 1];\n      var T1_hi = sum64_5_hi$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n      var T1_lo = sum64_5_lo$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n      c0_hi = s0_512_hi(ah, al);\n      c0_lo = s0_512_lo(ah, al);\n      c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n      c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n      var T2_hi = sum64_hi$1(c0_hi, c0_lo, c1_hi, c1_lo);\n      var T2_lo = sum64_lo$1(c0_hi, c0_lo, c1_hi, c1_lo);\n      hh = gh;\n      hl = gl;\n      gh = fh;\n      gl = fl;\n      fh = eh;\n      fl = el;\n      eh = sum64_hi$1(dh, dl, T1_hi, T1_lo);\n      el = sum64_lo$1(dl, dl, T1_hi, T1_lo);\n      dh = ch;\n      dl = cl;\n      ch = bh;\n      cl = bl;\n      bh = ah;\n      bl = al;\n      ah = sum64_hi$1(T1_hi, T1_lo, T2_hi, T2_lo);\n      al = sum64_lo$1(T1_hi, T1_lo, T2_hi, T2_lo);\n    }\n\n    sum64$1(this.h, 0, ah, al);\n    sum64$1(this.h, 2, bh, bl);\n    sum64$1(this.h, 4, ch, cl);\n    sum64$1(this.h, 6, dh, dl);\n    sum64$1(this.h, 8, eh, el);\n    sum64$1(this.h, 10, fh, fl);\n    sum64$1(this.h, 12, gh, gl);\n    sum64$1(this.h, 14, hh, hl);\n  };\n\n  SHA512.prototype._digest = function digest(enc) {\n    if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');\n  };\n\n  function ch64_hi(xh, xl, yh, yl, zh) {\n    var r = xh & yh ^ ~xh & zh;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function ch64_lo(xh, xl, yh, yl, zh, zl) {\n    var r = xl & yl ^ ~xl & zl;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function maj64_hi(xh, xl, yh, yl, zh) {\n    var r = xh & yh ^ xh & zh ^ yh & zh;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function maj64_lo(xh, xl, yh, yl, zh, zl) {\n    var r = xl & yl ^ xl & zl ^ yl & zl;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function s0_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi$1(xh, xl, 28);\n    var c1_hi = rotr64_hi$1(xl, xh, 2); // 34\n\n    var c2_hi = rotr64_hi$1(xl, xh, 7); // 39\n\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function s0_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo$1(xh, xl, 28);\n    var c1_lo = rotr64_lo$1(xl, xh, 2); // 34\n\n    var c2_lo = rotr64_lo$1(xl, xh, 7); // 39\n\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function s1_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi$1(xh, xl, 14);\n    var c1_hi = rotr64_hi$1(xh, xl, 18);\n    var c2_hi = rotr64_hi$1(xl, xh, 9); // 41\n\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function s1_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo$1(xh, xl, 14);\n    var c1_lo = rotr64_lo$1(xh, xl, 18);\n    var c2_lo = rotr64_lo$1(xl, xh, 9); // 41\n\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function g0_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi$1(xh, xl, 1);\n    var c1_hi = rotr64_hi$1(xh, xl, 8);\n    var c2_hi = shr64_hi$1(xh, xl, 7);\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function g0_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo$1(xh, xl, 1);\n    var c1_lo = rotr64_lo$1(xh, xl, 8);\n    var c2_lo = shr64_lo$1(xh, xl, 7);\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function g1_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi$1(xh, xl, 19);\n    var c1_hi = rotr64_hi$1(xl, xh, 29); // 61\n\n    var c2_hi = shr64_hi$1(xh, xl, 6);\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function g1_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo$1(xh, xl, 19);\n    var c1_lo = rotr64_lo$1(xl, xh, 29); // 61\n\n    var c2_lo = shr64_lo$1(xh, xl, 6);\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function SHA384() {\n    if (!(this instanceof SHA384)) return new SHA384();\n\n    _512.call(this);\n\n    this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];\n  }\n\n  utils.inherits(SHA384, _512);\n  var _384 = SHA384;\n  SHA384.blockSize = 1024;\n  SHA384.outSize = 384;\n  SHA384.hmacStrength = 192;\n  SHA384.padLength = 128;\n\n  SHA384.prototype._digest = function digest(enc) {\n    if (enc === 'hex') return utils.toHex32(this.h.slice(0, 12), 'big');else return utils.split32(this.h.slice(0, 12), 'big');\n  };\n\n  var sha1$1 = _1;\n  var sha224$1 = _224;\n  var sha256$1 = _256;\n  var sha384$1 = _384;\n  var sha512$1 = _512;\n  var sha$1 = {\n    sha1: sha1$1,\n    sha224: sha224$1,\n    sha256: sha256$1,\n    sha384: sha384$1,\n    sha512: sha512$1\n  };\n  var rotl32$2 = utils.rotl32;\n  var sum32$3 = utils.sum32;\n  var sum32_3$1 = utils.sum32_3;\n  var sum32_4$2 = utils.sum32_4;\n  var BlockHash$4 = common.BlockHash;\n\n  function RIPEMD160$1() {\n    if (!(this instanceof RIPEMD160$1)) return new RIPEMD160$1();\n    BlockHash$4.call(this);\n    this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n    this.endian = 'little';\n  }\n\n  utils.inherits(RIPEMD160$1, BlockHash$4);\n  var ripemd160$1 = RIPEMD160$1;\n  RIPEMD160$1.blockSize = 512;\n  RIPEMD160$1.outSize = 160;\n  RIPEMD160$1.hmacStrength = 192;\n  RIPEMD160$1.padLength = 64;\n\n  RIPEMD160$1.prototype._update = function update(msg, start) {\n    var A = this.h[0];\n    var B = this.h[1];\n    var C = this.h[2];\n    var D = this.h[3];\n    var E = this.h[4];\n    var Ah = A;\n    var Bh = B;\n    var Ch = C;\n    var Dh = D;\n    var Eh = E;\n\n    for (var j = 0; j < 80; j++) {\n      var T = sum32$3(rotl32$2(sum32_4$2(A, f(j, B, C, D), msg[r$1[j] + start], K$4(j)), s[j]), E);\n      A = E;\n      E = D;\n      D = rotl32$2(C, 10);\n      C = B;\n      B = T;\n      T = sum32$3(rotl32$2(sum32_4$2(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);\n      Ah = Eh;\n      Eh = Dh;\n      Dh = rotl32$2(Ch, 10);\n      Ch = Bh;\n      Bh = T;\n    }\n\n    T = sum32_3$1(this.h[1], C, Dh);\n    this.h[1] = sum32_3$1(this.h[2], D, Eh);\n    this.h[2] = sum32_3$1(this.h[3], E, Ah);\n    this.h[3] = sum32_3$1(this.h[4], A, Bh);\n    this.h[4] = sum32_3$1(this.h[0], B, Ch);\n    this.h[0] = T;\n  };\n\n  RIPEMD160$1.prototype._digest = function digest(enc) {\n    if (enc === 'hex') return utils.toHex32(this.h, 'little');else return utils.split32(this.h, 'little');\n  };\n\n  function f(j, x, y, z) {\n    if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);\n  }\n\n  function K$4(j) {\n    if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;\n  }\n\n  function Kh(j) {\n    if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;\n  }\n\n  var r$1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\n  var rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];\n  var s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\n  var sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];\n  var ripemd = {\n    ripemd160: ripemd160$1\n  };\n\n  function Hmac$1(hash, key, enc) {\n    if (!(this instanceof Hmac$1)) return new Hmac$1(hash, key, enc);\n    this.Hash = hash;\n    this.blockSize = hash.blockSize / 8;\n    this.outSize = hash.outSize / 8;\n    this.inner = null;\n    this.outer = null;\n\n    this._init(utils.toArray(key, enc));\n  }\n\n  var hmac = Hmac$1;\n\n  Hmac$1.prototype._init = function init(key) {\n    // Shorten key, if needed\n    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();\n    minimalisticAssert(key.length <= this.blockSize); // Add padding to key\n\n    for (var i = key.length; i < this.blockSize; i++) key.push(0);\n\n    for (i = 0; i < key.length; i++) key[i] ^= 0x36;\n\n    this.inner = new this.Hash().update(key); // 0x36 ^ 0x5c = 0x6a\n\n    for (i = 0; i < key.length; i++) key[i] ^= 0x6a;\n\n    this.outer = new this.Hash().update(key);\n  };\n\n  Hmac$1.prototype.update = function update(msg, enc) {\n    this.inner.update(msg, enc);\n    return this;\n  };\n\n  Hmac$1.prototype.digest = function digest(enc) {\n    this.outer.update(this.inner.digest());\n    return this.outer.digest(enc);\n  };\n\n  var hash_1 = createCommonjsModule(function (module, exports) {\n    var hash = exports;\n    hash.utils = utils;\n    hash.common = common;\n    hash.sha = sha$1;\n    hash.ripemd = ripemd;\n    hash.hmac = hmac; // Proxy hash functions to the main object\n\n    hash.sha1 = hash.sha.sha1;\n    hash.sha256 = hash.sha.sha256;\n    hash.sha224 = hash.sha.sha224;\n    hash.sha384 = hash.sha.sha384;\n    hash.sha512 = hash.sha.sha512;\n    hash.ripemd160 = hash.ripemd.ripemd160;\n  });\n  var secp256k1 = {\n    doubles: {\n      step: 4,\n      points: [['e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a', 'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'], ['8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508', '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'], ['175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739', 'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'], ['363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640', '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'], ['8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c', '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'], ['723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda', '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'], ['eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa', '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'], ['100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0', 'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'], ['e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d', '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'], ['feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d', 'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'], ['da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1', '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'], ['53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0', '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'], ['8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047', '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'], ['385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862', '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'], ['6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7', '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'], ['3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd', '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'], ['85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83', '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'], ['948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a', '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'], ['6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8', 'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'], ['e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d', '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'], ['e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725', '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'], ['213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754', '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'], ['4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c', '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'], ['fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6', '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'], ['76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39', 'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'], ['c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891', '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'], ['d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b', 'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'], ['b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03', '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'], ['e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d', 'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'], ['a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070', '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'], ['90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4', 'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'], ['8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da', '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'], ['e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11', '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'], ['8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e', 'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'], ['e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41', '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'], ['b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef', '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'], ['d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8', 'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'], ['324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d', '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'], ['4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96', '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'], ['9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd', 'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'], ['6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5', '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'], ['a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266', '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'], ['7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71', '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'], ['928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac', 'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'], ['85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751', '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'], ['ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e', '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'], ['827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241', 'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'], ['eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3', 'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'], ['e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f', '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'], ['1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19', 'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'], ['146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be', 'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'], ['fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9', '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'], ['da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2', '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'], ['a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13', '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'], ['174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c', 'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'], ['959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba', '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'], ['d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151', 'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'], ['64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073', 'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'], ['8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458', '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'], ['13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b', '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'], ['bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366', 'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'], ['8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa', '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'], ['8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0', '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'], ['dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787', '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'], ['f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e', 'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82']]\n    },\n    naf: {\n      wnd: 7,\n      points: [['f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9', '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'], ['2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4', 'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'], ['5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc', '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'], ['acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe', 'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'], ['774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb', 'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'], ['f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8', 'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'], ['d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e', '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'], ['defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34', '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'], ['2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c', '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'], ['352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5', '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'], ['2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f', '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'], ['9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714', '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'], ['daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729', 'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'], ['c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db', '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'], ['6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4', 'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'], ['1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5', 'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'], ['605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479', '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'], ['62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d', '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'], ['80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f', '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'], ['7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb', 'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'], ['d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9', 'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'], ['49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963', '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'], ['77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74', '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'], ['f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530', 'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'], ['463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b', '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'], ['f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247', 'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'], ['caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1', 'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'], ['2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120', '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'], ['7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435', '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'], ['754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18', '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'], ['e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8', '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'], ['186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb', '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'], ['df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f', '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'], ['5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143', 'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'], ['290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba', 'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'], ['af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45', 'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'], ['766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a', '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'], ['59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e', 'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'], ['f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8', 'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'], ['7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c', '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'], ['948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519', 'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'], ['7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab', '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'], ['3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca', 'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'], ['d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf', '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'], ['1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610', '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'], ['733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4', 'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'], ['15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c', 'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'], ['a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940', 'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'], ['e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980', 'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'], ['311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3', '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'], ['34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf', '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'], ['f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63', '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'], ['d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448', 'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'], ['32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf', '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'], ['7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5', '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'], ['ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6', '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'], ['16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5', '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'], ['eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99', 'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'], ['78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51', 'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'], ['494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5', '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'], ['a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5', '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'], ['c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997', '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'], ['841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881', '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'], ['5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5', '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'], ['36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66', 'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'], ['336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726', 'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'], ['8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede', '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'], ['1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94', '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'], ['85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31', '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'], ['29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51', 'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'], ['a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252', 'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'], ['4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5', 'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'], ['d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b', '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'], ['ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4', '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'], ['af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f', '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'], ['e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889', '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'], ['591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246', 'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'], ['11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984', '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'], ['3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a', 'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'], ['cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030', 'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'], ['c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197', '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'], ['c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593', 'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'], ['a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef', '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'], ['347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38', '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'], ['da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a', '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'], ['c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111', '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'], ['4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502', '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'], ['3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea', 'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'], ['cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26', '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'], ['b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986', '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'], ['d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e', '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'], ['48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4', '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'], ['dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda', 'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'], ['6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859', 'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'], ['e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f', 'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'], ['eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c', '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'], ['13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942', 'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'], ['ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a', '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'], ['b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80', '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'], ['ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d', '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'], ['8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1', 'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'], ['52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63', 'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'], ['e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352', '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'], ['7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193', 'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'], ['5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00', '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'], ['32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58', 'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'], ['e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7', 'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'], ['8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8', 'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'], ['4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e', '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'], ['3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d', 'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'], ['674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b', '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'], ['d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f', 'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'], ['30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6', '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'], ['be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297', '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'], ['93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a', '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'], ['b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c', 'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'], ['d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52', '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'], ['d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb', 'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'], ['463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065', 'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'], ['7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917', '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'], ['74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9', 'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'], ['30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3', '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'], ['9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57', '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'], ['176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66', 'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'], ['75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8', '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'], ['809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721', '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'], ['1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180', '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9']]\n    }\n  };\n  var curves_1 = createCommonjsModule(function (module, exports) {\n    var curves = exports;\n    var assert = utils_1$1.assert;\n\n    function PresetCurve(options) {\n      if (options.type === 'short') this.curve = new curve_1.short(options);else if (options.type === 'edwards') this.curve = new curve_1.edwards(options);else this.curve = new curve_1.mont(options);\n      this.g = this.curve.g;\n      this.n = this.curve.n;\n      this.hash = options.hash;\n      assert(this.g.validate(), 'Invalid curve');\n      assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');\n    }\n\n    curves.PresetCurve = PresetCurve;\n\n    function defineCurve(name, options) {\n      Object.defineProperty(curves, name, {\n        configurable: true,\n        enumerable: true,\n        get: function () {\n          var curve = new PresetCurve(options);\n          Object.defineProperty(curves, name, {\n            configurable: true,\n            enumerable: true,\n            value: curve\n          });\n          return curve;\n        }\n      });\n    }\n\n    defineCurve('p192', {\n      type: 'short',\n      prime: 'p192',\n      p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',\n      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',\n      b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',\n      n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',\n      hash: hash_1.sha256,\n      gRed: false,\n      g: ['188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012', '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811']\n    });\n    defineCurve('p224', {\n      type: 'short',\n      prime: 'p224',\n      p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',\n      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',\n      b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',\n      n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',\n      hash: hash_1.sha256,\n      gRed: false,\n      g: ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21', 'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34']\n    });\n    defineCurve('p256', {\n      type: 'short',\n      prime: null,\n      p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',\n      a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',\n      b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',\n      n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',\n      hash: hash_1.sha256,\n      gRed: false,\n      g: ['6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296', '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5']\n    });\n    defineCurve('p384', {\n      type: 'short',\n      prime: null,\n      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 ffffffff',\n      a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 fffffffc',\n      b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' + '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',\n      n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' + 'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',\n      hash: hash_1.sha384,\n      gRed: false,\n      g: ['aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' + '5502f25d bf55296c 3a545e38 72760ab7', '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' + '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f']\n    });\n    defineCurve('p521', {\n      type: 'short',\n      prime: null,\n      p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff',\n      a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff fffffffc',\n      b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' + '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' + '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',\n      n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' + 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',\n      hash: hash_1.sha512,\n      gRed: false,\n      g: ['000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' + '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' + 'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66', '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' + '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' + '3fad0761 353c7086 a272c240 88be9476 9fd16650']\n    });\n    defineCurve('curve25519', {\n      type: 'mont',\n      prime: 'p25519',\n      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n      a: '76d06',\n      b: '1',\n      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n      hash: hash_1.sha256,\n      gRed: false,\n      g: ['9']\n    });\n    defineCurve('ed25519', {\n      type: 'edwards',\n      prime: 'p25519',\n      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n      a: '-1',\n      c: '1',\n      // -121665 * (121666^(-1)) (mod P)\n      d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',\n      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n      hash: hash_1.sha256,\n      gRed: false,\n      g: ['216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a', // 4/5\n      '6666666666666666666666666666666666666666666666666666666666666658']\n    });\n    var pre;\n\n    try {\n      pre = secp256k1;\n    } catch (e) {\n      pre = undefined;\n    }\n\n    defineCurve('secp256k1', {\n      type: 'short',\n      prime: 'k256',\n      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',\n      a: '0',\n      b: '7',\n      n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',\n      h: '1',\n      hash: hash_1.sha256,\n      // Precomputed endomorphism\n      beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',\n      lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',\n      basis: [{\n        a: '3086d221a7d46bcde86c90e49284eb15',\n        b: '-e4437ed6010e88286f547fa90abfe4c3'\n      }, {\n        a: '114ca50f7a8e2f3f657c1108d9d44cfd8',\n        b: '3086d221a7d46bcde86c90e49284eb15'\n      }],\n      gRed: false,\n      g: ['79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', pre]\n    });\n  });\n\n  function HmacDRBG(options) {\n    if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);\n    this.hash = options.hash;\n    this.predResist = !!options.predResist;\n    this.outLen = this.hash.outSize;\n    this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n    this._reseed = null;\n    this.reseedInterval = null;\n    this.K = null;\n    this.V = null;\n    var entropy = utils_1.toArray(options.entropy, options.entropyEnc || 'hex');\n    var nonce = utils_1.toArray(options.nonce, options.nonceEnc || 'hex');\n    var pers = utils_1.toArray(options.pers, options.persEnc || 'hex');\n    minimalisticAssert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n    this._init(entropy, nonce, pers);\n  }\n\n  var hmacDrbg = HmacDRBG;\n\n  HmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n    var seed = entropy.concat(nonce).concat(pers);\n    this.K = new Array(this.outLen / 8);\n    this.V = new Array(this.outLen / 8);\n\n    for (var i = 0; i < this.V.length; i++) {\n      this.K[i] = 0x00;\n      this.V[i] = 0x01;\n    }\n\n    this._update(seed);\n\n    this._reseed = 1;\n    this.reseedInterval = 0x1000000000000; // 2^48\n  };\n\n  HmacDRBG.prototype._hmac = function hmac() {\n    return new hash_1.hmac(this.hash, this.K);\n  };\n\n  HmacDRBG.prototype._update = function update(seed) {\n    var kmac = this._hmac().update(this.V).update([0x00]);\n\n    if (seed) kmac = kmac.update(seed);\n    this.K = kmac.digest();\n    this.V = this._hmac().update(this.V).digest();\n    if (!seed) return;\n    this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();\n    this.V = this._hmac().update(this.V).digest();\n  };\n\n  HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n    // Optional entropy enc\n    if (typeof entropyEnc !== 'string') {\n      addEnc = add;\n      add = entropyEnc;\n      entropyEnc = null;\n    }\n\n    entropy = utils_1.toArray(entropy, entropyEnc);\n    add = utils_1.toArray(add, addEnc);\n    minimalisticAssert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n    this._update(entropy.concat(add || []));\n\n    this._reseed = 1;\n  };\n\n  HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n    if (this._reseed > this.reseedInterval) throw new Error('Reseed is required'); // Optional encoding\n\n    if (typeof enc !== 'string') {\n      addEnc = add;\n      add = enc;\n      enc = null;\n    } // Optional additional data\n\n\n    if (add) {\n      add = utils_1.toArray(add, addEnc || 'hex');\n\n      this._update(add);\n    }\n\n    var temp = [];\n\n    while (temp.length < len) {\n      this.V = this._hmac().update(this.V).digest();\n      temp = temp.concat(this.V);\n    }\n\n    var res = temp.slice(0, len);\n\n    this._update(add);\n\n    this._reseed++;\n    return utils_1.encode(res, enc);\n  };\n\n  var assert$5 = utils_1$1.assert;\n\n  function KeyPair(ec, options) {\n    this.ec = ec;\n    this.priv = null;\n    this.pub = null; // KeyPair(ec, { priv: ..., pub: ... })\n\n    if (options.priv) this._importPrivate(options.priv, options.privEnc);\n    if (options.pub) this._importPublic(options.pub, options.pubEnc);\n  }\n\n  var key = KeyPair;\n\n  KeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n    if (pub instanceof KeyPair) return pub;\n    return new KeyPair(ec, {\n      pub: pub,\n      pubEnc: enc\n    });\n  };\n\n  KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n    if (priv instanceof KeyPair) return priv;\n    return new KeyPair(ec, {\n      priv: priv,\n      privEnc: enc\n    });\n  };\n\n  KeyPair.prototype.validate = function validate() {\n    var pub = this.getPublic();\n    if (pub.isInfinity()) return {\n      result: false,\n      reason: 'Invalid public key'\n    };\n    if (!pub.validate()) return {\n      result: false,\n      reason: 'Public key is not a point'\n    };\n    if (!pub.mul(this.ec.curve.n).isInfinity()) return {\n      result: false,\n      reason: 'Public key * N != O'\n    };\n    return {\n      result: true,\n      reason: null\n    };\n  };\n\n  KeyPair.prototype.getPublic = function getPublic(compact, enc) {\n    // compact is optional argument\n    if (typeof compact === 'string') {\n      enc = compact;\n      compact = null;\n    }\n\n    if (!this.pub) this.pub = this.ec.g.mul(this.priv);\n    if (!enc) return this.pub;\n    return this.pub.encode(enc, compact);\n  };\n\n  KeyPair.prototype.getPrivate = function getPrivate(enc) {\n    if (enc === 'hex') return this.priv.toString(16, 2);else return this.priv;\n  };\n\n  KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n    this.priv = new bn(key, enc || 16); // Ensure that the priv won't be bigger than n, otherwise we may fail\n    // in fixed multiplication method\n\n    this.priv = this.priv.umod(this.ec.curve.n);\n  };\n\n  KeyPair.prototype._importPublic = function _importPublic(key, enc) {\n    if (key.x || key.y) {\n      // Montgomery points only have an `x` coordinate.\n      // Weierstrass/Edwards points on the other hand have both `x` and\n      // `y` coordinates.\n      if (this.ec.curve.type === 'mont') {\n        assert$5(key.x, 'Need x coordinate');\n      } else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') {\n        assert$5(key.x && key.y, 'Need both x and y coordinate');\n      }\n\n      this.pub = this.ec.curve.point(key.x, key.y);\n      return;\n    }\n\n    this.pub = this.ec.curve.decodePoint(key, enc);\n  }; // ECDH\n\n\n  KeyPair.prototype.derive = function derive(pub) {\n    return pub.mul(this.priv).getX();\n  }; // ECDSA\n\n\n  KeyPair.prototype.sign = function sign(msg, enc, options) {\n    return this.ec.sign(msg, this, enc, options);\n  };\n\n  KeyPair.prototype.verify = function verify(msg, signature) {\n    return this.ec.verify(msg, signature, this);\n  };\n\n  KeyPair.prototype.inspect = function inspect() {\n    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';\n  };\n\n  var assert$6 = utils_1$1.assert;\n\n  function Signature(options, enc) {\n    if (options instanceof Signature) return options;\n    if (this._importDER(options, enc)) return;\n    assert$6(options.r && options.s, 'Signature without r or s');\n    this.r = new bn(options.r, 16);\n    this.s = new bn(options.s, 16);\n    if (options.recoveryParam === undefined) this.recoveryParam = null;else this.recoveryParam = options.recoveryParam;\n  }\n\n  var signature = Signature;\n\n  function Position() {\n    this.place = 0;\n  }\n\n  function getLength(buf, p) {\n    var initial = buf[p.place++];\n\n    if (!(initial & 0x80)) {\n      return initial;\n    }\n\n    var octetLen = initial & 0xf;\n    var val = 0;\n\n    for (var i = 0, off = p.place; i < octetLen; i++, off++) {\n      val <<= 8;\n      val |= buf[off];\n    }\n\n    p.place = off;\n    return val;\n  }\n\n  function rmPadding(buf) {\n    var i = 0;\n    var len = buf.length - 1;\n\n    while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {\n      i++;\n    }\n\n    if (i === 0) {\n      return buf;\n    }\n\n    return buf.slice(i);\n  }\n\n  Signature.prototype._importDER = function _importDER(data, enc) {\n    data = utils_1$1.toArray(data, enc);\n    var p = new Position();\n\n    if (data[p.place++] !== 0x30) {\n      return false;\n    }\n\n    var len = getLength(data, p);\n\n    if (len + p.place !== data.length) {\n      return false;\n    }\n\n    if (data[p.place++] !== 0x02) {\n      return false;\n    }\n\n    var rlen = getLength(data, p);\n    var r = data.slice(p.place, rlen + p.place);\n    p.place += rlen;\n\n    if (data[p.place++] !== 0x02) {\n      return false;\n    }\n\n    var slen = getLength(data, p);\n\n    if (data.length !== slen + p.place) {\n      return false;\n    }\n\n    var s = data.slice(p.place, slen + p.place);\n\n    if (r[0] === 0 && r[1] & 0x80) {\n      r = r.slice(1);\n    }\n\n    if (s[0] === 0 && s[1] & 0x80) {\n      s = s.slice(1);\n    }\n\n    this.r = new bn(r);\n    this.s = new bn(s);\n    this.recoveryParam = null;\n    return true;\n  };\n\n  function constructLength(arr, len) {\n    if (len < 0x80) {\n      arr.push(len);\n      return;\n    }\n\n    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n    arr.push(octets | 0x80);\n\n    while (--octets) {\n      arr.push(len >>> (octets << 3) & 0xff);\n    }\n\n    arr.push(len);\n  }\n\n  Signature.prototype.toDER = function toDER(enc) {\n    var r = this.r.toArray();\n    var s = this.s.toArray(); // Pad values\n\n    if (r[0] & 0x80) r = [0].concat(r); // Pad values\n\n    if (s[0] & 0x80) s = [0].concat(s);\n    r = rmPadding(r);\n    s = rmPadding(s);\n\n    while (!s[0] && !(s[1] & 0x80)) {\n      s = s.slice(1);\n    }\n\n    var arr = [0x02];\n    constructLength(arr, r.length);\n    arr = arr.concat(r);\n    arr.push(0x02);\n    constructLength(arr, s.length);\n    var backHalf = arr.concat(s);\n    var res = [0x30];\n    constructLength(res, backHalf.length);\n    res = res.concat(backHalf);\n    return utils_1$1.encode(res, enc);\n  };\n\n  var assert$7 = utils_1$1.assert;\n\n  function EC(options) {\n    if (!(this instanceof EC)) return new EC(options); // Shortcut `elliptic.ec(curve-name)`\n\n    if (typeof options === 'string') {\n      assert$7(curves_1.hasOwnProperty(options), 'Unknown curve ' + options);\n      options = curves_1[options];\n    } // Shortcut for `elliptic.ec(elliptic.curves.curveName)`\n\n\n    if (options instanceof curves_1.PresetCurve) options = {\n      curve: options\n    };\n    this.curve = options.curve.curve;\n    this.n = this.curve.n;\n    this.nh = this.n.ushrn(1);\n    this.g = this.curve.g; // Point on curve\n\n    this.g = options.curve.g;\n    this.g.precompute(options.curve.n.bitLength() + 1); // Hash for function for DRBG\n\n    this.hash = options.hash || options.curve.hash;\n  }\n\n  var ec = EC;\n\n  EC.prototype.keyPair = function keyPair(options) {\n    return new key(this, options);\n  };\n\n  EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n    return key.fromPrivate(this, priv, enc);\n  };\n\n  EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n    return key.fromPublic(this, pub, enc);\n  };\n\n  EC.prototype.genKeyPair = function genKeyPair(options) {\n    if (!options) options = {}; // Instantiate Hmac_DRBG\n\n    var drbg = new hmacDrbg({\n      hash: this.hash,\n      pers: options.pers,\n      persEnc: options.persEnc || 'utf8',\n      entropy: options.entropy || brorand(this.hash.hmacStrength),\n      entropyEnc: options.entropy && options.entropyEnc || 'utf8',\n      nonce: this.n.toArray()\n    });\n    var bytes = this.n.byteLength();\n    var ns2 = this.n.sub(new bn(2));\n\n    do {\n      var priv = new bn(drbg.generate(bytes));\n      if (priv.cmp(ns2) > 0) continue;\n      priv.iaddn(1);\n      return this.keyFromPrivate(priv);\n    } while (true);\n  };\n\n  EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {\n    var delta = msg.byteLength() * 8 - this.n.bitLength();\n    if (delta > 0) msg = msg.ushrn(delta);\n    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);else return msg;\n  };\n\n  EC.prototype.sign = function sign(msg, key$$1, enc, options) {\n    if (typeof enc === 'object') {\n      options = enc;\n      enc = null;\n    }\n\n    if (!options) options = {};\n    key$$1 = this.keyFromPrivate(key$$1, enc);\n    msg = this._truncateToN(new bn(msg, 16)); // Zero-extend key to provide enough entropy\n\n    var bytes = this.n.byteLength();\n    var bkey = key$$1.getPrivate().toArray('be', bytes); // Zero-extend nonce to have the same byte size as N\n\n    var nonce = msg.toArray('be', bytes); // Instantiate Hmac_DRBG\n\n    var drbg = new hmacDrbg({\n      hash: this.hash,\n      entropy: bkey,\n      nonce: nonce,\n      pers: options.pers,\n      persEnc: options.persEnc || 'utf8'\n    }); // Number of bytes to generate\n\n    var ns1 = this.n.sub(new bn(1));\n\n    for (var iter = 0; true; iter++) {\n      var k = options.k ? options.k(iter) : new bn(drbg.generate(this.n.byteLength()));\n      k = this._truncateToN(k, true);\n      if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;\n      var kp = this.g.mul(k);\n      if (kp.isInfinity()) continue;\n      var kpX = kp.getX();\n      var r = kpX.umod(this.n);\n      if (r.cmpn(0) === 0) continue;\n      var s = k.invm(this.n).mul(r.mul(key$$1.getPrivate()).iadd(msg));\n      s = s.umod(this.n);\n      if (s.cmpn(0) === 0) continue;\n      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0); // Use complement of `s`, if it is > `n / 2`\n\n      if (options.canonical && s.cmp(this.nh) > 0) {\n        s = this.n.sub(s);\n        recoveryParam ^= 1;\n      }\n\n      return new signature({\n        r: r,\n        s: s,\n        recoveryParam: recoveryParam\n      });\n    }\n  };\n\n  EC.prototype.verify = function verify(msg, signature$$1, key$$1, enc) {\n    msg = this._truncateToN(new bn(msg, 16));\n    key$$1 = this.keyFromPublic(key$$1, enc);\n    signature$$1 = new signature(signature$$1, 'hex'); // Perform primitive values validation\n\n    var r = signature$$1.r;\n    var s = signature$$1.s;\n    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;\n    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false; // Validate signature\n\n    var sinv = s.invm(this.n);\n    var u1 = sinv.mul(msg).umod(this.n);\n    var u2 = sinv.mul(r).umod(this.n);\n\n    if (!this.curve._maxwellTrick) {\n      var p = this.g.mulAdd(u1, key$$1.getPublic(), u2);\n      if (p.isInfinity()) return false;\n      return p.getX().umod(this.n).cmp(r) === 0;\n    } // NOTE: Greg Maxwell's trick, inspired by:\n    // https://git.io/vad3K\n\n\n    var p = this.g.jmulAdd(u1, key$$1.getPublic(), u2);\n    if (p.isInfinity()) return false; // Compare `p.x` of Jacobian point with `r`,\n    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the\n    // inverse of `p.z^2`\n\n    return p.eqXToP(r);\n  };\n\n  EC.prototype.recoverPubKey = function (msg, signature$$1, j, enc) {\n    assert$7((3 & j) === j, 'The recovery param is more than two bits');\n    signature$$1 = new signature(signature$$1, enc);\n    var n = this.n;\n    var e = new bn(msg);\n    var r = signature$$1.r;\n    var s = signature$$1.s; // A set LSB signifies that the y-coordinate is odd\n\n    var isYOdd = j & 1;\n    var isSecondKey = j >> 1;\n    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate'); // 1.1. Let x = r + jn.\n\n    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);else r = this.curve.pointFromX(r, isYOdd);\n    var rInv = signature$$1.r.invm(n);\n    var s1 = n.sub(e).mul(rInv).umod(n);\n    var s2 = s.mul(rInv).umod(n); // 1.6.1 Compute Q = r^-1 (sR -  eG)\n    //               Q = r^-1 (sR + -eG)\n\n    return this.g.mulAdd(s1, r, s2);\n  };\n\n  EC.prototype.getKeyRecoveryParam = function (e, signature$$1, Q, enc) {\n    signature$$1 = new signature(signature$$1, enc);\n    if (signature$$1.recoveryParam !== null) return signature$$1.recoveryParam;\n\n    for (var i = 0; i < 4; i++) {\n      var Qprime;\n\n      try {\n        Qprime = this.recoverPubKey(e, signature$$1, i);\n      } catch (e) {\n        continue;\n      }\n\n      if (Qprime.eq(Q)) return i;\n    }\n\n    throw new Error('Unable to find valid recovery factor');\n  };\n\n  var assert$8 = utils_1$1.assert;\n  var parseBytes = utils_1$1.parseBytes;\n  var cachedProperty = utils_1$1.cachedProperty;\n  /**\n  * @param {EDDSA} eddsa - instance\n  * @param {Object} params - public/private key parameters\n  *\n  * @param {Array<Byte>} [params.secret] - secret seed bytes\n  * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)\n  * @param {Array<Byte>} [params.pub] - public key point encoded as bytes\n  *\n  */\n\n  function KeyPair$1(eddsa, params) {\n    this.eddsa = eddsa;\n    this._secret = parseBytes(params.secret);\n    if (eddsa.isPoint(params.pub)) this._pub = params.pub;else this._pubBytes = parseBytes(params.pub);\n  }\n\n  KeyPair$1.fromPublic = function fromPublic(eddsa, pub) {\n    if (pub instanceof KeyPair$1) return pub;\n    return new KeyPair$1(eddsa, {\n      pub: pub\n    });\n  };\n\n  KeyPair$1.fromSecret = function fromSecret(eddsa, secret) {\n    if (secret instanceof KeyPair$1) return secret;\n    return new KeyPair$1(eddsa, {\n      secret: secret\n    });\n  };\n\n  KeyPair$1.prototype.secret = function secret() {\n    return this._secret;\n  };\n\n  cachedProperty(KeyPair$1, 'pubBytes', function pubBytes() {\n    return this.eddsa.encodePoint(this.pub());\n  });\n  cachedProperty(KeyPair$1, 'pub', function pub() {\n    if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);\n    return this.eddsa.g.mul(this.priv());\n  });\n  cachedProperty(KeyPair$1, 'privBytes', function privBytes() {\n    var eddsa = this.eddsa;\n    var hash = this.hash();\n    var lastIx = eddsa.encodingLength - 1;\n    var a = hash.slice(0, eddsa.encodingLength);\n    a[0] &= 248;\n    a[lastIx] &= 127;\n    a[lastIx] |= 64;\n    return a;\n  });\n  cachedProperty(KeyPair$1, 'priv', function priv() {\n    return this.eddsa.decodeInt(this.privBytes());\n  });\n  cachedProperty(KeyPair$1, 'hash', function hash() {\n    return this.eddsa.hash().update(this.secret()).digest();\n  });\n  cachedProperty(KeyPair$1, 'messagePrefix', function messagePrefix() {\n    return this.hash().slice(this.eddsa.encodingLength);\n  });\n\n  KeyPair$1.prototype.sign = function sign(message) {\n    assert$8(this._secret, 'KeyPair can only verify');\n    return this.eddsa.sign(message, this);\n  };\n\n  KeyPair$1.prototype.verify = function verify(message, sig) {\n    return this.eddsa.verify(message, sig, this);\n  };\n\n  KeyPair$1.prototype.getSecret = function getSecret(enc) {\n    assert$8(this._secret, 'KeyPair is public only');\n    return utils_1$1.encode(this.secret(), enc);\n  };\n\n  KeyPair$1.prototype.getPublic = function getPublic(enc) {\n    return utils_1$1.encode(this.pubBytes(), enc);\n  };\n\n  var key$1 = KeyPair$1;\n  var assert$9 = utils_1$1.assert;\n  var cachedProperty$1 = utils_1$1.cachedProperty;\n  var parseBytes$1 = utils_1$1.parseBytes;\n  /**\n  * @param {EDDSA} eddsa - eddsa instance\n  * @param {Array<Bytes>|Object} sig -\n  * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes\n  * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes\n  * @param {Array<Bytes>} [sig.Rencoded] - R point encoded\n  * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded\n  */\n\n  function Signature$1(eddsa, sig) {\n    this.eddsa = eddsa;\n    if (typeof sig !== 'object') sig = parseBytes$1(sig);\n\n    if (Array.isArray(sig)) {\n      sig = {\n        R: sig.slice(0, eddsa.encodingLength),\n        S: sig.slice(eddsa.encodingLength)\n      };\n    }\n\n    assert$9(sig.R && sig.S, 'Signature without R or S');\n    if (eddsa.isPoint(sig.R)) this._R = sig.R;\n    if (sig.S instanceof bn) this._S = sig.S;\n    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;\n    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;\n  }\n\n  cachedProperty$1(Signature$1, 'S', function S() {\n    return this.eddsa.decodeInt(this.Sencoded());\n  });\n  cachedProperty$1(Signature$1, 'R', function R() {\n    return this.eddsa.decodePoint(this.Rencoded());\n  });\n  cachedProperty$1(Signature$1, 'Rencoded', function Rencoded() {\n    return this.eddsa.encodePoint(this.R());\n  });\n  cachedProperty$1(Signature$1, 'Sencoded', function Sencoded() {\n    return this.eddsa.encodeInt(this.S());\n  });\n\n  Signature$1.prototype.toBytes = function toBytes() {\n    return this.Rencoded().concat(this.Sencoded());\n  };\n\n  Signature$1.prototype.toHex = function toHex() {\n    return utils_1$1.encode(this.toBytes(), 'hex').toUpperCase();\n  };\n\n  var signature$1 = Signature$1;\n  var assert$a = utils_1$1.assert;\n  var parseBytes$2 = utils_1$1.parseBytes;\n\n  function EDDSA(curve) {\n    assert$a(curve === 'ed25519', 'only tested with ed25519 so far');\n    if (!(this instanceof EDDSA)) return new EDDSA(curve);\n    var curve = curves_1[curve].curve;\n    this.curve = curve;\n    this.g = curve.g;\n    this.g.precompute(curve.n.bitLength() + 1);\n    this.pointClass = curve.point().constructor;\n    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\n    this.hash = hash_1.sha512;\n  }\n\n  var eddsa = EDDSA;\n  /**\n  * @param {Array|String} message - message bytes\n  * @param {Array|String|KeyPair} secret - secret bytes or a keypair\n  * @returns {Signature} - signature\n  */\n\n  EDDSA.prototype.sign = function sign(message, secret) {\n    message = parseBytes$2(message);\n    var key = this.keyFromSecret(secret);\n    var r = this.hashInt(key.messagePrefix(), message);\n    var R = this.g.mul(r);\n    var Rencoded = this.encodePoint(R);\n    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());\n    var S = r.add(s_).umod(this.curve.n);\n    return this.makeSignature({\n      R: R,\n      S: S,\n      Rencoded: Rencoded\n    });\n  };\n  /**\n  * @param {Array} message - message bytes\n  * @param {Array|String|Signature} sig - sig bytes\n  * @param {Array|String|Point|KeyPair} pub - public key\n  * @returns {Boolean} - true if public key matches sig of message\n  */\n\n\n  EDDSA.prototype.verify = function verify(message, sig, pub) {\n    message = parseBytes$2(message);\n    sig = this.makeSignature(sig);\n    var key = this.keyFromPublic(pub);\n    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\n    var SG = this.g.mul(sig.S());\n    var RplusAh = sig.R().add(key.pub().mul(h));\n    return RplusAh.eq(SG);\n  };\n\n  EDDSA.prototype.hashInt = function hashInt() {\n    var hash = this.hash();\n\n    for (var i = 0; i < arguments.length; i++) hash.update(arguments[i]);\n\n    return utils_1$1.intFromLE(hash.digest()).umod(this.curve.n);\n  };\n\n  EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\n    return key$1.fromPublic(this, pub);\n  };\n\n  EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\n    return key$1.fromSecret(this, secret);\n  };\n\n  EDDSA.prototype.makeSignature = function makeSignature(sig) {\n    if (sig instanceof signature$1) return sig;\n    return new signature$1(this, sig);\n  };\n  /**\n  * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2\n  *\n  * EDDSA defines methods for encoding and decoding points and integers. These are\n  * helper convenience methods, that pass along to utility functions implied\n  * parameters.\n  *\n  */\n\n\n  EDDSA.prototype.encodePoint = function encodePoint(point) {\n    var enc = point.getY().toArray('le', this.encodingLength);\n    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;\n    return enc;\n  };\n\n  EDDSA.prototype.decodePoint = function decodePoint(bytes) {\n    bytes = utils_1$1.parseBytes(bytes);\n    var lastIx = bytes.length - 1;\n    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);\n    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;\n    var y = utils_1$1.intFromLE(normed);\n    return this.curve.pointFromY(y, xIsOdd);\n  };\n\n  EDDSA.prototype.encodeInt = function encodeInt(num) {\n    return num.toArray('le', this.encodingLength);\n  };\n\n  EDDSA.prototype.decodeInt = function decodeInt(bytes) {\n    return utils_1$1.intFromLE(bytes);\n  };\n\n  EDDSA.prototype.isPoint = function isPoint(val) {\n    return val instanceof this.pointClass;\n  };\n\n  var require$$0$1 = getCjsExportFromNamespace(_package$1);\n  var elliptic_1 = createCommonjsModule(function (module, exports) {\n    var elliptic = exports;\n    elliptic.version = require$$0$1.version;\n    elliptic.utils = utils_1$1;\n    elliptic.rand = brorand;\n    elliptic.curve = curve_1;\n    elliptic.curves = curves_1; // Protocols\n\n    elliptic.ec = ec;\n    elliptic.eddsa = eddsa;\n  });\n  var elliptic = createCommonjsModule(function (module, exports) {\n    var Buffer = safeBuffer.Buffer;\n    var EC = elliptic_1.ec;\n    var ec = new EC('secp256k1');\n    var ecparams = ec.curve;\n\n    function loadCompressedPublicKey(first, xBuffer) {\n      var x = new bn(xBuffer); // overflow\n\n      if (x.cmp(ecparams.p) >= 0) return null;\n      x = x.toRed(ecparams.red); // compute corresponding Y\n\n      var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();\n      if (first === 0x03 !== y.isOdd()) y = y.redNeg();\n      return ec.keyPair({\n        pub: {\n          x: x,\n          y: y\n        }\n      });\n    }\n\n    function loadUncompressedPublicKey(first, xBuffer, yBuffer) {\n      var x = new bn(xBuffer);\n      var y = new bn(yBuffer); // overflow\n\n      if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null;\n      x = x.toRed(ecparams.red);\n      y = y.toRed(ecparams.red); // is odd flag\n\n      if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null; // x*x*x + b = y*y\n\n      var x3 = x.redSqr().redIMul(x);\n      if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;\n      return ec.keyPair({\n        pub: {\n          x: x,\n          y: y\n        }\n      });\n    }\n\n    function loadPublicKey(publicKey) {\n      var first = publicKey[0];\n\n      switch (first) {\n        case 0x02:\n        case 0x03:\n          if (publicKey.length !== 33) return null;\n          return loadCompressedPublicKey(first, publicKey.slice(1, 33));\n\n        case 0x04:\n        case 0x06:\n        case 0x07:\n          if (publicKey.length !== 65) return null;\n          return loadUncompressedPublicKey(first, publicKey.slice(1, 33), publicKey.slice(33, 65));\n\n        default:\n          return null;\n      }\n    }\n\n    exports.privateKeyVerify = function (privateKey) {\n      var bn$$1 = new bn(privateKey);\n      return bn$$1.cmp(ecparams.n) < 0 && !bn$$1.isZero();\n    };\n\n    exports.privateKeyExport = function (privateKey, compressed) {\n      var d = new bn(privateKey);\n      if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages$2.EC_PRIVATE_KEY_EXPORT_DER_FAIL);\n      return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true));\n    };\n\n    exports.privateKeyNegate = function (privateKey) {\n      var bn$$1 = new bn(privateKey);\n      return bn$$1.isZero() ? Buffer.alloc(32) : ecparams.n.sub(bn$$1).umod(ecparams.n).toArrayLike(Buffer, 'be', 32);\n    };\n\n    exports.privateKeyModInverse = function (privateKey) {\n      var bn$$1 = new bn(privateKey);\n      if (bn$$1.cmp(ecparams.n) >= 0 || bn$$1.isZero()) throw new Error(messages$2.EC_PRIVATE_KEY_RANGE_INVALID);\n      return bn$$1.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);\n    };\n\n    exports.privateKeyTweakAdd = function (privateKey, tweak) {\n      var bn$$1 = new bn(tweak);\n      if (bn$$1.cmp(ecparams.n) >= 0) throw new Error(messages$2.EC_PRIVATE_KEY_TWEAK_ADD_FAIL);\n      bn$$1.iadd(new bn(privateKey));\n      if (bn$$1.cmp(ecparams.n) >= 0) bn$$1.isub(ecparams.n);\n      if (bn$$1.isZero()) throw new Error(messages$2.EC_PRIVATE_KEY_TWEAK_ADD_FAIL);\n      return bn$$1.toArrayLike(Buffer, 'be', 32);\n    };\n\n    exports.privateKeyTweakMul = function (privateKey, tweak) {\n      var bn$$1 = new bn(tweak);\n      if (bn$$1.cmp(ecparams.n) >= 0 || bn$$1.isZero()) throw new Error(messages$2.EC_PRIVATE_KEY_TWEAK_MUL_FAIL);\n      bn$$1.imul(new bn(privateKey));\n      if (bn$$1.cmp(ecparams.n)) bn$$1 = bn$$1.umod(ecparams.n);\n      return bn$$1.toArrayLike(Buffer, 'be', 32);\n    };\n\n    exports.publicKeyCreate = function (privateKey, compressed) {\n      var d = new bn(privateKey);\n      if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages$2.EC_PUBLIC_KEY_CREATE_FAIL);\n      return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true));\n    };\n\n    exports.publicKeyConvert = function (publicKey, compressed) {\n      var pair = loadPublicKey(publicKey);\n      if (pair === null) throw new Error(messages$2.EC_PUBLIC_KEY_PARSE_FAIL);\n      return Buffer.from(pair.getPublic(compressed, true));\n    };\n\n    exports.publicKeyVerify = function (publicKey) {\n      return loadPublicKey(publicKey) !== null;\n    };\n\n    exports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {\n      var pair = loadPublicKey(publicKey);\n      if (pair === null) throw new Error(messages$2.EC_PUBLIC_KEY_PARSE_FAIL);\n      tweak = new bn(tweak);\n      if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages$2.EC_PUBLIC_KEY_TWEAK_ADD_FAIL);\n      var point = ecparams.g.mul(tweak).add(pair.pub);\n      if (point.isInfinity()) throw new Error(messages$2.EC_PUBLIC_KEY_TWEAK_ADD_FAIL);\n      return Buffer.from(point.encode(true, compressed));\n    };\n\n    exports.publicKeyTweakMul = function (publicKey, tweak, compressed) {\n      var pair = loadPublicKey(publicKey);\n      if (pair === null) throw new Error(messages$2.EC_PUBLIC_KEY_PARSE_FAIL);\n      tweak = new bn(tweak);\n      if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages$2.EC_PUBLIC_KEY_TWEAK_MUL_FAIL);\n      return Buffer.from(pair.pub.mul(tweak).encode(true, compressed));\n    };\n\n    exports.publicKeyCombine = function (publicKeys, compressed) {\n      var pairs = new Array(publicKeys.length);\n\n      for (var i = 0; i < publicKeys.length; ++i) {\n        pairs[i] = loadPublicKey(publicKeys[i]);\n        if (pairs[i] === null) throw new Error(messages$2.EC_PUBLIC_KEY_PARSE_FAIL);\n      }\n\n      var point = pairs[0].pub;\n\n      for (var j = 1; j < pairs.length; ++j) point = point.add(pairs[j].pub);\n\n      if (point.isInfinity()) throw new Error(messages$2.EC_PUBLIC_KEY_COMBINE_FAIL);\n      return Buffer.from(point.encode(true, compressed));\n    };\n\n    exports.signatureNormalize = function (signature) {\n      var r = new bn(signature.slice(0, 32));\n      var s = new bn(signature.slice(32, 64));\n      if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages$2.ECDSA_SIGNATURE_PARSE_FAIL);\n      var result = Buffer.from(signature);\n      if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32);\n      return result;\n    };\n\n    exports.signatureExport = function (signature) {\n      var r = signature.slice(0, 32);\n      var s = signature.slice(32, 64);\n      if (new bn(r).cmp(ecparams.n) >= 0 || new bn(s).cmp(ecparams.n) >= 0) throw new Error(messages$2.ECDSA_SIGNATURE_PARSE_FAIL);\n      return {\n        r: r,\n        s: s\n      };\n    };\n\n    exports.signatureImport = function (sigObj) {\n      var r = new bn(sigObj.r);\n      if (r.cmp(ecparams.n) >= 0) r = new bn(0);\n      var s = new bn(sigObj.s);\n      if (s.cmp(ecparams.n) >= 0) s = new bn(0);\n      return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);\n    };\n\n    exports.sign = function (message, privateKey, noncefn, data) {\n      if (typeof noncefn === 'function') {\n        var getNonce = noncefn;\n\n        noncefn = function (counter) {\n          var nonce = getNonce(message, privateKey, null, data, counter);\n          if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages$2.ECDSA_SIGN_FAIL);\n          return new bn(nonce);\n        };\n      }\n\n      var d = new bn(privateKey);\n      if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages$2.ECDSA_SIGN_FAIL);\n      var result = ec.sign(message, privateKey, {\n        canonical: true,\n        k: noncefn,\n        pers: data\n      });\n      return {\n        signature: Buffer.concat([result.r.toArrayLike(Buffer, 'be', 32), result.s.toArrayLike(Buffer, 'be', 32)]),\n        recovery: result.recoveryParam\n      };\n    };\n\n    exports.verify = function (message, signature, publicKey) {\n      var sigObj = {\n        r: signature.slice(0, 32),\n        s: signature.slice(32, 64)\n      };\n      var sigr = new bn(sigObj.r);\n      var sigs = new bn(sigObj.s);\n      if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages$2.ECDSA_SIGNATURE_PARSE_FAIL);\n      if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false;\n      var pair = loadPublicKey(publicKey);\n      if (pair === null) throw new Error(messages$2.EC_PUBLIC_KEY_PARSE_FAIL);\n      return ec.verify(message, sigObj, {\n        x: pair.pub.x,\n        y: pair.pub.y\n      });\n    };\n\n    exports.recover = function (message, signature, recovery, compressed) {\n      var sigObj = {\n        r: signature.slice(0, 32),\n        s: signature.slice(32, 64)\n      };\n      var sigr = new bn(sigObj.r);\n      var sigs = new bn(sigObj.s);\n      if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages$2.ECDSA_SIGNATURE_PARSE_FAIL);\n\n      try {\n        if (sigr.isZero() || sigs.isZero()) throw new Error();\n        var point = ec.recoverPubKey(message, sigObj, recovery);\n        return Buffer.from(point.encode(true, compressed));\n      } catch (err) {\n        throw new Error(messages$2.ECDSA_RECOVER_FAIL);\n      }\n    };\n\n    exports.ecdh = function (publicKey, privateKey) {\n      var shared = exports.ecdhUnsafe(publicKey, privateKey, true);\n      return browser('sha256').update(shared).digest();\n    };\n\n    exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {\n      var pair = loadPublicKey(publicKey);\n      if (pair === null) throw new Error(messages$2.EC_PUBLIC_KEY_PARSE_FAIL);\n      var scalar = new bn(privateKey);\n      if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages$2.ECDH_FAIL);\n      return Buffer.from(pair.pub.mul(scalar).encode(true, compressed));\n    };\n  });\n  var elliptic_1$1 = elliptic.privateKeyVerify;\n  var elliptic_2 = elliptic.privateKeyExport;\n  var elliptic_3 = elliptic.privateKeyNegate;\n  var elliptic_4 = elliptic.privateKeyModInverse;\n  var elliptic_5 = elliptic.privateKeyTweakAdd;\n  var elliptic_6 = elliptic.privateKeyTweakMul;\n  var elliptic_7 = elliptic.publicKeyCreate;\n  var elliptic_8 = elliptic.publicKeyConvert;\n  var elliptic_9 = elliptic.publicKeyVerify;\n  var elliptic_10 = elliptic.publicKeyTweakAdd;\n  var elliptic_11 = elliptic.publicKeyTweakMul;\n  var elliptic_12 = elliptic.publicKeyCombine;\n  var elliptic_13 = elliptic.signatureNormalize;\n  var elliptic_14 = elliptic.signatureExport;\n  var elliptic_15 = elliptic.signatureImport;\n  var elliptic_16 = elliptic.sign;\n  var elliptic_17 = elliptic.verify;\n  var elliptic_18 = elliptic.recover;\n  var elliptic_19 = elliptic.ecdh;\n  var elliptic_20 = elliptic.ecdhUnsafe;\n  var elliptic$1 = lib(elliptic);\n  var Buffer$j = safeBuffer.Buffer;\n  var MASTER_SECRET = Buffer$j.from('Bitcoin seed', 'utf8');\n  var HARDENED_OFFSET = 0x80000000;\n  var LEN = 78; // Bitcoin hardcoded by default, can use package `coininfo` for others\n\n  var BITCOIN_VERSIONS = {\n    private: 0x0488ADE4,\n    public: 0x0488B21E\n  };\n\n  function HDKey(versions) {\n    this.versions = versions || BITCOIN_VERSIONS;\n    this.depth = 0;\n    this.index = 0;\n    this._privateKey = null;\n    this._publicKey = null;\n    this.chainCode = null;\n    this._fingerprint = 0;\n    this.parentFingerprint = 0;\n  }\n\n  Object.defineProperty(HDKey.prototype, 'fingerprint', {\n    get: function () {\n      return this._fingerprint;\n    }\n  });\n  Object.defineProperty(HDKey.prototype, 'identifier', {\n    get: function () {\n      return this._identifier;\n    }\n  });\n  Object.defineProperty(HDKey.prototype, 'pubKeyHash', {\n    get: function () {\n      return this.identifier;\n    }\n  });\n  Object.defineProperty(HDKey.prototype, 'privateKey', {\n    get: function () {\n      return this._privateKey;\n    },\n    set: function (value) {\n      assert_1.equal(value.length, 32, 'Private key must be 32 bytes.');\n      assert_1(elliptic$1.privateKeyVerify(value) === true, 'Invalid private key');\n      this._privateKey = value;\n      this._publicKey = elliptic$1.publicKeyCreate(value, true);\n      this._identifier = hash160(this.publicKey);\n      this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);\n    }\n  });\n  Object.defineProperty(HDKey.prototype, 'publicKey', {\n    get: function () {\n      return this._publicKey;\n    },\n    set: function (value) {\n      assert_1(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.');\n      assert_1(elliptic$1.publicKeyVerify(value) === true, 'Invalid public key');\n      this._publicKey = elliptic$1.publicKeyConvert(value, true); // force compressed point\n\n      this._identifier = hash160(this.publicKey);\n      this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);\n      this._privateKey = null;\n    }\n  });\n  Object.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n    get: function () {\n      if (this._privateKey) return coinstring.encode(serialize(this, this.versions.private, Buffer$j.concat([Buffer$j.alloc(1, 0), this.privateKey])));else return null;\n    }\n  });\n  Object.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n    get: function () {\n      return coinstring.encode(serialize(this, this.versions.public, this.publicKey));\n    }\n  });\n\n  HDKey.prototype.derive = function (path) {\n    if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n      return this;\n    }\n\n    var entries = path.split('/');\n    var hdkey = this;\n    entries.forEach(function (c, i) {\n      if (i === 0) {\n        assert_1(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"');\n        return;\n      }\n\n      var hardened = c.length > 1 && c[c.length - 1] === \"'\";\n      var childIndex = parseInt(c, 10); // & (HARDENED_OFFSET - 1)\n\n      assert_1(childIndex < HARDENED_OFFSET, 'Invalid index');\n      if (hardened) childIndex += HARDENED_OFFSET;\n      hdkey = hdkey.deriveChild(childIndex);\n    });\n    return hdkey;\n  };\n\n  HDKey.prototype.deriveChild = function (index) {\n    var isHardened = index >= HARDENED_OFFSET;\n    var indexBuffer = Buffer$j.allocUnsafe(4);\n    indexBuffer.writeUInt32BE(index, 0);\n    var data;\n\n    if (isHardened) {\n      // Hardened child\n      assert_1(this.privateKey, 'Could not derive hardened child key');\n      var pk = this.privateKey;\n      var zb = Buffer$j.alloc(1, 0);\n      pk = Buffer$j.concat([zb, pk]); // data = 0x00 || ser256(kpar) || ser32(index)\n\n      data = Buffer$j.concat([pk, indexBuffer]);\n    } else {\n      // Normal child\n      // data = serP(point(kpar)) || ser32(index)\n      //      = serP(Kpar) || ser32(index)\n      data = Buffer$j.concat([this.publicKey, indexBuffer]);\n    }\n\n    var I = crypto.createHmac('sha512', this.chainCode).update(data).digest();\n    var IL = I.slice(0, 32);\n    var IR = I.slice(32);\n    var hd = new HDKey(this.versions); // Private parent key -> private child key\n\n    if (this.privateKey) {\n      // ki = parse256(IL) + kpar (mod n)\n      try {\n        hd.privateKey = elliptic$1.privateKeyTweakAdd(this.privateKey, IL); // throw if IL >= n || (privateKey + IL) === 0\n      } catch (err) {\n        // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n        return this.derive(index + 1);\n      } // Public parent key -> public child key\n\n    } else {\n      // Ki = point(parse256(IL)) + Kpar\n      //    = G*IL + Kpar\n      try {\n        hd.publicKey = elliptic$1.publicKeyTweakAdd(this.publicKey, IL, true); // throw if IL >= n || (g**IL + publicKey) is infinity\n      } catch (err) {\n        // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n        return this.derive(index + 1, isHardened);\n      }\n    }\n\n    hd.chainCode = IR;\n    hd.depth = this.depth + 1;\n    hd.parentFingerprint = this.fingerprint; // .readUInt32BE(0)\n\n    hd.index = index;\n    return hd;\n  };\n\n  HDKey.prototype.sign = function (hash) {\n    return elliptic$1.sign(hash, this.privateKey).signature;\n  };\n\n  HDKey.prototype.verify = function (hash, signature) {\n    return elliptic$1.verify(hash, signature, this.publicKey);\n  };\n\n  HDKey.prototype.wipePrivateData = function () {\n    if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey);\n    this._privateKey = null;\n    return this;\n  };\n\n  HDKey.prototype.toJSON = function () {\n    return {\n      xpriv: this.privateExtendedKey,\n      xpub: this.publicExtendedKey\n    };\n  };\n\n  HDKey.fromMasterSeed = function (seedBuffer, versions) {\n    var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest();\n    var IL = I.slice(0, 32);\n    var IR = I.slice(32);\n    var hdkey = new HDKey(versions);\n    hdkey.chainCode = IR;\n    hdkey.privateKey = IL;\n    return hdkey;\n  };\n\n  HDKey.fromExtendedKey = function (base58key, versions) {\n    // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n    versions = versions || BITCOIN_VERSIONS;\n    var hdkey = new HDKey(versions);\n    var keyBuffer = coinstring.decode(base58key);\n    var version = keyBuffer.readUInt32BE(0);\n    assert_1(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public');\n    hdkey.depth = keyBuffer.readUInt8(4);\n    hdkey.parentFingerprint = keyBuffer.readUInt32BE(5);\n    hdkey.index = keyBuffer.readUInt32BE(9);\n    hdkey.chainCode = keyBuffer.slice(13, 45);\n    var key = keyBuffer.slice(45);\n\n    if (key.readUInt8(0) === 0) {\n      // private\n      assert_1(version === versions.private, 'Version mismatch: version does not match private');\n      hdkey.privateKey = key.slice(1); // cut off first 0x0 byte\n    } else {\n      assert_1(version === versions.public, 'Version mismatch: version does not match public');\n      hdkey.publicKey = key;\n    }\n\n    return hdkey;\n  };\n\n  HDKey.fromJSON = function (obj) {\n    return HDKey.fromExtendedKey(obj.xpriv);\n  };\n\n  function serialize(hdkey, version, key) {\n    // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n    var buffer$$1 = Buffer$j.allocUnsafe(LEN);\n    buffer$$1.writeUInt32BE(version, 0);\n    buffer$$1.writeUInt8(hdkey.depth, 4);\n    var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000;\n    buffer$$1.writeUInt32BE(fingerprint, 5);\n    buffer$$1.writeUInt32BE(hdkey.index, 9);\n    hdkey.chainCode.copy(buffer$$1, 13);\n    key.copy(buffer$$1, 45);\n    return buffer$$1;\n  }\n\n  function hash160(buf) {\n    var sha = crypto.createHash('sha256').update(buf).digest();\n    return crypto.createHash('ripemd160').update(sha).digest();\n  }\n\n  HDKey.HARDENED_OFFSET = HARDENED_OFFSET;\n  var hdkey = HDKey; //  This file is part of Zilliqa-Javascript-Library.\n\n  var Wallet =\n  /** @class */\n  function (_super) {\n    __extends(Wallet, _super);\n    /**\r\n     * constructor\r\n     *\r\n     * Takes an array of Account objects and instantiates a Wallet instance.\r\n     *\r\n     * @param {Account[]} accounts\r\n     */\n\n\n    function Wallet(provider, accounts) {\n      if (accounts === void 0) {\n        accounts = [];\n      }\n\n      var _this = _super.call(this) || this;\n\n      _this.accounts = {};\n\n      if (accounts.length) {\n        _this.accounts = accounts.reduce(function (acc, account) {\n          var _a;\n\n          return __assign(__assign({}, acc), (_a = {}, _a[account.address] = account, _a));\n        }, {});\n      }\n\n      _this.provider = provider;\n      _this.defaultAccount = accounts[0];\n      return _this;\n    }\n    /**\r\n     * create\r\n     *\r\n     * Creates a new keypair with a randomly-generated private key. The new\r\n     * account is accessible by address.\r\n     *\r\n     * @returns {string} - address of the new account\r\n     */\n\n\n    Wallet.prototype.create = function () {\n      var _a;\n\n      var privateKey = zcrypto.schnorr.generatePrivateKey();\n      var newAccount = new Account(privateKey);\n      this.accounts = __assign(__assign({}, this.accounts), (_a = {}, _a[newAccount.address] = newAccount, _a));\n\n      if (!this.defaultAccount) {\n        this.defaultAccount = newAccount;\n      }\n\n      return newAccount.address;\n    };\n    /**\r\n     * addByPrivateKey\r\n     *\r\n     * Adds an account to the wallet by private key.\r\n     *\r\n     * @param {string} privateKey - hex-encoded private key\r\n     * @returns {string} - the corresponing address, computer from the private\r\n     * key.\r\n     */\n\n\n    Wallet.prototype.addByPrivateKey = function (privateKey) {\n      var _a;\n\n      var newAccount = new Account(privateKey);\n      this.accounts = __assign(__assign({}, this.accounts), (_a = {}, _a[newAccount.address] = newAccount, _a));\n\n      if (!this.defaultAccount) {\n        this.defaultAccount = newAccount;\n      }\n\n      return newAccount.address;\n    };\n    /**\r\n     * addByKeystore\r\n     *\r\n     * Adds an account by keystore. This method is asynchronous and returns\r\n     * a Promise<string>, in order not to block on the underlying decryption\r\n     * operation.\r\n     *\r\n     * @param {string} keystore\r\n     * @param {string} passphrase\r\n     * @returns {Promise<string>}\r\n     */\n\n\n    Wallet.prototype.addByKeystore = function (keystore, passphrase) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newAccount;\n\n        var _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , Account.fromFile(keystore, passphrase)];\n\n            case 1:\n              newAccount = _b.sent();\n              this.accounts = __assign(__assign({}, this.accounts), (_a = {}, _a[newAccount.address] = newAccount, _a));\n\n              if (!this.defaultAccount) {\n                this.defaultAccount = newAccount;\n              }\n\n              return [2\n              /*return*/\n              , newAccount.address];\n          }\n        });\n      });\n    };\n    /**\r\n     * addByMnemonic\r\n     *\r\n     * Adds an `Account` by use of a mnemonic as specified in BIP-32 and BIP-39\r\n     *\r\n     * @param {string} phrase - 12-word mnemonic phrase\r\n     * @param {number} index=0 - the number of the child key to add\r\n     * @returns {string} - the corresponding address\r\n     */\n\n\n    Wallet.prototype.addByMnemonic = function (phrase, index) {\n      if (index === void 0) {\n        index = 0;\n      }\n\n      if (!this.isValidMnemonic(phrase)) {\n        throw new Error(\"Invalid mnemonic phrase: \" + phrase);\n      }\n\n      var seed = bip39.mnemonicToSeed(phrase);\n      var hdKey = hdkey.fromMasterSeed(seed);\n      var childKey = hdKey.derive(\"m/44'/313'/0'/0/\" + index);\n      var privateKey = childKey.privateKey.toString('hex');\n      return this.addByPrivateKey(privateKey);\n    };\n    /**\r\n     * export\r\n     *\r\n     * Exports the specified account as a keystore file.\r\n     *\r\n     * @param {string} address\r\n     * @param {string} passphrase\r\n     * @param {KDF} kdf='scrypt'\r\n     * @returns {Promise<string>}\r\n     */\n\n\n    Wallet.prototype.export = function (address, passphrase, kdf) {\n      if (kdf === void 0) {\n        kdf = 'scrypt';\n      }\n\n      if (!this.accounts[address]) {\n        throw new Error(\"No account with address \" + address + \" exists\");\n      }\n\n      return this.accounts[address].toFile(passphrase, kdf);\n    };\n    /**\r\n     * remove\r\n     *\r\n     * Removes an account from the wallet and returns boolean to indicate\r\n     * failure or success.\r\n     *\r\n     * @param {string} address\r\n     * @returns {boolean}\r\n     */\n\n\n    Wallet.prototype.remove = function (address) {\n      if (this.accounts[address]) {\n        var _a = this.accounts,\n            _b = address,\n            toRemove = _a[_b],\n            rest = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n\n        this.accounts = rest;\n        return true;\n      }\n\n      return false;\n    };\n    /**\r\n     * setDefault\r\n     *\r\n     * Sets the default account of the wallet.\r\n     *\r\n     * @param {string} address\r\n     */\n\n\n    Wallet.prototype.setDefault = function (address) {\n      this.defaultAccount = this.accounts[address];\n    };\n    /**\r\n     * sign\r\n     *\r\n     * signs an unsigned transaction with the default account.\r\n     *\r\n     * @param {Transaction} tx\r\n     * @param {string} account\r\n     * @returns {Transaction}\r\n     */\n\n\n    Wallet.prototype.sign = function (tx) {\n      if (tx.txParams && tx.txParams.pubKey) {\n        // attempt to find the address\n        var senderAddress = zcrypto.getAddressFromPublicKey(tx.txParams.pubKey);\n\n        if (!this.accounts[senderAddress]) {\n          throw new Error(\"Could not sign the transaction with \" + senderAddress + \" as it does not exist\");\n        }\n\n        return this.signWith(tx, senderAddress);\n      }\n\n      if (!this.defaultAccount) {\n        throw new Error('This wallet has no default account.');\n      }\n\n      return this.signWith(tx, this.defaultAccount.address);\n    };\n    /**\r\n     * signWith\r\n     *\r\n     * @param {Transaction} tx\r\n     * @param {string} account\r\n     * @returns {Transaction}\r\n     */\n\n\n    Wallet.prototype.signWith = function (tx, account) {\n      return __awaiter(this, void 0, void 0, function () {\n        var signer_1, balance_1, withNonce_1, err_1;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!this.accounts[account]) {\n                throw new Error('The selected account does not exist on this Wallet instance.');\n              }\n\n              _a.label = 1;\n\n            case 1:\n              _a.trys.push([1, 4,, 5]);\n\n              signer_1 = this.accounts[account];\n              if (!!tx.txParams.nonce) return [3\n              /*break*/\n              , 3];\n              return [4\n              /*yield*/\n              , this.provider.send('GetBalance', signer_1.address.replace('0x', '').toLowerCase())];\n\n            case 2:\n              balance_1 = _a.sent();\n\n              if (typeof balance_1.result.nonce !== 'number') {\n                throw new Error('Could not get nonce');\n              }\n\n              withNonce_1 = tx.map(function (txObj) {\n                return __assign(__assign({}, txObj), {\n                  nonce: txObj.nonce || balance_1.result.nonce + 1,\n                  pubKey: signer_1.publicKey\n                });\n              });\n              return [2\n              /*return*/\n              , withNonce_1.map(function (txObj) {\n                // @ts-ignore\n                return __assign(__assign({}, txObj), {\n                  signature: signer_1.signTransaction(withNonce_1.bytes)\n                });\n              })];\n\n            case 3:\n              return [2\n              /*return*/\n              , tx.map(function (txObj) {\n                return __assign(__assign({}, txObj), {\n                  signature: signer_1.signTransaction(tx.bytes)\n                });\n              })];\n\n            case 4:\n              err_1 = _a.sent();\n              throw err_1;\n\n            case 5:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    Wallet.prototype.isValidMnemonic = function (phrase) {\n      if (phrase.trim().split(/\\s+/g).length < 12) {\n        return false;\n      }\n\n      return bip39.validateMnemonic(phrase);\n    };\n\n    return Wallet;\n  }(core.Signer); //  This file is part of Zilliqa-Javascript-Library.\n\n  /**\r\n   * Transaction\r\n   *\r\n   * Transaction is a functor. Its purpose is to encode the possible states a\r\n   * Transaction can be in:  Confirmed, Rejected, Pending, or Initialised (i.e., not broadcasted).\r\n   */\n\n\n  var Transaction =\n  /** @class */\n  function () {\n    function Transaction(params, provider, status, toDS) {\n      if (status === void 0) {\n        status = 0\n        /* Initialised */\n        ;\n      }\n\n      if (toDS === void 0) {\n        toDS = false;\n      }\n\n      this.code = '';\n      this.data = ''; // private members\n\n      this.version = params.version;\n      this.toAddr = zcrypto.normaliseAddress(params.toAddr);\n      this.nonce = params.nonce;\n      this.pubKey = params.pubKey;\n      this.amount = params.amount;\n      this.code = params.code || '';\n      this.data = params.data || '';\n      this.signature = params.signature;\n      this.gasPrice = params.gasPrice;\n      this.gasLimit = params.gasLimit;\n      this.receipt = params.receipt; // public members\n\n      this.provider = provider;\n      this.status = status;\n      this.toDS = toDS;\n      this.blockConfirmation = 0;\n      this.eventEmitter = new core.EventEmitter();\n    }\n    /**\r\n     * confirm\r\n     *\r\n     * constructs an already-confirmed transaction.\r\n     *\r\n     * @static\r\n     * @param {BaseTx} params\r\n     */\n\n\n    Transaction.confirm = function (params, provider) {\n      return new Transaction(params, provider, 2\n      /* Confirmed */\n      );\n    };\n    /**\r\n     * reject\r\n     *\r\n     * constructs an already-rejected transaction.\r\n     *\r\n     * @static\r\n     * @param {BaseTx} params\r\n     */\n\n\n    Transaction.reject = function (params, provider) {\n      return new Transaction(params, provider, 3\n      /* Rejected */\n      );\n    };\n\n    Object.defineProperty(Transaction.prototype, \"bytes\", {\n      get: function () {\n        return encodeTransactionProto(this.txParams);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(Transaction.prototype, \"senderAddress\", {\n      get: function () {\n        if (!this.pubKey) {\n          return '0'.repeat(40);\n        }\n\n        return zcrypto.getAddressFromPublicKey(this.pubKey);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(Transaction.prototype, \"txParams\", {\n      get: function () {\n        return {\n          version: this.version,\n          toAddr: zcrypto.normaliseAddress(this.toAddr),\n          nonce: this.nonce,\n          pubKey: this.pubKey,\n          amount: this.amount,\n          gasPrice: this.gasPrice,\n          gasLimit: this.gasLimit,\n          code: this.code,\n          data: this.data,\n          signature: this.signature,\n          receipt: this.receipt\n        };\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(Transaction.prototype, \"payload\", {\n      get: function () {\n        return {\n          version: 0,\n          toAddr: this.toAddr,\n          nonce: this.nonce,\n          pubKey: this.pubKey,\n          amount: this.amount.toString(),\n          gasPrice: this.gasPrice.toString(),\n          gasLimit: this.gasLimit.toString(),\n          code: this.code,\n          data: this.data,\n          signature: this.signature,\n          receipt: this.receipt\n        };\n      },\n      enumerable: true,\n      configurable: true\n    });\n    /**\r\n     * isPending\r\n     *\r\n     * @returns {boolean}\r\n     */\n\n    Transaction.prototype.isPending = function () {\n      return this.status === 1\n      /* Pending */\n      ;\n    };\n    /**\r\n     * isInitialised\r\n     *\r\n     * @returns {boolean}\r\n     */\n\n\n    Transaction.prototype.isInitialised = function () {\n      return this.status === 0\n      /* Initialised */\n      ;\n    };\n    /**\r\n     * isConfirmed\r\n     *\r\n     * @returns {boolean}\r\n     */\n\n\n    Transaction.prototype.isConfirmed = function () {\n      return this.status === 2\n      /* Confirmed */\n      ;\n    };\n    /**\r\n     * isRejected\r\n     *\r\n     * @returns {boolean}\r\n     */\n\n\n    Transaction.prototype.isRejected = function () {\n      return this.status === 3\n      /* Rejected */\n      ;\n    };\n    /**\r\n     * setProvider\r\n     *\r\n     * Sets the provider on this instance.\r\n     *\r\n     * @param {Provider} provider\r\n     */\n\n\n    Transaction.prototype.setProvider = function (provider) {\n      this.provider = provider;\n    };\n    /**\r\n     * setStatus\r\n     *\r\n     * Escape hatch to imperatively set the state of the transaction.\r\n     *\r\n     * @param {TxStatus} status\r\n     * @returns {undefined}\r\n     */\n\n\n    Transaction.prototype.setStatus = function (status) {\n      this.status = status;\n      return this;\n    };\n\n    Transaction.prototype.observed = function () {\n      return this.eventEmitter;\n    };\n    /**\r\n     * blockConfirm\r\n     *\r\n     * Use `RPCMethod.GetLatestBlock` to get latest blockNumber\r\n     * Use interval to get the latestBlockNumber\r\n     * After BlockNumber change, then we use `RPCMethod.GetTransaction` to get the receipt\r\n     *\r\n     * @param {string} txHash\r\n     * @param {number} maxblockCount\r\n     * @param {number} interval interval in milliseconds\r\n     * @returns {Promise<Transaction>}\r\n     */\n\n\n    Transaction.prototype.blockConfirm = function (txHash, maxblockCount, interval) {\n      if (maxblockCount === void 0) {\n        maxblockCount = 4;\n      }\n\n      if (interval === void 0) {\n        interval = 1000;\n      }\n\n      return __awaiter(this, void 0, void 0, function () {\n        var blockStart, blockChecked, attempt, blockLatest, blockNext, err_1, blockFailed, errorMessage;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              this.status = 1\n              /* Pending */\n              ;\n              return [4\n              /*yield*/\n              , this.getBlockNumber()];\n\n            case 1:\n              blockStart = _a.sent();\n              blockChecked = blockStart;\n              attempt = 0;\n              _a.label = 2;\n\n            case 2:\n              if (!(attempt < maxblockCount)) return [3\n              /*break*/\n              , 12];\n              _a.label = 3;\n\n            case 3:\n              _a.trys.push([3, 8,, 9]);\n\n              return [4\n              /*yield*/\n              , this.getBlockNumber()];\n\n            case 4:\n              blockLatest = _a.sent();\n              blockNext = blockChecked.add(new util.BN(attempt === 0 ? attempt : 1));\n              if (!blockLatest.gte(blockNext)) return [3\n              /*break*/\n              , 6];\n              blockChecked = blockLatest;\n              this.emit(\"track\"\n              /* Track */\n              , {\n                txHash: txHash,\n                attempt: attempt,\n                currentBlock: blockChecked.toString()\n              });\n              return [4\n              /*yield*/\n              , this.trackTx(txHash)];\n\n            case 5:\n              if (_a.sent()) {\n                this.blockConfirmation = blockLatest.sub(blockStart).toNumber();\n                return [2\n                /*return*/\n                , this];\n              }\n\n              return [3\n              /*break*/\n              , 7];\n\n            case 6:\n              attempt = attempt - 1 >= 0 ? attempt - 1 : 0;\n              _a.label = 7;\n\n            case 7:\n              return [3\n              /*break*/\n              , 9];\n\n            case 8:\n              err_1 = _a.sent();\n              this.status = 3\n              /* Rejected */\n              ;\n              throw err_1;\n\n            case 9:\n              if (!(attempt + 1 < maxblockCount)) return [3\n              /*break*/\n              , 11];\n              return [4\n              /*yield*/\n              , sleep(interval)];\n\n            case 10:\n              _a.sent();\n\n              _a.label = 11;\n\n            case 11:\n              attempt += 1;\n              return [3\n              /*break*/\n              , 2];\n\n            case 12:\n              return [4\n              /*yield*/\n              , this.getBlockNumber()];\n\n            case 13:\n              blockFailed = _a.sent();\n              this.blockConfirmation = blockFailed.sub(blockStart).toNumber();\n              this.status = 3\n              /* Rejected */\n              ;\n              errorMessage = \"The transaction is still not confirmed after \" + maxblockCount + \" blocks.\";\n              throw new Error(errorMessage);\n          }\n        });\n      });\n    };\n    /**\r\n     * confirmReceipt\r\n     *\r\n     * Similar to the Promise API. This sets the Transaction instance to a state\r\n     * of pending. Calling this function kicks off a passive loop that polls the\r\n     * lookup node for confirmation on the txHash.\r\n     *\r\n     * The polls are performed with a linear backoff:\r\n     *\r\n     * `const delay = interval * attempt`\r\n     *\r\n     * This is a low-level method that you should generally not have to use\r\n     * directly.\r\n     *\r\n     * @param {string} txHash\r\n     * @param {number} maxAttempts\r\n     * @param {number} initial interval in milliseconds\r\n     * @returns {Promise<Transaction>}\r\n     */\n\n\n    Transaction.prototype.confirm = function (txHash, maxAttempts, interval) {\n      if (maxAttempts === void 0) {\n        maxAttempts = core.GET_TX_ATTEMPTS;\n      }\n\n      if (interval === void 0) {\n        interval = 1000;\n      }\n\n      return __awaiter(this, void 0, void 0, function () {\n        var attempt, err_2, errorMessage;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              this.status = 1\n              /* Pending */\n              ;\n              attempt = 0;\n              _a.label = 1;\n\n            case 1:\n              if (!(attempt < maxAttempts)) return [3\n              /*break*/\n              , 8];\n              this.emit(\"track\"\n              /* Track */\n              , {\n                txHash: txHash,\n                attempt: attempt\n              });\n              _a.label = 2;\n\n            case 2:\n              _a.trys.push([2, 4,, 5]);\n\n              return [4\n              /*yield*/\n              , this.trackTx(txHash)];\n\n            case 3:\n              if (_a.sent()) {\n                return [2\n                /*return*/\n                , this];\n              }\n\n              return [3\n              /*break*/\n              , 5];\n\n            case 4:\n              err_2 = _a.sent();\n              this.status = 3\n              /* Rejected */\n              ;\n              throw err_2;\n\n            case 5:\n              if (!(attempt + 1 < maxAttempts)) return [3\n              /*break*/\n              , 7];\n              return [4\n              /*yield*/\n              , sleep(interval * attempt)];\n\n            case 6:\n              _a.sent();\n\n              _a.label = 7;\n\n            case 7:\n              attempt++;\n              return [3\n              /*break*/\n              , 1];\n\n            case 8:\n              this.status = 3\n              /* Rejected */\n              ;\n              errorMessage = \"The transaction is still not confirmed after \" + maxAttempts + \" attempts.\";\n              throw new Error(errorMessage);\n          }\n        });\n      });\n    };\n    /**\r\n     * map\r\n     *\r\n     * maps over the transaction, allowing for manipulation.\r\n     *\r\n     * @param {(prev: TxParams) => TxParams} fn - mapper\r\n     * @returns {Transaction}\r\n     */\n\n\n    Transaction.prototype.map = function (fn) {\n      var newParams = fn(this.txParams);\n      this.setParams(newParams);\n      return this;\n    };\n\n    Transaction.prototype.setParams = function (params) {\n      this.version = params.version;\n      this.toAddr = zcrypto.normaliseAddress(params.toAddr);\n      this.nonce = params.nonce;\n      this.pubKey = params.pubKey;\n      this.amount = params.amount;\n      this.code = params.code || '';\n      this.data = params.data || '';\n      this.signature = params.signature;\n      this.gasPrice = params.gasPrice;\n      this.gasLimit = params.gasLimit;\n      this.receipt = params.receipt;\n    };\n\n    Transaction.prototype.trackTx = function (txHash) {\n      return __awaiter(this, void 0, void 0, function () {\n        var res;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.provider.send(\"GetTransaction\"\n              /* GetTransaction */\n              , txHash)];\n\n            case 1:\n              res = _a.sent();\n\n              if (res.error) {\n                this.emit(\"error\"\n                /* Error */\n                , res.error);\n                return [2\n                /*return*/\n                , false];\n              }\n\n              this.id = res.result.ID;\n              this.receipt = __assign(__assign({}, res.result.receipt), {\n                cumulative_gas: parseInt(res.result.receipt.cumulative_gas, 10)\n              });\n              this.emit(\"receipt\"\n              /* Receipt */\n              , this.receipt);\n              this.status = this.receipt && this.receipt.success ? 2\n              /* Confirmed */\n              : 3\n              /* Rejected */\n              ;\n              return [2\n              /*return*/\n              , true];\n          }\n        });\n      });\n    };\n\n    Transaction.prototype.getBlockNumber = function () {\n      return __awaiter(this, void 0, void 0, function () {\n        var res, error_1;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 2,, 3]);\n\n              return [4\n              /*yield*/\n              , this.provider.send(\"GetLatestTxBlock\"\n              /* GetLatestTxBlock */\n              )];\n\n            case 1:\n              res = _a.sent();\n\n              if (res.error === undefined && res.result.header.BlockNum) {\n                // if blockNumber is too high, we use BN to be safer\n                return [2\n                /*return*/\n                , new util.BN(res.result.header.BlockNum)];\n              } else {\n                throw new Error('Can not get latest BlockNumber');\n              }\n\n              return [3\n              /*break*/\n              , 3];\n\n            case 2:\n              error_1 = _a.sent();\n              throw error_1;\n\n            case 3:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    Transaction.prototype.emit = function (event, txEvent) {\n      this.eventEmitter.emit(event, __assign(__assign({}, txEvent), {\n        event: event\n      }));\n    };\n\n    return Transaction;\n  }(); //  This file is part of Zilliqa-Javascript-Library.\n\n\n  var TransactionFactory =\n  /** @class */\n  function () {\n    function TransactionFactory(provider, signer) {\n      this.provider = provider;\n      this.provider.middleware.request.use(formatOutgoingTx, \"CreateTransaction\"\n      /* CreateTransaction */\n      );\n      this.signer = signer;\n    }\n\n    TransactionFactory.prototype.new = function (txParams, toDs) {\n      if (toDs === void 0) {\n        toDs = false;\n      }\n\n      return new Transaction(txParams, this.provider, 0\n      /* Initialised */\n      , toDs);\n    };\n\n    return TransactionFactory;\n  }(); //  This file is part of Zilliqa-Javascript-Library.\n\n\n  (function (TxStatus) {\n    TxStatus[TxStatus[\"Initialised\"] = 0] = \"Initialised\";\n    TxStatus[TxStatus[\"Pending\"] = 1] = \"Pending\";\n    TxStatus[TxStatus[\"Confirmed\"] = 2] = \"Confirmed\";\n    TxStatus[TxStatus[\"Rejected\"] = 3] = \"Rejected\";\n  })(exports.TxStatus || (exports.TxStatus = {}));\n\n  (function (TxEventName) {\n    TxEventName[\"Error\"] = \"error\";\n    TxEventName[\"Receipt\"] = \"receipt\";\n    TxEventName[\"Track\"] = \"track\";\n  })(exports.TxEventName || (exports.TxEventName = {})); //  This file is part of Zilliqa-Javascript-Library.\n\n\n  exports.util = util$1;\n  exports.Account = Account;\n  exports.Wallet = Wallet;\n  exports.Transaction = Transaction;\n  exports.TransactionFactory = TransactionFactory;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}
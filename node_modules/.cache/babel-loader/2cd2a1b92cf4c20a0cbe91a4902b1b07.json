{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar zilliqa_1 = require(\"@zilliqa-js/zilliqa\");\n\nvar crypto_1 = require(\"@zilliqa-js/crypto\");\n\nvar namehash_1 = __importDefault(require(\"./zns/namehash\"));\n\nvar lodash_1 = __importDefault(require(\"lodash\"));\n\nvar NamingService_1 = __importDefault(require(\"./namingService\"));\n\nvar DefaultSource = 'https://api.zilliqa.com';\nvar NullAddress = '0x0000000000000000000000000000000000000000';\nvar NetworkIdMap = {\n  1: 'mainnet',\n  333: 'testnet',\n  111: 'localnet'\n};\nvar RegistryMap = {\n  mainnet: 'zil1jcgu2wlx6xejqk9jw3aaankw6lsjzeunx2j0jz'\n};\nvar UrlMap = {\n  mainnet: 'https://api.zilliqa.com',\n  testnet: 'https://dev-api.zilliqa.com',\n  localnet: 'http://localhost:4201'\n};\n\nvar UrlNetworkMap = function (url) {\n  var invert = lodash_1.default(UrlMap).invert().value();\n  return invert[url];\n};\n\nvar Zns =\n/** @class */\nfunction (_super) {\n  __extends(Zns, _super);\n\n  function Zns(source) {\n    if (source === void 0) {\n      source = true;\n    }\n\n    var _this = _super.call(this) || this;\n\n    source = _this.normalizeSource(source);\n    _this.network = source.network;\n    _this.url = source.url;\n    _this.zilliqa = new zilliqa_1.Zilliqa(_this.url);\n\n    if (!_this.network) {\n      throw new Error('Unspecified network in Namicorn ZNS configuration');\n    }\n\n    if (!_this.url) {\n      throw new Error('Unspecified url in Namicorn ZNS configuration');\n    }\n\n    _this.registryAddress = source.registry ? source.registry : RegistryMap[_this.network];\n\n    if (_this.registryAddress) {\n      _this.registryAddress = _this.registryAddress.startsWith('0x') ? crypto_1.toBech32Address(_this.registryAddress) : _this.registryAddress;\n      _this.registry = _this.zilliqa.contracts.at(_this.registryAddress);\n    }\n\n    return _this;\n  }\n\n  Zns.prototype.resolve = function (domain) {\n    return __awaiter(this, void 0, void 0, function () {\n      var recordAddresses, ownerAddress, resolverAddress, resolution, addresses;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isSupportedDomain(domain) || !this.isSupportedNetwork()) return [2\n            /*return*/\n            , null];\n            return [4\n            /*yield*/\n            , this._getRecordsAddresses(domain)];\n\n          case 1:\n            recordAddresses = _a.sent();\n            if (!recordAddresses) return [2\n            /*return*/\n            , null];\n            ownerAddress = recordAddresses[0], resolverAddress = recordAddresses[1];\n            return [4\n            /*yield*/\n            , this._getResolverRecordsStructure(resolverAddress)];\n\n          case 2:\n            resolution = _a.sent();\n            addresses = lodash_1.default.mapValues(resolution.crypto, 'address');\n            return [2\n            /*return*/\n            , {\n              addresses: addresses,\n              meta: {\n                owner: ownerAddress || null,\n                type: 'zns',\n                ttl: parseInt(resolution.ttl) || 0\n              }\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Resolves a domain\n   * @param domain - domain name to be resolved\n   * @returns - Everything what is stored on specified domain\n   */\n\n\n  Zns.prototype.resolution = function (domain) {\n    return __awaiter(this, void 0, void 0, function () {\n      var recordAddresses, _, resolverAddress;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isSupportedDomain(domain) || !this.isSupportedNetwork()) return [2\n            /*return*/\n            , {}];\n            return [4\n            /*yield*/\n            , this._getRecordsAddresses(domain)];\n\n          case 1:\n            recordAddresses = _a.sent();\n            if (!recordAddresses) return [2\n            /*return*/\n            , {}];\n            _ = recordAddresses[0], resolverAddress = recordAddresses[1];\n            return [4\n            /*yield*/\n            , this._getResolverRecordsStructure(resolverAddress)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  Zns.prototype.isSupportedDomain = function (domain) {\n    return domain.indexOf('.') > 0 && /^.{1,}\\.(zil)$/.test(domain);\n  };\n\n  Zns.prototype.isSupportedNetwork = function () {\n    return this.registryAddress != null;\n  };\n  /**\n   * @ignore\n   * @param domain - domain name\n   */\n\n\n  Zns.prototype._getRecordsAddresses = function (domain) {\n    return __awaiter(this, void 0, void 0, function () {\n      var registryRecord, _a, ownerAddress, resolverAddress;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getContractMapValue(this.registry, 'records', namehash_1.default(domain))];\n\n          case 1:\n            registryRecord = _b.sent();\n            if (!registryRecord) return [2\n            /*return*/\n            , null];\n            _a = registryRecord.arguments, ownerAddress = _a[0], resolverAddress = _a[1];\n\n            if (ownerAddress.startsWith('0x')) {\n              ownerAddress = crypto_1.toBech32Address(ownerAddress);\n            }\n\n            return [2\n            /*return*/\n            , [ownerAddress, resolverAddress]];\n        }\n      });\n    });\n  };\n\n  Zns.prototype._getResolverRecordsStructure = function (resolverAddress) {\n    return __awaiter(this, void 0, void 0, function () {\n      var resolver, resolverRecords;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (resolverAddress == NullAddress) {\n              return [2\n              /*return*/\n              , {}];\n            }\n\n            resolver = this.zilliqa.contracts.at(crypto_1.toChecksumAddress(resolverAddress));\n            return [4\n            /*yield*/\n            , this.getContractField(resolver, 'records')];\n\n          case 1:\n            resolverRecords = _a.sent();\n            return [2\n            /*return*/\n            , lodash_1.default.transform(resolverRecords, function (result, value, key) {\n              return lodash_1.default.set(result, key, value);\n            }, {})];\n        }\n      });\n    });\n  };\n\n  Zns.prototype.normalizeSource = function (source) {\n    switch (typeof source) {\n      case 'boolean':\n        {\n          return {\n            url: DefaultSource,\n            network: 'mainnet'\n          };\n        }\n\n      case 'string':\n        {\n          return {\n            url: source,\n            network: UrlNetworkMap(source)\n          };\n        }\n\n      case 'object':\n        {\n          source = lodash_1.default.clone(source);\n\n          if (typeof source.network == 'number') {\n            source.network = NetworkIdMap[source.network];\n          }\n\n          if (source.registry) {\n            source.network = source.network ? source.network : 'mainnet';\n            source.url = source.url ? source.url : DefaultSource;\n          }\n\n          if (source.network && !source.url) {\n            source.url = UrlMap[source.network];\n          }\n\n          if (source.url && !source.network) {\n            source.network = UrlNetworkMap(source.url);\n          }\n\n          return source;\n        }\n    }\n  };\n\n  Zns.prototype.getContractField = function (contract, field, keys) {\n    if (keys === void 0) {\n      keys = [];\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , contract.getSubState(field, keys)];\n\n          case 1:\n            result = _a.sent() || {};\n            return [2\n            /*return*/\n            , result[field]];\n        }\n      });\n    });\n  };\n\n  Zns.prototype.getContractMapValue = function (contract, field, key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getContractField(contract, field, [key])];\n\n          case 1:\n            record = _a.sent();\n            return [2\n            /*return*/\n            , record && record[key] || null];\n        }\n      });\n    });\n  };\n\n  return Zns;\n}(NamingService_1.default);\n\nexports.default = Zns;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@zilliqa-js/util'), require('buffer'), require('stream')) : typeof define === 'function' && define.amd ? define(['exports', '@zilliqa-js/util', 'buffer', 'stream'], factory) : factory(global.zjsCrypto = {}, global.zjsUtil, global.buffer, global.stream);\n})(this, function (exports, util, buffer, stream) {\n  'use strict';\n\n  buffer = buffer && buffer.hasOwnProperty('default') ? buffer['default'] : buffer;\n  stream = stream && stream.hasOwnProperty('default') ? stream['default'] : stream;\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n  function createCommonjsModule(fn, module) {\n    return module = {\n      exports: {}\n    }, fn(module, module.exports), module.exports;\n  }\n\n  function getCjsExportFromNamespace(n) {\n    return n && n['default'] || n;\n  }\n\n  var name = \"elliptic\";\n  var version = \"6.5.1\";\n  var description = \"EC cryptography\";\n  var main = \"lib/elliptic.js\";\n  var files = [\"lib\"];\n  var scripts = {\n    jscs: \"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js\",\n    jshint: \"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js\",\n    lint: \"npm run jscs && npm run jshint\",\n    unit: \"istanbul test _mocha --reporter=spec test/index.js\",\n    test: \"npm run lint && npm run unit\",\n    version: \"grunt dist && git add dist/\"\n  };\n  var repository = {\n    type: \"git\",\n    url: \"git@github.com:indutny/elliptic\"\n  };\n  var keywords = [\"EC\", \"Elliptic\", \"curve\", \"Cryptography\"];\n  var author = \"Fedor Indutny <fedor@indutny.com>\";\n  var license = \"MIT\";\n  var bugs = {\n    url: \"https://github.com/indutny/elliptic/issues\"\n  };\n  var homepage = \"https://github.com/indutny/elliptic\";\n  var devDependencies = {\n    brfs: \"^1.4.3\",\n    coveralls: \"^3.0.4\",\n    grunt: \"^1.0.4\",\n    \"grunt-browserify\": \"^5.0.0\",\n    \"grunt-cli\": \"^1.2.0\",\n    \"grunt-contrib-connect\": \"^1.0.0\",\n    \"grunt-contrib-copy\": \"^1.0.0\",\n    \"grunt-contrib-uglify\": \"^1.0.1\",\n    \"grunt-mocha-istanbul\": \"^3.0.1\",\n    \"grunt-saucelabs\": \"^9.0.1\",\n    istanbul: \"^0.4.2\",\n    jscs: \"^3.0.7\",\n    jshint: \"^2.6.0\",\n    mocha: \"^6.1.4\"\n  };\n  var dependencies = {\n    \"bn.js\": \"^4.4.0\",\n    brorand: \"^1.0.1\",\n    \"hash.js\": \"^1.0.0\",\n    \"hmac-drbg\": \"^1.0.0\",\n    inherits: \"^2.0.1\",\n    \"minimalistic-assert\": \"^1.0.0\",\n    \"minimalistic-crypto-utils\": \"^1.0.0\"\n  };\n  var _package = {\n    name: name,\n    version: version,\n    description: description,\n    main: main,\n    files: files,\n    scripts: scripts,\n    repository: repository,\n    keywords: keywords,\n    author: author,\n    license: license,\n    bugs: bugs,\n    homepage: homepage,\n    devDependencies: devDependencies,\n    dependencies: dependencies\n  };\n\n  var _package$1 =\n  /*#__PURE__*/\n  Object.freeze({\n    name: name,\n    version: version,\n    description: description,\n    main: main,\n    files: files,\n    scripts: scripts,\n    repository: repository,\n    keywords: keywords,\n    author: author,\n    license: license,\n    bugs: bugs,\n    homepage: homepage,\n    devDependencies: devDependencies,\n    dependencies: dependencies,\n    default: _package\n  });\n\n  var empty = {};\n  var empty$1 =\n  /*#__PURE__*/\n  Object.freeze({\n    default: empty\n  });\n  var require$$0 = getCjsExportFromNamespace(empty$1);\n  var bn = createCommonjsModule(function (module) {\n    (function (module, exports) {\n      // Utils\n      function assert(val, msg) {\n        if (!val) throw new Error(msg || 'Assertion failed');\n      } // Could use `inherits` module, but don't want to move from single file\n      // architecture yet.\n\n\n      function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n\n        var TempCtor = function () {};\n\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n      } // BN\n\n\n      function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n          return number;\n        }\n\n        this.negative = 0;\n        this.words = null;\n        this.length = 0; // Reduction context\n\n        this.red = null;\n\n        if (number !== null) {\n          if (base === 'le' || base === 'be') {\n            endian = base;\n            base = 10;\n          }\n\n          this._init(number || 0, base || 10, endian || 'be');\n        }\n      }\n\n      if (typeof module === 'object') {\n        module.exports = BN;\n      } else {\n        exports.BN = BN;\n      }\n\n      BN.BN = BN;\n      BN.wordSize = 26;\n      var Buffer;\n\n      try {\n        Buffer = require$$0.Buffer;\n      } catch (e) {}\n\n      BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n          return true;\n        }\n\n        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n      };\n\n      BN.max = function max(left, right) {\n        if (left.cmp(right) > 0) return left;\n        return right;\n      };\n\n      BN.min = function min(left, right) {\n        if (left.cmp(right) < 0) return left;\n        return right;\n      };\n\n      BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === 'number') {\n          return this._initNumber(number, base, endian);\n        }\n\n        if (typeof number === 'object') {\n          return this._initArray(number, base, endian);\n        }\n\n        if (base === 'hex') {\n          base = 16;\n        }\n\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, '');\n        var start = 0;\n\n        if (number[0] === '-') {\n          start++;\n        }\n\n        if (base === 16) {\n          this._parseHex(number, start);\n        } else {\n          this._parseBase(number, base, start);\n        }\n\n        if (number[0] === '-') {\n          this.negative = 1;\n        }\n\n        this.strip();\n        if (endian !== 'le') return;\n\n        this._initArray(this.toArray(), base, endian);\n      };\n\n      BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n          this.negative = 1;\n          number = -number;\n        }\n\n        if (number < 0x4000000) {\n          this.words = [number & 0x3ffffff];\n          this.length = 1;\n        } else if (number < 0x10000000000000) {\n          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];\n          this.length = 2;\n        } else {\n          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n\n          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];\n          this.length = 3;\n        }\n\n        if (endian !== 'le') return; // Reverse the bytes\n\n        this._initArray(this.toArray(), base, endian);\n      };\n\n      BN.prototype._initArray = function _initArray(number, base, endian) {\n        // Perhaps a Uint8Array\n        assert(typeof number.length === 'number');\n\n        if (number.length <= 0) {\n          this.words = [0];\n          this.length = 1;\n          return this;\n        }\n\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n\n        var j, w;\n        var off = 0;\n\n        if (endian === 'be') {\n          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n            this.words[j] |= w << off & 0x3ffffff;\n            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n            off += 24;\n\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        } else if (endian === 'le') {\n          for (i = 0, j = 0; i < number.length; i += 3) {\n            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n            this.words[j] |= w << off & 0x3ffffff;\n            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n            off += 24;\n\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        }\n\n        return this.strip();\n      };\n\n      function parseHex(str, start, end) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r <<= 4; // 'a' - 'f'\n\n          if (c >= 49 && c <= 54) {\n            r |= c - 49 + 0xa; // 'A' - 'F'\n          } else if (c >= 17 && c <= 22) {\n            r |= c - 17 + 0xa; // '0' - '9'\n          } else {\n            r |= c & 0xf;\n          }\n        }\n\n        return r;\n      }\n\n      BN.prototype._parseHex = function _parseHex(number, start) {\n        // Create possibly bigger array to ensure that it fits the number\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n\n        var j, w; // Scan 24-bit chunks and add them to the number\n\n        var off = 0;\n\n        for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n          w = parseHex(number, i, i + 6);\n          this.words[j] |= w << off & 0x3ffffff; // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n\n          this.words[j + 1] |= w >>> 26 - off & 0x3fffff;\n          off += 24;\n\n          if (off >= 26) {\n            off -= 26;\n            j++;\n          }\n        }\n\n        if (i + 6 !== start) {\n          w = parseHex(number, start, i + 6);\n          this.words[j] |= w << off & 0x3ffffff;\n          this.words[j + 1] |= w >>> 26 - off & 0x3fffff;\n        }\n\n        this.strip();\n      };\n\n      function parseBase(str, start, end, mul) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r *= mul; // 'a'\n\n          if (c >= 49) {\n            r += c - 49 + 0xa; // 'A'\n          } else if (c >= 17) {\n            r += c - 17 + 0xa; // '0' - '9'\n          } else {\n            r += c;\n          }\n        }\n\n        return r;\n      }\n\n      BN.prototype._parseBase = function _parseBase(number, base, start) {\n        // Initialize as zero\n        this.words = [0];\n        this.length = 1; // Find length of limb in base\n\n        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n          limbLen++;\n        }\n\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n\n        for (var i = start; i < end; i += limbLen) {\n          word = parseBase(number, i, i + limbLen, base);\n          this.imuln(limbPow);\n\n          if (this.words[0] + word < 0x4000000) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n\n        if (mod !== 0) {\n          var pow = 1;\n          word = parseBase(number, i, number.length, base);\n\n          for (i = 0; i < mod; i++) {\n            pow *= base;\n          }\n\n          this.imuln(pow);\n\n          if (this.words[0] + word < 0x4000000) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n      };\n\n      BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n\n        for (var i = 0; i < this.length; i++) {\n          dest.words[i] = this.words[i];\n        }\n\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n      };\n\n      BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n      };\n\n      BN.prototype._expand = function _expand(size) {\n        while (this.length < size) {\n          this.words[this.length++] = 0;\n        }\n\n        return this;\n      }; // Remove leading `0` from `this`\n\n\n      BN.prototype.strip = function strip() {\n        while (this.length > 1 && this.words[this.length - 1] === 0) {\n          this.length--;\n        }\n\n        return this._normSign();\n      };\n\n      BN.prototype._normSign = function _normSign() {\n        // -0 = 0\n        if (this.length === 1 && this.words[0] === 0) {\n          this.negative = 0;\n        }\n\n        return this;\n      };\n\n      BN.prototype.inspect = function inspect() {\n        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n      };\n      /*\n       var zeros = [];\n      var groupSizes = [];\n      var groupBases = [];\n       var s = '';\n      var i = -1;\n      while (++i < BN.wordSize) {\n        zeros[i] = s;\n        s += '0';\n      }\n      groupSizes[0] = 0;\n      groupSizes[1] = 0;\n      groupBases[0] = 0;\n      groupBases[1] = 0;\n      var base = 2 - 1;\n      while (++base < 36 + 1) {\n        var groupSize = 0;\n        var groupBase = 1;\n        while (groupBase < (1 << BN.wordSize) / base) {\n          groupBase *= base;\n          groupSize += 1;\n        }\n        groupSizes[base] = groupSize;\n        groupBases[base] = groupBase;\n      }\n       */\n\n\n      var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];\n      var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];\n      var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];\n\n      BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n\n        if (base === 16 || base === 'hex') {\n          out = '';\n          var off = 0;\n          var carry = 0;\n\n          for (var i = 0; i < this.length; i++) {\n            var w = this.words[i];\n            var word = ((w << off | carry) & 0xffffff).toString(16);\n            carry = w >>> 24 - off & 0xffffff;\n\n            if (carry !== 0 || i !== this.length - 1) {\n              out = zeros[6 - word.length] + word + out;\n            } else {\n              out = word + out;\n            }\n\n            off += 2;\n\n            if (off >= 26) {\n              off -= 26;\n              i--;\n            }\n          }\n\n          if (carry !== 0) {\n            out = carry.toString(16) + out;\n          }\n\n          while (out.length % padding !== 0) {\n            out = '0' + out;\n          }\n\n          if (this.negative !== 0) {\n            out = '-' + out;\n          }\n\n          return out;\n        }\n\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n          var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);\n\n          var groupBase = groupBases[base];\n          out = '';\n          var c = this.clone();\n          c.negative = 0;\n\n          while (!c.isZero()) {\n            var r = c.modn(groupBase).toString(base);\n            c = c.idivn(groupBase);\n\n            if (!c.isZero()) {\n              out = zeros[groupSize - r.length] + r + out;\n            } else {\n              out = r + out;\n            }\n          }\n\n          if (this.isZero()) {\n            out = '0' + out;\n          }\n\n          while (out.length % padding !== 0) {\n            out = '0' + out;\n          }\n\n          if (this.negative !== 0) {\n            out = '-' + out;\n          }\n\n          return out;\n        }\n\n        assert(false, 'Base should be between 2 and 36');\n      };\n\n      BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n\n        if (this.length === 2) {\n          ret += this.words[1] * 0x4000000;\n        } else if (this.length === 3 && this.words[2] === 0x01) {\n          // NOTE: at this stage it is known that the top bit is set\n          ret += 0x10000000000000 + this.words[1] * 0x4000000;\n        } else if (this.length > 2) {\n          assert(false, 'Number can only safely store up to 53 bits');\n        }\n\n        return this.negative !== 0 ? -ret : ret;\n      };\n\n      BN.prototype.toJSON = function toJSON() {\n        return this.toString(16);\n      };\n\n      BN.prototype.toBuffer = function toBuffer(endian, length) {\n        assert(typeof Buffer !== 'undefined');\n        return this.toArrayLike(Buffer, endian, length);\n      };\n\n      BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n      };\n\n      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, 'byte array longer than desired length');\n        assert(reqLength > 0, 'Requested array length <= 0');\n        this.strip();\n        var littleEndian = endian === 'le';\n        var res = new ArrayType(reqLength);\n        var b, i;\n        var q = this.clone();\n\n        if (!littleEndian) {\n          // Assume big-endian\n          for (i = 0; i < reqLength - byteLength; i++) {\n            res[i] = 0;\n          }\n\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(0xff);\n            q.iushrn(8);\n            res[reqLength - i - 1] = b;\n          }\n        } else {\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(0xff);\n            q.iushrn(8);\n            res[i] = b;\n          }\n\n          for (; i < reqLength; i++) {\n            res[i] = 0;\n          }\n        }\n\n        return res;\n      };\n\n      if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n          return 32 - Math.clz32(w);\n        };\n      } else {\n        BN.prototype._countBits = function _countBits(w) {\n          var t = w;\n          var r = 0;\n\n          if (t >= 0x1000) {\n            r += 13;\n            t >>>= 13;\n          }\n\n          if (t >= 0x40) {\n            r += 7;\n            t >>>= 7;\n          }\n\n          if (t >= 0x8) {\n            r += 4;\n            t >>>= 4;\n          }\n\n          if (t >= 0x02) {\n            r += 2;\n            t >>>= 2;\n          }\n\n          return r + t;\n        };\n      }\n\n      BN.prototype._zeroBits = function _zeroBits(w) {\n        // Short-cut\n        if (w === 0) return 26;\n        var t = w;\n        var r = 0;\n\n        if ((t & 0x1fff) === 0) {\n          r += 13;\n          t >>>= 13;\n        }\n\n        if ((t & 0x7f) === 0) {\n          r += 7;\n          t >>>= 7;\n        }\n\n        if ((t & 0xf) === 0) {\n          r += 4;\n          t >>>= 4;\n        }\n\n        if ((t & 0x3) === 0) {\n          r += 2;\n          t >>>= 2;\n        }\n\n        if ((t & 0x1) === 0) {\n          r++;\n        }\n\n        return r;\n      }; // Return number of used bits in a BN\n\n\n      BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n\n        var hi = this._countBits(w);\n\n        return (this.length - 1) * 26 + hi;\n      };\n\n      function toBitArray(num) {\n        var w = new Array(num.bitLength());\n\n        for (var bit = 0; bit < w.length; bit++) {\n          var off = bit / 26 | 0;\n          var wbit = bit % 26;\n          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n        }\n\n        return w;\n      } // Number of trailing zero bits\n\n\n      BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero()) return 0;\n        var r = 0;\n\n        for (var i = 0; i < this.length; i++) {\n          var b = this._zeroBits(this.words[i]);\n\n          r += b;\n          if (b !== 26) break;\n        }\n\n        return r;\n      };\n\n      BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n      };\n\n      BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n          return this.abs().inotn(width).iaddn(1);\n        }\n\n        return this.clone();\n      };\n\n      BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n          return this.notn(width).iaddn(1).ineg();\n        }\n\n        return this.clone();\n      };\n\n      BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n      }; // Return negative clone of `this`\n\n\n      BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n      };\n\n      BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n          this.negative ^= 1;\n        }\n\n        return this;\n      }; // Or `num` with `this` in-place\n\n\n      BN.prototype.iuor = function iuor(num) {\n        while (this.length < num.length) {\n          this.words[this.length++] = 0;\n        }\n\n        for (var i = 0; i < num.length; i++) {\n          this.words[i] = this.words[i] | num.words[i];\n        }\n\n        return this.strip();\n      };\n\n      BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n      }; // Or `num` with `this`\n\n\n      BN.prototype.or = function or(num) {\n        if (this.length > num.length) return this.clone().ior(num);\n        return num.clone().ior(this);\n      };\n\n      BN.prototype.uor = function uor(num) {\n        if (this.length > num.length) return this.clone().iuor(num);\n        return num.clone().iuor(this);\n      }; // And `num` with `this` in-place\n\n\n      BN.prototype.iuand = function iuand(num) {\n        // b = min-length(num, this)\n        var b;\n\n        if (this.length > num.length) {\n          b = num;\n        } else {\n          b = this;\n        }\n\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = this.words[i] & num.words[i];\n        }\n\n        this.length = b.length;\n        return this.strip();\n      };\n\n      BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n      }; // And `num` with `this`\n\n\n      BN.prototype.and = function and(num) {\n        if (this.length > num.length) return this.clone().iand(num);\n        return num.clone().iand(this);\n      };\n\n      BN.prototype.uand = function uand(num) {\n        if (this.length > num.length) return this.clone().iuand(num);\n        return num.clone().iuand(this);\n      }; // Xor `num` with `this` in-place\n\n\n      BN.prototype.iuxor = function iuxor(num) {\n        // a.length > b.length\n        var a;\n        var b;\n\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = a.words[i] ^ b.words[i];\n        }\n\n        if (this !== a) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n\n        this.length = a.length;\n        return this.strip();\n      };\n\n      BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n      }; // Xor `num` with `this`\n\n\n      BN.prototype.xor = function xor(num) {\n        if (this.length > num.length) return this.clone().ixor(num);\n        return num.clone().ixor(this);\n      };\n\n      BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length) return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n      }; // Not ``this`` with ``width`` bitwidth\n\n\n      BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === 'number' && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26; // Extend the buffer with leading zeroes\n\n        this._expand(bytesNeeded);\n\n        if (bitsLeft > 0) {\n          bytesNeeded--;\n        } // Handle complete words\n\n\n        for (var i = 0; i < bytesNeeded; i++) {\n          this.words[i] = ~this.words[i] & 0x3ffffff;\n        } // Handle the residue\n\n\n        if (bitsLeft > 0) {\n          this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;\n        } // And remove leading zeroes\n\n\n        return this.strip();\n      };\n\n      BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n      }; // Set `bit` of `this`\n\n\n      BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === 'number' && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n\n        this._expand(off + 1);\n\n        if (val) {\n          this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n          this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n\n        return this.strip();\n      }; // Add `num` to `this` in-place\n\n\n      BN.prototype.iadd = function iadd(num) {\n        var r; // negative + positive\n\n        if (this.negative !== 0 && num.negative === 0) {\n          this.negative = 0;\n          r = this.isub(num);\n          this.negative ^= 1;\n          return this._normSign(); // positive + negative\n        } else if (this.negative === 0 && num.negative !== 0) {\n          num.negative = 0;\n          r = this.isub(num);\n          num.negative = 1;\n          return r._normSign();\n        } // a.length > b.length\n\n\n        var a, b;\n\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n\n        var carry = 0;\n\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n          this.words[i] = r & 0x3ffffff;\n          carry = r >>> 26;\n        }\n\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          this.words[i] = r & 0x3ffffff;\n          carry = r >>> 26;\n        }\n\n        this.length = a.length;\n\n        if (carry !== 0) {\n          this.words[this.length] = carry;\n          this.length++; // Copy the rest of the words\n        } else if (a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n\n        return this;\n      }; // Add `num` to `this`\n\n\n      BN.prototype.add = function add(num) {\n        var res;\n\n        if (num.negative !== 0 && this.negative === 0) {\n          num.negative = 0;\n          res = this.sub(num);\n          num.negative ^= 1;\n          return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n          this.negative = 0;\n          res = num.sub(this);\n          this.negative = 1;\n          return res;\n        }\n\n        if (this.length > num.length) return this.clone().iadd(num);\n        return num.clone().iadd(this);\n      }; // Subtract `num` from `this` in-place\n\n\n      BN.prototype.isub = function isub(num) {\n        // this - (-num) = this + num\n        if (num.negative !== 0) {\n          num.negative = 0;\n          var r = this.iadd(num);\n          num.negative = 1;\n          return r._normSign(); // -this - num = -(this + num)\n        } else if (this.negative !== 0) {\n          this.negative = 0;\n          this.iadd(num);\n          this.negative = 1;\n          return this._normSign();\n        } // At this point both numbers are positive\n\n\n        var cmp = this.cmp(num); // Optimization - zeroify\n\n        if (cmp === 0) {\n          this.negative = 0;\n          this.length = 1;\n          this.words[0] = 0;\n          return this;\n        } // a > b\n\n\n        var a, b;\n\n        if (cmp > 0) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n\n        var carry = 0;\n\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 0x3ffffff;\n        }\n\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 0x3ffffff;\n        } // Copy rest of the words\n\n\n        if (carry === 0 && i < a.length && a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n\n        this.length = Math.max(this.length, i);\n\n        if (a !== this) {\n          this.negative = 1;\n        }\n\n        return this.strip();\n      }; // Subtract `num` from `this`\n\n\n      BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n      };\n\n      function smallMulTo(self, num, out) {\n        out.negative = num.negative ^ self.negative;\n        var len = self.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)\n\n        var a = self.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 0x3ffffff;\n        var carry = r / 0x4000000 | 0;\n        out.words[0] = lo;\n\n        for (var k = 1; k < len; k++) {\n          // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n          // note that ncarry could be >= 0x3ffffff\n          var ncarry = carry >>> 26;\n          var rword = carry & 0x3ffffff;\n          var maxJ = Math.min(k, num.length - 1);\n\n          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n            var i = k - j | 0;\n            a = self.words[i] | 0;\n            b = num.words[j] | 0;\n            r = a * b + rword;\n            ncarry += r / 0x4000000 | 0;\n            rword = r & 0x3ffffff;\n          }\n\n          out.words[k] = rword | 0;\n          carry = ncarry | 0;\n        }\n\n        if (carry !== 0) {\n          out.words[k] = carry | 0;\n        } else {\n          out.length--;\n        }\n\n        return out.strip();\n      } // TODO(indutny): it may be reasonable to omit it for users who don't need\n      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n      // multiplication (like elliptic secp256k1).\n\n\n      var comb10MulTo = function comb10MulTo(self, num, out) {\n        var a = self.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 0x1fff;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 0x1fff;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 0x1fff;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 0x1fff;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 0x1fff;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 0x1fff;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 0x1fff;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 0x1fff;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 0x1fff;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 0x1fff;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 0x1fff;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 0x1fff;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 0x1fff;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 0x1fff;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 0x1fff;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 0x1fff;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 0x1fff;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 0x1fff;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 0x1fff;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 0x1fff;\n        var bh9 = b9 >>> 13;\n        out.negative = self.negative ^ num.negative;\n        out.length = 19;\n        /* k = 0 */\n\n        lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 0x3ffffff;\n        /* k = 1 */\n\n        lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 0x3ffffff;\n        /* k = 2 */\n\n        lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 0x3ffffff;\n        /* k = 3 */\n\n        lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 0x3ffffff;\n        /* k = 4 */\n\n        lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 0x3ffffff;\n        /* k = 5 */\n\n        lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 0x3ffffff;\n        /* k = 6 */\n\n        lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 0x3ffffff;\n        /* k = 7 */\n\n        lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 0x3ffffff;\n        /* k = 8 */\n\n        lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 0x3ffffff;\n        /* k = 9 */\n\n        lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 0x3ffffff;\n        /* k = 10 */\n\n        lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 0x3ffffff;\n        /* k = 11 */\n\n        lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 0x3ffffff;\n        /* k = 12 */\n\n        lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 0x3ffffff;\n        /* k = 13 */\n\n        lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 0x3ffffff;\n        /* k = 14 */\n\n        lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 0x3ffffff;\n        /* k = 15 */\n\n        lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 0x3ffffff;\n        /* k = 16 */\n\n        lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 0x3ffffff;\n        /* k = 17 */\n\n        lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 0x3ffffff;\n        /* k = 18 */\n\n        lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 0x3ffffff;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n\n        if (c !== 0) {\n          o[19] = c;\n          out.length++;\n        }\n\n        return out;\n      }; // Polyfill comb\n\n\n      if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n      }\n\n      function bigMulTo(self, num, out) {\n        out.negative = num.negative ^ self.negative;\n        out.length = self.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n\n        for (var k = 0; k < out.length - 1; k++) {\n          // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n          // note that ncarry could be >= 0x3ffffff\n          var ncarry = hncarry;\n          hncarry = 0;\n          var rword = carry & 0x3ffffff;\n          var maxJ = Math.min(k, num.length - 1);\n\n          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n            var i = k - j;\n            var a = self.words[i] | 0;\n            var b = num.words[j] | 0;\n            var r = a * b;\n            var lo = r & 0x3ffffff;\n            ncarry = ncarry + (r / 0x4000000 | 0) | 0;\n            lo = lo + rword | 0;\n            rword = lo & 0x3ffffff;\n            ncarry = ncarry + (lo >>> 26) | 0;\n            hncarry += ncarry >>> 26;\n            ncarry &= 0x3ffffff;\n          }\n\n          out.words[k] = rword;\n          carry = ncarry;\n          ncarry = hncarry;\n        }\n\n        if (carry !== 0) {\n          out.words[k] = carry;\n        } else {\n          out.length--;\n        }\n\n        return out.strip();\n      }\n\n      function jumboMulTo(self, num, out) {\n        var fftm = new FFTM();\n        return fftm.mulp(self, num, out);\n      }\n\n      BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n\n        if (this.length === 10 && num.length === 10) {\n          res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n          res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n          res = bigMulTo(this, num, out);\n        } else {\n          res = jumboMulTo(this, num, out);\n        }\n\n        return res;\n      }; // Cooley-Tukey algorithm for FFT\n      // slightly revisited to rely on looping instead of recursion\n\n\n      function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n\n      FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n\n        for (var i = 0; i < N; i++) {\n          t[i] = this.revBin(i, l, N);\n        }\n\n        return t;\n      }; // Returns binary-reversed representation of `x`\n\n\n      FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1) return x;\n        var rb = 0;\n\n        for (var i = 0; i < l; i++) {\n          rb |= (x & 1) << l - i - 1;\n          x >>= 1;\n        }\n\n        return rb;\n      }; // Performs \"tweedling\" phase, therefore 'emulating'\n      // behaviour of the recursive algorithm\n\n\n      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for (var i = 0; i < N; i++) {\n          rtws[i] = rws[rbt[i]];\n          itws[i] = iws[rbt[i]];\n        }\n      };\n\n      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n\n        for (var s = 1; s < N; s <<= 1) {\n          var l = s << 1;\n          var rtwdf = Math.cos(2 * Math.PI / l);\n          var itwdf = Math.sin(2 * Math.PI / l);\n\n          for (var p = 0; p < N; p += l) {\n            var rtwdf_ = rtwdf;\n            var itwdf_ = itwdf;\n\n            for (var j = 0; j < s; j++) {\n              var re = rtws[p + j];\n              var ie = itws[p + j];\n              var ro = rtws[p + j + s];\n              var io = itws[p + j + s];\n              var rx = rtwdf_ * ro - itwdf_ * io;\n              io = rtwdf_ * io + itwdf_ * ro;\n              ro = rx;\n              rtws[p + j] = re + ro;\n              itws[p + j] = ie + io;\n              rtws[p + j + s] = re - ro;\n              itws[p + j + s] = ie - io;\n              /* jshint maxdepth : false */\n\n              if (j !== l) {\n                rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                rtwdf_ = rx;\n              }\n            }\n          }\n        }\n      };\n\n      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n\n        for (N = N / 2 | 0; N; N = N >>> 1) {\n          i++;\n        }\n\n        return 1 << i + 1 + odd;\n      };\n\n      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1) return;\n\n        for (var i = 0; i < N / 2; i++) {\n          var t = rws[i];\n          rws[i] = rws[N - i - 1];\n          rws[N - i - 1] = t;\n          t = iws[i];\n          iws[i] = -iws[N - i - 1];\n          iws[N - i - 1] = -t;\n        }\n      };\n\n      FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n\n        for (var i = 0; i < N / 2; i++) {\n          var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;\n          ws[i] = w & 0x3ffffff;\n\n          if (w < 0x4000000) {\n            carry = 0;\n          } else {\n            carry = w / 0x4000000 | 0;\n          }\n        }\n\n        return ws;\n      };\n\n      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n\n        for (var i = 0; i < len; i++) {\n          carry = carry + (ws[i] | 0);\n          rws[2 * i] = carry & 0x1fff;\n          carry = carry >>> 13;\n          rws[2 * i + 1] = carry & 0x1fff;\n          carry = carry >>> 13;\n        } // Pad with zeroes\n\n\n        for (i = 2 * len; i < N; ++i) {\n          rws[i] = 0;\n        }\n\n        assert(carry === 0);\n        assert((carry & ~0x1fff) === 0);\n      };\n\n      FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n\n        for (var i = 0; i < N; i++) {\n          ph[i] = 0;\n        }\n\n        return ph;\n      };\n\n      FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n\n        var _ = this.stub(N);\n\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n        for (var i = 0; i < N; i++) {\n          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n          rwst[i] = rx;\n        }\n\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out.strip();\n      }; // Multiply `this` by `num`\n\n\n      BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n      }; // Multiply employing FFT\n\n\n      BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n      }; // In-place Multiplication\n\n\n      BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n      };\n\n      BN.prototype.imuln = function imuln(num) {\n        assert(typeof num === 'number');\n        assert(num < 0x4000000); // Carry\n\n        var carry = 0;\n\n        for (var i = 0; i < this.length; i++) {\n          var w = (this.words[i] | 0) * num;\n          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n          carry >>= 26;\n          carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum\n\n          carry += lo >>> 26;\n          this.words[i] = lo & 0x3ffffff;\n        }\n\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n\n        return this;\n      };\n\n      BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n      }; // `this` * `this`\n\n\n      BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n      }; // `this` * `this` in-place\n\n\n      BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n      }; // Math.pow(`this`, `num`)\n\n\n      BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0) return new BN(1); // Skip leading zeroes\n\n        var res = this;\n\n        for (var i = 0; i < w.length; i++, res = res.sqr()) {\n          if (w[i] !== 0) break;\n        }\n\n        if (++i < w.length) {\n          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n            if (w[i] === 0) continue;\n            res = res.mul(q);\n          }\n        }\n\n        return res;\n      }; // Shift-left in-place\n\n\n      BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === 'number' && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;\n        var i;\n\n        if (r !== 0) {\n          var carry = 0;\n\n          for (i = 0; i < this.length; i++) {\n            var newCarry = this.words[i] & carryMask;\n            var c = (this.words[i] | 0) - newCarry << r;\n            this.words[i] = c | carry;\n            carry = newCarry >>> 26 - r;\n          }\n\n          if (carry) {\n            this.words[i] = carry;\n            this.length++;\n          }\n        }\n\n        if (s !== 0) {\n          for (i = this.length - 1; i >= 0; i--) {\n            this.words[i + s] = this.words[i];\n          }\n\n          for (i = 0; i < s; i++) {\n            this.words[i] = 0;\n          }\n\n          this.length += s;\n        }\n\n        return this.strip();\n      };\n\n      BN.prototype.ishln = function ishln(bits) {\n        // TODO(indutny): implement me\n        assert(this.negative === 0);\n        return this.iushln(bits);\n      }; // Shift-right in-place\n      // NOTE: `hint` is a lowest bit before trailing zeroes\n      // NOTE: if `extended` is present - it will be filled with destroyed bits\n\n\n      BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === 'number' && bits >= 0);\n        var h;\n\n        if (hint) {\n          h = (hint - hint % 26) / 26;\n        } else {\n          h = 0;\n        }\n\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h); // Extended mode, copy masked part\n\n        if (maskedWords) {\n          for (var i = 0; i < s; i++) {\n            maskedWords.words[i] = this.words[i];\n          }\n\n          maskedWords.length = s;\n        }\n\n        if (s === 0) ;else if (this.length > s) {\n          this.length -= s;\n\n          for (i = 0; i < this.length; i++) {\n            this.words[i] = this.words[i + s];\n          }\n        } else {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        var carry = 0;\n\n        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n          var word = this.words[i] | 0;\n          this.words[i] = carry << 26 - r | word >>> r;\n          carry = word & mask;\n        } // Push carried bits as a mask\n\n\n        if (maskedWords && carry !== 0) {\n          maskedWords.words[maskedWords.length++] = carry;\n        }\n\n        if (this.length === 0) {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n\n        return this.strip();\n      };\n\n      BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        // TODO(indutny): implement me\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n      }; // Shift-left\n\n\n      BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n      };\n\n      BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n      }; // Shift-right\n\n\n      BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n      };\n\n      BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n      }; // Test if n bit is set\n\n\n      BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === 'number' && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r; // Fast case: bit is much higher than all existing words\n\n        if (this.length <= s) return false; // Check bit and return\n\n        var w = this.words[s];\n        return !!(w & q);\n      }; // Return only lowers bits of number (in-place)\n\n\n      BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === 'number' && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n        if (this.length <= s) {\n          return this;\n        }\n\n        if (r !== 0) {\n          s++;\n        }\n\n        this.length = Math.min(s, this.length);\n\n        if (r !== 0) {\n          var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n          this.words[this.length - 1] &= mask;\n        }\n\n        return this.strip();\n      }; // Return only lowers bits of number\n\n\n      BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n      }; // Add plain number `num` to `this`\n\n\n      BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === 'number');\n        assert(num < 0x4000000);\n        if (num < 0) return this.isubn(-num); // Possible sign change\n\n        if (this.negative !== 0) {\n          if (this.length === 1 && (this.words[0] | 0) < num) {\n            this.words[0] = num - (this.words[0] | 0);\n            this.negative = 0;\n            return this;\n          }\n\n          this.negative = 0;\n          this.isubn(num);\n          this.negative = 1;\n          return this;\n        } // Add without checks\n\n\n        return this._iaddn(num);\n      };\n\n      BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num; // Carry\n\n        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n          this.words[i] -= 0x4000000;\n\n          if (i === this.length - 1) {\n            this.words[i + 1] = 1;\n          } else {\n            this.words[i + 1]++;\n          }\n        }\n\n        this.length = Math.max(this.length, i + 1);\n        return this;\n      }; // Subtract plain number `num` from `this`\n\n\n      BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === 'number');\n        assert(num < 0x4000000);\n        if (num < 0) return this.iaddn(-num);\n\n        if (this.negative !== 0) {\n          this.negative = 0;\n          this.iaddn(num);\n          this.negative = 1;\n          return this;\n        }\n\n        this.words[0] -= num;\n\n        if (this.length === 1 && this.words[0] < 0) {\n          this.words[0] = -this.words[0];\n          this.negative = 1;\n        } else {\n          // Carry\n          for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n            this.words[i] += 0x4000000;\n            this.words[i + 1] -= 1;\n          }\n        }\n\n        return this.strip();\n      };\n\n      BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n      };\n\n      BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n      };\n\n      BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n      };\n\n      BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n      };\n\n      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n\n        this._expand(len);\n\n        var w;\n        var carry = 0;\n\n        for (i = 0; i < num.length; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          var right = (num.words[i] | 0) * mul;\n          w -= right & 0x3ffffff;\n          carry = (w >> 26) - (right / 0x4000000 | 0);\n          this.words[i + shift] = w & 0x3ffffff;\n        }\n\n        for (; i < this.length - shift; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          carry = w >> 26;\n          this.words[i + shift] = w & 0x3ffffff;\n        }\n\n        if (carry === 0) return this.strip(); // Subtraction overflow\n\n        assert(carry === -1);\n        carry = 0;\n\n        for (i = 0; i < this.length; i++) {\n          w = -(this.words[i] | 0) + carry;\n          carry = w >> 26;\n          this.words[i] = w & 0x3ffffff;\n        }\n\n        this.negative = 1;\n        return this.strip();\n      };\n\n      BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num; // Normalize\n\n        var bhi = b.words[b.length - 1] | 0;\n\n        var bhiBits = this._countBits(bhi);\n\n        shift = 26 - bhiBits;\n\n        if (shift !== 0) {\n          b = b.ushln(shift);\n          a.iushln(shift);\n          bhi = b.words[b.length - 1] | 0;\n        } // Initialize quotient\n\n\n        var m = a.length - b.length;\n        var q;\n\n        if (mode !== 'mod') {\n          q = new BN(null);\n          q.length = m + 1;\n          q.words = new Array(q.length);\n\n          for (var i = 0; i < q.length; i++) {\n            q.words[i] = 0;\n          }\n        }\n\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n\n        if (diff.negative === 0) {\n          a = diff;\n\n          if (q) {\n            q.words[m] = 1;\n          }\n        }\n\n        for (var j = m - 1; j >= 0; j--) {\n          var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n          // (0x7ffffff)\n\n          qj = Math.min(qj / bhi | 0, 0x3ffffff);\n\n          a._ishlnsubmul(b, qj, j);\n\n          while (a.negative !== 0) {\n            qj--;\n            a.negative = 0;\n\n            a._ishlnsubmul(b, 1, j);\n\n            if (!a.isZero()) {\n              a.negative ^= 1;\n            }\n          }\n\n          if (q) {\n            q.words[j] = qj;\n          }\n        }\n\n        if (q) {\n          q.strip();\n        }\n\n        a.strip(); // Denormalize\n\n        if (mode !== 'div' && shift !== 0) {\n          a.iushrn(shift);\n        }\n\n        return {\n          div: q || null,\n          mod: a\n        };\n      }; // NOTE: 1) `mode` can be set to `mod` to request mod only,\n      //       to `div` to request div only, or be absent to\n      //       request both div & mod\n      //       2) `positive` is true if unsigned mod is requested\n\n\n      BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n\n        if (this.isZero()) {\n          return {\n            div: new BN(0),\n            mod: new BN(0)\n          };\n        }\n\n        var div, mod, res;\n\n        if (this.negative !== 0 && num.negative === 0) {\n          res = this.neg().divmod(num, mode);\n\n          if (mode !== 'mod') {\n            div = res.div.neg();\n          }\n\n          if (mode !== 'div') {\n            mod = res.mod.neg();\n\n            if (positive && mod.negative !== 0) {\n              mod.iadd(num);\n            }\n          }\n\n          return {\n            div: div,\n            mod: mod\n          };\n        }\n\n        if (this.negative === 0 && num.negative !== 0) {\n          res = this.divmod(num.neg(), mode);\n\n          if (mode !== 'mod') {\n            div = res.div.neg();\n          }\n\n          return {\n            div: div,\n            mod: res.mod\n          };\n        }\n\n        if ((this.negative & num.negative) !== 0) {\n          res = this.neg().divmod(num.neg(), mode);\n\n          if (mode !== 'div') {\n            mod = res.mod.neg();\n\n            if (positive && mod.negative !== 0) {\n              mod.isub(num);\n            }\n          }\n\n          return {\n            div: res.div,\n            mod: mod\n          };\n        } // Both numbers are positive at this point\n        // Strip both numbers to approximate shift value\n\n\n        if (num.length > this.length || this.cmp(num) < 0) {\n          return {\n            div: new BN(0),\n            mod: this\n          };\n        } // Very short reduction\n\n\n        if (num.length === 1) {\n          if (mode === 'div') {\n            return {\n              div: this.divn(num.words[0]),\n              mod: null\n            };\n          }\n\n          if (mode === 'mod') {\n            return {\n              div: null,\n              mod: new BN(this.modn(num.words[0]))\n            };\n          }\n\n          return {\n            div: this.divn(num.words[0]),\n            mod: new BN(this.modn(num.words[0]))\n          };\n        }\n\n        return this._wordDiv(num, mode);\n      }; // Find `this` / `num`\n\n\n      BN.prototype.div = function div(num) {\n        return this.divmod(num, 'div', false).div;\n      }; // Find `this` % `num`\n\n\n      BN.prototype.mod = function mod(num) {\n        return this.divmod(num, 'mod', false).mod;\n      };\n\n      BN.prototype.umod = function umod(num) {\n        return this.divmod(num, 'mod', true).mod;\n      }; // Find Round(`this` / `num`)\n\n\n      BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num); // Fast case - exact division\n\n        if (dm.mod.isZero()) return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half); // Round down\n\n        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up\n\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n      };\n\n      BN.prototype.modn = function modn(num) {\n        assert(num <= 0x3ffffff);\n        var p = (1 << 26) % num;\n        var acc = 0;\n\n        for (var i = this.length - 1; i >= 0; i--) {\n          acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n\n        return acc;\n      }; // In-place division by number\n\n\n      BN.prototype.idivn = function idivn(num) {\n        assert(num <= 0x3ffffff);\n        var carry = 0;\n\n        for (var i = this.length - 1; i >= 0; i--) {\n          var w = (this.words[i] | 0) + carry * 0x4000000;\n          this.words[i] = w / num | 0;\n          carry = w % num;\n        }\n\n        return this.strip();\n      };\n\n      BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n      };\n\n      BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n\n        if (x.negative !== 0) {\n          x = x.umod(p);\n        } else {\n          x = x.clone();\n        } // A * x + B * y = x\n\n\n        var A = new BN(1);\n        var B = new BN(0); // C * x + D * y = y\n\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n\n        while (x.isEven() && y.isEven()) {\n          x.iushrn(1);\n          y.iushrn(1);\n          ++g;\n        }\n\n        var yp = y.clone();\n        var xp = x.clone();\n\n        while (!x.isZero()) {\n          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n\n          if (i > 0) {\n            x.iushrn(i);\n\n            while (i-- > 0) {\n              if (A.isOdd() || B.isOdd()) {\n                A.iadd(yp);\n                B.isub(xp);\n              }\n\n              A.iushrn(1);\n              B.iushrn(1);\n            }\n          }\n\n          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n\n          if (j > 0) {\n            y.iushrn(j);\n\n            while (j-- > 0) {\n              if (C.isOdd() || D.isOdd()) {\n                C.iadd(yp);\n                D.isub(xp);\n              }\n\n              C.iushrn(1);\n              D.iushrn(1);\n            }\n          }\n\n          if (x.cmp(y) >= 0) {\n            x.isub(y);\n            A.isub(C);\n            B.isub(D);\n          } else {\n            y.isub(x);\n            C.isub(A);\n            D.isub(B);\n          }\n        }\n\n        return {\n          a: C,\n          b: D,\n          gcd: y.iushln(g)\n        };\n      }; // This is reduced incarnation of the binary EEA\n      // above, designated to invert members of the\n      // _prime_ fields F(p) at a maximal speed\n\n\n      BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n\n        if (a.negative !== 0) {\n          a = a.umod(p);\n        } else {\n          a = a.clone();\n        }\n\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n\n        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n\n          if (i > 0) {\n            a.iushrn(i);\n\n            while (i-- > 0) {\n              if (x1.isOdd()) {\n                x1.iadd(delta);\n              }\n\n              x1.iushrn(1);\n            }\n          }\n\n          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n\n          if (j > 0) {\n            b.iushrn(j);\n\n            while (j-- > 0) {\n              if (x2.isOdd()) {\n                x2.iadd(delta);\n              }\n\n              x2.iushrn(1);\n            }\n          }\n\n          if (a.cmp(b) >= 0) {\n            a.isub(b);\n            x1.isub(x2);\n          } else {\n            b.isub(a);\n            x2.isub(x1);\n          }\n        }\n\n        var res;\n\n        if (a.cmpn(1) === 0) {\n          res = x1;\n        } else {\n          res = x2;\n        }\n\n        if (res.cmpn(0) < 0) {\n          res.iadd(p);\n        }\n\n        return res;\n      };\n\n      BN.prototype.gcd = function gcd(num) {\n        if (this.isZero()) return num.abs();\n        if (num.isZero()) return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0; // Remove common factor of two\n\n        for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n          a.iushrn(1);\n          b.iushrn(1);\n        }\n\n        do {\n          while (a.isEven()) {\n            a.iushrn(1);\n          }\n\n          while (b.isEven()) {\n            b.iushrn(1);\n          }\n\n          var r = a.cmp(b);\n\n          if (r < 0) {\n            // Swap `a` and `b` to make `a` always bigger than `b`\n            var t = a;\n            a = b;\n            b = t;\n          } else if (r === 0 || b.cmpn(1) === 0) {\n            break;\n          }\n\n          a.isub(b);\n        } while (true);\n\n        return b.iushln(shift);\n      }; // Invert number in the field F(num)\n\n\n      BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n      };\n\n      BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n      };\n\n      BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n      }; // And first word and num\n\n\n      BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n      }; // Increment at the bit position in-line\n\n\n      BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === 'number');\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r; // Fast case: bit is much higher than all existing words\n\n        if (this.length <= s) {\n          this._expand(s + 1);\n\n          this.words[s] |= q;\n          return this;\n        } // Add bit and propagate, if needed\n\n\n        var carry = q;\n\n        for (var i = s; carry !== 0 && i < this.length; i++) {\n          var w = this.words[i] | 0;\n          w += carry;\n          carry = w >>> 26;\n          w &= 0x3ffffff;\n          this.words[i] = w;\n        }\n\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n\n        return this;\n      };\n\n      BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n      };\n\n      BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative) return -1;\n        if (this.negative === 0 && negative) return 1;\n        this.strip();\n        var res;\n\n        if (this.length > 1) {\n          res = 1;\n        } else {\n          if (negative) {\n            num = -num;\n          }\n\n          assert(num <= 0x3ffffff, 'Number is too big');\n          var w = this.words[0] | 0;\n          res = w === num ? 0 : w < num ? -1 : 1;\n        }\n\n        if (this.negative !== 0) return -res | 0;\n        return res;\n      }; // Compare two numbers and return:\n      // 1 - if `this` > `num`\n      // 0 - if `this` == `num`\n      // -1 - if `this` < `num`\n\n\n      BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0) return -1;\n        if (this.negative === 0 && num.negative !== 0) return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0) return -res | 0;\n        return res;\n      }; // Unsigned comparison\n\n\n      BN.prototype.ucmp = function ucmp(num) {\n        // At this point both numbers have the same sign\n        if (this.length > num.length) return 1;\n        if (this.length < num.length) return -1;\n        var res = 0;\n\n        for (var i = this.length - 1; i >= 0; i--) {\n          var a = this.words[i] | 0;\n          var b = num.words[i] | 0;\n          if (a === b) continue;\n\n          if (a < b) {\n            res = -1;\n          } else if (a > b) {\n            res = 1;\n          }\n\n          break;\n        }\n\n        return res;\n      };\n\n      BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n      };\n\n      BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n      };\n\n      BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n      };\n\n      BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n      };\n\n      BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n      };\n\n      BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n      };\n\n      BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n      };\n\n      BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n      };\n\n      BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n      };\n\n      BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n      }; //\n      // A reduce context, could be using montgomery or something better, depending\n      // on the `m` itself.\n      //\n\n\n      BN.red = function red(num) {\n        return new Red(num);\n      };\n\n      BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, 'Already a number in reduction context');\n        assert(this.negative === 0, 'red works only with positives');\n        return ctx.convertTo(this)._forceRed(ctx);\n      };\n\n      BN.prototype.fromRed = function fromRed() {\n        assert(this.red, 'fromRed works only with numbers in reduction context');\n        return this.red.convertFrom(this);\n      };\n\n      BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n      };\n\n      BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, 'Already a number in reduction context');\n        return this._forceRed(ctx);\n      };\n\n      BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, 'redAdd works only with red numbers');\n        return this.red.add(this, num);\n      };\n\n      BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, 'redIAdd works only with red numbers');\n        return this.red.iadd(this, num);\n      };\n\n      BN.prototype.redSub = function redSub(num) {\n        assert(this.red, 'redSub works only with red numbers');\n        return this.red.sub(this, num);\n      };\n\n      BN.prototype.redISub = function redISub(num) {\n        assert(this.red, 'redISub works only with red numbers');\n        return this.red.isub(this, num);\n      };\n\n      BN.prototype.redShl = function redShl(num) {\n        assert(this.red, 'redShl works only with red numbers');\n        return this.red.shl(this, num);\n      };\n\n      BN.prototype.redMul = function redMul(num) {\n        assert(this.red, 'redMul works only with red numbers');\n\n        this.red._verify2(this, num);\n\n        return this.red.mul(this, num);\n      };\n\n      BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, 'redMul works only with red numbers');\n\n        this.red._verify2(this, num);\n\n        return this.red.imul(this, num);\n      };\n\n      BN.prototype.redSqr = function redSqr() {\n        assert(this.red, 'redSqr works only with red numbers');\n\n        this.red._verify1(this);\n\n        return this.red.sqr(this);\n      };\n\n      BN.prototype.redISqr = function redISqr() {\n        assert(this.red, 'redISqr works only with red numbers');\n\n        this.red._verify1(this);\n\n        return this.red.isqr(this);\n      }; // Square root over p\n\n\n      BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, 'redSqrt works only with red numbers');\n\n        this.red._verify1(this);\n\n        return this.red.sqrt(this);\n      };\n\n      BN.prototype.redInvm = function redInvm() {\n        assert(this.red, 'redInvm works only with red numbers');\n\n        this.red._verify1(this);\n\n        return this.red.invm(this);\n      }; // Return negative clone of `this` % `red modulo`\n\n\n      BN.prototype.redNeg = function redNeg() {\n        assert(this.red, 'redNeg works only with red numbers');\n\n        this.red._verify1(this);\n\n        return this.red.neg(this);\n      };\n\n      BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, 'redPow(normalNum)');\n\n        this.red._verify1(this);\n\n        return this.red.pow(this, num);\n      }; // Prime numbers with efficient reduction\n\n\n      var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n      }; // Pseudo-Mersenne prime\n\n      function MPrime(name, p) {\n        // P = 2 ^ N - K\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n      }\n\n      MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n      };\n\n      MPrime.prototype.ireduce = function ireduce(num) {\n        // Assumes that `num` is less than `P^2`\n        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n        var r = num;\n        var rlen;\n\n        do {\n          this.split(r, this.tmp);\n          r = this.imulK(r);\n          r = r.iadd(this.tmp);\n          rlen = r.bitLength();\n        } while (rlen > this.n);\n\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n\n        if (cmp === 0) {\n          r.words[0] = 0;\n          r.length = 1;\n        } else if (cmp > 0) {\n          r.isub(this.p);\n        } else {\n          r.strip();\n        }\n\n        return r;\n      };\n\n      MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n      };\n\n      MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n      };\n\n      function K256() {\n        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n      }\n\n      inherits(K256, MPrime);\n\n      K256.prototype.split = function split(input, output) {\n        // 256 = 9 * 26 + 22\n        var mask = 0x3fffff;\n        var outLen = Math.min(input.length, 9);\n\n        for (var i = 0; i < outLen; i++) {\n          output.words[i] = input.words[i];\n        }\n\n        output.length = outLen;\n\n        if (input.length <= 9) {\n          input.words[0] = 0;\n          input.length = 1;\n          return;\n        } // Shift by 9 limbs\n\n\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n\n        for (i = 10; i < input.length; i++) {\n          var next = input.words[i] | 0;\n          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n          prev = next;\n        }\n\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n\n        if (prev === 0 && input.length > 10) {\n          input.length -= 10;\n        } else {\n          input.length -= 9;\n        }\n      };\n\n      K256.prototype.imulK = function imulK(num) {\n        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n\n        var lo = 0;\n\n        for (var i = 0; i < num.length; i++) {\n          var w = num.words[i] | 0;\n          lo += w * 0x3d1;\n          num.words[i] = lo & 0x3ffffff;\n          lo = w * 0x40 + (lo / 0x4000000 | 0);\n        } // Fast length reduction\n\n\n        if (num.words[num.length - 1] === 0) {\n          num.length--;\n\n          if (num.words[num.length - 1] === 0) {\n            num.length--;\n          }\n        }\n\n        return num;\n      };\n\n      function P224() {\n        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n      }\n\n      inherits(P224, MPrime);\n\n      function P192() {\n        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n      }\n\n      inherits(P192, MPrime);\n\n      function P25519() {\n        // 2 ^ 255 - 19\n        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n      }\n\n      inherits(P25519, MPrime);\n\n      P25519.prototype.imulK = function imulK(num) {\n        // K = 0x13\n        var carry = 0;\n\n        for (var i = 0; i < num.length; i++) {\n          var hi = (num.words[i] | 0) * 0x13 + carry;\n          var lo = hi & 0x3ffffff;\n          hi >>>= 26;\n          num.words[i] = lo;\n          carry = hi;\n        }\n\n        if (carry !== 0) {\n          num.words[num.length++] = carry;\n        }\n\n        return num;\n      }; // Exported mostly for testing purposes, use plain name instead\n\n\n      BN._prime = function prime(name) {\n        // Cached version of prime\n        if (primes[name]) return primes[name];\n        var prime;\n\n        if (name === 'k256') {\n          prime = new K256();\n        } else if (name === 'p224') {\n          prime = new P224();\n        } else if (name === 'p192') {\n          prime = new P192();\n        } else if (name === 'p25519') {\n          prime = new P25519();\n        } else {\n          throw new Error('Unknown prime ' + name);\n        }\n\n        primes[name] = prime;\n        return prime;\n      }; //\n      // Base reduction engine\n      //\n\n\n      function Red(m) {\n        if (typeof m === 'string') {\n          var prime = BN._prime(m);\n\n          this.m = prime.p;\n          this.prime = prime;\n        } else {\n          assert(m.gtn(1), 'modulus must be greater than 1');\n          this.m = m;\n          this.prime = null;\n        }\n      }\n\n      Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, 'red works only with positives');\n        assert(a.red, 'red works only with red numbers');\n      };\n\n      Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, 'red works only with positives');\n        assert(a.red && a.red === b.red, 'red works only with red numbers');\n      };\n\n      Red.prototype.imod = function imod(a) {\n        if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n        return a.umod(this.m)._forceRed(this);\n      };\n\n      Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n          return a.clone();\n        }\n\n        return this.m.sub(a)._forceRed(this);\n      };\n\n      Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n\n        var res = a.add(b);\n\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n\n        return res._forceRed(this);\n      };\n\n      Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n\n        var res = a.iadd(b);\n\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n\n        return res;\n      };\n\n      Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n\n        var res = a.sub(b);\n\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n\n        return res._forceRed(this);\n      };\n\n      Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n\n        var res = a.isub(b);\n\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n\n        return res;\n      };\n\n      Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n\n        return this.imod(a.ushln(num));\n      };\n\n      Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n\n        return this.imod(a.imul(b));\n      };\n\n      Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n\n        return this.imod(a.mul(b));\n      };\n\n      Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n      };\n\n      Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n      };\n\n      Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero()) return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1); // Fast case\n\n        if (mod3 === 3) {\n          var pow = this.m.add(new BN(1)).iushrn(2);\n          return this.pow(a, pow);\n        } // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n        //\n        // Find Q and S, that Q * 2 ^ S = (P - 1)\n\n\n        var q = this.m.subn(1);\n        var s = 0;\n\n        while (!q.isZero() && q.andln(1) === 0) {\n          s++;\n          q.iushrn(1);\n        }\n\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg(); // Find quadratic non-residue\n        // NOTE: Max is such because of generalized Riemann hypothesis.\n\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n\n        while (this.pow(z, lpow).cmp(nOne) !== 0) {\n          z.redIAdd(nOne);\n        }\n\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n\n        while (t.cmp(one) !== 0) {\n          var tmp = t;\n\n          for (var i = 0; tmp.cmp(one) !== 0; i++) {\n            tmp = tmp.redSqr();\n          }\n\n          assert(i < m);\n          var b = this.pow(c, new BN(1).iushln(m - i - 1));\n          r = r.redMul(b);\n          c = b.redSqr();\n          t = t.redMul(c);\n          m = i;\n        }\n\n        return r;\n      };\n\n      Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n\n        if (inv.negative !== 0) {\n          inv.negative = 0;\n          return this.imod(inv).redNeg();\n        } else {\n          return this.imod(inv);\n        }\n      };\n\n      Red.prototype.pow = function pow(a, num) {\n        if (num.isZero()) return new BN(1).toRed(this);\n        if (num.cmpn(1) === 0) return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n\n        for (var i = 2; i < wnd.length; i++) {\n          wnd[i] = this.mul(wnd[i - 1], a);\n        }\n\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n\n        if (start === 0) {\n          start = 26;\n        }\n\n        for (i = num.length - 1; i >= 0; i--) {\n          var word = num.words[i];\n\n          for (var j = start - 1; j >= 0; j--) {\n            var bit = word >> j & 1;\n\n            if (res !== wnd[0]) {\n              res = this.sqr(res);\n            }\n\n            if (bit === 0 && current === 0) {\n              currentLen = 0;\n              continue;\n            }\n\n            current <<= 1;\n            current |= bit;\n            currentLen++;\n            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n            res = this.mul(res, wnd[current]);\n            currentLen = 0;\n            current = 0;\n          }\n\n          start = 26;\n        }\n\n        return res;\n      };\n\n      Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n      };\n\n      Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n      }; //\n      // Montgomery method engine\n      //\n\n\n      BN.mont = function mont(num) {\n        return new Mont(num);\n      };\n\n      function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n\n        if (this.shift % 26 !== 0) {\n          this.shift += 26 - this.shift % 26;\n        }\n\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n      }\n\n      inherits(Mont, Red);\n\n      Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n      };\n\n      Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n      };\n\n      Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n          a.words[0] = 0;\n          a.length = 1;\n          return a;\n        }\n\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n\n        return res._forceRed(this);\n      };\n\n      Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n\n        return res._forceRed(this);\n      };\n\n      Mont.prototype.invm = function invm(a) {\n        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n      };\n    })(module, commonjsGlobal);\n  });\n  var minimalisticAssert = assert;\n\n  function assert(val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  assert.equal = function assertEqual(l, r, msg) {\n    if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);\n  };\n\n  var utils_1 = createCommonjsModule(function (module, exports) {\n    var utils = exports;\n\n    function toArray(msg, enc) {\n      if (Array.isArray(msg)) return msg.slice();\n      if (!msg) return [];\n      var res = [];\n\n      if (typeof msg !== 'string') {\n        for (var i = 0; i < msg.length; i++) res[i] = msg[i] | 0;\n\n        return res;\n      }\n\n      if (enc === 'hex') {\n        msg = msg.replace(/[^a-z0-9]+/ig, '');\n        if (msg.length % 2 !== 0) msg = '0' + msg;\n\n        for (var i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));\n      } else {\n        for (var i = 0; i < msg.length; i++) {\n          var c = msg.charCodeAt(i);\n          var hi = c >> 8;\n          var lo = c & 0xff;\n          if (hi) res.push(hi, lo);else res.push(lo);\n        }\n      }\n\n      return res;\n    }\n\n    utils.toArray = toArray;\n\n    function zero2(word) {\n      if (word.length === 1) return '0' + word;else return word;\n    }\n\n    utils.zero2 = zero2;\n\n    function toHex(msg) {\n      var res = '';\n\n      for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));\n\n      return res;\n    }\n\n    utils.toHex = toHex;\n\n    utils.encode = function encode(arr, enc) {\n      if (enc === 'hex') return toHex(arr);else return arr;\n    };\n  });\n  var utils_1$1 = createCommonjsModule(function (module, exports) {\n    var utils = exports;\n    utils.assert = minimalisticAssert;\n    utils.toArray = utils_1.toArray;\n    utils.zero2 = utils_1.zero2;\n    utils.toHex = utils_1.toHex;\n    utils.encode = utils_1.encode; // Represent num in a w-NAF form\n\n    function getNAF(num, w) {\n      var naf = [];\n      var ws = 1 << w + 1;\n      var k = num.clone();\n\n      while (k.cmpn(1) >= 0) {\n        var z;\n\n        if (k.isOdd()) {\n          var mod = k.andln(ws - 1);\n          if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;\n          k.isubn(z);\n        } else {\n          z = 0;\n        }\n\n        naf.push(z); // Optimization, shift by word if possible\n\n        var shift = k.cmpn(0) !== 0 && k.andln(ws - 1) === 0 ? w + 1 : 1;\n\n        for (var i = 1; i < shift; i++) naf.push(0);\n\n        k.iushrn(shift);\n      }\n\n      return naf;\n    }\n\n    utils.getNAF = getNAF; // Represent k1, k2 in a Joint Sparse Form\n\n    function getJSF(k1, k2) {\n      var jsf = [[], []];\n      k1 = k1.clone();\n      k2 = k2.clone();\n      var d1 = 0;\n      var d2 = 0;\n\n      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n        // First phase\n        var m14 = k1.andln(3) + d1 & 3;\n        var m24 = k2.andln(3) + d2 & 3;\n        if (m14 === 3) m14 = -1;\n        if (m24 === 3) m24 = -1;\n        var u1;\n\n        if ((m14 & 1) === 0) {\n          u1 = 0;\n        } else {\n          var m8 = k1.andln(7) + d1 & 7;\n          if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;\n        }\n\n        jsf[0].push(u1);\n        var u2;\n\n        if ((m24 & 1) === 0) {\n          u2 = 0;\n        } else {\n          var m8 = k2.andln(7) + d2 & 7;\n          if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;\n        }\n\n        jsf[1].push(u2); // Second phase\n\n        if (2 * d1 === u1 + 1) d1 = 1 - d1;\n        if (2 * d2 === u2 + 1) d2 = 1 - d2;\n        k1.iushrn(1);\n        k2.iushrn(1);\n      }\n\n      return jsf;\n    }\n\n    utils.getJSF = getJSF;\n\n    function cachedProperty(obj, name, computer) {\n      var key = '_' + name;\n\n      obj.prototype[name] = function cachedProperty() {\n        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);\n      };\n    }\n\n    utils.cachedProperty = cachedProperty;\n\n    function parseBytes(bytes) {\n      return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;\n    }\n\n    utils.parseBytes = parseBytes;\n\n    function intFromLE(bytes) {\n      return new bn(bytes, 'hex', 'le');\n    }\n\n    utils.intFromLE = intFromLE;\n  });\n  var r;\n\n  var brorand = function rand(len) {\n    if (!r) r = new Rand(null);\n    return r.generate(len);\n  };\n\n  function Rand(rand) {\n    this.rand = rand;\n  }\n\n  var Rand_1 = Rand;\n\n  Rand.prototype.generate = function generate(len) {\n    return this._rand(len);\n  }; // Emulate crypto API using randy\n\n\n  Rand.prototype._rand = function _rand(n) {\n    if (this.rand.getBytes) return this.rand.getBytes(n);\n    var res = new Uint8Array(n);\n\n    for (var i = 0; i < res.length; i++) res[i] = this.rand.getByte();\n\n    return res;\n  };\n\n  if (typeof self === 'object') {\n    if (self.crypto && self.crypto.getRandomValues) {\n      // Modern browsers\n      Rand.prototype._rand = function _rand(n) {\n        var arr = new Uint8Array(n);\n        self.crypto.getRandomValues(arr);\n        return arr;\n      };\n    } else if (self.msCrypto && self.msCrypto.getRandomValues) {\n      // IE\n      Rand.prototype._rand = function _rand(n) {\n        var arr = new Uint8Array(n);\n        self.msCrypto.getRandomValues(arr);\n        return arr;\n      }; // Safari's WebWorkers do not have `crypto`\n\n    } else if (typeof window === 'object') {\n      // Old junk\n      Rand.prototype._rand = function () {\n        throw new Error('Not implemented yet');\n      };\n    }\n  } else {\n    // Node.js or Web worker with no crypto support\n    try {\n      var crypto$1 = require$$0;\n      if (typeof crypto$1.randomBytes !== 'function') throw new Error('Not supported');\n\n      Rand.prototype._rand = function _rand(n) {\n        return crypto$1.randomBytes(n);\n      };\n    } catch (e) {}\n  }\n\n  brorand.Rand = Rand_1;\n  var getNAF = utils_1$1.getNAF;\n  var getJSF = utils_1$1.getJSF;\n  var assert$1 = utils_1$1.assert;\n\n  function BaseCurve(type, conf) {\n    this.type = type;\n    this.p = new bn(conf.p, 16); // Use Montgomery, when there is no fast reduction for the prime\n\n    this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p); // Useful for many curves\n\n    this.zero = new bn(0).toRed(this.red);\n    this.one = new bn(1).toRed(this.red);\n    this.two = new bn(2).toRed(this.red); // Curve configuration, optional\n\n    this.n = conf.n && new bn(conf.n, 16);\n    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed); // Temporary arrays\n\n    this._wnafT1 = new Array(4);\n    this._wnafT2 = new Array(4);\n    this._wnafT3 = new Array(4);\n    this._wnafT4 = new Array(4); // Generalized Greg Maxwell's trick\n\n    var adjustCount = this.n && this.p.div(this.n);\n\n    if (!adjustCount || adjustCount.cmpn(100) > 0) {\n      this.redN = null;\n    } else {\n      this._maxwellTrick = true;\n      this.redN = this.n.toRed(this.red);\n    }\n  }\n\n  var base = BaseCurve;\n\n  BaseCurve.prototype.point = function point() {\n    throw new Error('Not implemented');\n  };\n\n  BaseCurve.prototype.validate = function validate() {\n    throw new Error('Not implemented');\n  };\n\n  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n    assert$1(p.precomputed);\n\n    var doubles = p._getDoubles();\n\n    var naf = getNAF(k, 1);\n    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);\n    I /= 3; // Translate into more windowed form\n\n    var repr = [];\n\n    for (var j = 0; j < naf.length; j += doubles.step) {\n      var nafW = 0;\n\n      for (var k = j + doubles.step - 1; k >= j; k--) nafW = (nafW << 1) + naf[k];\n\n      repr.push(nafW);\n    }\n\n    var a = this.jpoint(null, null, null);\n    var b = this.jpoint(null, null, null);\n\n    for (var i = I; i > 0; i--) {\n      for (var j = 0; j < repr.length; j++) {\n        var nafW = repr[j];\n        if (nafW === i) b = b.mixedAdd(doubles.points[j]);else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());\n      }\n\n      a = a.add(b);\n    }\n\n    return a.toP();\n  };\n\n  BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n    var w = 4; // Precompute window\n\n    var nafPoints = p._getNAFPoints(w);\n\n    w = nafPoints.wnd;\n    var wnd = nafPoints.points; // Get NAF form\n\n    var naf = getNAF(k, w); // Add `this`*(N+1) for every w-NAF index\n\n    var acc = this.jpoint(null, null, null);\n\n    for (var i = naf.length - 1; i >= 0; i--) {\n      // Count zeroes\n      for (var k = 0; i >= 0 && naf[i] === 0; i--) k++;\n\n      if (i >= 0) k++;\n      acc = acc.dblp(k);\n      if (i < 0) break;\n      var z = naf[i];\n      assert$1(z !== 0);\n\n      if (p.type === 'affine') {\n        // J +- P\n        if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());\n      } else {\n        // J +- J\n        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());\n      }\n    }\n\n    return p.type === 'affine' ? acc.toP() : acc;\n  };\n\n  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {\n    var wndWidth = this._wnafT1;\n    var wnd = this._wnafT2;\n    var naf = this._wnafT3; // Fill all arrays\n\n    var max = 0;\n\n    for (var i = 0; i < len; i++) {\n      var p = points[i];\n\n      var nafPoints = p._getNAFPoints(defW);\n\n      wndWidth[i] = nafPoints.wnd;\n      wnd[i] = nafPoints.points;\n    } // Comb small window NAFs\n\n\n    for (var i = len - 1; i >= 1; i -= 2) {\n      var a = i - 1;\n      var b = i;\n\n      if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n        naf[a] = getNAF(coeffs[a], wndWidth[a]);\n        naf[b] = getNAF(coeffs[b], wndWidth[b]);\n        max = Math.max(naf[a].length, max);\n        max = Math.max(naf[b].length, max);\n        continue;\n      }\n\n      var comb = [points[a],\n      /* 1 */\n      null,\n      /* 3 */\n      null,\n      /* 5 */\n      points[b]\n      /* 7 */\n      ]; // Try to avoid Projective points, if possible\n\n      if (points[a].y.cmp(points[b].y) === 0) {\n        comb[1] = points[a].add(points[b]);\n        comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n      } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n        comb[1] = points[a].toJ().mixedAdd(points[b]);\n        comb[2] = points[a].add(points[b].neg());\n      } else {\n        comb[1] = points[a].toJ().mixedAdd(points[b]);\n        comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n      }\n\n      var index = [-3,\n      /* -1 -1 */\n      -1,\n      /* -1 0 */\n      -5,\n      /* -1 1 */\n      -7,\n      /* 0 -1 */\n      0,\n      /* 0 0 */\n      7,\n      /* 0 1 */\n      5,\n      /* 1 -1 */\n      1,\n      /* 1 0 */\n      3\n      /* 1 1 */\n      ];\n      var jsf = getJSF(coeffs[a], coeffs[b]);\n      max = Math.max(jsf[0].length, max);\n      naf[a] = new Array(max);\n      naf[b] = new Array(max);\n\n      for (var j = 0; j < max; j++) {\n        var ja = jsf[0][j] | 0;\n        var jb = jsf[1][j] | 0;\n        naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n        naf[b][j] = 0;\n        wnd[a] = comb;\n      }\n    }\n\n    var acc = this.jpoint(null, null, null);\n    var tmp = this._wnafT4;\n\n    for (var i = max; i >= 0; i--) {\n      var k = 0;\n\n      while (i >= 0) {\n        var zero = true;\n\n        for (var j = 0; j < len; j++) {\n          tmp[j] = naf[j][i] | 0;\n          if (tmp[j] !== 0) zero = false;\n        }\n\n        if (!zero) break;\n        k++;\n        i--;\n      }\n\n      if (i >= 0) k++;\n      acc = acc.dblp(k);\n      if (i < 0) break;\n\n      for (var j = 0; j < len; j++) {\n        var z = tmp[j];\n        var p;\n        if (z === 0) continue;else if (z > 0) p = wnd[j][z - 1 >> 1];else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();\n        if (p.type === 'affine') acc = acc.mixedAdd(p);else acc = acc.add(p);\n      }\n    } // Zeroify references\n\n\n    for (var i = 0; i < len; i++) wnd[i] = null;\n\n    if (jacobianResult) return acc;else return acc.toP();\n  };\n\n  function BasePoint(curve, type) {\n    this.curve = curve;\n    this.type = type;\n    this.precomputed = null;\n  }\n\n  BaseCurve.BasePoint = BasePoint;\n\n  BasePoint.prototype.eq = function eq()\n  /*other*/\n  {\n    throw new Error('Not implemented');\n  };\n\n  BasePoint.prototype.validate = function validate() {\n    return this.curve.validate(this);\n  };\n\n  BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n    bytes = utils_1$1.toArray(bytes, enc);\n    var len = this.p.byteLength(); // uncompressed, hybrid-odd, hybrid-even\n\n    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {\n      if (bytes[0] === 0x06) assert$1(bytes[bytes.length - 1] % 2 === 0);else if (bytes[0] === 0x07) assert$1(bytes[bytes.length - 1] % 2 === 1);\n      var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));\n      return res;\n    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {\n      return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n    }\n\n    throw new Error('Unknown point format');\n  };\n\n  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n    return this.encode(enc, true);\n  };\n\n  BasePoint.prototype._encode = function _encode(compact) {\n    var len = this.curve.p.byteLength();\n    var x = this.getX().toArray('be', len);\n    if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);\n    return [0x04].concat(x, this.getY().toArray('be', len));\n  };\n\n  BasePoint.prototype.encode = function encode(enc, compact) {\n    return utils_1$1.encode(this._encode(compact), enc);\n  };\n\n  BasePoint.prototype.precompute = function precompute(power) {\n    if (this.precomputed) return this;\n    var precomputed = {\n      doubles: null,\n      naf: null,\n      beta: null\n    };\n    precomputed.naf = this._getNAFPoints(8);\n    precomputed.doubles = this._getDoubles(4, power);\n    precomputed.beta = this._getBeta();\n    this.precomputed = precomputed;\n    return this;\n  };\n\n  BasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n    if (!this.precomputed) return false;\n    var doubles = this.precomputed.doubles;\n    if (!doubles) return false;\n    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n  };\n\n  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;\n    var doubles = [this];\n    var acc = this;\n\n    for (var i = 0; i < power; i += step) {\n      for (var j = 0; j < step; j++) acc = acc.dbl();\n\n      doubles.push(acc);\n    }\n\n    return {\n      step: step,\n      points: doubles\n    };\n  };\n\n  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;\n    var res = [this];\n    var max = (1 << wnd) - 1;\n    var dbl = max === 1 ? null : this.dbl();\n\n    for (var i = 1; i < max; i++) res[i] = res[i - 1].add(dbl);\n\n    return {\n      wnd: wnd,\n      points: res\n    };\n  };\n\n  BasePoint.prototype._getBeta = function _getBeta() {\n    return null;\n  };\n\n  BasePoint.prototype.dblp = function dblp(k) {\n    var r = this;\n\n    for (var i = 0; i < k; i++) r = r.dbl();\n\n    return r;\n  };\n\n  var inherits_browser = createCommonjsModule(function (module) {\n    if (typeof Object.create === 'function') {\n      // implementation from standard node.js 'util' module\n      module.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n          ctor.super_ = superCtor;\n          ctor.prototype = Object.create(superCtor.prototype, {\n            constructor: {\n              value: ctor,\n              enumerable: false,\n              writable: true,\n              configurable: true\n            }\n          });\n        }\n      };\n    } else {\n      // old school shim for old browsers\n      module.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n          ctor.super_ = superCtor;\n\n          var TempCtor = function () {};\n\n          TempCtor.prototype = superCtor.prototype;\n          ctor.prototype = new TempCtor();\n          ctor.prototype.constructor = ctor;\n        }\n      };\n    }\n  });\n  var assert$2 = utils_1$1.assert;\n\n  function ShortCurve(conf) {\n    base.call(this, 'short', conf);\n    this.a = new bn(conf.a, 16).toRed(this.red);\n    this.b = new bn(conf.b, 16).toRed(this.red);\n    this.tinv = this.two.redInvm();\n    this.zeroA = this.a.fromRed().cmpn(0) === 0;\n    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0; // If the curve is endomorphic, precalculate beta and lambda\n\n    this.endo = this._getEndomorphism(conf);\n    this._endoWnafT1 = new Array(4);\n    this._endoWnafT2 = new Array(4);\n  }\n\n  inherits_browser(ShortCurve, base);\n  var short_1 = ShortCurve;\n\n  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n    // No efficient endomorphism\n    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return; // Compute beta and lambda, that lambda * P = (beta * Px; Py)\n\n    var beta;\n    var lambda;\n\n    if (conf.beta) {\n      beta = new bn(conf.beta, 16).toRed(this.red);\n    } else {\n      var betas = this._getEndoRoots(this.p); // Choose the smallest beta\n\n\n      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n      beta = beta.toRed(this.red);\n    }\n\n    if (conf.lambda) {\n      lambda = new bn(conf.lambda, 16);\n    } else {\n      // Choose the lambda that is matching selected beta\n      var lambdas = this._getEndoRoots(this.n);\n\n      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n        lambda = lambdas[0];\n      } else {\n        lambda = lambdas[1];\n        assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n      }\n    } // Get basis vectors, used for balanced length-two representation\n\n\n    var basis;\n\n    if (conf.basis) {\n      basis = conf.basis.map(function (vec) {\n        return {\n          a: new bn(vec.a, 16),\n          b: new bn(vec.b, 16)\n        };\n      });\n    } else {\n      basis = this._getEndoBasis(lambda);\n    }\n\n    return {\n      beta: beta,\n      lambda: lambda,\n      basis: basis\n    };\n  };\n\n  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n    // Find roots of for x^2 + x + 1 in F\n    // Root = (-1 +- Sqrt(-3)) / 2\n    //\n    var red = num === this.p ? this.red : bn.mont(num);\n    var tinv = new bn(2).toRed(red).redInvm();\n    var ntinv = tinv.redNeg();\n    var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n    var l1 = ntinv.redAdd(s).fromRed();\n    var l2 = ntinv.redSub(s).fromRed();\n    return [l1, l2];\n  };\n\n  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n    // aprxSqrt >= sqrt(this.n)\n    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2)); // 3.74\n    // Run EGCD, until r(L + 1) < aprxSqrt\n\n    var u = lambda;\n    var v = this.n.clone();\n    var x1 = new bn(1);\n    var y1 = new bn(0);\n    var x2 = new bn(0);\n    var y2 = new bn(1); // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\n\n    var a0;\n    var b0; // First vector\n\n    var a1;\n    var b1; // Second vector\n\n    var a2;\n    var b2;\n    var prevR;\n    var i = 0;\n    var r;\n    var x;\n\n    while (u.cmpn(0) !== 0) {\n      var q = v.div(u);\n      r = v.sub(q.mul(u));\n      x = x2.sub(q.mul(x1));\n      var y = y2.sub(q.mul(y1));\n\n      if (!a1 && r.cmp(aprxSqrt) < 0) {\n        a0 = prevR.neg();\n        b0 = x1;\n        a1 = r.neg();\n        b1 = x;\n      } else if (a1 && ++i === 2) {\n        break;\n      }\n\n      prevR = r;\n      v = u;\n      u = r;\n      x2 = x1;\n      x1 = x;\n      y2 = y1;\n      y1 = y;\n    }\n\n    a2 = r.neg();\n    b2 = x;\n    var len1 = a1.sqr().add(b1.sqr());\n    var len2 = a2.sqr().add(b2.sqr());\n\n    if (len2.cmp(len1) >= 0) {\n      a2 = a0;\n      b2 = b0;\n    } // Normalize signs\n\n\n    if (a1.negative) {\n      a1 = a1.neg();\n      b1 = b1.neg();\n    }\n\n    if (a2.negative) {\n      a2 = a2.neg();\n      b2 = b2.neg();\n    }\n\n    return [{\n      a: a1,\n      b: b1\n    }, {\n      a: a2,\n      b: b2\n    }];\n  };\n\n  ShortCurve.prototype._endoSplit = function _endoSplit(k) {\n    var basis = this.endo.basis;\n    var v1 = basis[0];\n    var v2 = basis[1];\n    var c1 = v2.b.mul(k).divRound(this.n);\n    var c2 = v1.b.neg().mul(k).divRound(this.n);\n    var p1 = c1.mul(v1.a);\n    var p2 = c2.mul(v2.a);\n    var q1 = c1.mul(v1.b);\n    var q2 = c2.mul(v2.b); // Calculate answer\n\n    var k1 = k.sub(p1).sub(p2);\n    var k2 = q1.add(q2).neg();\n    return {\n      k1: k1,\n      k2: k2\n    };\n  };\n\n  ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n    x = new bn(x, 16);\n    if (!x.red) x = x.toRed(this.red);\n    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n    var y = y2.redSqrt();\n    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point'); // XXX Is there any way to tell if the number is odd without converting it\n    // to non-red form?\n\n    var isOdd = y.fromRed().isOdd();\n    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();\n    return this.point(x, y);\n  };\n\n  ShortCurve.prototype.validate = function validate(point) {\n    if (point.inf) return true;\n    var x = point.x;\n    var y = point.y;\n    var ax = this.a.redMul(x);\n    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n    return y.redSqr().redISub(rhs).cmpn(0) === 0;\n  };\n\n  ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n    var npoints = this._endoWnafT1;\n    var ncoeffs = this._endoWnafT2;\n\n    for (var i = 0; i < points.length; i++) {\n      var split = this._endoSplit(coeffs[i]);\n\n      var p = points[i];\n\n      var beta = p._getBeta();\n\n      if (split.k1.negative) {\n        split.k1.ineg();\n        p = p.neg(true);\n      }\n\n      if (split.k2.negative) {\n        split.k2.ineg();\n        beta = beta.neg(true);\n      }\n\n      npoints[i * 2] = p;\n      npoints[i * 2 + 1] = beta;\n      ncoeffs[i * 2] = split.k1;\n      ncoeffs[i * 2 + 1] = split.k2;\n    }\n\n    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult); // Clean-up references to points and coefficients\n\n\n    for (var j = 0; j < i * 2; j++) {\n      npoints[j] = null;\n      ncoeffs[j] = null;\n    }\n\n    return res;\n  };\n\n  function Point(curve, x, y, isRed) {\n    base.BasePoint.call(this, curve, 'affine');\n\n    if (x === null && y === null) {\n      this.x = null;\n      this.y = null;\n      this.inf = true;\n    } else {\n      this.x = new bn(x, 16);\n      this.y = new bn(y, 16); // Force redgomery representation when loading from JSON\n\n      if (isRed) {\n        this.x.forceRed(this.curve.red);\n        this.y.forceRed(this.curve.red);\n      }\n\n      if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n      if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n      this.inf = false;\n    }\n  }\n\n  inherits_browser(Point, base.BasePoint);\n\n  ShortCurve.prototype.point = function point(x, y, isRed) {\n    return new Point(this, x, y, isRed);\n  };\n\n  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n    return Point.fromJSON(this, obj, red);\n  };\n\n  Point.prototype._getBeta = function _getBeta() {\n    if (!this.curve.endo) return;\n    var pre = this.precomputed;\n    if (pre && pre.beta) return pre.beta;\n    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n\n    if (pre) {\n      var curve = this.curve;\n\n      var endoMul = function (p) {\n        return curve.point(p.x.redMul(curve.endo.beta), p.y);\n      };\n\n      pre.beta = beta;\n      beta.precomputed = {\n        beta: null,\n        naf: pre.naf && {\n          wnd: pre.naf.wnd,\n          points: pre.naf.points.map(endoMul)\n        },\n        doubles: pre.doubles && {\n          step: pre.doubles.step,\n          points: pre.doubles.points.map(endoMul)\n        }\n      };\n    }\n\n    return beta;\n  };\n\n  Point.prototype.toJSON = function toJSON() {\n    if (!this.precomputed) return [this.x, this.y];\n    return [this.x, this.y, this.precomputed && {\n      doubles: this.precomputed.doubles && {\n        step: this.precomputed.doubles.step,\n        points: this.precomputed.doubles.points.slice(1)\n      },\n      naf: this.precomputed.naf && {\n        wnd: this.precomputed.naf.wnd,\n        points: this.precomputed.naf.points.slice(1)\n      }\n    }];\n  };\n\n  Point.fromJSON = function fromJSON(curve, obj, red) {\n    if (typeof obj === 'string') obj = JSON.parse(obj);\n    var res = curve.point(obj[0], obj[1], red);\n    if (!obj[2]) return res;\n\n    function obj2point(obj) {\n      return curve.point(obj[0], obj[1], red);\n    }\n\n    var pre = obj[2];\n    res.precomputed = {\n      beta: null,\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: [res].concat(pre.doubles.points.map(obj2point))\n      },\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: [res].concat(pre.naf.points.map(obj2point))\n      }\n    };\n    return res;\n  };\n\n  Point.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return '<EC Point Infinity>';\n    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';\n  };\n\n  Point.prototype.isInfinity = function isInfinity() {\n    return this.inf;\n  };\n\n  Point.prototype.add = function add(p) {\n    // O + P = P\n    if (this.inf) return p; // P + O = P\n\n    if (p.inf) return this; // P + P = 2P\n\n    if (this.eq(p)) return this.dbl(); // P + (-P) = O\n\n    if (this.neg().eq(p)) return this.curve.point(null, null); // P + Q = O\n\n    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);\n    var c = this.y.redSub(p.y);\n    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());\n    var nx = c.redSqr().redISub(this.x).redISub(p.x);\n    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n    return this.curve.point(nx, ny);\n  };\n\n  Point.prototype.dbl = function dbl() {\n    if (this.inf) return this; // 2P = O\n\n    var ys1 = this.y.redAdd(this.y);\n    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);\n    var a = this.curve.a;\n    var x2 = this.x.redSqr();\n    var dyinv = ys1.redInvm();\n    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n    var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n    return this.curve.point(nx, ny);\n  };\n\n  Point.prototype.getX = function getX() {\n    return this.x.fromRed();\n  };\n\n  Point.prototype.getY = function getY() {\n    return this.y.fromRed();\n  };\n\n  Point.prototype.mul = function mul(k) {\n    k = new bn(k, 16);\n    if (this.isInfinity()) return this;else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);else return this.curve._wnafMul(this, k);\n  };\n\n  Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n    var points = [this, p2];\n    var coeffs = [k1, k2];\n    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);else return this.curve._wnafMulAdd(1, points, coeffs, 2);\n  };\n\n  Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n    var points = [this, p2];\n    var coeffs = [k1, k2];\n    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n  };\n\n  Point.prototype.eq = function eq(p) {\n    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n  };\n\n  Point.prototype.neg = function neg(_precompute) {\n    if (this.inf) return this;\n    var res = this.curve.point(this.x, this.y.redNeg());\n\n    if (_precompute && this.precomputed) {\n      var pre = this.precomputed;\n\n      var negate = function (p) {\n        return p.neg();\n      };\n\n      res.precomputed = {\n        naf: pre.naf && {\n          wnd: pre.naf.wnd,\n          points: pre.naf.points.map(negate)\n        },\n        doubles: pre.doubles && {\n          step: pre.doubles.step,\n          points: pre.doubles.points.map(negate)\n        }\n      };\n    }\n\n    return res;\n  };\n\n  Point.prototype.toJ = function toJ() {\n    if (this.inf) return this.curve.jpoint(null, null, null);\n    var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n    return res;\n  };\n\n  function JPoint(curve, x, y, z) {\n    base.BasePoint.call(this, curve, 'jacobian');\n\n    if (x === null && y === null && z === null) {\n      this.x = this.curve.one;\n      this.y = this.curve.one;\n      this.z = new bn(0);\n    } else {\n      this.x = new bn(x, 16);\n      this.y = new bn(y, 16);\n      this.z = new bn(z, 16);\n    }\n\n    if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n    if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n    this.zOne = this.z === this.curve.one;\n  }\n\n  inherits_browser(JPoint, base.BasePoint);\n\n  ShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n    return new JPoint(this, x, y, z);\n  };\n\n  JPoint.prototype.toP = function toP() {\n    if (this.isInfinity()) return this.curve.point(null, null);\n    var zinv = this.z.redInvm();\n    var zinv2 = zinv.redSqr();\n    var ax = this.x.redMul(zinv2);\n    var ay = this.y.redMul(zinv2).redMul(zinv);\n    return this.curve.point(ax, ay);\n  };\n\n  JPoint.prototype.neg = function neg() {\n    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n  };\n\n  JPoint.prototype.add = function add(p) {\n    // O + P = P\n    if (this.isInfinity()) return p; // P + O = P\n\n    if (p.isInfinity()) return this; // 12M + 4S + 7A\n\n    var pz2 = p.z.redSqr();\n    var z2 = this.z.redSqr();\n    var u1 = this.x.redMul(pz2);\n    var u2 = p.x.redMul(z2);\n    var s1 = this.y.redMul(pz2.redMul(p.z));\n    var s2 = p.y.redMul(z2.redMul(this.z));\n    var h = u1.redSub(u2);\n    var r = s1.redSub(s2);\n\n    if (h.cmpn(0) === 0) {\n      if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();\n    }\n\n    var h2 = h.redSqr();\n    var h3 = h2.redMul(h);\n    var v = u1.redMul(h2);\n    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n    var nz = this.z.redMul(p.z).redMul(h);\n    return this.curve.jpoint(nx, ny, nz);\n  };\n\n  JPoint.prototype.mixedAdd = function mixedAdd(p) {\n    // O + P = P\n    if (this.isInfinity()) return p.toJ(); // P + O = P\n\n    if (p.isInfinity()) return this; // 8M + 3S + 7A\n\n    var z2 = this.z.redSqr();\n    var u1 = this.x;\n    var u2 = p.x.redMul(z2);\n    var s1 = this.y;\n    var s2 = p.y.redMul(z2).redMul(this.z);\n    var h = u1.redSub(u2);\n    var r = s1.redSub(s2);\n\n    if (h.cmpn(0) === 0) {\n      if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();\n    }\n\n    var h2 = h.redSqr();\n    var h3 = h2.redMul(h);\n    var v = u1.redMul(h2);\n    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n    var nz = this.z.redMul(h);\n    return this.curve.jpoint(nx, ny, nz);\n  };\n\n  JPoint.prototype.dblp = function dblp(pow) {\n    if (pow === 0) return this;\n    if (this.isInfinity()) return this;\n    if (!pow) return this.dbl();\n\n    if (this.curve.zeroA || this.curve.threeA) {\n      var r = this;\n\n      for (var i = 0; i < pow; i++) r = r.dbl();\n\n      return r;\n    } // 1M + 2S + 1A + N * (4S + 5M + 8A)\n    // N = 1 => 6M + 6S + 9A\n\n\n    var a = this.curve.a;\n    var tinv = this.curve.tinv;\n    var jx = this.x;\n    var jy = this.y;\n    var jz = this.z;\n    var jz4 = jz.redSqr().redSqr(); // Reuse results\n\n    var jyd = jy.redAdd(jy);\n\n    for (var i = 0; i < pow; i++) {\n      var jx2 = jx.redSqr();\n      var jyd2 = jyd.redSqr();\n      var jyd4 = jyd2.redSqr();\n      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n      var t1 = jx.redMul(jyd2);\n      var nx = c.redSqr().redISub(t1.redAdd(t1));\n      var t2 = t1.redISub(nx);\n      var dny = c.redMul(t2);\n      dny = dny.redIAdd(dny).redISub(jyd4);\n      var nz = jyd.redMul(jz);\n      if (i + 1 < pow) jz4 = jz4.redMul(jyd4);\n      jx = nx;\n      jz = nz;\n      jyd = dny;\n    }\n\n    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n  };\n\n  JPoint.prototype.dbl = function dbl() {\n    if (this.isInfinity()) return this;\n    if (this.curve.zeroA) return this._zeroDbl();else if (this.curve.threeA) return this._threeDbl();else return this._dbl();\n  };\n\n  JPoint.prototype._zeroDbl = function _zeroDbl() {\n    var nx;\n    var ny;\n    var nz; // Z = 1\n\n    if (this.zOne) {\n      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n      //     #doubling-mdbl-2007-bl\n      // 1M + 5S + 14A\n      // XX = X1^2\n      var xx = this.x.redSqr(); // YY = Y1^2\n\n      var yy = this.y.redSqr(); // YYYY = YY^2\n\n      var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n\n      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n      s = s.redIAdd(s); // M = 3 * XX + a; a = 0\n\n      var m = xx.redAdd(xx).redIAdd(xx); // T = M ^ 2 - 2*S\n\n      var t = m.redSqr().redISub(s).redISub(s); // 8 * YYYY\n\n      var yyyy8 = yyyy.redIAdd(yyyy);\n      yyyy8 = yyyy8.redIAdd(yyyy8);\n      yyyy8 = yyyy8.redIAdd(yyyy8); // X3 = T\n\n      nx = t; // Y3 = M * (S - T) - 8 * YYYY\n\n      ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2*Y1\n\n      nz = this.y.redAdd(this.y);\n    } else {\n      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n      //     #doubling-dbl-2009-l\n      // 2M + 5S + 13A\n      // A = X1^2\n      var a = this.x.redSqr(); // B = Y1^2\n\n      var b = this.y.redSqr(); // C = B^2\n\n      var c = b.redSqr(); // D = 2 * ((X1 + B)^2 - A - C)\n\n      var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n      d = d.redIAdd(d); // E = 3 * A\n\n      var e = a.redAdd(a).redIAdd(a); // F = E^2\n\n      var f = e.redSqr(); // 8 * C\n\n      var c8 = c.redIAdd(c);\n      c8 = c8.redIAdd(c8);\n      c8 = c8.redIAdd(c8); // X3 = F - 2 * D\n\n      nx = f.redISub(d).redISub(d); // Y3 = E * (D - X3) - 8 * C\n\n      ny = e.redMul(d.redISub(nx)).redISub(c8); // Z3 = 2 * Y1 * Z1\n\n      nz = this.y.redMul(this.z);\n      nz = nz.redIAdd(nz);\n    }\n\n    return this.curve.jpoint(nx, ny, nz);\n  };\n\n  JPoint.prototype._threeDbl = function _threeDbl() {\n    var nx;\n    var ny;\n    var nz; // Z = 1\n\n    if (this.zOne) {\n      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html\n      //     #doubling-mdbl-2007-bl\n      // 1M + 5S + 15A\n      // XX = X1^2\n      var xx = this.x.redSqr(); // YY = Y1^2\n\n      var yy = this.y.redSqr(); // YYYY = YY^2\n\n      var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n\n      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n      s = s.redIAdd(s); // M = 3 * XX + a\n\n      var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a); // T = M^2 - 2 * S\n\n      var t = m.redSqr().redISub(s).redISub(s); // X3 = T\n\n      nx = t; // Y3 = M * (S - T) - 8 * YYYY\n\n      var yyyy8 = yyyy.redIAdd(yyyy);\n      yyyy8 = yyyy8.redIAdd(yyyy8);\n      yyyy8 = yyyy8.redIAdd(yyyy8);\n      ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2 * Y1\n\n      nz = this.y.redAdd(this.y);\n    } else {\n      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n      // 3M + 5S\n      // delta = Z1^2\n      var delta = this.z.redSqr(); // gamma = Y1^2\n\n      var gamma = this.y.redSqr(); // beta = X1 * gamma\n\n      var beta = this.x.redMul(gamma); // alpha = 3 * (X1 - delta) * (X1 + delta)\n\n      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n      alpha = alpha.redAdd(alpha).redIAdd(alpha); // X3 = alpha^2 - 8 * beta\n\n      var beta4 = beta.redIAdd(beta);\n      beta4 = beta4.redIAdd(beta4);\n      var beta8 = beta4.redAdd(beta4);\n      nx = alpha.redSqr().redISub(beta8); // Z3 = (Y1 + Z1)^2 - gamma - delta\n\n      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta); // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n\n      var ggamma8 = gamma.redSqr();\n      ggamma8 = ggamma8.redIAdd(ggamma8);\n      ggamma8 = ggamma8.redIAdd(ggamma8);\n      ggamma8 = ggamma8.redIAdd(ggamma8);\n      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n    }\n\n    return this.curve.jpoint(nx, ny, nz);\n  };\n\n  JPoint.prototype._dbl = function _dbl() {\n    var a = this.curve.a; // 4M + 6S + 10A\n\n    var jx = this.x;\n    var jy = this.y;\n    var jz = this.z;\n    var jz4 = jz.redSqr().redSqr();\n    var jx2 = jx.redSqr();\n    var jy2 = jy.redSqr();\n    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n    var jxd4 = jx.redAdd(jx);\n    jxd4 = jxd4.redIAdd(jxd4);\n    var t1 = jxd4.redMul(jy2);\n    var nx = c.redSqr().redISub(t1.redAdd(t1));\n    var t2 = t1.redISub(nx);\n    var jyd8 = jy2.redSqr();\n    jyd8 = jyd8.redIAdd(jyd8);\n    jyd8 = jyd8.redIAdd(jyd8);\n    jyd8 = jyd8.redIAdd(jyd8);\n    var ny = c.redMul(t2).redISub(jyd8);\n    var nz = jy.redAdd(jy).redMul(jz);\n    return this.curve.jpoint(nx, ny, nz);\n  };\n\n  JPoint.prototype.trpl = function trpl() {\n    if (!this.curve.zeroA) return this.dbl().add(this); // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl\n    // 5M + 10S + ...\n    // XX = X1^2\n\n    var xx = this.x.redSqr(); // YY = Y1^2\n\n    var yy = this.y.redSqr(); // ZZ = Z1^2\n\n    var zz = this.z.redSqr(); // YYYY = YY^2\n\n    var yyyy = yy.redSqr(); // M = 3 * XX + a * ZZ2; a = 0\n\n    var m = xx.redAdd(xx).redIAdd(xx); // MM = M^2\n\n    var mm = m.redSqr(); // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM\n\n    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    e = e.redIAdd(e);\n    e = e.redAdd(e).redIAdd(e);\n    e = e.redISub(mm); // EE = E^2\n\n    var ee = e.redSqr(); // T = 16*YYYY\n\n    var t = yyyy.redIAdd(yyyy);\n    t = t.redIAdd(t);\n    t = t.redIAdd(t);\n    t = t.redIAdd(t); // U = (M + E)^2 - MM - EE - T\n\n    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t); // X3 = 4 * (X1 * EE - 4 * YY * U)\n\n    var yyu4 = yy.redMul(u);\n    yyu4 = yyu4.redIAdd(yyu4);\n    yyu4 = yyu4.redIAdd(yyu4);\n    var nx = this.x.redMul(ee).redISub(yyu4);\n    nx = nx.redIAdd(nx);\n    nx = nx.redIAdd(nx); // Y3 = 8 * Y1 * (U * (T - U) - E * EE)\n\n    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n    ny = ny.redIAdd(ny);\n    ny = ny.redIAdd(ny);\n    ny = ny.redIAdd(ny); // Z3 = (Z1 + E)^2 - ZZ - EE\n\n    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n    return this.curve.jpoint(nx, ny, nz);\n  };\n\n  JPoint.prototype.mul = function mul(k, kbase) {\n    k = new bn(k, kbase);\n    return this.curve._wnafMul(this, k);\n  };\n\n  JPoint.prototype.eq = function eq(p) {\n    if (p.type === 'affine') return this.eq(p.toJ());\n    if (this === p) return true; // x1 * z2^2 == x2 * z1^2\n\n    var z2 = this.z.redSqr();\n    var pz2 = p.z.redSqr();\n    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false; // y1 * z2^3 == y2 * z1^3\n\n    var z3 = z2.redMul(this.z);\n    var pz3 = pz2.redMul(p.z);\n    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n  };\n\n  JPoint.prototype.eqXToP = function eqXToP(x) {\n    var zs = this.z.redSqr();\n    var rx = x.toRed(this.curve.red).redMul(zs);\n    if (this.x.cmp(rx) === 0) return true;\n    var xc = x.clone();\n    var t = this.curve.redN.redMul(zs);\n\n    for (;;) {\n      xc.iadd(this.curve.n);\n      if (xc.cmp(this.curve.p) >= 0) return false;\n      rx.redIAdd(t);\n      if (this.x.cmp(rx) === 0) return true;\n    }\n  };\n\n  JPoint.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return '<EC JPoint Infinity>';\n    return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';\n  };\n\n  JPoint.prototype.isInfinity = function isInfinity() {\n    // XXX This code assumes that zero is always zero in red\n    return this.z.cmpn(0) === 0;\n  };\n\n  function MontCurve(conf) {\n    base.call(this, 'mont', conf);\n    this.a = new bn(conf.a, 16).toRed(this.red);\n    this.b = new bn(conf.b, 16).toRed(this.red);\n    this.i4 = new bn(4).toRed(this.red).redInvm();\n    this.two = new bn(2).toRed(this.red);\n    this.a24 = this.i4.redMul(this.a.redAdd(this.two));\n  }\n\n  inherits_browser(MontCurve, base);\n  var mont = MontCurve;\n\n  MontCurve.prototype.validate = function validate(point) {\n    var x = point.normalize().x;\n    var x2 = x.redSqr();\n    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);\n    var y = rhs.redSqrt();\n    return y.redSqr().cmp(rhs) === 0;\n  };\n\n  function Point$1(curve, x, z) {\n    base.BasePoint.call(this, curve, 'projective');\n\n    if (x === null && z === null) {\n      this.x = this.curve.one;\n      this.z = this.curve.zero;\n    } else {\n      this.x = new bn(x, 16);\n      this.z = new bn(z, 16);\n      if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n      if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n    }\n  }\n\n  inherits_browser(Point$1, base.BasePoint);\n\n  MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n    return this.point(utils_1$1.toArray(bytes, enc), 1);\n  };\n\n  MontCurve.prototype.point = function point(x, z) {\n    return new Point$1(this, x, z);\n  };\n\n  MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n    return Point$1.fromJSON(this, obj);\n  };\n\n  Point$1.prototype.precompute = function precompute() {// No-op\n  };\n\n  Point$1.prototype._encode = function _encode() {\n    return this.getX().toArray('be', this.curve.p.byteLength());\n  };\n\n  Point$1.fromJSON = function fromJSON(curve, obj) {\n    return new Point$1(curve, obj[0], obj[1] || curve.one);\n  };\n\n  Point$1.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return '<EC Point Infinity>';\n    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n  };\n\n  Point$1.prototype.isInfinity = function isInfinity() {\n    // XXX This code assumes that zero is always zero in red\n    return this.z.cmpn(0) === 0;\n  };\n\n  Point$1.prototype.dbl = function dbl() {\n    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3\n    // 2M + 2S + 4A\n    // A = X1 + Z1\n    var a = this.x.redAdd(this.z); // AA = A^2\n\n    var aa = a.redSqr(); // B = X1 - Z1\n\n    var b = this.x.redSub(this.z); // BB = B^2\n\n    var bb = b.redSqr(); // C = AA - BB\n\n    var c = aa.redSub(bb); // X3 = AA * BB\n\n    var nx = aa.redMul(bb); // Z3 = C * (BB + A24 * C)\n\n    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));\n    return this.curve.point(nx, nz);\n  };\n\n  Point$1.prototype.add = function add() {\n    throw new Error('Not supported on Montgomery curve');\n  };\n\n  Point$1.prototype.diffAdd = function diffAdd(p, diff) {\n    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3\n    // 4M + 2S + 6A\n    // A = X2 + Z2\n    var a = this.x.redAdd(this.z); // B = X2 - Z2\n\n    var b = this.x.redSub(this.z); // C = X3 + Z3\n\n    var c = p.x.redAdd(p.z); // D = X3 - Z3\n\n    var d = p.x.redSub(p.z); // DA = D * A\n\n    var da = d.redMul(a); // CB = C * B\n\n    var cb = c.redMul(b); // X5 = Z1 * (DA + CB)^2\n\n    var nx = diff.z.redMul(da.redAdd(cb).redSqr()); // Z5 = X1 * (DA - CB)^2\n\n    var nz = diff.x.redMul(da.redISub(cb).redSqr());\n    return this.curve.point(nx, nz);\n  };\n\n  Point$1.prototype.mul = function mul(k) {\n    var t = k.clone();\n    var a = this; // (N / 2) * Q + Q\n\n    var b = this.curve.point(null, null); // (N / 2) * Q\n\n    var c = this; // Q\n\n    for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1)) bits.push(t.andln(1));\n\n    for (var i = bits.length - 1; i >= 0; i--) {\n      if (bits[i] === 0) {\n        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q\n        a = a.diffAdd(b, c); // N * Q = 2 * ((N / 2) * Q + Q))\n\n        b = b.dbl();\n      } else {\n        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)\n        b = a.diffAdd(b, c); // N * Q + Q = 2 * ((N / 2) * Q + Q)\n\n        a = a.dbl();\n      }\n    }\n\n    return b;\n  };\n\n  Point$1.prototype.mulAdd = function mulAdd() {\n    throw new Error('Not supported on Montgomery curve');\n  };\n\n  Point$1.prototype.jumlAdd = function jumlAdd() {\n    throw new Error('Not supported on Montgomery curve');\n  };\n\n  Point$1.prototype.eq = function eq(other) {\n    return this.getX().cmp(other.getX()) === 0;\n  };\n\n  Point$1.prototype.normalize = function normalize() {\n    this.x = this.x.redMul(this.z.redInvm());\n    this.z = this.curve.one;\n    return this;\n  };\n\n  Point$1.prototype.getX = function getX() {\n    // Normalize coordinates\n    this.normalize();\n    return this.x.fromRed();\n  };\n\n  var assert$3 = utils_1$1.assert;\n\n  function EdwardsCurve(conf) {\n    // NOTE: Important as we are creating point in Base.call()\n    this.twisted = (conf.a | 0) !== 1;\n    this.mOneA = this.twisted && (conf.a | 0) === -1;\n    this.extended = this.mOneA;\n    base.call(this, 'edwards', conf);\n    this.a = new bn(conf.a, 16).umod(this.red.m);\n    this.a = this.a.toRed(this.red);\n    this.c = new bn(conf.c, 16).toRed(this.red);\n    this.c2 = this.c.redSqr();\n    this.d = new bn(conf.d, 16).toRed(this.red);\n    this.dd = this.d.redAdd(this.d);\n    assert$3(!this.twisted || this.c.fromRed().cmpn(1) === 0);\n    this.oneC = (conf.c | 0) === 1;\n  }\n\n  inherits_browser(EdwardsCurve, base);\n  var edwards = EdwardsCurve;\n\n  EdwardsCurve.prototype._mulA = function _mulA(num) {\n    if (this.mOneA) return num.redNeg();else return this.a.redMul(num);\n  };\n\n  EdwardsCurve.prototype._mulC = function _mulC(num) {\n    if (this.oneC) return num;else return this.c.redMul(num);\n  }; // Just for compatibility with Short curve\n\n\n  EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {\n    return this.point(x, y, z, t);\n  };\n\n  EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {\n    x = new bn(x, 16);\n    if (!x.red) x = x.toRed(this.red);\n    var x2 = x.redSqr();\n    var rhs = this.c2.redSub(this.a.redMul(x2));\n    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));\n    var y2 = rhs.redMul(lhs.redInvm());\n    var y = y2.redSqrt();\n    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');\n    var isOdd = y.fromRed().isOdd();\n    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();\n    return this.point(x, y);\n  };\n\n  EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {\n    y = new bn(y, 16);\n    if (!y.red) y = y.toRed(this.red); // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)\n\n    var y2 = y.redSqr();\n    var lhs = y2.redSub(this.c2);\n    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);\n    var x2 = lhs.redMul(rhs.redInvm());\n\n    if (x2.cmp(this.zero) === 0) {\n      if (odd) throw new Error('invalid point');else return this.point(this.zero, y);\n    }\n\n    var x = x2.redSqrt();\n    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');\n    if (x.fromRed().isOdd() !== odd) x = x.redNeg();\n    return this.point(x, y);\n  };\n\n  EdwardsCurve.prototype.validate = function validate(point) {\n    if (point.isInfinity()) return true; // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)\n\n    point.normalize();\n    var x2 = point.x.redSqr();\n    var y2 = point.y.redSqr();\n    var lhs = x2.redMul(this.a).redAdd(y2);\n    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));\n    return lhs.cmp(rhs) === 0;\n  };\n\n  function Point$2(curve, x, y, z, t) {\n    base.BasePoint.call(this, curve, 'projective');\n\n    if (x === null && y === null && z === null) {\n      this.x = this.curve.zero;\n      this.y = this.curve.one;\n      this.z = this.curve.one;\n      this.t = this.curve.zero;\n      this.zOne = true;\n    } else {\n      this.x = new bn(x, 16);\n      this.y = new bn(y, 16);\n      this.z = z ? new bn(z, 16) : this.curve.one;\n      this.t = t && new bn(t, 16);\n      if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n      if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n      if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n      if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);\n      this.zOne = this.z === this.curve.one; // Use extended coordinates\n\n      if (this.curve.extended && !this.t) {\n        this.t = this.x.redMul(this.y);\n        if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());\n      }\n    }\n  }\n\n  inherits_browser(Point$2, base.BasePoint);\n\n  EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n    return Point$2.fromJSON(this, obj);\n  };\n\n  EdwardsCurve.prototype.point = function point(x, y, z, t) {\n    return new Point$2(this, x, y, z, t);\n  };\n\n  Point$2.fromJSON = function fromJSON(curve, obj) {\n    return new Point$2(curve, obj[0], obj[1], obj[2]);\n  };\n\n  Point$2.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return '<EC Point Infinity>';\n    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n  };\n\n  Point$2.prototype.isInfinity = function isInfinity() {\n    // XXX This code assumes that zero is always zero in red\n    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);\n  };\n\n  Point$2.prototype._extDbl = function _extDbl() {\n    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n    //     #doubling-dbl-2008-hwcd\n    // 4M + 4S\n    // A = X1^2\n    var a = this.x.redSqr(); // B = Y1^2\n\n    var b = this.y.redSqr(); // C = 2 * Z1^2\n\n    var c = this.z.redSqr();\n    c = c.redIAdd(c); // D = a * A\n\n    var d = this.curve._mulA(a); // E = (X1 + Y1)^2 - A - B\n\n\n    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b); // G = D + B\n\n    var g = d.redAdd(b); // F = G - C\n\n    var f = g.redSub(c); // H = D - B\n\n    var h = d.redSub(b); // X3 = E * F\n\n    var nx = e.redMul(f); // Y3 = G * H\n\n    var ny = g.redMul(h); // T3 = E * H\n\n    var nt = e.redMul(h); // Z3 = F * G\n\n    var nz = f.redMul(g);\n    return this.curve.point(nx, ny, nz, nt);\n  };\n\n  Point$2.prototype._projDbl = function _projDbl() {\n    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n    //     #doubling-dbl-2008-bbjlp\n    //     #doubling-dbl-2007-bl\n    // and others\n    // Generally 3M + 4S or 2M + 4S\n    // B = (X1 + Y1)^2\n    var b = this.x.redAdd(this.y).redSqr(); // C = X1^2\n\n    var c = this.x.redSqr(); // D = Y1^2\n\n    var d = this.y.redSqr();\n    var nx;\n    var ny;\n    var nz;\n\n    if (this.curve.twisted) {\n      // E = a * C\n      var e = this.curve._mulA(c); // F = E + D\n\n\n      var f = e.redAdd(d);\n\n      if (this.zOne) {\n        // X3 = (B - C - D) * (F - 2)\n        nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two)); // Y3 = F * (E - D)\n\n        ny = f.redMul(e.redSub(d)); // Z3 = F^2 - 2 * F\n\n        nz = f.redSqr().redSub(f).redSub(f);\n      } else {\n        // H = Z1^2\n        var h = this.z.redSqr(); // J = F - 2 * H\n\n        var j = f.redSub(h).redISub(h); // X3 = (B-C-D)*J\n\n        nx = b.redSub(c).redISub(d).redMul(j); // Y3 = F * (E - D)\n\n        ny = f.redMul(e.redSub(d)); // Z3 = F * J\n\n        nz = f.redMul(j);\n      }\n    } else {\n      // E = C + D\n      var e = c.redAdd(d); // H = (c * Z1)^2\n\n      var h = this.curve._mulC(this.z).redSqr(); // J = E - 2 * H\n\n\n      var j = e.redSub(h).redSub(h); // X3 = c * (B - E) * J\n\n      nx = this.curve._mulC(b.redISub(e)).redMul(j); // Y3 = c * E * (C - D)\n\n      ny = this.curve._mulC(e).redMul(c.redISub(d)); // Z3 = E * J\n\n      nz = e.redMul(j);\n    }\n\n    return this.curve.point(nx, ny, nz);\n  };\n\n  Point$2.prototype.dbl = function dbl() {\n    if (this.isInfinity()) return this; // Double in extended coordinates\n\n    if (this.curve.extended) return this._extDbl();else return this._projDbl();\n  };\n\n  Point$2.prototype._extAdd = function _extAdd(p) {\n    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n    //     #addition-add-2008-hwcd-3\n    // 8M\n    // A = (Y1 - X1) * (Y2 - X2)\n    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x)); // B = (Y1 + X1) * (Y2 + X2)\n\n    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x)); // C = T1 * k * T2\n\n    var c = this.t.redMul(this.curve.dd).redMul(p.t); // D = Z1 * 2 * Z2\n\n    var d = this.z.redMul(p.z.redAdd(p.z)); // E = B - A\n\n    var e = b.redSub(a); // F = D - C\n\n    var f = d.redSub(c); // G = D + C\n\n    var g = d.redAdd(c); // H = B + A\n\n    var h = b.redAdd(a); // X3 = E * F\n\n    var nx = e.redMul(f); // Y3 = G * H\n\n    var ny = g.redMul(h); // T3 = E * H\n\n    var nt = e.redMul(h); // Z3 = F * G\n\n    var nz = f.redMul(g);\n    return this.curve.point(nx, ny, nz, nt);\n  };\n\n  Point$2.prototype._projAdd = function _projAdd(p) {\n    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n    //     #addition-add-2008-bbjlp\n    //     #addition-add-2007-bl\n    // 10M + 1S\n    // A = Z1 * Z2\n    var a = this.z.redMul(p.z); // B = A^2\n\n    var b = a.redSqr(); // C = X1 * X2\n\n    var c = this.x.redMul(p.x); // D = Y1 * Y2\n\n    var d = this.y.redMul(p.y); // E = d * C * D\n\n    var e = this.curve.d.redMul(c).redMul(d); // F = B - E\n\n    var f = b.redSub(e); // G = B + E\n\n    var g = b.redAdd(e); // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)\n\n    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);\n    var nx = a.redMul(f).redMul(tmp);\n    var ny;\n    var nz;\n\n    if (this.curve.twisted) {\n      // Y3 = A * G * (D - a * C)\n      ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c))); // Z3 = F * G\n\n      nz = f.redMul(g);\n    } else {\n      // Y3 = A * G * (D - C)\n      ny = a.redMul(g).redMul(d.redSub(c)); // Z3 = c * F * G\n\n      nz = this.curve._mulC(f).redMul(g);\n    }\n\n    return this.curve.point(nx, ny, nz);\n  };\n\n  Point$2.prototype.add = function add(p) {\n    if (this.isInfinity()) return p;\n    if (p.isInfinity()) return this;\n    if (this.curve.extended) return this._extAdd(p);else return this._projAdd(p);\n  };\n\n  Point$2.prototype.mul = function mul(k) {\n    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else return this.curve._wnafMul(this, k);\n  };\n\n  Point$2.prototype.mulAdd = function mulAdd(k1, p, k2) {\n    return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);\n  };\n\n  Point$2.prototype.jmulAdd = function jmulAdd(k1, p, k2) {\n    return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);\n  };\n\n  Point$2.prototype.normalize = function normalize() {\n    if (this.zOne) return this; // Normalize coordinates\n\n    var zi = this.z.redInvm();\n    this.x = this.x.redMul(zi);\n    this.y = this.y.redMul(zi);\n    if (this.t) this.t = this.t.redMul(zi);\n    this.z = this.curve.one;\n    this.zOne = true;\n    return this;\n  };\n\n  Point$2.prototype.neg = function neg() {\n    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());\n  };\n\n  Point$2.prototype.getX = function getX() {\n    this.normalize();\n    return this.x.fromRed();\n  };\n\n  Point$2.prototype.getY = function getY() {\n    this.normalize();\n    return this.y.fromRed();\n  };\n\n  Point$2.prototype.eq = function eq(other) {\n    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;\n  };\n\n  Point$2.prototype.eqXToP = function eqXToP(x) {\n    var rx = x.toRed(this.curve.red).redMul(this.z);\n    if (this.x.cmp(rx) === 0) return true;\n    var xc = x.clone();\n    var t = this.curve.redN.redMul(this.z);\n\n    for (;;) {\n      xc.iadd(this.curve.n);\n      if (xc.cmp(this.curve.p) >= 0) return false;\n      rx.redIAdd(t);\n      if (this.x.cmp(rx) === 0) return true;\n    }\n  }; // Compatibility with BaseCurve\n\n\n  Point$2.prototype.toP = Point$2.prototype.normalize;\n  Point$2.prototype.mixedAdd = Point$2.prototype.add;\n  var curve_1 = createCommonjsModule(function (module, exports) {\n    var curve = exports;\n    curve.base = base;\n    curve.short = short_1;\n    curve.mont = mont;\n    curve.edwards = edwards;\n  });\n  var inherits_1 = inherits_browser;\n\n  function isSurrogatePair(msg, i) {\n    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n      return false;\n    }\n\n    if (i < 0 || i + 1 >= msg.length) {\n      return false;\n    }\n\n    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n  }\n\n  function toArray(msg, enc) {\n    if (Array.isArray(msg)) return msg.slice();\n    if (!msg) return [];\n    var res = [];\n\n    if (typeof msg === 'string') {\n      if (!enc) {\n        // Inspired by stringToUtf8ByteArray() in closure-library by Google\n        // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n        // Apache License 2.0\n        // https://github.com/google/closure-library/blob/master/LICENSE\n        var p = 0;\n\n        for (var i = 0; i < msg.length; i++) {\n          var c = msg.charCodeAt(i);\n\n          if (c < 128) {\n            res[p++] = c;\n          } else if (c < 2048) {\n            res[p++] = c >> 6 | 192;\n            res[p++] = c & 63 | 128;\n          } else if (isSurrogatePair(msg, i)) {\n            c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n            res[p++] = c >> 18 | 240;\n            res[p++] = c >> 12 & 63 | 128;\n            res[p++] = c >> 6 & 63 | 128;\n            res[p++] = c & 63 | 128;\n          } else {\n            res[p++] = c >> 12 | 224;\n            res[p++] = c >> 6 & 63 | 128;\n            res[p++] = c & 63 | 128;\n          }\n        }\n      } else if (enc === 'hex') {\n        msg = msg.replace(/[^a-z0-9]+/ig, '');\n        if (msg.length % 2 !== 0) msg = '0' + msg;\n\n        for (i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));\n      }\n    } else {\n      for (i = 0; i < msg.length; i++) res[i] = msg[i] | 0;\n    }\n\n    return res;\n  }\n\n  var toArray_1 = toArray;\n\n  function toHex(msg) {\n    var res = '';\n\n    for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));\n\n    return res;\n  }\n\n  var toHex_1 = toHex;\n\n  function htonl(w) {\n    var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;\n    return res >>> 0;\n  }\n\n  var htonl_1 = htonl;\n\n  function toHex32(msg, endian) {\n    var res = '';\n\n    for (var i = 0; i < msg.length; i++) {\n      var w = msg[i];\n      if (endian === 'little') w = htonl(w);\n      res += zero8(w.toString(16));\n    }\n\n    return res;\n  }\n\n  var toHex32_1 = toHex32;\n\n  function zero2(word) {\n    if (word.length === 1) return '0' + word;else return word;\n  }\n\n  var zero2_1 = zero2;\n\n  function zero8(word) {\n    if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;\n  }\n\n  var zero8_1 = zero8;\n\n  function join32(msg, start, end, endian) {\n    var len = end - start;\n    minimalisticAssert(len % 4 === 0);\n    var res = new Array(len / 4);\n\n    for (var i = 0, k = start; i < res.length; i++, k += 4) {\n      var w;\n      if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n      res[i] = w >>> 0;\n    }\n\n    return res;\n  }\n\n  var join32_1 = join32;\n\n  function split32(msg, endian) {\n    var res = new Array(msg.length * 4);\n\n    for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n      var m = msg[i];\n\n      if (endian === 'big') {\n        res[k] = m >>> 24;\n        res[k + 1] = m >>> 16 & 0xff;\n        res[k + 2] = m >>> 8 & 0xff;\n        res[k + 3] = m & 0xff;\n      } else {\n        res[k + 3] = m >>> 24;\n        res[k + 2] = m >>> 16 & 0xff;\n        res[k + 1] = m >>> 8 & 0xff;\n        res[k] = m & 0xff;\n      }\n    }\n\n    return res;\n  }\n\n  var split32_1 = split32;\n\n  function rotr32(w, b) {\n    return w >>> b | w << 32 - b;\n  }\n\n  var rotr32_1 = rotr32;\n\n  function rotl32(w, b) {\n    return w << b | w >>> 32 - b;\n  }\n\n  var rotl32_1 = rotl32;\n\n  function sum32(a, b) {\n    return a + b >>> 0;\n  }\n\n  var sum32_1 = sum32;\n\n  function sum32_3(a, b, c) {\n    return a + b + c >>> 0;\n  }\n\n  var sum32_3_1 = sum32_3;\n\n  function sum32_4(a, b, c, d) {\n    return a + b + c + d >>> 0;\n  }\n\n  var sum32_4_1 = sum32_4;\n\n  function sum32_5(a, b, c, d, e) {\n    return a + b + c + d + e >>> 0;\n  }\n\n  var sum32_5_1 = sum32_5;\n\n  function sum64(buf, pos, ah, al) {\n    var bh = buf[pos];\n    var bl = buf[pos + 1];\n    var lo = al + bl >>> 0;\n    var hi = (lo < al ? 1 : 0) + ah + bh;\n    buf[pos] = hi >>> 0;\n    buf[pos + 1] = lo;\n  }\n\n  var sum64_1 = sum64;\n\n  function sum64_hi(ah, al, bh, bl) {\n    var lo = al + bl >>> 0;\n    var hi = (lo < al ? 1 : 0) + ah + bh;\n    return hi >>> 0;\n  }\n\n  var sum64_hi_1 = sum64_hi;\n\n  function sum64_lo(ah, al, bh, bl) {\n    var lo = al + bl;\n    return lo >>> 0;\n  }\n\n  var sum64_lo_1 = sum64_lo;\n\n  function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n    var carry = 0;\n    var lo = al;\n    lo = lo + bl >>> 0;\n    carry += lo < al ? 1 : 0;\n    lo = lo + cl >>> 0;\n    carry += lo < cl ? 1 : 0;\n    lo = lo + dl >>> 0;\n    carry += lo < dl ? 1 : 0;\n    var hi = ah + bh + ch + dh + carry;\n    return hi >>> 0;\n  }\n\n  var sum64_4_hi_1 = sum64_4_hi;\n\n  function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n    var lo = al + bl + cl + dl;\n    return lo >>> 0;\n  }\n\n  var sum64_4_lo_1 = sum64_4_lo;\n\n  function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n    var carry = 0;\n    var lo = al;\n    lo = lo + bl >>> 0;\n    carry += lo < al ? 1 : 0;\n    lo = lo + cl >>> 0;\n    carry += lo < cl ? 1 : 0;\n    lo = lo + dl >>> 0;\n    carry += lo < dl ? 1 : 0;\n    lo = lo + el >>> 0;\n    carry += lo < el ? 1 : 0;\n    var hi = ah + bh + ch + dh + eh + carry;\n    return hi >>> 0;\n  }\n\n  var sum64_5_hi_1 = sum64_5_hi;\n\n  function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n    var lo = al + bl + cl + dl + el;\n    return lo >>> 0;\n  }\n\n  var sum64_5_lo_1 = sum64_5_lo;\n\n  function rotr64_hi(ah, al, num) {\n    var r = al << 32 - num | ah >>> num;\n    return r >>> 0;\n  }\n\n  var rotr64_hi_1 = rotr64_hi;\n\n  function rotr64_lo(ah, al, num) {\n    var r = ah << 32 - num | al >>> num;\n    return r >>> 0;\n  }\n\n  var rotr64_lo_1 = rotr64_lo;\n\n  function shr64_hi(ah, al, num) {\n    return ah >>> num;\n  }\n\n  var shr64_hi_1 = shr64_hi;\n\n  function shr64_lo(ah, al, num) {\n    var r = ah << 32 - num | al >>> num;\n    return r >>> 0;\n  }\n\n  var shr64_lo_1 = shr64_lo;\n  var utils = {\n    inherits: inherits_1,\n    toArray: toArray_1,\n    toHex: toHex_1,\n    htonl: htonl_1,\n    toHex32: toHex32_1,\n    zero2: zero2_1,\n    zero8: zero8_1,\n    join32: join32_1,\n    split32: split32_1,\n    rotr32: rotr32_1,\n    rotl32: rotl32_1,\n    sum32: sum32_1,\n    sum32_3: sum32_3_1,\n    sum32_4: sum32_4_1,\n    sum32_5: sum32_5_1,\n    sum64: sum64_1,\n    sum64_hi: sum64_hi_1,\n    sum64_lo: sum64_lo_1,\n    sum64_4_hi: sum64_4_hi_1,\n    sum64_4_lo: sum64_4_lo_1,\n    sum64_5_hi: sum64_5_hi_1,\n    sum64_5_lo: sum64_5_lo_1,\n    rotr64_hi: rotr64_hi_1,\n    rotr64_lo: rotr64_lo_1,\n    shr64_hi: shr64_hi_1,\n    shr64_lo: shr64_lo_1\n  };\n\n  function BlockHash() {\n    this.pending = null;\n    this.pendingTotal = 0;\n    this.blockSize = this.constructor.blockSize;\n    this.outSize = this.constructor.outSize;\n    this.hmacStrength = this.constructor.hmacStrength;\n    this.padLength = this.constructor.padLength / 8;\n    this.endian = 'big';\n    this._delta8 = this.blockSize / 8;\n    this._delta32 = this.blockSize / 32;\n  }\n\n  var BlockHash_1 = BlockHash;\n\n  BlockHash.prototype.update = function update(msg, enc) {\n    // Convert message to array, pad it, and join into 32bit blocks\n    msg = utils.toArray(msg, enc);\n    if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);\n    this.pendingTotal += msg.length; // Enough data, try updating\n\n    if (this.pending.length >= this._delta8) {\n      msg = this.pending; // Process pending data in blocks\n\n      var r = msg.length % this._delta8;\n      this.pending = msg.slice(msg.length - r, msg.length);\n      if (this.pending.length === 0) this.pending = null;\n      msg = utils.join32(msg, 0, msg.length - r, this.endian);\n\n      for (var i = 0; i < msg.length; i += this._delta32) this._update(msg, i, i + this._delta32);\n    }\n\n    return this;\n  };\n\n  BlockHash.prototype.digest = function digest(enc) {\n    this.update(this._pad());\n    minimalisticAssert(this.pending === null);\n    return this._digest(enc);\n  };\n\n  BlockHash.prototype._pad = function pad() {\n    var len = this.pendingTotal;\n    var bytes = this._delta8;\n    var k = bytes - (len + this.padLength) % bytes;\n    var res = new Array(k + this.padLength);\n    res[0] = 0x80;\n\n    for (var i = 1; i < k; i++) res[i] = 0; // Append length\n\n\n    len <<= 3;\n\n    if (this.endian === 'big') {\n      for (var t = 8; t < this.padLength; t++) res[i++] = 0;\n\n      res[i++] = 0;\n      res[i++] = 0;\n      res[i++] = 0;\n      res[i++] = 0;\n      res[i++] = len >>> 24 & 0xff;\n      res[i++] = len >>> 16 & 0xff;\n      res[i++] = len >>> 8 & 0xff;\n      res[i++] = len & 0xff;\n    } else {\n      res[i++] = len & 0xff;\n      res[i++] = len >>> 8 & 0xff;\n      res[i++] = len >>> 16 & 0xff;\n      res[i++] = len >>> 24 & 0xff;\n      res[i++] = 0;\n      res[i++] = 0;\n      res[i++] = 0;\n      res[i++] = 0;\n\n      for (t = 8; t < this.padLength; t++) res[i++] = 0;\n    }\n\n    return res;\n  };\n\n  var common = {\n    BlockHash: BlockHash_1\n  };\n  var rotr32$1 = utils.rotr32;\n\n  function ft_1(s, x, y, z) {\n    if (s === 0) return ch32(x, y, z);\n    if (s === 1 || s === 3) return p32(x, y, z);\n    if (s === 2) return maj32(x, y, z);\n  }\n\n  var ft_1_1 = ft_1;\n\n  function ch32(x, y, z) {\n    return x & y ^ ~x & z;\n  }\n\n  var ch32_1 = ch32;\n\n  function maj32(x, y, z) {\n    return x & y ^ x & z ^ y & z;\n  }\n\n  var maj32_1 = maj32;\n\n  function p32(x, y, z) {\n    return x ^ y ^ z;\n  }\n\n  var p32_1 = p32;\n\n  function s0_256(x) {\n    return rotr32$1(x, 2) ^ rotr32$1(x, 13) ^ rotr32$1(x, 22);\n  }\n\n  var s0_256_1 = s0_256;\n\n  function s1_256(x) {\n    return rotr32$1(x, 6) ^ rotr32$1(x, 11) ^ rotr32$1(x, 25);\n  }\n\n  var s1_256_1 = s1_256;\n\n  function g0_256(x) {\n    return rotr32$1(x, 7) ^ rotr32$1(x, 18) ^ x >>> 3;\n  }\n\n  var g0_256_1 = g0_256;\n\n  function g1_256(x) {\n    return rotr32$1(x, 17) ^ rotr32$1(x, 19) ^ x >>> 10;\n  }\n\n  var g1_256_1 = g1_256;\n  var common$1 = {\n    ft_1: ft_1_1,\n    ch32: ch32_1,\n    maj32: maj32_1,\n    p32: p32_1,\n    s0_256: s0_256_1,\n    s1_256: s1_256_1,\n    g0_256: g0_256_1,\n    g1_256: g1_256_1\n  };\n  var rotl32$1 = utils.rotl32;\n  var sum32$1 = utils.sum32;\n  var sum32_5$1 = utils.sum32_5;\n  var ft_1$1 = common$1.ft_1;\n  var BlockHash$1 = common.BlockHash;\n  var sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];\n\n  function SHA1() {\n    if (!(this instanceof SHA1)) return new SHA1();\n    BlockHash$1.call(this);\n    this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n    this.W = new Array(80);\n  }\n\n  utils.inherits(SHA1, BlockHash$1);\n  var _1 = SHA1;\n  SHA1.blockSize = 512;\n  SHA1.outSize = 160;\n  SHA1.hmacStrength = 80;\n  SHA1.padLength = 64;\n\n  SHA1.prototype._update = function _update(msg, start) {\n    var W = this.W;\n\n    for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n\n    for (; i < W.length; i++) W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n    var a = this.h[0];\n    var b = this.h[1];\n    var c = this.h[2];\n    var d = this.h[3];\n    var e = this.h[4];\n\n    for (i = 0; i < W.length; i++) {\n      var s = ~~(i / 20);\n      var t = sum32_5$1(rotl32$1(a, 5), ft_1$1(s, b, c, d), e, W[i], sha1_K[s]);\n      e = d;\n      d = c;\n      c = rotl32$1(b, 30);\n      b = a;\n      a = t;\n    }\n\n    this.h[0] = sum32$1(this.h[0], a);\n    this.h[1] = sum32$1(this.h[1], b);\n    this.h[2] = sum32$1(this.h[2], c);\n    this.h[3] = sum32$1(this.h[3], d);\n    this.h[4] = sum32$1(this.h[4], e);\n  };\n\n  SHA1.prototype._digest = function digest(enc) {\n    if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');\n  };\n\n  var sum32$2 = utils.sum32;\n  var sum32_4$1 = utils.sum32_4;\n  var sum32_5$2 = utils.sum32_5;\n  var ch32$1 = common$1.ch32;\n  var maj32$1 = common$1.maj32;\n  var s0_256$1 = common$1.s0_256;\n  var s1_256$1 = common$1.s1_256;\n  var g0_256$1 = common$1.g0_256;\n  var g1_256$1 = common$1.g1_256;\n  var BlockHash$2 = common.BlockHash;\n  var sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\n  function SHA256() {\n    if (!(this instanceof SHA256)) return new SHA256();\n    BlockHash$2.call(this);\n    this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n    this.k = sha256_K;\n    this.W = new Array(64);\n  }\n\n  utils.inherits(SHA256, BlockHash$2);\n  var _256 = SHA256;\n  SHA256.blockSize = 512;\n  SHA256.outSize = 256;\n  SHA256.hmacStrength = 192;\n  SHA256.padLength = 64;\n\n  SHA256.prototype._update = function _update(msg, start) {\n    var W = this.W;\n\n    for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n\n    for (; i < W.length; i++) W[i] = sum32_4$1(g1_256$1(W[i - 2]), W[i - 7], g0_256$1(W[i - 15]), W[i - 16]);\n\n    var a = this.h[0];\n    var b = this.h[1];\n    var c = this.h[2];\n    var d = this.h[3];\n    var e = this.h[4];\n    var f = this.h[5];\n    var g = this.h[6];\n    var h = this.h[7];\n    minimalisticAssert(this.k.length === W.length);\n\n    for (i = 0; i < W.length; i++) {\n      var T1 = sum32_5$2(h, s1_256$1(e), ch32$1(e, f, g), this.k[i], W[i]);\n      var T2 = sum32$2(s0_256$1(a), maj32$1(a, b, c));\n      h = g;\n      g = f;\n      f = e;\n      e = sum32$2(d, T1);\n      d = c;\n      c = b;\n      b = a;\n      a = sum32$2(T1, T2);\n    }\n\n    this.h[0] = sum32$2(this.h[0], a);\n    this.h[1] = sum32$2(this.h[1], b);\n    this.h[2] = sum32$2(this.h[2], c);\n    this.h[3] = sum32$2(this.h[3], d);\n    this.h[4] = sum32$2(this.h[4], e);\n    this.h[5] = sum32$2(this.h[5], f);\n    this.h[6] = sum32$2(this.h[6], g);\n    this.h[7] = sum32$2(this.h[7], h);\n  };\n\n  SHA256.prototype._digest = function digest(enc) {\n    if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');\n  };\n\n  function SHA224() {\n    if (!(this instanceof SHA224)) return new SHA224();\n\n    _256.call(this);\n\n    this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];\n  }\n\n  utils.inherits(SHA224, _256);\n  var _224 = SHA224;\n  SHA224.blockSize = 512;\n  SHA224.outSize = 224;\n  SHA224.hmacStrength = 192;\n  SHA224.padLength = 64;\n\n  SHA224.prototype._digest = function digest(enc) {\n    // Just truncate output\n    if (enc === 'hex') return utils.toHex32(this.h.slice(0, 7), 'big');else return utils.split32(this.h.slice(0, 7), 'big');\n  };\n\n  var rotr64_hi$1 = utils.rotr64_hi;\n  var rotr64_lo$1 = utils.rotr64_lo;\n  var shr64_hi$1 = utils.shr64_hi;\n  var shr64_lo$1 = utils.shr64_lo;\n  var sum64$1 = utils.sum64;\n  var sum64_hi$1 = utils.sum64_hi;\n  var sum64_lo$1 = utils.sum64_lo;\n  var sum64_4_hi$1 = utils.sum64_4_hi;\n  var sum64_4_lo$1 = utils.sum64_4_lo;\n  var sum64_5_hi$1 = utils.sum64_5_hi;\n  var sum64_5_lo$1 = utils.sum64_5_lo;\n  var BlockHash$3 = common.BlockHash;\n  var sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];\n\n  function SHA512() {\n    if (!(this instanceof SHA512)) return new SHA512();\n    BlockHash$3.call(this);\n    this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];\n    this.k = sha512_K;\n    this.W = new Array(160);\n  }\n\n  utils.inherits(SHA512, BlockHash$3);\n  var _512 = SHA512;\n  SHA512.blockSize = 1024;\n  SHA512.outSize = 512;\n  SHA512.hmacStrength = 192;\n  SHA512.padLength = 128;\n\n  SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n    var W = this.W; // 32 x 32bit words\n\n    for (var i = 0; i < 32; i++) W[i] = msg[start + i];\n\n    for (; i < W.length; i += 2) {\n      var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2\n\n      var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n      var c1_hi = W[i - 14]; // i - 7\n\n      var c1_lo = W[i - 13];\n      var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15\n\n      var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n      var c3_hi = W[i - 32]; // i - 16\n\n      var c3_lo = W[i - 31];\n      W[i] = sum64_4_hi$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n      W[i + 1] = sum64_4_lo$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n    }\n  };\n\n  SHA512.prototype._update = function _update(msg, start) {\n    this._prepareBlock(msg, start);\n\n    var W = this.W;\n    var ah = this.h[0];\n    var al = this.h[1];\n    var bh = this.h[2];\n    var bl = this.h[3];\n    var ch = this.h[4];\n    var cl = this.h[5];\n    var dh = this.h[6];\n    var dl = this.h[7];\n    var eh = this.h[8];\n    var el = this.h[9];\n    var fh = this.h[10];\n    var fl = this.h[11];\n    var gh = this.h[12];\n    var gl = this.h[13];\n    var hh = this.h[14];\n    var hl = this.h[15];\n    minimalisticAssert(this.k.length === W.length);\n\n    for (var i = 0; i < W.length; i += 2) {\n      var c0_hi = hh;\n      var c0_lo = hl;\n      var c1_hi = s1_512_hi(eh, el);\n      var c1_lo = s1_512_lo(eh, el);\n      var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n      var c3_hi = this.k[i];\n      var c3_lo = this.k[i + 1];\n      var c4_hi = W[i];\n      var c4_lo = W[i + 1];\n      var T1_hi = sum64_5_hi$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n      var T1_lo = sum64_5_lo$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n      c0_hi = s0_512_hi(ah, al);\n      c0_lo = s0_512_lo(ah, al);\n      c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n      c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n      var T2_hi = sum64_hi$1(c0_hi, c0_lo, c1_hi, c1_lo);\n      var T2_lo = sum64_lo$1(c0_hi, c0_lo, c1_hi, c1_lo);\n      hh = gh;\n      hl = gl;\n      gh = fh;\n      gl = fl;\n      fh = eh;\n      fl = el;\n      eh = sum64_hi$1(dh, dl, T1_hi, T1_lo);\n      el = sum64_lo$1(dl, dl, T1_hi, T1_lo);\n      dh = ch;\n      dl = cl;\n      ch = bh;\n      cl = bl;\n      bh = ah;\n      bl = al;\n      ah = sum64_hi$1(T1_hi, T1_lo, T2_hi, T2_lo);\n      al = sum64_lo$1(T1_hi, T1_lo, T2_hi, T2_lo);\n    }\n\n    sum64$1(this.h, 0, ah, al);\n    sum64$1(this.h, 2, bh, bl);\n    sum64$1(this.h, 4, ch, cl);\n    sum64$1(this.h, 6, dh, dl);\n    sum64$1(this.h, 8, eh, el);\n    sum64$1(this.h, 10, fh, fl);\n    sum64$1(this.h, 12, gh, gl);\n    sum64$1(this.h, 14, hh, hl);\n  };\n\n  SHA512.prototype._digest = function digest(enc) {\n    if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');\n  };\n\n  function ch64_hi(xh, xl, yh, yl, zh) {\n    var r = xh & yh ^ ~xh & zh;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function ch64_lo(xh, xl, yh, yl, zh, zl) {\n    var r = xl & yl ^ ~xl & zl;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function maj64_hi(xh, xl, yh, yl, zh) {\n    var r = xh & yh ^ xh & zh ^ yh & zh;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function maj64_lo(xh, xl, yh, yl, zh, zl) {\n    var r = xl & yl ^ xl & zl ^ yl & zl;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function s0_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi$1(xh, xl, 28);\n    var c1_hi = rotr64_hi$1(xl, xh, 2); // 34\n\n    var c2_hi = rotr64_hi$1(xl, xh, 7); // 39\n\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function s0_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo$1(xh, xl, 28);\n    var c1_lo = rotr64_lo$1(xl, xh, 2); // 34\n\n    var c2_lo = rotr64_lo$1(xl, xh, 7); // 39\n\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function s1_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi$1(xh, xl, 14);\n    var c1_hi = rotr64_hi$1(xh, xl, 18);\n    var c2_hi = rotr64_hi$1(xl, xh, 9); // 41\n\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function s1_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo$1(xh, xl, 14);\n    var c1_lo = rotr64_lo$1(xh, xl, 18);\n    var c2_lo = rotr64_lo$1(xl, xh, 9); // 41\n\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function g0_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi$1(xh, xl, 1);\n    var c1_hi = rotr64_hi$1(xh, xl, 8);\n    var c2_hi = shr64_hi$1(xh, xl, 7);\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function g0_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo$1(xh, xl, 1);\n    var c1_lo = rotr64_lo$1(xh, xl, 8);\n    var c2_lo = shr64_lo$1(xh, xl, 7);\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function g1_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi$1(xh, xl, 19);\n    var c1_hi = rotr64_hi$1(xl, xh, 29); // 61\n\n    var c2_hi = shr64_hi$1(xh, xl, 6);\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function g1_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo$1(xh, xl, 19);\n    var c1_lo = rotr64_lo$1(xl, xh, 29); // 61\n\n    var c2_lo = shr64_lo$1(xh, xl, 6);\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function SHA384() {\n    if (!(this instanceof SHA384)) return new SHA384();\n\n    _512.call(this);\n\n    this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];\n  }\n\n  utils.inherits(SHA384, _512);\n  var _384 = SHA384;\n  SHA384.blockSize = 1024;\n  SHA384.outSize = 384;\n  SHA384.hmacStrength = 192;\n  SHA384.padLength = 128;\n\n  SHA384.prototype._digest = function digest(enc) {\n    if (enc === 'hex') return utils.toHex32(this.h.slice(0, 12), 'big');else return utils.split32(this.h.slice(0, 12), 'big');\n  };\n\n  var sha1 = _1;\n  var sha224 = _224;\n  var sha256 = _256;\n  var sha384 = _384;\n  var sha512 = _512;\n  var sha = {\n    sha1: sha1,\n    sha224: sha224,\n    sha256: sha256,\n    sha384: sha384,\n    sha512: sha512\n  };\n  var rotl32$2 = utils.rotl32;\n  var sum32$3 = utils.sum32;\n  var sum32_3$1 = utils.sum32_3;\n  var sum32_4$2 = utils.sum32_4;\n  var BlockHash$4 = common.BlockHash;\n\n  function RIPEMD160() {\n    if (!(this instanceof RIPEMD160)) return new RIPEMD160();\n    BlockHash$4.call(this);\n    this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n    this.endian = 'little';\n  }\n\n  utils.inherits(RIPEMD160, BlockHash$4);\n  var ripemd160 = RIPEMD160;\n  RIPEMD160.blockSize = 512;\n  RIPEMD160.outSize = 160;\n  RIPEMD160.hmacStrength = 192;\n  RIPEMD160.padLength = 64;\n\n  RIPEMD160.prototype._update = function update(msg, start) {\n    var A = this.h[0];\n    var B = this.h[1];\n    var C = this.h[2];\n    var D = this.h[3];\n    var E = this.h[4];\n    var Ah = A;\n    var Bh = B;\n    var Ch = C;\n    var Dh = D;\n    var Eh = E;\n\n    for (var j = 0; j < 80; j++) {\n      var T = sum32$3(rotl32$2(sum32_4$2(A, f(j, B, C, D), msg[r$1[j] + start], K(j)), s[j]), E);\n      A = E;\n      E = D;\n      D = rotl32$2(C, 10);\n      C = B;\n      B = T;\n      T = sum32$3(rotl32$2(sum32_4$2(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);\n      Ah = Eh;\n      Eh = Dh;\n      Dh = rotl32$2(Ch, 10);\n      Ch = Bh;\n      Bh = T;\n    }\n\n    T = sum32_3$1(this.h[1], C, Dh);\n    this.h[1] = sum32_3$1(this.h[2], D, Eh);\n    this.h[2] = sum32_3$1(this.h[3], E, Ah);\n    this.h[3] = sum32_3$1(this.h[4], A, Bh);\n    this.h[4] = sum32_3$1(this.h[0], B, Ch);\n    this.h[0] = T;\n  };\n\n  RIPEMD160.prototype._digest = function digest(enc) {\n    if (enc === 'hex') return utils.toHex32(this.h, 'little');else return utils.split32(this.h, 'little');\n  };\n\n  function f(j, x, y, z) {\n    if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);\n  }\n\n  function K(j) {\n    if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;\n  }\n\n  function Kh(j) {\n    if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;\n  }\n\n  var r$1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\n  var rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];\n  var s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\n  var sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];\n  var ripemd = {\n    ripemd160: ripemd160\n  };\n\n  function Hmac(hash, key, enc) {\n    if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);\n    this.Hash = hash;\n    this.blockSize = hash.blockSize / 8;\n    this.outSize = hash.outSize / 8;\n    this.inner = null;\n    this.outer = null;\n\n    this._init(utils.toArray(key, enc));\n  }\n\n  var hmac = Hmac;\n\n  Hmac.prototype._init = function init(key) {\n    // Shorten key, if needed\n    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();\n    minimalisticAssert(key.length <= this.blockSize); // Add padding to key\n\n    for (var i = key.length; i < this.blockSize; i++) key.push(0);\n\n    for (i = 0; i < key.length; i++) key[i] ^= 0x36;\n\n    this.inner = new this.Hash().update(key); // 0x36 ^ 0x5c = 0x6a\n\n    for (i = 0; i < key.length; i++) key[i] ^= 0x6a;\n\n    this.outer = new this.Hash().update(key);\n  };\n\n  Hmac.prototype.update = function update(msg, enc) {\n    this.inner.update(msg, enc);\n    return this;\n  };\n\n  Hmac.prototype.digest = function digest(enc) {\n    this.outer.update(this.inner.digest());\n    return this.outer.digest(enc);\n  };\n\n  var hash_1 = createCommonjsModule(function (module, exports) {\n    var hash = exports;\n    hash.utils = utils;\n    hash.common = common;\n    hash.sha = sha;\n    hash.ripemd = ripemd;\n    hash.hmac = hmac; // Proxy hash functions to the main object\n\n    hash.sha1 = hash.sha.sha1;\n    hash.sha256 = hash.sha.sha256;\n    hash.sha224 = hash.sha.sha224;\n    hash.sha384 = hash.sha.sha384;\n    hash.sha512 = hash.sha.sha512;\n    hash.ripemd160 = hash.ripemd.ripemd160;\n  });\n  var secp256k1 = {\n    doubles: {\n      step: 4,\n      points: [['e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a', 'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'], ['8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508', '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'], ['175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739', 'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'], ['363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640', '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'], ['8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c', '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'], ['723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda', '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'], ['eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa', '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'], ['100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0', 'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'], ['e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d', '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'], ['feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d', 'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'], ['da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1', '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'], ['53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0', '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'], ['8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047', '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'], ['385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862', '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'], ['6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7', '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'], ['3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd', '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'], ['85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83', '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'], ['948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a', '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'], ['6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8', 'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'], ['e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d', '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'], ['e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725', '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'], ['213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754', '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'], ['4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c', '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'], ['fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6', '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'], ['76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39', 'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'], ['c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891', '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'], ['d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b', 'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'], ['b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03', '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'], ['e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d', 'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'], ['a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070', '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'], ['90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4', 'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'], ['8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da', '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'], ['e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11', '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'], ['8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e', 'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'], ['e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41', '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'], ['b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef', '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'], ['d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8', 'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'], ['324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d', '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'], ['4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96', '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'], ['9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd', 'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'], ['6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5', '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'], ['a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266', '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'], ['7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71', '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'], ['928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac', 'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'], ['85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751', '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'], ['ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e', '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'], ['827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241', 'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'], ['eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3', 'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'], ['e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f', '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'], ['1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19', 'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'], ['146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be', 'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'], ['fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9', '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'], ['da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2', '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'], ['a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13', '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'], ['174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c', 'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'], ['959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba', '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'], ['d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151', 'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'], ['64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073', 'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'], ['8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458', '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'], ['13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b', '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'], ['bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366', 'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'], ['8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa', '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'], ['8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0', '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'], ['dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787', '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'], ['f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e', 'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82']]\n    },\n    naf: {\n      wnd: 7,\n      points: [['f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9', '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'], ['2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4', 'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'], ['5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc', '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'], ['acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe', 'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'], ['774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb', 'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'], ['f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8', 'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'], ['d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e', '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'], ['defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34', '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'], ['2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c', '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'], ['352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5', '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'], ['2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f', '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'], ['9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714', '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'], ['daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729', 'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'], ['c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db', '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'], ['6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4', 'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'], ['1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5', 'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'], ['605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479', '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'], ['62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d', '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'], ['80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f', '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'], ['7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb', 'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'], ['d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9', 'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'], ['49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963', '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'], ['77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74', '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'], ['f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530', 'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'], ['463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b', '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'], ['f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247', 'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'], ['caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1', 'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'], ['2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120', '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'], ['7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435', '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'], ['754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18', '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'], ['e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8', '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'], ['186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb', '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'], ['df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f', '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'], ['5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143', 'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'], ['290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba', 'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'], ['af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45', 'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'], ['766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a', '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'], ['59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e', 'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'], ['f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8', 'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'], ['7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c', '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'], ['948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519', 'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'], ['7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab', '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'], ['3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca', 'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'], ['d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf', '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'], ['1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610', '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'], ['733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4', 'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'], ['15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c', 'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'], ['a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940', 'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'], ['e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980', 'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'], ['311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3', '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'], ['34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf', '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'], ['f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63', '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'], ['d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448', 'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'], ['32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf', '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'], ['7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5', '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'], ['ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6', '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'], ['16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5', '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'], ['eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99', 'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'], ['78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51', 'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'], ['494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5', '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'], ['a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5', '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'], ['c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997', '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'], ['841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881', '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'], ['5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5', '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'], ['36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66', 'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'], ['336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726', 'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'], ['8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede', '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'], ['1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94', '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'], ['85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31', '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'], ['29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51', 'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'], ['a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252', 'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'], ['4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5', 'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'], ['d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b', '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'], ['ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4', '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'], ['af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f', '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'], ['e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889', '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'], ['591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246', 'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'], ['11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984', '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'], ['3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a', 'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'], ['cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030', 'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'], ['c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197', '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'], ['c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593', 'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'], ['a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef', '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'], ['347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38', '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'], ['da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a', '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'], ['c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111', '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'], ['4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502', '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'], ['3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea', 'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'], ['cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26', '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'], ['b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986', '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'], ['d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e', '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'], ['48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4', '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'], ['dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda', 'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'], ['6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859', 'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'], ['e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f', 'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'], ['eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c', '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'], ['13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942', 'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'], ['ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a', '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'], ['b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80', '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'], ['ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d', '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'], ['8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1', 'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'], ['52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63', 'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'], ['e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352', '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'], ['7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193', 'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'], ['5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00', '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'], ['32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58', 'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'], ['e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7', 'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'], ['8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8', 'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'], ['4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e', '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'], ['3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d', 'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'], ['674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b', '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'], ['d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f', 'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'], ['30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6', '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'], ['be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297', '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'], ['93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a', '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'], ['b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c', 'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'], ['d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52', '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'], ['d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb', 'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'], ['463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065', 'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'], ['7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917', '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'], ['74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9', 'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'], ['30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3', '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'], ['9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57', '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'], ['176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66', 'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'], ['75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8', '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'], ['809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721', '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'], ['1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180', '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9']]\n    }\n  };\n  var curves_1 = createCommonjsModule(function (module, exports) {\n    var curves = exports;\n    var assert = utils_1$1.assert;\n\n    function PresetCurve(options) {\n      if (options.type === 'short') this.curve = new curve_1.short(options);else if (options.type === 'edwards') this.curve = new curve_1.edwards(options);else this.curve = new curve_1.mont(options);\n      this.g = this.curve.g;\n      this.n = this.curve.n;\n      this.hash = options.hash;\n      assert(this.g.validate(), 'Invalid curve');\n      assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');\n    }\n\n    curves.PresetCurve = PresetCurve;\n\n    function defineCurve(name, options) {\n      Object.defineProperty(curves, name, {\n        configurable: true,\n        enumerable: true,\n        get: function () {\n          var curve = new PresetCurve(options);\n          Object.defineProperty(curves, name, {\n            configurable: true,\n            enumerable: true,\n            value: curve\n          });\n          return curve;\n        }\n      });\n    }\n\n    defineCurve('p192', {\n      type: 'short',\n      prime: 'p192',\n      p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',\n      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',\n      b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',\n      n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',\n      hash: hash_1.sha256,\n      gRed: false,\n      g: ['188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012', '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811']\n    });\n    defineCurve('p224', {\n      type: 'short',\n      prime: 'p224',\n      p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',\n      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',\n      b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',\n      n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',\n      hash: hash_1.sha256,\n      gRed: false,\n      g: ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21', 'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34']\n    });\n    defineCurve('p256', {\n      type: 'short',\n      prime: null,\n      p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',\n      a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',\n      b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',\n      n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',\n      hash: hash_1.sha256,\n      gRed: false,\n      g: ['6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296', '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5']\n    });\n    defineCurve('p384', {\n      type: 'short',\n      prime: null,\n      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 ffffffff',\n      a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 fffffffc',\n      b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' + '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',\n      n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' + 'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',\n      hash: hash_1.sha384,\n      gRed: false,\n      g: ['aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' + '5502f25d bf55296c 3a545e38 72760ab7', '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' + '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f']\n    });\n    defineCurve('p521', {\n      type: 'short',\n      prime: null,\n      p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff',\n      a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff fffffffc',\n      b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' + '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' + '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',\n      n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' + 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',\n      hash: hash_1.sha512,\n      gRed: false,\n      g: ['000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' + '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' + 'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66', '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' + '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' + '3fad0761 353c7086 a272c240 88be9476 9fd16650']\n    });\n    defineCurve('curve25519', {\n      type: 'mont',\n      prime: 'p25519',\n      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n      a: '76d06',\n      b: '1',\n      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n      hash: hash_1.sha256,\n      gRed: false,\n      g: ['9']\n    });\n    defineCurve('ed25519', {\n      type: 'edwards',\n      prime: 'p25519',\n      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n      a: '-1',\n      c: '1',\n      // -121665 * (121666^(-1)) (mod P)\n      d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',\n      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n      hash: hash_1.sha256,\n      gRed: false,\n      g: ['216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a', // 4/5\n      '6666666666666666666666666666666666666666666666666666666666666658']\n    });\n    var pre;\n\n    try {\n      pre = secp256k1;\n    } catch (e) {\n      pre = undefined;\n    }\n\n    defineCurve('secp256k1', {\n      type: 'short',\n      prime: 'k256',\n      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',\n      a: '0',\n      b: '7',\n      n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',\n      h: '1',\n      hash: hash_1.sha256,\n      // Precomputed endomorphism\n      beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',\n      lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',\n      basis: [{\n        a: '3086d221a7d46bcde86c90e49284eb15',\n        b: '-e4437ed6010e88286f547fa90abfe4c3'\n      }, {\n        a: '114ca50f7a8e2f3f657c1108d9d44cfd8',\n        b: '3086d221a7d46bcde86c90e49284eb15'\n      }],\n      gRed: false,\n      g: ['79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', pre]\n    });\n  });\n\n  function HmacDRBG(options) {\n    if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);\n    this.hash = options.hash;\n    this.predResist = !!options.predResist;\n    this.outLen = this.hash.outSize;\n    this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n    this._reseed = null;\n    this.reseedInterval = null;\n    this.K = null;\n    this.V = null;\n    var entropy = utils_1.toArray(options.entropy, options.entropyEnc || 'hex');\n    var nonce = utils_1.toArray(options.nonce, options.nonceEnc || 'hex');\n    var pers = utils_1.toArray(options.pers, options.persEnc || 'hex');\n    minimalisticAssert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n    this._init(entropy, nonce, pers);\n  }\n\n  var hmacDrbg = HmacDRBG;\n\n  HmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n    var seed = entropy.concat(nonce).concat(pers);\n    this.K = new Array(this.outLen / 8);\n    this.V = new Array(this.outLen / 8);\n\n    for (var i = 0; i < this.V.length; i++) {\n      this.K[i] = 0x00;\n      this.V[i] = 0x01;\n    }\n\n    this._update(seed);\n\n    this._reseed = 1;\n    this.reseedInterval = 0x1000000000000; // 2^48\n  };\n\n  HmacDRBG.prototype._hmac = function hmac() {\n    return new hash_1.hmac(this.hash, this.K);\n  };\n\n  HmacDRBG.prototype._update = function update(seed) {\n    var kmac = this._hmac().update(this.V).update([0x00]);\n\n    if (seed) kmac = kmac.update(seed);\n    this.K = kmac.digest();\n    this.V = this._hmac().update(this.V).digest();\n    if (!seed) return;\n    this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();\n    this.V = this._hmac().update(this.V).digest();\n  };\n\n  HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n    // Optional entropy enc\n    if (typeof entropyEnc !== 'string') {\n      addEnc = add;\n      add = entropyEnc;\n      entropyEnc = null;\n    }\n\n    entropy = utils_1.toArray(entropy, entropyEnc);\n    add = utils_1.toArray(add, addEnc);\n    minimalisticAssert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n    this._update(entropy.concat(add || []));\n\n    this._reseed = 1;\n  };\n\n  HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n    if (this._reseed > this.reseedInterval) throw new Error('Reseed is required'); // Optional encoding\n\n    if (typeof enc !== 'string') {\n      addEnc = add;\n      add = enc;\n      enc = null;\n    } // Optional additional data\n\n\n    if (add) {\n      add = utils_1.toArray(add, addEnc || 'hex');\n\n      this._update(add);\n    }\n\n    var temp = [];\n\n    while (temp.length < len) {\n      this.V = this._hmac().update(this.V).digest();\n      temp = temp.concat(this.V);\n    }\n\n    var res = temp.slice(0, len);\n\n    this._update(add);\n\n    this._reseed++;\n    return utils_1.encode(res, enc);\n  };\n\n  var assert$4 = utils_1$1.assert;\n\n  function KeyPair(ec, options) {\n    this.ec = ec;\n    this.priv = null;\n    this.pub = null; // KeyPair(ec, { priv: ..., pub: ... })\n\n    if (options.priv) this._importPrivate(options.priv, options.privEnc);\n    if (options.pub) this._importPublic(options.pub, options.pubEnc);\n  }\n\n  var key = KeyPair;\n\n  KeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n    if (pub instanceof KeyPair) return pub;\n    return new KeyPair(ec, {\n      pub: pub,\n      pubEnc: enc\n    });\n  };\n\n  KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n    if (priv instanceof KeyPair) return priv;\n    return new KeyPair(ec, {\n      priv: priv,\n      privEnc: enc\n    });\n  };\n\n  KeyPair.prototype.validate = function validate() {\n    var pub = this.getPublic();\n    if (pub.isInfinity()) return {\n      result: false,\n      reason: 'Invalid public key'\n    };\n    if (!pub.validate()) return {\n      result: false,\n      reason: 'Public key is not a point'\n    };\n    if (!pub.mul(this.ec.curve.n).isInfinity()) return {\n      result: false,\n      reason: 'Public key * N != O'\n    };\n    return {\n      result: true,\n      reason: null\n    };\n  };\n\n  KeyPair.prototype.getPublic = function getPublic(compact, enc) {\n    // compact is optional argument\n    if (typeof compact === 'string') {\n      enc = compact;\n      compact = null;\n    }\n\n    if (!this.pub) this.pub = this.ec.g.mul(this.priv);\n    if (!enc) return this.pub;\n    return this.pub.encode(enc, compact);\n  };\n\n  KeyPair.prototype.getPrivate = function getPrivate(enc) {\n    if (enc === 'hex') return this.priv.toString(16, 2);else return this.priv;\n  };\n\n  KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n    this.priv = new bn(key, enc || 16); // Ensure that the priv won't be bigger than n, otherwise we may fail\n    // in fixed multiplication method\n\n    this.priv = this.priv.umod(this.ec.curve.n);\n  };\n\n  KeyPair.prototype._importPublic = function _importPublic(key, enc) {\n    if (key.x || key.y) {\n      // Montgomery points only have an `x` coordinate.\n      // Weierstrass/Edwards points on the other hand have both `x` and\n      // `y` coordinates.\n      if (this.ec.curve.type === 'mont') {\n        assert$4(key.x, 'Need x coordinate');\n      } else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') {\n        assert$4(key.x && key.y, 'Need both x and y coordinate');\n      }\n\n      this.pub = this.ec.curve.point(key.x, key.y);\n      return;\n    }\n\n    this.pub = this.ec.curve.decodePoint(key, enc);\n  }; // ECDH\n\n\n  KeyPair.prototype.derive = function derive(pub) {\n    return pub.mul(this.priv).getX();\n  }; // ECDSA\n\n\n  KeyPair.prototype.sign = function sign(msg, enc, options) {\n    return this.ec.sign(msg, this, enc, options);\n  };\n\n  KeyPair.prototype.verify = function verify(msg, signature) {\n    return this.ec.verify(msg, signature, this);\n  };\n\n  KeyPair.prototype.inspect = function inspect() {\n    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';\n  };\n\n  var assert$5 = utils_1$1.assert;\n\n  function Signature(options, enc) {\n    if (options instanceof Signature) return options;\n    if (this._importDER(options, enc)) return;\n    assert$5(options.r && options.s, 'Signature without r or s');\n    this.r = new bn(options.r, 16);\n    this.s = new bn(options.s, 16);\n    if (options.recoveryParam === undefined) this.recoveryParam = null;else this.recoveryParam = options.recoveryParam;\n  }\n\n  var signature = Signature;\n\n  function Position() {\n    this.place = 0;\n  }\n\n  function getLength(buf, p) {\n    var initial = buf[p.place++];\n\n    if (!(initial & 0x80)) {\n      return initial;\n    }\n\n    var octetLen = initial & 0xf;\n    var val = 0;\n\n    for (var i = 0, off = p.place; i < octetLen; i++, off++) {\n      val <<= 8;\n      val |= buf[off];\n    }\n\n    p.place = off;\n    return val;\n  }\n\n  function rmPadding(buf) {\n    var i = 0;\n    var len = buf.length - 1;\n\n    while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {\n      i++;\n    }\n\n    if (i === 0) {\n      return buf;\n    }\n\n    return buf.slice(i);\n  }\n\n  Signature.prototype._importDER = function _importDER(data, enc) {\n    data = utils_1$1.toArray(data, enc);\n    var p = new Position();\n\n    if (data[p.place++] !== 0x30) {\n      return false;\n    }\n\n    var len = getLength(data, p);\n\n    if (len + p.place !== data.length) {\n      return false;\n    }\n\n    if (data[p.place++] !== 0x02) {\n      return false;\n    }\n\n    var rlen = getLength(data, p);\n    var r = data.slice(p.place, rlen + p.place);\n    p.place += rlen;\n\n    if (data[p.place++] !== 0x02) {\n      return false;\n    }\n\n    var slen = getLength(data, p);\n\n    if (data.length !== slen + p.place) {\n      return false;\n    }\n\n    var s = data.slice(p.place, slen + p.place);\n\n    if (r[0] === 0 && r[1] & 0x80) {\n      r = r.slice(1);\n    }\n\n    if (s[0] === 0 && s[1] & 0x80) {\n      s = s.slice(1);\n    }\n\n    this.r = new bn(r);\n    this.s = new bn(s);\n    this.recoveryParam = null;\n    return true;\n  };\n\n  function constructLength(arr, len) {\n    if (len < 0x80) {\n      arr.push(len);\n      return;\n    }\n\n    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n    arr.push(octets | 0x80);\n\n    while (--octets) {\n      arr.push(len >>> (octets << 3) & 0xff);\n    }\n\n    arr.push(len);\n  }\n\n  Signature.prototype.toDER = function toDER(enc) {\n    var r = this.r.toArray();\n    var s = this.s.toArray(); // Pad values\n\n    if (r[0] & 0x80) r = [0].concat(r); // Pad values\n\n    if (s[0] & 0x80) s = [0].concat(s);\n    r = rmPadding(r);\n    s = rmPadding(s);\n\n    while (!s[0] && !(s[1] & 0x80)) {\n      s = s.slice(1);\n    }\n\n    var arr = [0x02];\n    constructLength(arr, r.length);\n    arr = arr.concat(r);\n    arr.push(0x02);\n    constructLength(arr, s.length);\n    var backHalf = arr.concat(s);\n    var res = [0x30];\n    constructLength(res, backHalf.length);\n    res = res.concat(backHalf);\n    return utils_1$1.encode(res, enc);\n  };\n\n  var assert$6 = utils_1$1.assert;\n\n  function EC(options) {\n    if (!(this instanceof EC)) return new EC(options); // Shortcut `elliptic.ec(curve-name)`\n\n    if (typeof options === 'string') {\n      assert$6(curves_1.hasOwnProperty(options), 'Unknown curve ' + options);\n      options = curves_1[options];\n    } // Shortcut for `elliptic.ec(elliptic.curves.curveName)`\n\n\n    if (options instanceof curves_1.PresetCurve) options = {\n      curve: options\n    };\n    this.curve = options.curve.curve;\n    this.n = this.curve.n;\n    this.nh = this.n.ushrn(1);\n    this.g = this.curve.g; // Point on curve\n\n    this.g = options.curve.g;\n    this.g.precompute(options.curve.n.bitLength() + 1); // Hash for function for DRBG\n\n    this.hash = options.hash || options.curve.hash;\n  }\n\n  var ec = EC;\n\n  EC.prototype.keyPair = function keyPair(options) {\n    return new key(this, options);\n  };\n\n  EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n    return key.fromPrivate(this, priv, enc);\n  };\n\n  EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n    return key.fromPublic(this, pub, enc);\n  };\n\n  EC.prototype.genKeyPair = function genKeyPair(options) {\n    if (!options) options = {}; // Instantiate Hmac_DRBG\n\n    var drbg = new hmacDrbg({\n      hash: this.hash,\n      pers: options.pers,\n      persEnc: options.persEnc || 'utf8',\n      entropy: options.entropy || brorand(this.hash.hmacStrength),\n      entropyEnc: options.entropy && options.entropyEnc || 'utf8',\n      nonce: this.n.toArray()\n    });\n    var bytes = this.n.byteLength();\n    var ns2 = this.n.sub(new bn(2));\n\n    do {\n      var priv = new bn(drbg.generate(bytes));\n      if (priv.cmp(ns2) > 0) continue;\n      priv.iaddn(1);\n      return this.keyFromPrivate(priv);\n    } while (true);\n  };\n\n  EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {\n    var delta = msg.byteLength() * 8 - this.n.bitLength();\n    if (delta > 0) msg = msg.ushrn(delta);\n    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);else return msg;\n  };\n\n  EC.prototype.sign = function sign(msg, key$$1, enc, options) {\n    if (typeof enc === 'object') {\n      options = enc;\n      enc = null;\n    }\n\n    if (!options) options = {};\n    key$$1 = this.keyFromPrivate(key$$1, enc);\n    msg = this._truncateToN(new bn(msg, 16)); // Zero-extend key to provide enough entropy\n\n    var bytes = this.n.byteLength();\n    var bkey = key$$1.getPrivate().toArray('be', bytes); // Zero-extend nonce to have the same byte size as N\n\n    var nonce = msg.toArray('be', bytes); // Instantiate Hmac_DRBG\n\n    var drbg = new hmacDrbg({\n      hash: this.hash,\n      entropy: bkey,\n      nonce: nonce,\n      pers: options.pers,\n      persEnc: options.persEnc || 'utf8'\n    }); // Number of bytes to generate\n\n    var ns1 = this.n.sub(new bn(1));\n\n    for (var iter = 0; true; iter++) {\n      var k = options.k ? options.k(iter) : new bn(drbg.generate(this.n.byteLength()));\n      k = this._truncateToN(k, true);\n      if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;\n      var kp = this.g.mul(k);\n      if (kp.isInfinity()) continue;\n      var kpX = kp.getX();\n      var r = kpX.umod(this.n);\n      if (r.cmpn(0) === 0) continue;\n      var s = k.invm(this.n).mul(r.mul(key$$1.getPrivate()).iadd(msg));\n      s = s.umod(this.n);\n      if (s.cmpn(0) === 0) continue;\n      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0); // Use complement of `s`, if it is > `n / 2`\n\n      if (options.canonical && s.cmp(this.nh) > 0) {\n        s = this.n.sub(s);\n        recoveryParam ^= 1;\n      }\n\n      return new signature({\n        r: r,\n        s: s,\n        recoveryParam: recoveryParam\n      });\n    }\n  };\n\n  EC.prototype.verify = function verify(msg, signature$$1, key$$1, enc) {\n    msg = this._truncateToN(new bn(msg, 16));\n    key$$1 = this.keyFromPublic(key$$1, enc);\n    signature$$1 = new signature(signature$$1, 'hex'); // Perform primitive values validation\n\n    var r = signature$$1.r;\n    var s = signature$$1.s;\n    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;\n    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false; // Validate signature\n\n    var sinv = s.invm(this.n);\n    var u1 = sinv.mul(msg).umod(this.n);\n    var u2 = sinv.mul(r).umod(this.n);\n\n    if (!this.curve._maxwellTrick) {\n      var p = this.g.mulAdd(u1, key$$1.getPublic(), u2);\n      if (p.isInfinity()) return false;\n      return p.getX().umod(this.n).cmp(r) === 0;\n    } // NOTE: Greg Maxwell's trick, inspired by:\n    // https://git.io/vad3K\n\n\n    var p = this.g.jmulAdd(u1, key$$1.getPublic(), u2);\n    if (p.isInfinity()) return false; // Compare `p.x` of Jacobian point with `r`,\n    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the\n    // inverse of `p.z^2`\n\n    return p.eqXToP(r);\n  };\n\n  EC.prototype.recoverPubKey = function (msg, signature$$1, j, enc) {\n    assert$6((3 & j) === j, 'The recovery param is more than two bits');\n    signature$$1 = new signature(signature$$1, enc);\n    var n = this.n;\n    var e = new bn(msg);\n    var r = signature$$1.r;\n    var s = signature$$1.s; // A set LSB signifies that the y-coordinate is odd\n\n    var isYOdd = j & 1;\n    var isSecondKey = j >> 1;\n    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate'); // 1.1. Let x = r + jn.\n\n    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);else r = this.curve.pointFromX(r, isYOdd);\n    var rInv = signature$$1.r.invm(n);\n    var s1 = n.sub(e).mul(rInv).umod(n);\n    var s2 = s.mul(rInv).umod(n); // 1.6.1 Compute Q = r^-1 (sR -  eG)\n    //               Q = r^-1 (sR + -eG)\n\n    return this.g.mulAdd(s1, r, s2);\n  };\n\n  EC.prototype.getKeyRecoveryParam = function (e, signature$$1, Q, enc) {\n    signature$$1 = new signature(signature$$1, enc);\n    if (signature$$1.recoveryParam !== null) return signature$$1.recoveryParam;\n\n    for (var i = 0; i < 4; i++) {\n      var Qprime;\n\n      try {\n        Qprime = this.recoverPubKey(e, signature$$1, i);\n      } catch (e) {\n        continue;\n      }\n\n      if (Qprime.eq(Q)) return i;\n    }\n\n    throw new Error('Unable to find valid recovery factor');\n  };\n\n  var assert$7 = utils_1$1.assert;\n  var parseBytes = utils_1$1.parseBytes;\n  var cachedProperty = utils_1$1.cachedProperty;\n  /**\n  * @param {EDDSA} eddsa - instance\n  * @param {Object} params - public/private key parameters\n  *\n  * @param {Array<Byte>} [params.secret] - secret seed bytes\n  * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)\n  * @param {Array<Byte>} [params.pub] - public key point encoded as bytes\n  *\n  */\n\n  function KeyPair$1(eddsa, params) {\n    this.eddsa = eddsa;\n    this._secret = parseBytes(params.secret);\n    if (eddsa.isPoint(params.pub)) this._pub = params.pub;else this._pubBytes = parseBytes(params.pub);\n  }\n\n  KeyPair$1.fromPublic = function fromPublic(eddsa, pub) {\n    if (pub instanceof KeyPair$1) return pub;\n    return new KeyPair$1(eddsa, {\n      pub: pub\n    });\n  };\n\n  KeyPair$1.fromSecret = function fromSecret(eddsa, secret) {\n    if (secret instanceof KeyPair$1) return secret;\n    return new KeyPair$1(eddsa, {\n      secret: secret\n    });\n  };\n\n  KeyPair$1.prototype.secret = function secret() {\n    return this._secret;\n  };\n\n  cachedProperty(KeyPair$1, 'pubBytes', function pubBytes() {\n    return this.eddsa.encodePoint(this.pub());\n  });\n  cachedProperty(KeyPair$1, 'pub', function pub() {\n    if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);\n    return this.eddsa.g.mul(this.priv());\n  });\n  cachedProperty(KeyPair$1, 'privBytes', function privBytes() {\n    var eddsa = this.eddsa;\n    var hash = this.hash();\n    var lastIx = eddsa.encodingLength - 1;\n    var a = hash.slice(0, eddsa.encodingLength);\n    a[0] &= 248;\n    a[lastIx] &= 127;\n    a[lastIx] |= 64;\n    return a;\n  });\n  cachedProperty(KeyPair$1, 'priv', function priv() {\n    return this.eddsa.decodeInt(this.privBytes());\n  });\n  cachedProperty(KeyPair$1, 'hash', function hash() {\n    return this.eddsa.hash().update(this.secret()).digest();\n  });\n  cachedProperty(KeyPair$1, 'messagePrefix', function messagePrefix() {\n    return this.hash().slice(this.eddsa.encodingLength);\n  });\n\n  KeyPair$1.prototype.sign = function sign(message) {\n    assert$7(this._secret, 'KeyPair can only verify');\n    return this.eddsa.sign(message, this);\n  };\n\n  KeyPair$1.prototype.verify = function verify(message, sig) {\n    return this.eddsa.verify(message, sig, this);\n  };\n\n  KeyPair$1.prototype.getSecret = function getSecret(enc) {\n    assert$7(this._secret, 'KeyPair is public only');\n    return utils_1$1.encode(this.secret(), enc);\n  };\n\n  KeyPair$1.prototype.getPublic = function getPublic(enc) {\n    return utils_1$1.encode(this.pubBytes(), enc);\n  };\n\n  var key$1 = KeyPair$1;\n  var assert$8 = utils_1$1.assert;\n  var cachedProperty$1 = utils_1$1.cachedProperty;\n  var parseBytes$1 = utils_1$1.parseBytes;\n  /**\n  * @param {EDDSA} eddsa - eddsa instance\n  * @param {Array<Bytes>|Object} sig -\n  * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes\n  * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes\n  * @param {Array<Bytes>} [sig.Rencoded] - R point encoded\n  * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded\n  */\n\n  function Signature$1(eddsa, sig) {\n    this.eddsa = eddsa;\n    if (typeof sig !== 'object') sig = parseBytes$1(sig);\n\n    if (Array.isArray(sig)) {\n      sig = {\n        R: sig.slice(0, eddsa.encodingLength),\n        S: sig.slice(eddsa.encodingLength)\n      };\n    }\n\n    assert$8(sig.R && sig.S, 'Signature without R or S');\n    if (eddsa.isPoint(sig.R)) this._R = sig.R;\n    if (sig.S instanceof bn) this._S = sig.S;\n    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;\n    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;\n  }\n\n  cachedProperty$1(Signature$1, 'S', function S() {\n    return this.eddsa.decodeInt(this.Sencoded());\n  });\n  cachedProperty$1(Signature$1, 'R', function R() {\n    return this.eddsa.decodePoint(this.Rencoded());\n  });\n  cachedProperty$1(Signature$1, 'Rencoded', function Rencoded() {\n    return this.eddsa.encodePoint(this.R());\n  });\n  cachedProperty$1(Signature$1, 'Sencoded', function Sencoded() {\n    return this.eddsa.encodeInt(this.S());\n  });\n\n  Signature$1.prototype.toBytes = function toBytes() {\n    return this.Rencoded().concat(this.Sencoded());\n  };\n\n  Signature$1.prototype.toHex = function toHex() {\n    return utils_1$1.encode(this.toBytes(), 'hex').toUpperCase();\n  };\n\n  var signature$1 = Signature$1;\n  var assert$9 = utils_1$1.assert;\n  var parseBytes$2 = utils_1$1.parseBytes;\n\n  function EDDSA(curve) {\n    assert$9(curve === 'ed25519', 'only tested with ed25519 so far');\n    if (!(this instanceof EDDSA)) return new EDDSA(curve);\n    var curve = curves_1[curve].curve;\n    this.curve = curve;\n    this.g = curve.g;\n    this.g.precompute(curve.n.bitLength() + 1);\n    this.pointClass = curve.point().constructor;\n    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\n    this.hash = hash_1.sha512;\n  }\n\n  var eddsa = EDDSA;\n  /**\n  * @param {Array|String} message - message bytes\n  * @param {Array|String|KeyPair} secret - secret bytes or a keypair\n  * @returns {Signature} - signature\n  */\n\n  EDDSA.prototype.sign = function sign(message, secret) {\n    message = parseBytes$2(message);\n    var key = this.keyFromSecret(secret);\n    var r = this.hashInt(key.messagePrefix(), message);\n    var R = this.g.mul(r);\n    var Rencoded = this.encodePoint(R);\n    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());\n    var S = r.add(s_).umod(this.curve.n);\n    return this.makeSignature({\n      R: R,\n      S: S,\n      Rencoded: Rencoded\n    });\n  };\n  /**\n  * @param {Array} message - message bytes\n  * @param {Array|String|Signature} sig - sig bytes\n  * @param {Array|String|Point|KeyPair} pub - public key\n  * @returns {Boolean} - true if public key matches sig of message\n  */\n\n\n  EDDSA.prototype.verify = function verify(message, sig, pub) {\n    message = parseBytes$2(message);\n    sig = this.makeSignature(sig);\n    var key = this.keyFromPublic(pub);\n    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\n    var SG = this.g.mul(sig.S());\n    var RplusAh = sig.R().add(key.pub().mul(h));\n    return RplusAh.eq(SG);\n  };\n\n  EDDSA.prototype.hashInt = function hashInt() {\n    var hash = this.hash();\n\n    for (var i = 0; i < arguments.length; i++) hash.update(arguments[i]);\n\n    return utils_1$1.intFromLE(hash.digest()).umod(this.curve.n);\n  };\n\n  EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\n    return key$1.fromPublic(this, pub);\n  };\n\n  EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\n    return key$1.fromSecret(this, secret);\n  };\n\n  EDDSA.prototype.makeSignature = function makeSignature(sig) {\n    if (sig instanceof signature$1) return sig;\n    return new signature$1(this, sig);\n  };\n  /**\n  * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2\n  *\n  * EDDSA defines methods for encoding and decoding points and integers. These are\n  * helper convenience methods, that pass along to utility functions implied\n  * parameters.\n  *\n  */\n\n\n  EDDSA.prototype.encodePoint = function encodePoint(point) {\n    var enc = point.getY().toArray('le', this.encodingLength);\n    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;\n    return enc;\n  };\n\n  EDDSA.prototype.decodePoint = function decodePoint(bytes) {\n    bytes = utils_1$1.parseBytes(bytes);\n    var lastIx = bytes.length - 1;\n    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);\n    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;\n    var y = utils_1$1.intFromLE(normed);\n    return this.curve.pointFromY(y, xIsOdd);\n  };\n\n  EDDSA.prototype.encodeInt = function encodeInt(num) {\n    return num.toArray('le', this.encodingLength);\n  };\n\n  EDDSA.prototype.decodeInt = function decodeInt(bytes) {\n    return utils_1$1.intFromLE(bytes);\n  };\n\n  EDDSA.prototype.isPoint = function isPoint(val) {\n    return val instanceof this.pointClass;\n  };\n\n  var require$$0$1 = getCjsExportFromNamespace(_package$1);\n  var elliptic_1 = createCommonjsModule(function (module, exports) {\n    var elliptic = exports;\n    elliptic.version = require$$0$1.version;\n    elliptic.utils = utils_1$1;\n    elliptic.rand = brorand;\n    elliptic.curve = curve_1;\n    elliptic.curves = curves_1; // Protocols\n\n    elliptic.ec = ec;\n    elliptic.eddsa = eddsa;\n  }); //  This file is part of Zilliqa-Javascript-Library.\n  //\n  //  This program is free software: you can redistribute it and/or modify\n  //  it under the terms of the GNU General Public License as published by\n  //  the Free Software Foundation, either version 3 of the License, or\n  //  (at your option) any later version.\n  //\n  //   This program is distributed in the hope that it will be useful,\n  //   but WITHOUT ANY WARRANTY; without even the implied warranty of\n  //   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  //   GNU General Public License for more details.\n  //\n  //   You should have received a copy of the GNU General Public License\n  //   along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n  /**\r\n   * randomBytes\r\n   *\r\n   * Uses JS-native CSPRNG to generate a specified number of bytes.\r\n   * NOTE: this method throws if no PRNG is available.\r\n   *\r\n   * @param {number} bytes\r\n   * @returns {string}\r\n   */\n\n  var randomBytes = function (bytes) {\n    var randBz;\n\n    if (typeof window !== 'undefined' && window.crypto && window.crypto.getRandomValues) {\n      randBz = window.crypto.getRandomValues(new Uint8Array(bytes));\n    } else if (typeof require !== 'undefined') {\n      randBz = require('crypto').randomBytes(bytes);\n    } else {\n      throw new Error('Unable to generate safe random numbers.');\n    }\n\n    var randStr = '';\n\n    for (var i = 0; i < bytes; i++) {\n      randStr += ('00' + randBz[i].toString(16)).slice(-2);\n    }\n\n    return randStr;\n  }; //  This file is part of Zilliqa-Javascript-Library.\n\n\n  var Signature$2 =\n  /** @class */\n  function () {\n    function Signature(options) {\n      this.r = typeof options.r === 'string' ? new util.BN(options.r, 16) : options.r;\n      this.s = typeof options.s === 'string' ? new util.BN(options.s, 16) : options.s;\n    }\n\n    return Signature;\n  }(); //  This file is part of Zilliqa-Javascript-Library.\n\n\n  var secp256k1$1 = elliptic_1.ec('secp256k1');\n  var curve = secp256k1$1.curve;\n  var PRIVKEY_SIZE_BYTES = 32; // Public key is a point (x, y) on the curve.\n  // Each coordinate requires 32 bytes.\n  // In its compressed form it suffices to store the x co-ordinate\n  // and the sign for y.\n  // Hence a total of 33 bytes.\n\n  var PUBKEY_COMPRESSED_SIZE_BYTES = 33; // Personalization string used for HMAC-DRBG instantiation.\n\n  var ALG = Buffer.from('Schnorr+SHA256  ', 'ascii'); // The length in bytes of the string above.\n\n  var ALG_LEN = 16; // The length in bytes of entropy inputs to HMAC-DRBG\n\n  var ENT_LEN = 32;\n  var HEX_ENC = 'hex';\n  /**\r\n   * generatePrivateKey\r\n   *\r\n   * @returns {string} - the hex-encoded private key\r\n   */\n\n  var generatePrivateKey = function () {\n    return secp256k1$1.genKeyPair({\n      entropy: randomBytes(secp256k1$1.curve.n.byteLength()),\n      entropyEnc: HEX_ENC,\n      pers: 'zilliqajs+secp256k1+SHA256'\n    }).getPrivate().toString(16, PRIVKEY_SIZE_BYTES * 2);\n  };\n  /**\r\n   * Hash (r | M).\r\n   * @param {Buffer} msg\r\n   * @param {BN} r\r\n   *\r\n   * @returns {Buffer}\r\n   */\n\n\n  var hash = function (q, pubkey, msg) {\n    var sha256 = hash_1.sha256();\n    var totalLength = PUBKEY_COMPRESSED_SIZE_BYTES * 2 + msg.byteLength; // 33 q + 33 pubkey + variable msgLen\n\n    var Q = q.toArrayLike(Buffer, 'be', 33);\n    var B = Buffer.allocUnsafe(totalLength);\n    Q.copy(B, 0);\n    pubkey.copy(B, 33);\n    msg.copy(B, 66);\n    return new util.BN(sha256.update(B).digest('hex'), 16);\n  };\n  /**\r\n   * sign\r\n   *\r\n   * @param {Buffer} msg\r\n   * @param {Buffer} key\r\n   * @param {Buffer} pubkey\r\n   *\r\n   * @returns {Signature}\r\n   */\n\n\n  var sign = function (msg, privKey, pubKey) {\n    var prv = new util.BN(privKey);\n    var drbg = getDRBG(msg);\n    var len = curve.n.byteLength();\n    var sig;\n\n    while (!sig) {\n      var k = new util.BN(drbg.generate(len));\n      sig = trySign(msg, k, prv, pubKey);\n    }\n\n    return sig;\n  };\n  /**\r\n   * trySign\r\n   *\r\n   * @param {Buffer} msg - the message to sign over\r\n   * @param {BN} k - output of the HMAC-DRBG\r\n   * @param {BN} privateKey - the private key\r\n   * @param {Buffer} pubKey - the public key\r\n   *\r\n   * @returns {Signature | null =>}\r\n   */\n\n\n  var trySign = function (msg, k, privKey, pubKey) {\n    if (privKey.isZero()) {\n      throw new Error('Bad private key.');\n    }\n\n    if (privKey.gte(curve.n)) {\n      throw new Error('Bad private key.');\n    } // 1a. check that k is not 0\n\n\n    if (k.isZero()) {\n      return null;\n    } // 1b. check that k is < the order of the group\n\n\n    if (k.gte(curve.n)) {\n      return null;\n    } // 2. Compute commitment Q = kG, where g is the base point\n\n\n    var Q = curve.g.mul(k); // convert the commitment to octets first\n\n    var compressedQ = new util.BN(Q.encodeCompressed()); // 3. Compute the challenge r = H(Q || pubKey || msg)\n    // mod reduce the r value by the order of secp256k1, n\n\n    var r = hash(compressedQ, pubKey, msg).umod(curve.n);\n    var h = r.clone();\n\n    if (h.isZero()) {\n      return null;\n    } // 4. Compute s = k - r * prv\n    // 4a. Compute r * prv\n\n\n    var s = h.imul(privKey).umod(curve.n); // 4b. Compute s = k - r * prv mod n\n\n    s = k.isub(s).umod(curve.n);\n\n    if (s.isZero()) {\n      return null;\n    }\n\n    return new Signature$2({\n      r: r,\n      s: s\n    });\n  };\n  /**\r\n   * Verify signature.\r\n   *\r\n   * @param {Buffer} msg\r\n   * @param {Buffer} signature\r\n   * @param {Buffer} key\r\n   *\r\n   * @returns {boolean}\r\n   *\r\n   * 1. Check if r,s is in [1, ..., order-1]\r\n   * 2. Compute Q = sG + r*kpub\r\n   * 3. If Q = O (the neutral point), return 0;\r\n   * 4. r' = H(Q, kpub, m)\r\n   * 5. return r' == r\r\n   */\n\n\n  var verify = function (msg, signature, key) {\n    var sig = new Signature$2(signature);\n\n    if (sig.s.isZero() || sig.r.isZero()) {\n      throw new Error('Invalid signature');\n    }\n\n    if (sig.s.isNeg() || sig.r.isNeg()) {\n      throw new Error('Invalid signature');\n    }\n\n    if (sig.s.gte(curve.n) || sig.r.gte(curve.n)) {\n      throw new Error('Invalid signature');\n    }\n\n    var kpub = curve.decodePoint(key);\n\n    if (!curve.validate(kpub)) {\n      throw new Error('Invalid public key');\n    }\n\n    var l = kpub.mul(sig.r);\n    var r = curve.g.mul(sig.s);\n    var Q = l.add(r);\n\n    if (Q.isInfinity()) {\n      throw new Error('Invalid intermediate point.');\n    }\n\n    var compressedQ = new util.BN(Q.encodeCompressed());\n    var r1 = hash(compressedQ, key, msg).umod(curve.n);\n\n    if (r1.isZero()) {\n      throw new Error('Invalid hash.');\n    }\n\n    return r1.eq(sig.r);\n  };\n\n  var toSignature = function (serialised) {\n    var r = serialised.slice(0, 64);\n    var s = serialised.slice(64);\n    return new Signature$2({\n      r: r,\n      s: s\n    });\n  };\n  /**\r\n   * Instantiate an HMAC-DRBG.\r\n   *\r\n   * @param {Buffer} msg - used as nonce\r\n   *\r\n   * @returns {DRBG}\r\n   */\n\n\n  var getDRBG = function (msg) {\n    var entropy = randomBytes(ENT_LEN);\n    var pers = Buffer.allocUnsafe(ALG_LEN + ENT_LEN);\n    Buffer.from(randomBytes(ENT_LEN)).copy(pers, 0);\n    ALG.copy(pers, ENT_LEN);\n    return new hmacDrbg({\n      hash: hash_1.sha256,\n      entropy: entropy,\n      nonce: msg,\n      pers: pers\n    });\n  };\n\n  var schnorr =\n  /*#__PURE__*/\n  Object.freeze({\n    generatePrivateKey: generatePrivateKey,\n    hash: hash,\n    sign: sign,\n    trySign: trySign,\n    verify: verify,\n    toSignature: toSignature\n  }); //  This file is part of Zilliqa-Javascript-Library.\n  // This code is taken from https://github.com/sipa/bech32/tree/bdc264f84014c234e908d72026b7b780122be11f/ref/javascript\n  // Copyright (c) 2017 Pieter Wuille\n  //\n  // Permission is hereby granted, free of charge, to any person obtaining a copy\n  // of this software and associated documentation files (the \"Software\"), to deal\n  // in the Software without restriction, including without limitation the rights\n  // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  // copies of the Software, and to permit persons to whom the Software is\n  // furnished to do so, subject to the following conditions:\n  //\n  // The above copyright notice and this permission notice shall be included in\n  // all copies or substantial portions of the Software.\n  //\n  // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  // THE SOFTWARE.\n\n  var CHARSET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\n  var GENERATOR = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\n\n  var polymod = function (values) {\n    var chk = 1; // tslint:disable-next-line\n\n    for (var p = 0; p < values.length; ++p) {\n      var top_1 = chk >> 25;\n      chk = (chk & 0x1ffffff) << 5 ^ values[p];\n\n      for (var i = 0; i < 5; ++i) {\n        if (top_1 >> i & 1) {\n          chk ^= GENERATOR[i];\n        }\n      }\n    }\n\n    return chk;\n  };\n\n  var hrpExpand = function (hrp) {\n    var ret = [];\n    var p;\n\n    for (p = 0; p < hrp.length; ++p) {\n      ret.push(hrp.charCodeAt(p) >> 5);\n    }\n\n    ret.push(0);\n\n    for (p = 0; p < hrp.length; ++p) {\n      ret.push(hrp.charCodeAt(p) & 31);\n    }\n\n    return Buffer.from(ret);\n  };\n\n  function verifyChecksum(hrp, data) {\n    return polymod(Buffer.concat([hrpExpand(hrp), data])) === 1;\n  }\n\n  function createChecksum(hrp, data) {\n    var values = Buffer.concat([Buffer.from(hrpExpand(hrp)), data, Buffer.from([0, 0, 0, 0, 0, 0])]); // var values = hrpExpand(hrp).concat(data).concat([0, 0, 0, 0, 0, 0]);\n\n    var mod = polymod(values) ^ 1;\n    var ret = [];\n\n    for (var p = 0; p < 6; ++p) {\n      ret.push(mod >> 5 * (5 - p) & 31);\n    }\n\n    return Buffer.from(ret);\n  }\n\n  var encode = function (hrp, data) {\n    var combined = Buffer.concat([data, createChecksum(hrp, data)]);\n    var ret = hrp + '1'; // tslint:disable-next-line\n\n    for (var p = 0; p < combined.length; ++p) {\n      ret += CHARSET.charAt(combined[p]);\n    }\n\n    return ret;\n  };\n\n  var decode = function (bechString) {\n    var p;\n    var hasLower = false;\n    var hasUpper = false;\n\n    for (p = 0; p < bechString.length; ++p) {\n      if (bechString.charCodeAt(p) < 33 || bechString.charCodeAt(p) > 126) {\n        return null;\n      }\n\n      if (bechString.charCodeAt(p) >= 97 && bechString.charCodeAt(p) <= 122) {\n        hasLower = true;\n      }\n\n      if (bechString.charCodeAt(p) >= 65 && bechString.charCodeAt(p) <= 90) {\n        hasUpper = true;\n      }\n    }\n\n    if (hasLower && hasUpper) {\n      return null;\n    }\n\n    bechString = bechString.toLowerCase();\n    var pos = bechString.lastIndexOf('1');\n\n    if (pos < 1 || pos + 7 > bechString.length || bechString.length > 90) {\n      return null;\n    }\n\n    var hrp = bechString.substring(0, pos);\n    var data = [];\n\n    for (p = pos + 1; p < bechString.length; ++p) {\n      var d = CHARSET.indexOf(bechString.charAt(p));\n\n      if (d === -1) {\n        return null;\n      }\n\n      data.push(d);\n    }\n\n    if (!verifyChecksum(hrp, Buffer.from(data))) {\n      return null;\n    }\n\n    return {\n      hrp: hrp,\n      data: Buffer.from(data.slice(0, data.length - 6))\n    };\n  }; // HRP is the human-readable part of zilliqa bech32 addresses\n\n\n  var HRP = 'zil';\n  var tHRP = 'tzil';\n  /**\r\n   * convertBits\r\n   *\r\n   * groups buffers of a certain width to buffers of the desired width.\r\n   *\r\n   * For example, converts byte buffers to buffers of maximum 5 bit numbers,\r\n   * padding those numbers as necessary. Necessary for encoding Ethereum-style\r\n   * addresses as bech32 ones.\r\n   *\r\n   * @param {Buffer} data\r\n   * @param {number} fromWidth\r\n   * @param {number} toWidth\r\n   * @param {boolean} pad\r\n   * @returns {Buffer|null}\r\n   */\n\n  var convertBits = function (data, fromWidth, toWidth, pad) {\n    if (pad === void 0) {\n      pad = true;\n    }\n\n    var acc = 0;\n    var bits = 0;\n    var ret = [];\n    var maxv = (1 << toWidth) - 1; // tslint:disable-next-line\n\n    for (var p = 0; p < data.length; ++p) {\n      var value = data[p];\n\n      if (value < 0 || value >> fromWidth !== 0) {\n        return null;\n      }\n\n      acc = acc << fromWidth | value;\n      bits += fromWidth;\n\n      while (bits >= toWidth) {\n        bits -= toWidth;\n        ret.push(acc >> bits & maxv);\n      }\n    }\n\n    if (pad) {\n      if (bits > 0) {\n        ret.push(acc << toWidth - bits & maxv);\n      }\n    } else if (bits >= fromWidth || acc << toWidth - bits & maxv) {\n      return null;\n    }\n\n    return Buffer.from(ret);\n  };\n  /**\r\n   * toBech32Address\r\n   *\r\n   * Encodes a canonical 20-byte Ethereum-style address as a bech32 zilliqa\r\n   * address.\r\n   *\r\n   * The expected format is zil1<address><checksum> where address and checksum\r\n   * are the result of bech32 encoding a Buffer containing the address bytes.\r\n   *\r\n   * @param {string} 20 byte canonical address\r\n   * @returns {string} 38 char bech32 encoded zilliqa address\r\n   */\n\n\n  var toBech32Address = function (address, testnet) {\n    if (testnet === void 0) {\n      testnet = false;\n    }\n\n    if (!util.validation.isAddress(address)) {\n      throw new Error('Invalid address format.');\n    }\n\n    var addrBz = convertBits(Buffer.from(address.replace('0x', ''), 'hex'), 8, 5);\n\n    if (addrBz === null) {\n      throw new Error('Could not convert byte Buffer to 5-bit Buffer');\n    }\n\n    return encode(testnet ? tHRP : HRP, addrBz);\n  };\n  /**\r\n   * fromBech32Address\r\n   *\r\n   * @param {string} address - a valid Zilliqa bech32 address\r\n   * @returns {string} a canonical 20-byte Ethereum-style address\r\n   */\n\n\n  var fromBech32Address = function (address, testnet) {\n    if (testnet === void 0) {\n      testnet = false;\n    }\n\n    var res = decode(address);\n\n    if (res === null) {\n      throw new Error('Invalid bech32 address');\n    }\n\n    var hrp = res.hrp,\n        data = res.data;\n    var shouldBe = testnet ? tHRP : HRP;\n\n    if (hrp !== shouldBe) {\n      throw new Error(\"Expected hrp to be \" + shouldBe + \" but got \" + hrp);\n    }\n\n    var buf = convertBits(data, 5, 8, false);\n\n    if (buf === null) {\n      throw new Error('Could not convert buffer to bytes');\n    }\n\n    return toChecksumAddress(buf.toString('hex'));\n  }; //  This file is part of Zilliqa-Javascript-Library.\n\n\n  var secp256k1$2 = elliptic_1.ec('secp256k1');\n  /**\r\n   * getAddressFromPrivateKey\r\n   *\r\n   * takes a hex-encoded string (private key) and returns its corresponding\r\n   * 20-byte hex-encoded address.\r\n   *\r\n   * @param {string} privateKey\r\n   * @returns {string}\r\n   */\n\n  var getAddressFromPrivateKey = function (privateKey) {\n    var normalizedPrviateKey = normalizePrivateKey(privateKey);\n    var keyPair = secp256k1$2.keyFromPrivate(normalizedPrviateKey, 'hex');\n    var pub = keyPair.getPublic(true, 'hex');\n    return toChecksumAddress(hash_1.sha256().update(pub, 'hex').digest('hex').slice(24));\n  };\n  /**\r\n   * getPubKeyFromPrivateKey\r\n   *\r\n   * takes a hex-encoded string (private key) and returns its corresponding\r\n   * hex-encoded 33-byte public key.\r\n   *\r\n   * @param {string} privateKey\r\n   * @returns {string}\r\n   */\n\n\n  var getPubKeyFromPrivateKey = function (privateKey) {\n    var normalizedPrviateKey = normalizePrivateKey(privateKey);\n    var keyPair = secp256k1$2.keyFromPrivate(normalizedPrviateKey, 'hex');\n    return keyPair.getPublic(true, 'hex');\n  };\n  /**\r\n   * getAccountFrom0xPrivateKey\r\n   *\r\n   * Utility method for recovering account from 0x private key.\r\n   * See https://github.com/Zilliqa/Zilliqa-JavaScript-Library/pull/159\r\n   * @param privateKeyWith0x : private key with 0x prefix\r\n   */\n\n\n  var getAccountFrom0xPrivateKey = function (privateKeyWith0x) {\n    var privateKeyWithout0x = normalizePrivateKey(privateKeyWith0x);\n    var keyPair = secp256k1$2.keyFromPrivate(privateKeyWith0x, 'hex');\n    var publicKeyWith0x = keyPair.getPublic(true, 'hex');\n    var addressWith0x = getAddressFromPublicKey(publicKeyWith0x);\n    var bech32With0x = toBech32Address(addressWith0x);\n    var with0x = {\n      prv: privateKeyWith0x,\n      pub: publicKeyWith0x,\n      addr: addressWith0x,\n      bech32: bech32With0x\n    };\n    var keyPair2 = secp256k1$2.keyFromPrivate(privateKeyWithout0x, 'hex');\n    var publicKeyWithout0x = keyPair2.getPublic(true, 'hex');\n    var addressWithout0x = getAddressFromPublicKey(publicKeyWithout0x);\n    var bech32Without0x = toBech32Address(addressWithout0x);\n    var without0x = {\n      prv: privateKeyWithout0x,\n      pub: publicKeyWithout0x,\n      addr: addressWithout0x,\n      bech32: bech32Without0x\n    };\n    var privateKeyAfterChange = keyPair.getPrivate('hex');\n    var publicKeyAfterChange = keyPair.getPublic(true, 'hex');\n    var addressAfterChange = getAddressFromPublicKey(publicKeyAfterChange);\n    var bech32AfterChange = toBech32Address(addressAfterChange);\n    var changed = {\n      prv: privateKeyAfterChange,\n      pub: publicKeyAfterChange,\n      addr: addressAfterChange,\n      bech32: bech32AfterChange\n    };\n    return {\n      with0x: with0x,\n      without0x: without0x,\n      changed: changed\n    };\n  };\n  /**\r\n   * compressPublicKey\r\n   *\r\n   * @param {string} publicKey - 65-byte public key, a point (x, y)\r\n   *\r\n   * @returns {string}\r\n   */\n\n\n  var compressPublicKey = function (publicKey) {\n    return secp256k1$2.keyFromPublic(publicKey, 'hex').getPublic(true, 'hex');\n  };\n  /**\r\n   * getAddressFromPublicKey\r\n   *\r\n   * takes hex-encoded string and returns the corresponding address\r\n   *\r\n   * @param {string} pubKey\r\n   * @returns {string}\r\n   */\n\n\n  var getAddressFromPublicKey = function (publicKey) {\n    return toChecksumAddress(hash_1.sha256().update(publicKey, 'hex').digest('hex').slice(24));\n  };\n  /**\r\n   * toChecksumAddress\r\n   *\r\n   * takes hex-encoded string and returns the corresponding address\r\n   *\r\n   * @param {string} address\r\n   * @returns {string}\r\n   */\n\n\n  var toChecksumAddress = function (address) {\n    if (!util.validation.isAddress(address)) {\n      throw new Error(address + \" is not a valid base 16 address\");\n    }\n\n    address = address.toLowerCase().replace('0x', '');\n    var hash = hash_1.sha256().update(address, 'hex').digest('hex');\n    var v = new util.BN(hash, 'hex', 'be');\n    var ret = '0x';\n\n    for (var i = 0; i < address.length; i++) {\n      if ('0123456789'.indexOf(address[i]) !== -1) {\n        ret += address[i];\n      } else {\n        ret += v.and(new util.BN(2).pow(new util.BN(255 - 6 * i))).gte(new util.BN(1)) ? address[i].toUpperCase() : address[i].toLowerCase();\n      }\n    }\n\n    return ret;\n  };\n  /**\r\n   * isValidChecksumAddress\r\n   *\r\n   * takes hex-encoded string and returns boolean if address is checksumed\r\n   *\r\n   * @param {string} address\r\n   * @returns {boolean}\r\n   */\n\n\n  var isValidChecksumAddress = function (address) {\n    return util.validation.isAddress(address.replace('0x', '')) && toChecksumAddress(address) === address;\n  };\n  /**\r\n   * normaliseAddress\r\n   *\r\n   * takes in a base16 address or a zilliqa bech32 encoded address\r\n   * and returns a checksum base16 address. If the address is neither a base16\r\n   * nor bech32 address, the code will return an error\r\n   * @param {string)} address\r\n   * @returns {string}\r\n   */\n\n\n  var normaliseAddress = function (address) {\n    if (util.validation.isBech32(address)) {\n      return fromBech32Address(address);\n    }\n\n    return toChecksumAddress(address);\n  };\n  /**\r\n   * encodeBase58\r\n   *\r\n   * @param {string} hex - base 16 encoded string\r\n   * @returns {string} - big endian base 58 encoded string\r\n   */\n\n\n  var encodeBase58 = function (hex) {\n    var clean = hex.toLowerCase().replace('0x', '');\n    var tbl = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n    var base = new util.BN(58);\n    var zero = new util.BN(0);\n    var x = new util.BN(clean, 16);\n    var res = '';\n\n    while (x.gt(zero)) {\n      var rem = x.mod(base).toNumber(); // safe, always < 58\n      // big endian\n\n      res = tbl[rem] + res; // quotient, remainders thrown away in integer division\n\n      x = x.div(base);\n    } // convert to big endian in case the input hex is little endian\n\n\n    var hexBE = x.toString('hex', clean.length);\n\n    for (var i = 0; i < hexBE.length; i += 2) {\n      if (hex[i] === '0' && hex[i + 1] === '0') {\n        res = tbl[0] + res;\n      } else {\n        break;\n      }\n    }\n\n    return res;\n  };\n  /**\r\n   * decodeBase58\r\n   *\r\n   * @param {string} raw - base 58 string\r\n   * @returns {string} - big endian base 16 string\r\n   */\n\n\n  var decodeBase58 = function (raw) {\n    var tbl = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n    var base = new util.BN(58);\n    var zero = new util.BN(0);\n    var isBreak = false;\n    var n = new util.BN(0);\n    var leader = '';\n\n    for (var i = 0; i < raw.length; i++) {\n      var char = raw.charAt(i);\n      var weight = new util.BN(tbl.indexOf(char));\n      n = n.mul(base).add(weight); // check if padding required\n\n      if (!isBreak) {\n        if (i - 1 > 0 && raw[i - 1] !== '1') {\n          isBreak = true;\n          continue;\n        }\n\n        if (char === '1') {\n          leader += '00';\n        }\n      }\n    }\n\n    if (n.eq(zero)) {\n      return leader;\n    }\n\n    var res = leader + n.toString('hex');\n\n    if (res.length % 2 !== 0) {\n      res = '0' + res;\n    }\n\n    return res;\n  };\n  /**\r\n   * verifyPrivateKey\r\n   *\r\n   * @param {string|Buffer} privateKey\r\n   * @returns {boolean}\r\n   */\n\n\n  var verifyPrivateKey = function (privateKey) {\n    var keyPair = secp256k1$2.keyFromPrivate(privateKey, 'hex');\n    var result = keyPair.validate().result;\n    return result;\n  };\n  /**\r\n   * normalizePrivateKey : normalise private key from 0x or without 0x prefix\r\n   *\r\n   * @param {string} privateKey\r\n   * @returns {string}\r\n   */\n\n\n  var normalizePrivateKey = function (privateKey) {\n    try {\n      if (!util.validation.isPrivateKey(privateKey)) {\n        throw new Error('Private key is not correct');\n      }\n\n      var normalized = privateKey.toLowerCase().replace('0x', '');\n\n      if (!verifyPrivateKey(normalized)) {\n        throw new Error('Private key is not correct');\n      }\n\n      return normalized;\n    } catch (error) {\n      throw error;\n    }\n  };\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation. All rights reserved.\r\n  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n  this file except in compliance with the License. You may obtain a copy of the\r\n  License at http://www.apache.org/licenses/LICENSE-2.0\r\n  \n  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n  MERCHANTABLITY OR NON-INFRINGEMENT.\r\n  \n  See the Apache Version 2.0 License for specific language governing permissions\r\n  and limitations under the License.\r\n  ***************************************************************************** */\n\n\n  function __awaiter(thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n\n      function step(result) {\n        result.done ? resolve(result.value) : new P(function (resolve) {\n          resolve(result.value);\n        }).then(fulfilled, rejected);\n      }\n\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  }\n\n  function __generator(thisArg, body) {\n    var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n        f,\n        y,\n        t,\n        g;\n    return g = {\n      next: verb(0),\n      \"throw\": verb(1),\n      \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n      return this;\n    }), g;\n\n    function verb(n) {\n      return function (v) {\n        return step([n, v]);\n      };\n    }\n\n    function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n\n      while (_) try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n\n      if (op[0] & 5) throw op[1];\n      return {\n        value: op[0] ? op[1] : void 0,\n        done: true\n      };\n    }\n  }\n\n  var aesJs = createCommonjsModule(function (module, exports) {\n    /*! MIT License. Copyright 2015-2018 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */\n    (function (root) {\n      function checkInt(value) {\n        return parseInt(value) === value;\n      }\n\n      function checkInts(arrayish) {\n        if (!checkInt(arrayish.length)) {\n          return false;\n        }\n\n        for (var i = 0; i < arrayish.length; i++) {\n          if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      function coerceArray(arg, copy) {\n        // ArrayBuffer view\n        if (arg.buffer && arg.name === 'Uint8Array') {\n          if (copy) {\n            if (arg.slice) {\n              arg = arg.slice();\n            } else {\n              arg = Array.prototype.slice.call(arg);\n            }\n          }\n\n          return arg;\n        } // It's an array; check it is a valid representation of a byte\n\n\n        if (Array.isArray(arg)) {\n          if (!checkInts(arg)) {\n            throw new Error('Array contains invalid value: ' + arg);\n          }\n\n          return new Uint8Array(arg);\n        } // Something else, but behaves like an array (maybe a Buffer? Arguments?)\n\n\n        if (checkInt(arg.length) && checkInts(arg)) {\n          return new Uint8Array(arg);\n        }\n\n        throw new Error('unsupported array-like object');\n      }\n\n      function createArray(length) {\n        return new Uint8Array(length);\n      }\n\n      function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {\n        if (sourceStart != null || sourceEnd != null) {\n          if (sourceArray.slice) {\n            sourceArray = sourceArray.slice(sourceStart, sourceEnd);\n          } else {\n            sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);\n          }\n        }\n\n        targetArray.set(sourceArray, targetStart);\n      }\n\n      var convertUtf8 = function () {\n        function toBytes(text) {\n          var result = [],\n              i = 0;\n          text = encodeURI(text);\n\n          while (i < text.length) {\n            var c = text.charCodeAt(i++); // if it is a % sign, encode the following 2 bytes as a hex value\n\n            if (c === 37) {\n              result.push(parseInt(text.substr(i, 2), 16));\n              i += 2; // otherwise, just the actual byte\n            } else {\n              result.push(c);\n            }\n          }\n\n          return coerceArray(result);\n        }\n\n        function fromBytes(bytes) {\n          var result = [],\n              i = 0;\n\n          while (i < bytes.length) {\n            var c = bytes[i];\n\n            if (c < 128) {\n              result.push(String.fromCharCode(c));\n              i++;\n            } else if (c > 191 && c < 224) {\n              result.push(String.fromCharCode((c & 0x1f) << 6 | bytes[i + 1] & 0x3f));\n              i += 2;\n            } else {\n              result.push(String.fromCharCode((c & 0x0f) << 12 | (bytes[i + 1] & 0x3f) << 6 | bytes[i + 2] & 0x3f));\n              i += 3;\n            }\n          }\n\n          return result.join('');\n        }\n\n        return {\n          toBytes: toBytes,\n          fromBytes: fromBytes\n        };\n      }();\n\n      var convertHex = function () {\n        function toBytes(text) {\n          var result = [];\n\n          for (var i = 0; i < text.length; i += 2) {\n            result.push(parseInt(text.substr(i, 2), 16));\n          }\n\n          return result;\n        } // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html\n\n\n        var Hex = '0123456789abcdef';\n\n        function fromBytes(bytes) {\n          var result = [];\n\n          for (var i = 0; i < bytes.length; i++) {\n            var v = bytes[i];\n            result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);\n          }\n\n          return result.join('');\n        }\n\n        return {\n          toBytes: toBytes,\n          fromBytes: fromBytes\n        };\n      }(); // Number of rounds by keysize\n\n\n      var numberOfRounds = {\n        16: 10,\n        24: 12,\n        32: 14\n      }; // Round constant words\n\n      var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91]; // S-box and Inverse S-box (S is for Substitution)\n\n      var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\n      var Si = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]; // Transformations for encryption\n\n      var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];\n      var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];\n      var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];\n      var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c]; // Transformations for decryption\n\n      var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];\n      var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];\n      var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];\n      var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0]; // Transformations for decryption key expansion\n\n      var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];\n      var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];\n      var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];\n      var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];\n\n      function convertToInt32(bytes) {\n        var result = [];\n\n        for (var i = 0; i < bytes.length; i += 4) {\n          result.push(bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]);\n        }\n\n        return result;\n      }\n\n      var AES = function (key) {\n        if (!(this instanceof AES)) {\n          throw Error('AES must be instanitated with `new`');\n        }\n\n        Object.defineProperty(this, 'key', {\n          value: coerceArray(key, true)\n        });\n\n        this._prepare();\n      };\n\n      AES.prototype._prepare = function () {\n        var rounds = numberOfRounds[this.key.length];\n\n        if (rounds == null) {\n          throw new Error('invalid key size (must be 16, 24 or 32 bytes)');\n        } // encryption round keys\n\n\n        this._Ke = []; // decryption round keys\n\n        this._Kd = [];\n\n        for (var i = 0; i <= rounds; i++) {\n          this._Ke.push([0, 0, 0, 0]);\n\n          this._Kd.push([0, 0, 0, 0]);\n        }\n\n        var roundKeyCount = (rounds + 1) * 4;\n        var KC = this.key.length / 4; // convert the key into ints\n\n        var tk = convertToInt32(this.key); // copy values into round key arrays\n\n        var index;\n\n        for (var i = 0; i < KC; i++) {\n          index = i >> 2;\n          this._Ke[index][i % 4] = tk[i];\n          this._Kd[rounds - index][i % 4] = tk[i];\n        } // key expansion (fips-197 section 5.2)\n\n\n        var rconpointer = 0;\n        var t = KC,\n            tt;\n\n        while (t < roundKeyCount) {\n          tt = tk[KC - 1];\n          tk[0] ^= S[tt >> 16 & 0xFF] << 24 ^ S[tt >> 8 & 0xFF] << 16 ^ S[tt & 0xFF] << 8 ^ S[tt >> 24 & 0xFF] ^ rcon[rconpointer] << 24;\n          rconpointer += 1; // key expansion (for non-256 bit)\n\n          if (KC != 8) {\n            for (var i = 1; i < KC; i++) {\n              tk[i] ^= tk[i - 1];\n            } // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n\n          } else {\n            for (var i = 1; i < KC / 2; i++) {\n              tk[i] ^= tk[i - 1];\n            }\n\n            tt = tk[KC / 2 - 1];\n            tk[KC / 2] ^= S[tt & 0xFF] ^ S[tt >> 8 & 0xFF] << 8 ^ S[tt >> 16 & 0xFF] << 16 ^ S[tt >> 24 & 0xFF] << 24;\n\n            for (var i = KC / 2 + 1; i < KC; i++) {\n              tk[i] ^= tk[i - 1];\n            }\n          } // copy values into round key arrays\n\n\n          var i = 0,\n              r,\n              c;\n\n          while (i < KC && t < roundKeyCount) {\n            r = t >> 2;\n            c = t % 4;\n            this._Ke[r][c] = tk[i];\n            this._Kd[rounds - r][c] = tk[i++];\n            t++;\n          }\n        } // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n\n\n        for (var r = 1; r < rounds; r++) {\n          for (var c = 0; c < 4; c++) {\n            tt = this._Kd[r][c];\n            this._Kd[r][c] = U1[tt >> 24 & 0xFF] ^ U2[tt >> 16 & 0xFF] ^ U3[tt >> 8 & 0xFF] ^ U4[tt & 0xFF];\n          }\n        }\n      };\n\n      AES.prototype.encrypt = function (plaintext) {\n        if (plaintext.length != 16) {\n          throw new Error('invalid plaintext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Ke.length - 1;\n        var a = [0, 0, 0, 0]; // convert plaintext to (ints ^ key)\n\n        var t = convertToInt32(plaintext);\n\n        for (var i = 0; i < 4; i++) {\n          t[i] ^= this._Ke[0][i];\n        } // apply round transforms\n\n\n        for (var r = 1; r < rounds; r++) {\n          for (var i = 0; i < 4; i++) {\n            a[i] = T1[t[i] >> 24 & 0xff] ^ T2[t[(i + 1) % 4] >> 16 & 0xff] ^ T3[t[(i + 2) % 4] >> 8 & 0xff] ^ T4[t[(i + 3) % 4] & 0xff] ^ this._Ke[r][i];\n          }\n\n          t = a.slice();\n        } // the last round is special\n\n\n        var result = createArray(16),\n            tt;\n\n        for (var i = 0; i < 4; i++) {\n          tt = this._Ke[rounds][i];\n          result[4 * i] = (S[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;\n          result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;\n          result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;\n          result[4 * i + 3] = (S[t[(i + 3) % 4] & 0xff] ^ tt) & 0xff;\n        }\n\n        return result;\n      };\n\n      AES.prototype.decrypt = function (ciphertext) {\n        if (ciphertext.length != 16) {\n          throw new Error('invalid ciphertext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Kd.length - 1;\n        var a = [0, 0, 0, 0]; // convert plaintext to (ints ^ key)\n\n        var t = convertToInt32(ciphertext);\n\n        for (var i = 0; i < 4; i++) {\n          t[i] ^= this._Kd[0][i];\n        } // apply round transforms\n\n\n        for (var r = 1; r < rounds; r++) {\n          for (var i = 0; i < 4; i++) {\n            a[i] = T5[t[i] >> 24 & 0xff] ^ T6[t[(i + 3) % 4] >> 16 & 0xff] ^ T7[t[(i + 2) % 4] >> 8 & 0xff] ^ T8[t[(i + 1) % 4] & 0xff] ^ this._Kd[r][i];\n          }\n\n          t = a.slice();\n        } // the last round is special\n\n\n        var result = createArray(16),\n            tt;\n\n        for (var i = 0; i < 4; i++) {\n          tt = this._Kd[rounds][i];\n          result[4 * i] = (Si[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;\n          result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;\n          result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;\n          result[4 * i + 3] = (Si[t[(i + 1) % 4] & 0xff] ^ tt) & 0xff;\n        }\n\n        return result;\n      };\n      /**\n       *  Mode Of Operation - Electonic Codebook (ECB)\n       */\n\n\n      var ModeOfOperationECB = function (key) {\n        if (!(this instanceof ModeOfOperationECB)) {\n          throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Electronic Code Block\";\n        this.name = \"ecb\";\n        this._aes = new AES(key);\n      };\n\n      ModeOfOperationECB.prototype.encrypt = function (plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if (plaintext.length % 16 !== 0) {\n          throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n          copyArray(plaintext, block, 0, i, i + 16);\n          block = this._aes.encrypt(block);\n          copyArray(block, ciphertext, i);\n        }\n\n        return ciphertext;\n      };\n\n      ModeOfOperationECB.prototype.decrypt = function (ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if (ciphertext.length % 16 !== 0) {\n          throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n          copyArray(ciphertext, block, 0, i, i + 16);\n          block = this._aes.decrypt(block);\n          copyArray(block, plaintext, i);\n        }\n\n        return plaintext;\n      };\n      /**\n       *  Mode Of Operation - Cipher Block Chaining (CBC)\n       */\n\n\n      var ModeOfOperationCBC = function (key, iv) {\n        if (!(this instanceof ModeOfOperationCBC)) {\n          throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Block Chaining\";\n        this.name = \"cbc\";\n\n        if (!iv) {\n          iv = createArray(16);\n        } else if (iv.length != 16) {\n          throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastCipherblock = coerceArray(iv, true);\n        this._aes = new AES(key);\n      };\n\n      ModeOfOperationCBC.prototype.encrypt = function (plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if (plaintext.length % 16 !== 0) {\n          throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n          copyArray(plaintext, block, 0, i, i + 16);\n\n          for (var j = 0; j < 16; j++) {\n            block[j] ^= this._lastCipherblock[j];\n          }\n\n          this._lastCipherblock = this._aes.encrypt(block);\n          copyArray(this._lastCipherblock, ciphertext, i);\n        }\n\n        return ciphertext;\n      };\n\n      ModeOfOperationCBC.prototype.decrypt = function (ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if (ciphertext.length % 16 !== 0) {\n          throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n          copyArray(ciphertext, block, 0, i, i + 16);\n          block = this._aes.decrypt(block);\n\n          for (var j = 0; j < 16; j++) {\n            plaintext[i + j] = block[j] ^ this._lastCipherblock[j];\n          }\n\n          copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);\n        }\n\n        return plaintext;\n      };\n      /**\n       *  Mode Of Operation - Cipher Feedback (CFB)\n       */\n\n\n      var ModeOfOperationCFB = function (key, iv, segmentSize) {\n        if (!(this instanceof ModeOfOperationCFB)) {\n          throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Feedback\";\n        this.name = \"cfb\";\n\n        if (!iv) {\n          iv = createArray(16);\n        } else if (iv.length != 16) {\n          throw new Error('invalid initialation vector size (must be 16 size)');\n        }\n\n        if (!segmentSize) {\n          segmentSize = 1;\n        }\n\n        this.segmentSize = segmentSize;\n        this._shiftRegister = coerceArray(iv, true);\n        this._aes = new AES(key);\n      };\n\n      ModeOfOperationCFB.prototype.encrypt = function (plaintext) {\n        if (plaintext.length % this.segmentSize != 0) {\n          throw new Error('invalid plaintext size (must be segmentSize bytes)');\n        }\n\n        var encrypted = coerceArray(plaintext, true);\n        var xorSegment;\n\n        for (var i = 0; i < encrypted.length; i += this.segmentSize) {\n          xorSegment = this._aes.encrypt(this._shiftRegister);\n\n          for (var j = 0; j < this.segmentSize; j++) {\n            encrypted[i + j] ^= xorSegment[j];\n          } // Shift the register\n\n\n          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n          copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return encrypted;\n      };\n\n      ModeOfOperationCFB.prototype.decrypt = function (ciphertext) {\n        if (ciphertext.length % this.segmentSize != 0) {\n          throw new Error('invalid ciphertext size (must be segmentSize bytes)');\n        }\n\n        var plaintext = coerceArray(ciphertext, true);\n        var xorSegment;\n\n        for (var i = 0; i < plaintext.length; i += this.segmentSize) {\n          xorSegment = this._aes.encrypt(this._shiftRegister);\n\n          for (var j = 0; j < this.segmentSize; j++) {\n            plaintext[i + j] ^= xorSegment[j];\n          } // Shift the register\n\n\n          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n          copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return plaintext;\n      };\n      /**\n       *  Mode Of Operation - Output Feedback (OFB)\n       */\n\n\n      var ModeOfOperationOFB = function (key, iv) {\n        if (!(this instanceof ModeOfOperationOFB)) {\n          throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Output Feedback\";\n        this.name = \"ofb\";\n\n        if (!iv) {\n          iv = createArray(16);\n        } else if (iv.length != 16) {\n          throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastPrecipher = coerceArray(iv, true);\n        this._lastPrecipherIndex = 16;\n        this._aes = new AES(key);\n      };\n\n      ModeOfOperationOFB.prototype.encrypt = function (plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n          if (this._lastPrecipherIndex === 16) {\n            this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);\n            this._lastPrecipherIndex = 0;\n          }\n\n          encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];\n        }\n\n        return encrypted;\n      }; // Decryption is symetric\n\n\n      ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;\n      /**\n       *  Counter object for CTR common mode of operation\n       */\n\n      var Counter = function (initialValue) {\n        if (!(this instanceof Counter)) {\n          throw Error('Counter must be instanitated with `new`');\n        } // We allow 0, but anything false-ish uses the default 1\n\n\n        if (initialValue !== 0 && !initialValue) {\n          initialValue = 1;\n        }\n\n        if (typeof initialValue === 'number') {\n          this._counter = createArray(16);\n          this.setValue(initialValue);\n        } else {\n          this.setBytes(initialValue);\n        }\n      };\n\n      Counter.prototype.setValue = function (value) {\n        if (typeof value !== 'number' || parseInt(value) != value) {\n          throw new Error('invalid counter value (must be an integer)');\n        } // We cannot safely handle numbers beyond the safe range for integers\n\n\n        if (value > Number.MAX_SAFE_INTEGER) {\n          throw new Error('integer value out of safe range');\n        }\n\n        for (var index = 15; index >= 0; --index) {\n          this._counter[index] = value % 256;\n          value = parseInt(value / 256);\n        }\n      };\n\n      Counter.prototype.setBytes = function (bytes) {\n        bytes = coerceArray(bytes, true);\n\n        if (bytes.length != 16) {\n          throw new Error('invalid counter bytes size (must be 16 bytes)');\n        }\n\n        this._counter = bytes;\n      };\n\n      Counter.prototype.increment = function () {\n        for (var i = 15; i >= 0; i--) {\n          if (this._counter[i] === 255) {\n            this._counter[i] = 0;\n          } else {\n            this._counter[i]++;\n            break;\n          }\n        }\n      };\n      /**\n       *  Mode Of Operation - Counter (CTR)\n       */\n\n\n      var ModeOfOperationCTR = function (key, counter) {\n        if (!(this instanceof ModeOfOperationCTR)) {\n          throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Counter\";\n        this.name = \"ctr\";\n\n        if (!(counter instanceof Counter)) {\n          counter = new Counter(counter);\n        }\n\n        this._counter = counter;\n        this._remainingCounter = null;\n        this._remainingCounterIndex = 16;\n        this._aes = new AES(key);\n      };\n\n      ModeOfOperationCTR.prototype.encrypt = function (plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n          if (this._remainingCounterIndex === 16) {\n            this._remainingCounter = this._aes.encrypt(this._counter._counter);\n            this._remainingCounterIndex = 0;\n\n            this._counter.increment();\n          }\n\n          encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];\n        }\n\n        return encrypted;\n      }; // Decryption is symetric\n\n\n      ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt; ///////////////////////\n      // Padding\n      // See:https://tools.ietf.org/html/rfc2315\n\n      function pkcs7pad(data) {\n        data = coerceArray(data, true);\n        var padder = 16 - data.length % 16;\n        var result = createArray(data.length + padder);\n        copyArray(data, result);\n\n        for (var i = data.length; i < result.length; i++) {\n          result[i] = padder;\n        }\n\n        return result;\n      }\n\n      function pkcs7strip(data) {\n        data = coerceArray(data, true);\n\n        if (data.length < 16) {\n          throw new Error('PKCS#7 invalid length');\n        }\n\n        var padder = data[data.length - 1];\n\n        if (padder > 16) {\n          throw new Error('PKCS#7 padding byte out of range');\n        }\n\n        var length = data.length - padder;\n\n        for (var i = 0; i < padder; i++) {\n          if (data[length + i] !== padder) {\n            throw new Error('PKCS#7 invalid padding byte');\n          }\n        }\n\n        var result = createArray(length);\n        copyArray(data, result, 0, 0, length);\n        return result;\n      } ///////////////////////\n      // Exporting\n      // The block cipher\n\n\n      var aesjs = {\n        AES: AES,\n        Counter: Counter,\n        ModeOfOperation: {\n          ecb: ModeOfOperationECB,\n          cbc: ModeOfOperationCBC,\n          cfb: ModeOfOperationCFB,\n          ofb: ModeOfOperationOFB,\n          ctr: ModeOfOperationCTR\n        },\n        utils: {\n          hex: convertHex,\n          utf8: convertUtf8\n        },\n        padding: {\n          pkcs7: {\n            pad: pkcs7pad,\n            strip: pkcs7strip\n          }\n        },\n        _arrayTest: {\n          coerceArray: coerceArray,\n          createArray: createArray,\n          copyArray: copyArray\n        }\n      }; // node.js\n\n      {\n        module.exports = aesjs; // RequireJS/AMD\n        // http://www.requirejs.org/docs/api.html\n        // https://github.com/amdjs/amdjs-api/wiki/AMD\n      }\n    })(commonjsGlobal);\n  });\n  var global$1 = typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {}; // shim for using process in browser\n  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js\n\n  function defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n  }\n\n  function defaultClearTimeout() {\n    throw new Error('clearTimeout has not been defined');\n  }\n\n  var cachedSetTimeout = defaultSetTimout;\n  var cachedClearTimeout = defaultClearTimeout;\n\n  if (typeof global$1.setTimeout === 'function') {\n    cachedSetTimeout = setTimeout;\n  }\n\n  if (typeof global$1.clearTimeout === 'function') {\n    cachedClearTimeout = clearTimeout;\n  }\n\n  function runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n      //normal enviroments in sane situations\n      return setTimeout(fun, 0);\n    } // if setTimeout wasn't available but was latter defined\n\n\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n      cachedSetTimeout = setTimeout;\n      return setTimeout(fun, 0);\n    }\n\n    try {\n      // when when somebody has screwed with setTimeout but no I.E. maddness\n      return cachedSetTimeout(fun, 0);\n    } catch (e) {\n      try {\n        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n        return cachedSetTimeout.call(null, fun, 0);\n      } catch (e) {\n        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n        return cachedSetTimeout.call(this, fun, 0);\n      }\n    }\n  }\n\n  function runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n      //normal enviroments in sane situations\n      return clearTimeout(marker);\n    } // if clearTimeout wasn't available but was latter defined\n\n\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n      cachedClearTimeout = clearTimeout;\n      return clearTimeout(marker);\n    }\n\n    try {\n      // when when somebody has screwed with setTimeout but no I.E. maddness\n      return cachedClearTimeout(marker);\n    } catch (e) {\n      try {\n        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n        return cachedClearTimeout.call(null, marker);\n      } catch (e) {\n        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n        // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n        return cachedClearTimeout.call(this, marker);\n      }\n    }\n  }\n\n  var queue = [];\n  var draining = false;\n  var currentQueue;\n  var queueIndex = -1;\n\n  function cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n      return;\n    }\n\n    draining = false;\n\n    if (currentQueue.length) {\n      queue = currentQueue.concat(queue);\n    } else {\n      queueIndex = -1;\n    }\n\n    if (queue.length) {\n      drainQueue();\n    }\n  }\n\n  function drainQueue() {\n    if (draining) {\n      return;\n    }\n\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n    var len = queue.length;\n\n    while (len) {\n      currentQueue = queue;\n      queue = [];\n\n      while (++queueIndex < len) {\n        if (currentQueue) {\n          currentQueue[queueIndex].run();\n        }\n      }\n\n      queueIndex = -1;\n      len = queue.length;\n    }\n\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n  }\n\n  function nextTick(fun) {\n    var args = new Array(arguments.length - 1);\n\n    if (arguments.length > 1) {\n      for (var i = 1; i < arguments.length; i++) {\n        args[i - 1] = arguments[i];\n      }\n    }\n\n    queue.push(new Item(fun, args));\n\n    if (queue.length === 1 && !draining) {\n      runTimeout(drainQueue);\n    }\n  } // v8 likes predictible objects\n\n\n  function Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n  }\n\n  Item.prototype.run = function () {\n    this.fun.apply(null, this.array);\n  }; // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js\n\n\n  var performance = global$1.performance || {};\n\n  var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function () {\n    return new Date().getTime();\n  };\n\n  var lookup = [];\n  var revLookup = [];\n  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n  var inited = false;\n\n  function init() {\n    inited = true;\n    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n    for (var i = 0, len = code.length; i < len; ++i) {\n      lookup[i] = code[i];\n      revLookup[code.charCodeAt(i)] = i;\n    }\n\n    revLookup['-'.charCodeAt(0)] = 62;\n    revLookup['_'.charCodeAt(0)] = 63;\n  }\n\n  function toByteArray(b64) {\n    if (!inited) {\n      init();\n    }\n\n    var i, j, l, tmp, placeHolders, arr;\n    var len = b64.length;\n\n    if (len % 4 > 0) {\n      throw new Error('Invalid string. Length must be a multiple of 4');\n    } // the number of equal signs (place holders)\n    // if there are two placeholders, than the two characters before it\n    // represent one byte\n    // if there is only one, then the three characters before it represent 2 bytes\n    // this is just a cheap hack to not do indexOf twice\n\n\n    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0; // base64 is 4/3 + up to two characters of the original data\n\n    arr = new Arr(len * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars\n\n    l = placeHolders > 0 ? len - 4 : len;\n    var L = 0;\n\n    for (i = 0, j = 0; i < l; i += 4, j += 3) {\n      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n      arr[L++] = tmp >> 16 & 0xFF;\n      arr[L++] = tmp >> 8 & 0xFF;\n      arr[L++] = tmp & 0xFF;\n    }\n\n    if (placeHolders === 2) {\n      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n      arr[L++] = tmp & 0xFF;\n    } else if (placeHolders === 1) {\n      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n      arr[L++] = tmp >> 8 & 0xFF;\n      arr[L++] = tmp & 0xFF;\n    }\n\n    return arr;\n  }\n\n  function tripletToBase64(num) {\n    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n  }\n\n  function encodeChunk(uint8, start, end) {\n    var tmp;\n    var output = [];\n\n    for (var i = start; i < end; i += 3) {\n      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];\n      output.push(tripletToBase64(tmp));\n    }\n\n    return output.join('');\n  }\n\n  function fromByteArray(uint8) {\n    if (!inited) {\n      init();\n    }\n\n    var tmp;\n    var len = uint8.length;\n    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n\n    var output = '';\n    var parts = [];\n    var maxChunkLength = 16383; // must be multiple of 3\n    // go through the array every three bytes, we'll deal with trailing stuff later\n\n    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n    } // pad the end with zeros, but make sure to not forget the extra bytes\n\n\n    if (extraBytes === 1) {\n      tmp = uint8[len - 1];\n      output += lookup[tmp >> 2];\n      output += lookup[tmp << 4 & 0x3F];\n      output += '==';\n    } else if (extraBytes === 2) {\n      tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n      output += lookup[tmp >> 10];\n      output += lookup[tmp >> 4 & 0x3F];\n      output += lookup[tmp << 2 & 0x3F];\n      output += '=';\n    }\n\n    parts.push(output);\n    return parts.join('');\n  }\n\n  function read(buffer$$1, offset, isLE, mLen, nBytes) {\n    var e, m;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var nBits = -7;\n    var i = isLE ? nBytes - 1 : 0;\n    var d = isLE ? -1 : 1;\n    var s = buffer$$1[offset + i];\n    i += d;\n    e = s & (1 << -nBits) - 1;\n    s >>= -nBits;\n    nBits += eLen;\n\n    for (; nBits > 0; e = e * 256 + buffer$$1[offset + i], i += d, nBits -= 8) {}\n\n    m = e & (1 << -nBits) - 1;\n    e >>= -nBits;\n    nBits += mLen;\n\n    for (; nBits > 0; m = m * 256 + buffer$$1[offset + i], i += d, nBits -= 8) {}\n\n    if (e === 0) {\n      e = 1 - eBias;\n    } else if (e === eMax) {\n      return m ? NaN : (s ? -1 : 1) * Infinity;\n    } else {\n      m = m + Math.pow(2, mLen);\n      e = e - eBias;\n    }\n\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n  }\n\n  function write(buffer$$1, value, offset, isLE, mLen, nBytes) {\n    var e, m, c;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n    var i = isLE ? 0 : nBytes - 1;\n    var d = isLE ? 1 : -1;\n    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n    value = Math.abs(value);\n\n    if (isNaN(value) || value === Infinity) {\n      m = isNaN(value) ? 1 : 0;\n      e = eMax;\n    } else {\n      e = Math.floor(Math.log(value) / Math.LN2);\n\n      if (value * (c = Math.pow(2, -e)) < 1) {\n        e--;\n        c *= 2;\n      }\n\n      if (e + eBias >= 1) {\n        value += rt / c;\n      } else {\n        value += rt * Math.pow(2, 1 - eBias);\n      }\n\n      if (value * c >= 2) {\n        e++;\n        c /= 2;\n      }\n\n      if (e + eBias >= eMax) {\n        m = 0;\n        e = eMax;\n      } else if (e + eBias >= 1) {\n        m = (value * c - 1) * Math.pow(2, mLen);\n        e = e + eBias;\n      } else {\n        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n        e = 0;\n      }\n    }\n\n    for (; mLen >= 8; buffer$$1[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n    e = e << mLen | m;\n    eLen += mLen;\n\n    for (; eLen > 0; buffer$$1[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n    buffer$$1[offset + i - d] |= s * 128;\n  }\n\n  var toString = {}.toString;\n\n  var isArray = Array.isArray || function (arr) {\n    return toString.call(arr) == '[object Array]';\n  };\n\n  var INSPECT_MAX_BYTES = 50;\n  /**\n   * If `Buffer.TYPED_ARRAY_SUPPORT`:\n   *   === true    Use Uint8Array implementation (fastest)\n   *   === false   Use Object implementation (most compatible, even IE6)\n   *\n   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n   * Opera 11.6+, iOS 4.2+.\n   *\n   * Due to various browser bugs, sometimes the Object implementation will be used even\n   * when the browser supports typed arrays.\n   *\n   * Note:\n   *\n   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n   *\n   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n   *\n   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n   *     incorrect length in some situations.\n  \t * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n   * get the Object implementation, which is slower but behaves correctly.\n   */\n\n  Buffer$1.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined ? global$1.TYPED_ARRAY_SUPPORT : true;\n\n  function kMaxLength() {\n    return Buffer$1.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;\n  }\n\n  function createBuffer(that, length) {\n    if (kMaxLength() < length) {\n      throw new RangeError('Invalid typed array length');\n    }\n\n    if (Buffer$1.TYPED_ARRAY_SUPPORT) {\n      // Return an augmented `Uint8Array` instance, for best performance\n      that = new Uint8Array(length);\n      that.__proto__ = Buffer$1.prototype;\n    } else {\n      // Fallback: Return an object instance of the Buffer class\n      if (that === null) {\n        that = new Buffer$1(length);\n      }\n\n      that.length = length;\n    }\n\n    return that;\n  }\n  /**\n   * The Buffer constructor returns instances of `Uint8Array` that have their\n   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n   * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n   * returns a single octet.\n   *\n   * The `Uint8Array` prototype remains unmodified.\n   */\n\n\n  function Buffer$1(arg, encodingOrOffset, length) {\n    if (!Buffer$1.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$1)) {\n      return new Buffer$1(arg, encodingOrOffset, length);\n    } // Common case.\n\n\n    if (typeof arg === 'number') {\n      if (typeof encodingOrOffset === 'string') {\n        throw new Error('If encoding is specified then the first argument must be a string');\n      }\n\n      return allocUnsafe(this, arg);\n    }\n\n    return from(this, arg, encodingOrOffset, length);\n  }\n\n  Buffer$1.poolSize = 8192; // not used by this implementation\n  // TODO: Legacy, not needed anymore. Remove in next major version.\n\n  Buffer$1._augment = function (arr) {\n    arr.__proto__ = Buffer$1.prototype;\n    return arr;\n  };\n\n  function from(that, value, encodingOrOffset, length) {\n    if (typeof value === 'number') {\n      throw new TypeError('\"value\" argument must not be a number');\n    }\n\n    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n      return fromArrayBuffer(that, value, encodingOrOffset, length);\n    }\n\n    if (typeof value === 'string') {\n      return fromString(that, value, encodingOrOffset);\n    }\n\n    return fromObject(that, value);\n  }\n  /**\n   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n   * if value is a number.\n   * Buffer.from(str[, encoding])\n   * Buffer.from(array)\n   * Buffer.from(buffer)\n   * Buffer.from(arrayBuffer[, byteOffset[, length]])\n   **/\n\n\n  Buffer$1.from = function (value, encodingOrOffset, length) {\n    return from(null, value, encodingOrOffset, length);\n  };\n\n  if (Buffer$1.TYPED_ARRAY_SUPPORT) {\n    Buffer$1.prototype.__proto__ = Uint8Array.prototype;\n    Buffer$1.__proto__ = Uint8Array;\n  }\n\n  function assertSize(size) {\n    if (typeof size !== 'number') {\n      throw new TypeError('\"size\" argument must be a number');\n    } else if (size < 0) {\n      throw new RangeError('\"size\" argument must not be negative');\n    }\n  }\n\n  function alloc(that, size, fill, encoding) {\n    assertSize(size);\n\n    if (size <= 0) {\n      return createBuffer(that, size);\n    }\n\n    if (fill !== undefined) {\n      // Only pay attention to encoding if it's a string. This\n      // prevents accidentally sending in a number that would\n      // be interpretted as a start offset.\n      return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);\n    }\n\n    return createBuffer(that, size);\n  }\n  /**\n   * Creates a new filled Buffer instance.\n   * alloc(size[, fill[, encoding]])\n   **/\n\n\n  Buffer$1.alloc = function (size, fill, encoding) {\n    return alloc(null, size, fill, encoding);\n  };\n\n  function allocUnsafe(that, size) {\n    assertSize(size);\n    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n\n    if (!Buffer$1.TYPED_ARRAY_SUPPORT) {\n      for (var i = 0; i < size; ++i) {\n        that[i] = 0;\n      }\n    }\n\n    return that;\n  }\n  /**\n   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n   * */\n\n\n  Buffer$1.allocUnsafe = function (size) {\n    return allocUnsafe(null, size);\n  };\n  /**\n   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n   */\n\n\n  Buffer$1.allocUnsafeSlow = function (size) {\n    return allocUnsafe(null, size);\n  };\n\n  function fromString(that, string, encoding) {\n    if (typeof encoding !== 'string' || encoding === '') {\n      encoding = 'utf8';\n    }\n\n    if (!Buffer$1.isEncoding(encoding)) {\n      throw new TypeError('\"encoding\" must be a valid string encoding');\n    }\n\n    var length = byteLength(string, encoding) | 0;\n    that = createBuffer(that, length);\n    var actual = that.write(string, encoding);\n\n    if (actual !== length) {\n      // Writing a hex string, for example, that contains invalid characters will\n      // cause everything after the first invalid character to be ignored. (e.g.\n      // 'abxxcd' will be treated as 'ab')\n      that = that.slice(0, actual);\n    }\n\n    return that;\n  }\n\n  function fromArrayLike(that, array) {\n    var length = array.length < 0 ? 0 : checked(array.length) | 0;\n    that = createBuffer(that, length);\n\n    for (var i = 0; i < length; i += 1) {\n      that[i] = array[i] & 255;\n    }\n\n    return that;\n  }\n\n  function fromArrayBuffer(that, array, byteOffset, length) {\n    array.byteLength; // this throws if `array` is not a valid ArrayBuffer\n\n    if (byteOffset < 0 || array.byteLength < byteOffset) {\n      throw new RangeError('\\'offset\\' is out of bounds');\n    }\n\n    if (array.byteLength < byteOffset + (length || 0)) {\n      throw new RangeError('\\'length\\' is out of bounds');\n    }\n\n    if (byteOffset === undefined && length === undefined) {\n      array = new Uint8Array(array);\n    } else if (length === undefined) {\n      array = new Uint8Array(array, byteOffset);\n    } else {\n      array = new Uint8Array(array, byteOffset, length);\n    }\n\n    if (Buffer$1.TYPED_ARRAY_SUPPORT) {\n      // Return an augmented `Uint8Array` instance, for best performance\n      that = array;\n      that.__proto__ = Buffer$1.prototype;\n    } else {\n      // Fallback: Return an object instance of the Buffer class\n      that = fromArrayLike(that, array);\n    }\n\n    return that;\n  }\n\n  function fromObject(that, obj) {\n    if (internalIsBuffer(obj)) {\n      var len = checked(obj.length) | 0;\n      that = createBuffer(that, len);\n\n      if (that.length === 0) {\n        return that;\n      }\n\n      obj.copy(that, 0, 0, len);\n      return that;\n    }\n\n    if (obj) {\n      if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {\n        if (typeof obj.length !== 'number' || isnan(obj.length)) {\n          return createBuffer(that, 0);\n        }\n\n        return fromArrayLike(that, obj);\n      }\n\n      if (obj.type === 'Buffer' && isArray(obj.data)) {\n        return fromArrayLike(that, obj.data);\n      }\n    }\n\n    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');\n  }\n\n  function checked(length) {\n    // Note: cannot use `length < kMaxLength()` here because that fails when\n    // length is NaN (which is otherwise coerced to zero.)\n    if (length >= kMaxLength()) {\n      throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');\n    }\n\n    return length | 0;\n  }\n\n  Buffer$1.isBuffer = isBuffer;\n\n  function internalIsBuffer(b) {\n    return !!(b != null && b._isBuffer);\n  }\n\n  Buffer$1.compare = function compare(a, b) {\n    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {\n      throw new TypeError('Arguments must be Buffers');\n    }\n\n    if (a === b) return 0;\n    var x = a.length;\n    var y = b.length;\n\n    for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n      if (a[i] !== b[i]) {\n        x = a[i];\n        y = b[i];\n        break;\n      }\n    }\n\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n  };\n\n  Buffer$1.isEncoding = function isEncoding(encoding) {\n    switch (String(encoding).toLowerCase()) {\n      case 'hex':\n      case 'utf8':\n      case 'utf-8':\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n      case 'base64':\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return true;\n\n      default:\n        return false;\n    }\n  };\n\n  Buffer$1.concat = function concat(list, length) {\n    if (!isArray(list)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers');\n    }\n\n    if (list.length === 0) {\n      return Buffer$1.alloc(0);\n    }\n\n    var i;\n\n    if (length === undefined) {\n      length = 0;\n\n      for (i = 0; i < list.length; ++i) {\n        length += list[i].length;\n      }\n    }\n\n    var buffer$$1 = Buffer$1.allocUnsafe(length);\n    var pos = 0;\n\n    for (i = 0; i < list.length; ++i) {\n      var buf = list[i];\n\n      if (!internalIsBuffer(buf)) {\n        throw new TypeError('\"list\" argument must be an Array of Buffers');\n      }\n\n      buf.copy(buffer$$1, pos);\n      pos += buf.length;\n    }\n\n    return buffer$$1;\n  };\n\n  function byteLength(string, encoding) {\n    if (internalIsBuffer(string)) {\n      return string.length;\n    }\n\n    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n      return string.byteLength;\n    }\n\n    if (typeof string !== 'string') {\n      string = '' + string;\n    }\n\n    var len = string.length;\n    if (len === 0) return 0; // Use a for loop to avoid recursion\n\n    var loweredCase = false;\n\n    for (;;) {\n      switch (encoding) {\n        case 'ascii':\n        case 'latin1':\n        case 'binary':\n          return len;\n\n        case 'utf8':\n        case 'utf-8':\n        case undefined:\n          return utf8ToBytes(string).length;\n\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n          return len * 2;\n\n        case 'hex':\n          return len >>> 1;\n\n        case 'base64':\n          return base64ToBytes(string).length;\n\n        default:\n          if (loweredCase) return utf8ToBytes(string).length; // assume utf8\n\n          encoding = ('' + encoding).toLowerCase();\n          loweredCase = true;\n      }\n    }\n  }\n\n  Buffer$1.byteLength = byteLength;\n\n  function slowToString(encoding, start, end) {\n    var loweredCase = false; // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n    // property of a typed array.\n    // This behaves neither like String nor Uint8Array in that we set start/end\n    // to their upper/lower bounds if the value passed is out of range.\n    // undefined is handled specially as per ECMA-262 6th Edition,\n    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n\n    if (start === undefined || start < 0) {\n      start = 0;\n    } // Return early if start > this.length. Done here to prevent potential uint32\n    // coercion fail below.\n\n\n    if (start > this.length) {\n      return '';\n    }\n\n    if (end === undefined || end > this.length) {\n      end = this.length;\n    }\n\n    if (end <= 0) {\n      return '';\n    } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n\n\n    end >>>= 0;\n    start >>>= 0;\n\n    if (end <= start) {\n      return '';\n    }\n\n    if (!encoding) encoding = 'utf8';\n\n    while (true) {\n      switch (encoding) {\n        case 'hex':\n          return hexSlice(this, start, end);\n\n        case 'utf8':\n        case 'utf-8':\n          return utf8Slice(this, start, end);\n\n        case 'ascii':\n          return asciiSlice(this, start, end);\n\n        case 'latin1':\n        case 'binary':\n          return latin1Slice(this, start, end);\n\n        case 'base64':\n          return base64Slice(this, start, end);\n\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n          return utf16leSlice(this, start, end);\n\n        default:\n          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n          encoding = (encoding + '').toLowerCase();\n          loweredCase = true;\n      }\n    }\n  } // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n  // Buffer instances.\n\n\n  Buffer$1.prototype._isBuffer = true;\n\n  function swap(b, n, m) {\n    var i = b[n];\n    b[n] = b[m];\n    b[m] = i;\n  }\n\n  Buffer$1.prototype.swap16 = function swap16() {\n    var len = this.length;\n\n    if (len % 2 !== 0) {\n      throw new RangeError('Buffer size must be a multiple of 16-bits');\n    }\n\n    for (var i = 0; i < len; i += 2) {\n      swap(this, i, i + 1);\n    }\n\n    return this;\n  };\n\n  Buffer$1.prototype.swap32 = function swap32() {\n    var len = this.length;\n\n    if (len % 4 !== 0) {\n      throw new RangeError('Buffer size must be a multiple of 32-bits');\n    }\n\n    for (var i = 0; i < len; i += 4) {\n      swap(this, i, i + 3);\n      swap(this, i + 1, i + 2);\n    }\n\n    return this;\n  };\n\n  Buffer$1.prototype.swap64 = function swap64() {\n    var len = this.length;\n\n    if (len % 8 !== 0) {\n      throw new RangeError('Buffer size must be a multiple of 64-bits');\n    }\n\n    for (var i = 0; i < len; i += 8) {\n      swap(this, i, i + 7);\n      swap(this, i + 1, i + 6);\n      swap(this, i + 2, i + 5);\n      swap(this, i + 3, i + 4);\n    }\n\n    return this;\n  };\n\n  Buffer$1.prototype.toString = function toString() {\n    var length = this.length | 0;\n    if (length === 0) return '';\n    if (arguments.length === 0) return utf8Slice(this, 0, length);\n    return slowToString.apply(this, arguments);\n  };\n\n  Buffer$1.prototype.equals = function equals(b) {\n    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer');\n    if (this === b) return true;\n    return Buffer$1.compare(this, b) === 0;\n  };\n\n  Buffer$1.prototype.inspect = function inspect() {\n    var str = '';\n    var max = INSPECT_MAX_BYTES;\n\n    if (this.length > 0) {\n      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n      if (this.length > max) str += ' ... ';\n    }\n\n    return '<Buffer ' + str + '>';\n  };\n\n  Buffer$1.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n    if (!internalIsBuffer(target)) {\n      throw new TypeError('Argument must be a Buffer');\n    }\n\n    if (start === undefined) {\n      start = 0;\n    }\n\n    if (end === undefined) {\n      end = target ? target.length : 0;\n    }\n\n    if (thisStart === undefined) {\n      thisStart = 0;\n    }\n\n    if (thisEnd === undefined) {\n      thisEnd = this.length;\n    }\n\n    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n      throw new RangeError('out of range index');\n    }\n\n    if (thisStart >= thisEnd && start >= end) {\n      return 0;\n    }\n\n    if (thisStart >= thisEnd) {\n      return -1;\n    }\n\n    if (start >= end) {\n      return 1;\n    }\n\n    start >>>= 0;\n    end >>>= 0;\n    thisStart >>>= 0;\n    thisEnd >>>= 0;\n    if (this === target) return 0;\n    var x = thisEnd - thisStart;\n    var y = end - start;\n    var len = Math.min(x, y);\n    var thisCopy = this.slice(thisStart, thisEnd);\n    var targetCopy = target.slice(start, end);\n\n    for (var i = 0; i < len; ++i) {\n      if (thisCopy[i] !== targetCopy[i]) {\n        x = thisCopy[i];\n        y = targetCopy[i];\n        break;\n      }\n    }\n\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n  }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n  //\n  // Arguments:\n  // - buffer - a Buffer to search\n  // - val - a string, Buffer, or number\n  // - byteOffset - an index into `buffer`; will be clamped to an int32\n  // - encoding - an optional encoding, relevant is val is a string\n  // - dir - true for indexOf, false for lastIndexOf\n\n\n  function bidirectionalIndexOf(buffer$$1, val, byteOffset, encoding, dir) {\n    // Empty buffer means no match\n    if (buffer$$1.length === 0) return -1; // Normalize byteOffset\n\n    if (typeof byteOffset === 'string') {\n      encoding = byteOffset;\n      byteOffset = 0;\n    } else if (byteOffset > 0x7fffffff) {\n      byteOffset = 0x7fffffff;\n    } else if (byteOffset < -0x80000000) {\n      byteOffset = -0x80000000;\n    }\n\n    byteOffset = +byteOffset; // Coerce to Number.\n\n    if (isNaN(byteOffset)) {\n      // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n      byteOffset = dir ? 0 : buffer$$1.length - 1;\n    } // Normalize byteOffset: negative offsets start from the end of the buffer\n\n\n    if (byteOffset < 0) byteOffset = buffer$$1.length + byteOffset;\n\n    if (byteOffset >= buffer$$1.length) {\n      if (dir) return -1;else byteOffset = buffer$$1.length - 1;\n    } else if (byteOffset < 0) {\n      if (dir) byteOffset = 0;else return -1;\n    } // Normalize val\n\n\n    if (typeof val === 'string') {\n      val = Buffer$1.from(val, encoding);\n    } // Finally, search either indexOf (if dir is true) or lastIndexOf\n\n\n    if (internalIsBuffer(val)) {\n      // Special case: looking for empty string/buffer always fails\n      if (val.length === 0) {\n        return -1;\n      }\n\n      return arrayIndexOf(buffer$$1, val, byteOffset, encoding, dir);\n    } else if (typeof val === 'number') {\n      val = val & 0xFF; // Search for a byte value [0-255]\n\n      if (Buffer$1.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {\n        if (dir) {\n          return Uint8Array.prototype.indexOf.call(buffer$$1, val, byteOffset);\n        } else {\n          return Uint8Array.prototype.lastIndexOf.call(buffer$$1, val, byteOffset);\n        }\n      }\n\n      return arrayIndexOf(buffer$$1, [val], byteOffset, encoding, dir);\n    }\n\n    throw new TypeError('val must be string, number or Buffer');\n  }\n\n  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n    var indexSize = 1;\n    var arrLength = arr.length;\n    var valLength = val.length;\n\n    if (encoding !== undefined) {\n      encoding = String(encoding).toLowerCase();\n\n      if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {\n        if (arr.length < 2 || val.length < 2) {\n          return -1;\n        }\n\n        indexSize = 2;\n        arrLength /= 2;\n        valLength /= 2;\n        byteOffset /= 2;\n      }\n    }\n\n    function read$$1(buf, i) {\n      if (indexSize === 1) {\n        return buf[i];\n      } else {\n        return buf.readUInt16BE(i * indexSize);\n      }\n    }\n\n    var i;\n\n    if (dir) {\n      var foundIndex = -1;\n\n      for (i = byteOffset; i < arrLength; i++) {\n        if (read$$1(arr, i) === read$$1(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n          if (foundIndex === -1) foundIndex = i;\n          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n        } else {\n          if (foundIndex !== -1) i -= i - foundIndex;\n          foundIndex = -1;\n        }\n      }\n    } else {\n      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n\n      for (i = byteOffset; i >= 0; i--) {\n        var found = true;\n\n        for (var j = 0; j < valLength; j++) {\n          if (read$$1(arr, i + j) !== read$$1(val, j)) {\n            found = false;\n            break;\n          }\n        }\n\n        if (found) return i;\n      }\n    }\n\n    return -1;\n  }\n\n  Buffer$1.prototype.includes = function includes(val, byteOffset, encoding) {\n    return this.indexOf(val, byteOffset, encoding) !== -1;\n  };\n\n  Buffer$1.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n  };\n\n  Buffer$1.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n  };\n\n  function hexWrite(buf, string, offset, length) {\n    offset = Number(offset) || 0;\n    var remaining = buf.length - offset;\n\n    if (!length) {\n      length = remaining;\n    } else {\n      length = Number(length);\n\n      if (length > remaining) {\n        length = remaining;\n      }\n    } // must be an even number of digits\n\n\n    var strLen = string.length;\n    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');\n\n    if (length > strLen / 2) {\n      length = strLen / 2;\n    }\n\n    for (var i = 0; i < length; ++i) {\n      var parsed = parseInt(string.substr(i * 2, 2), 16);\n      if (isNaN(parsed)) return i;\n      buf[offset + i] = parsed;\n    }\n\n    return i;\n  }\n\n  function utf8Write(buf, string, offset, length) {\n    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n  }\n\n  function asciiWrite(buf, string, offset, length) {\n    return blitBuffer(asciiToBytes(string), buf, offset, length);\n  }\n\n  function latin1Write(buf, string, offset, length) {\n    return asciiWrite(buf, string, offset, length);\n  }\n\n  function base64Write(buf, string, offset, length) {\n    return blitBuffer(base64ToBytes(string), buf, offset, length);\n  }\n\n  function ucs2Write(buf, string, offset, length) {\n    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n  }\n\n  Buffer$1.prototype.write = function write$$1(string, offset, length, encoding) {\n    // Buffer#write(string)\n    if (offset === undefined) {\n      encoding = 'utf8';\n      length = this.length;\n      offset = 0; // Buffer#write(string, encoding)\n    } else if (length === undefined && typeof offset === 'string') {\n      encoding = offset;\n      length = this.length;\n      offset = 0; // Buffer#write(string, offset[, length][, encoding])\n    } else if (isFinite(offset)) {\n      offset = offset | 0;\n\n      if (isFinite(length)) {\n        length = length | 0;\n        if (encoding === undefined) encoding = 'utf8';\n      } else {\n        encoding = length;\n        length = undefined;\n      } // legacy write(string, encoding, offset, length) - remove in v0.13\n\n    } else {\n      throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\n    }\n\n    var remaining = this.length - offset;\n    if (length === undefined || length > remaining) length = remaining;\n\n    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n      throw new RangeError('Attempt to write outside buffer bounds');\n    }\n\n    if (!encoding) encoding = 'utf8';\n    var loweredCase = false;\n\n    for (;;) {\n      switch (encoding) {\n        case 'hex':\n          return hexWrite(this, string, offset, length);\n\n        case 'utf8':\n        case 'utf-8':\n          return utf8Write(this, string, offset, length);\n\n        case 'ascii':\n          return asciiWrite(this, string, offset, length);\n\n        case 'latin1':\n        case 'binary':\n          return latin1Write(this, string, offset, length);\n\n        case 'base64':\n          // Warning: maxLength not taken into account in base64Write\n          return base64Write(this, string, offset, length);\n\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n          return ucs2Write(this, string, offset, length);\n\n        default:\n          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n          encoding = ('' + encoding).toLowerCase();\n          loweredCase = true;\n      }\n    }\n  };\n\n  Buffer$1.prototype.toJSON = function toJSON() {\n    return {\n      type: 'Buffer',\n      data: Array.prototype.slice.call(this._arr || this, 0)\n    };\n  };\n\n  function base64Slice(buf, start, end) {\n    if (start === 0 && end === buf.length) {\n      return fromByteArray(buf);\n    } else {\n      return fromByteArray(buf.slice(start, end));\n    }\n  }\n\n  function utf8Slice(buf, start, end) {\n    end = Math.min(buf.length, end);\n    var res = [];\n    var i = start;\n\n    while (i < end) {\n      var firstByte = buf[i];\n      var codePoint = null;\n      var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n\n      if (i + bytesPerSequence <= end) {\n        var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n        switch (bytesPerSequence) {\n          case 1:\n            if (firstByte < 0x80) {\n              codePoint = firstByte;\n            }\n\n            break;\n\n          case 2:\n            secondByte = buf[i + 1];\n\n            if ((secondByte & 0xC0) === 0x80) {\n              tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n\n              if (tempCodePoint > 0x7F) {\n                codePoint = tempCodePoint;\n              }\n            }\n\n            break;\n\n          case 3:\n            secondByte = buf[i + 1];\n            thirdByte = buf[i + 2];\n\n            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n\n              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n                codePoint = tempCodePoint;\n              }\n            }\n\n            break;\n\n          case 4:\n            secondByte = buf[i + 1];\n            thirdByte = buf[i + 2];\n            fourthByte = buf[i + 3];\n\n            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n\n              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n                codePoint = tempCodePoint;\n              }\n            }\n\n        }\n      }\n\n      if (codePoint === null) {\n        // we did not generate a valid codePoint so insert a\n        // replacement char (U+FFFD) and advance only 1 byte\n        codePoint = 0xFFFD;\n        bytesPerSequence = 1;\n      } else if (codePoint > 0xFFFF) {\n        // encode to utf16 (surrogate pair dance)\n        codePoint -= 0x10000;\n        res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n        codePoint = 0xDC00 | codePoint & 0x3FF;\n      }\n\n      res.push(codePoint);\n      i += bytesPerSequence;\n    }\n\n    return decodeCodePointsArray(res);\n  } // Based on http://stackoverflow.com/a/22747272/680742, the browser with\n  // the lowest limit is Chrome, with 0x10000 args.\n  // We go 1 magnitude less, for safety\n\n\n  var MAX_ARGUMENTS_LENGTH = 0x1000;\n\n  function decodeCodePointsArray(codePoints) {\n    var len = codePoints.length;\n\n    if (len <= MAX_ARGUMENTS_LENGTH) {\n      return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n    } // Decode in chunks to avoid \"call stack size exceeded\".\n\n\n    var res = '';\n    var i = 0;\n\n    while (i < len) {\n      res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n    }\n\n    return res;\n  }\n\n  function asciiSlice(buf, start, end) {\n    var ret = '';\n    end = Math.min(buf.length, end);\n\n    for (var i = start; i < end; ++i) {\n      ret += String.fromCharCode(buf[i] & 0x7F);\n    }\n\n    return ret;\n  }\n\n  function latin1Slice(buf, start, end) {\n    var ret = '';\n    end = Math.min(buf.length, end);\n\n    for (var i = start; i < end; ++i) {\n      ret += String.fromCharCode(buf[i]);\n    }\n\n    return ret;\n  }\n\n  function hexSlice(buf, start, end) {\n    var len = buf.length;\n    if (!start || start < 0) start = 0;\n    if (!end || end < 0 || end > len) end = len;\n    var out = '';\n\n    for (var i = start; i < end; ++i) {\n      out += toHex$1(buf[i]);\n    }\n\n    return out;\n  }\n\n  function utf16leSlice(buf, start, end) {\n    var bytes = buf.slice(start, end);\n    var res = '';\n\n    for (var i = 0; i < bytes.length; i += 2) {\n      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n    }\n\n    return res;\n  }\n\n  Buffer$1.prototype.slice = function slice(start, end) {\n    var len = this.length;\n    start = ~~start;\n    end = end === undefined ? len : ~~end;\n\n    if (start < 0) {\n      start += len;\n      if (start < 0) start = 0;\n    } else if (start > len) {\n      start = len;\n    }\n\n    if (end < 0) {\n      end += len;\n      if (end < 0) end = 0;\n    } else if (end > len) {\n      end = len;\n    }\n\n    if (end < start) end = start;\n    var newBuf;\n\n    if (Buffer$1.TYPED_ARRAY_SUPPORT) {\n      newBuf = this.subarray(start, end);\n      newBuf.__proto__ = Buffer$1.prototype;\n    } else {\n      var sliceLen = end - start;\n      newBuf = new Buffer$1(sliceLen, undefined);\n\n      for (var i = 0; i < sliceLen; ++i) {\n        newBuf[i] = this[i + start];\n      }\n    }\n\n    return newBuf;\n  };\n  /*\n   * Need to make sure that buffer isn't trying to write out of bounds.\n   */\n\n\n  function checkOffset(offset, ext, length) {\n    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\n    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\n  }\n\n  Buffer$1.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    var val = this[offset];\n    var mul = 1;\n    var i = 0;\n\n    while (++i < byteLength && (mul *= 0x100)) {\n      val += this[offset + i] * mul;\n    }\n\n    return val;\n  };\n\n  Buffer$1.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n\n    if (!noAssert) {\n      checkOffset(offset, byteLength, this.length);\n    }\n\n    var val = this[offset + --byteLength];\n    var mul = 1;\n\n    while (byteLength > 0 && (mul *= 0x100)) {\n      val += this[offset + --byteLength] * mul;\n    }\n\n    return val;\n  };\n\n  Buffer$1.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 1, this.length);\n    return this[offset];\n  };\n\n  Buffer$1.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    return this[offset] | this[offset + 1] << 8;\n  };\n\n  Buffer$1.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    return this[offset] << 8 | this[offset + 1];\n  };\n\n  Buffer$1.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n  };\n\n  Buffer$1.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n  };\n\n  Buffer$1.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    var val = this[offset];\n    var mul = 1;\n    var i = 0;\n\n    while (++i < byteLength && (mul *= 0x100)) {\n      val += this[offset + i] * mul;\n    }\n\n    mul *= 0x80;\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n    return val;\n  };\n\n  Buffer$1.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    var i = byteLength;\n    var mul = 1;\n    var val = this[offset + --i];\n\n    while (i > 0 && (mul *= 0x100)) {\n      val += this[offset + --i] * mul;\n    }\n\n    mul *= 0x80;\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n    return val;\n  };\n\n  Buffer$1.prototype.readInt8 = function readInt8(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 1, this.length);\n    if (!(this[offset] & 0x80)) return this[offset];\n    return (0xff - this[offset] + 1) * -1;\n  };\n\n  Buffer$1.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    var val = this[offset] | this[offset + 1] << 8;\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\n  };\n\n  Buffer$1.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    var val = this[offset + 1] | this[offset] << 8;\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\n  };\n\n  Buffer$1.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n  };\n\n  Buffer$1.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n  };\n\n  Buffer$1.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return read(this, offset, true, 23, 4);\n  };\n\n  Buffer$1.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return read(this, offset, false, 23, 4);\n  };\n\n  Buffer$1.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 8, this.length);\n    return read(this, offset, true, 52, 8);\n  };\n\n  Buffer$1.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 8, this.length);\n    return read(this, offset, false, 52, 8);\n  };\n\n  function checkInt(buf, value, offset, ext, max, min) {\n    if (!internalIsBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n    if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n    if (offset + ext > buf.length) throw new RangeError('Index out of range');\n  }\n\n  Buffer$1.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n\n    if (!noAssert) {\n      var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n      checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n\n    var mul = 1;\n    var i = 0;\n    this[offset] = value & 0xFF;\n\n    while (++i < byteLength && (mul *= 0x100)) {\n      this[offset + i] = value / mul & 0xFF;\n    }\n\n    return offset + byteLength;\n  };\n\n  Buffer$1.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n\n    if (!noAssert) {\n      var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n      checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n\n    var i = byteLength - 1;\n    var mul = 1;\n    this[offset + i] = value & 0xFF;\n\n    while (--i >= 0 && (mul *= 0x100)) {\n      this[offset + i] = value / mul & 0xFF;\n    }\n\n    return offset + byteLength;\n  };\n\n  Buffer$1.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n    if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n    this[offset] = value & 0xff;\n    return offset + 1;\n  };\n\n  function objectWriteUInt16(buf, value, offset, littleEndian) {\n    if (value < 0) value = 0xffff + value + 1;\n\n    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n      buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;\n    }\n  }\n\n  Buffer$1.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n    if (Buffer$1.TYPED_ARRAY_SUPPORT) {\n      this[offset] = value & 0xff;\n      this[offset + 1] = value >>> 8;\n    } else {\n      objectWriteUInt16(this, value, offset, true);\n    }\n\n    return offset + 2;\n  };\n\n  Buffer$1.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n    if (Buffer$1.TYPED_ARRAY_SUPPORT) {\n      this[offset] = value >>> 8;\n      this[offset + 1] = value & 0xff;\n    } else {\n      objectWriteUInt16(this, value, offset, false);\n    }\n\n    return offset + 2;\n  };\n\n  function objectWriteUInt32(buf, value, offset, littleEndian) {\n    if (value < 0) value = 0xffffffff + value + 1;\n\n    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n      buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;\n    }\n  }\n\n  Buffer$1.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n    if (Buffer$1.TYPED_ARRAY_SUPPORT) {\n      this[offset + 3] = value >>> 24;\n      this[offset + 2] = value >>> 16;\n      this[offset + 1] = value >>> 8;\n      this[offset] = value & 0xff;\n    } else {\n      objectWriteUInt32(this, value, offset, true);\n    }\n\n    return offset + 4;\n  };\n\n  Buffer$1.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n    if (Buffer$1.TYPED_ARRAY_SUPPORT) {\n      this[offset] = value >>> 24;\n      this[offset + 1] = value >>> 16;\n      this[offset + 2] = value >>> 8;\n      this[offset + 3] = value & 0xff;\n    } else {\n      objectWriteUInt32(this, value, offset, false);\n    }\n\n    return offset + 4;\n  };\n\n  Buffer$1.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset | 0;\n\n    if (!noAssert) {\n      var limit = Math.pow(2, 8 * byteLength - 1);\n      checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n\n    var i = 0;\n    var mul = 1;\n    var sub = 0;\n    this[offset] = value & 0xFF;\n\n    while (++i < byteLength && (mul *= 0x100)) {\n      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n        sub = 1;\n      }\n\n      this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n    }\n\n    return offset + byteLength;\n  };\n\n  Buffer$1.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset | 0;\n\n    if (!noAssert) {\n      var limit = Math.pow(2, 8 * byteLength - 1);\n      checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n\n    var i = byteLength - 1;\n    var mul = 1;\n    var sub = 0;\n    this[offset + i] = value & 0xFF;\n\n    while (--i >= 0 && (mul *= 0x100)) {\n      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n        sub = 1;\n      }\n\n      this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n    }\n\n    return offset + byteLength;\n  };\n\n  Buffer$1.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n    if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n    if (value < 0) value = 0xff + value + 1;\n    this[offset] = value & 0xff;\n    return offset + 1;\n  };\n\n  Buffer$1.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n    if (Buffer$1.TYPED_ARRAY_SUPPORT) {\n      this[offset] = value & 0xff;\n      this[offset + 1] = value >>> 8;\n    } else {\n      objectWriteUInt16(this, value, offset, true);\n    }\n\n    return offset + 2;\n  };\n\n  Buffer$1.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n    if (Buffer$1.TYPED_ARRAY_SUPPORT) {\n      this[offset] = value >>> 8;\n      this[offset + 1] = value & 0xff;\n    } else {\n      objectWriteUInt16(this, value, offset, false);\n    }\n\n    return offset + 2;\n  };\n\n  Buffer$1.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n\n    if (Buffer$1.TYPED_ARRAY_SUPPORT) {\n      this[offset] = value & 0xff;\n      this[offset + 1] = value >>> 8;\n      this[offset + 2] = value >>> 16;\n      this[offset + 3] = value >>> 24;\n    } else {\n      objectWriteUInt32(this, value, offset, true);\n    }\n\n    return offset + 4;\n  };\n\n  Buffer$1.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n    if (value < 0) value = 0xffffffff + value + 1;\n\n    if (Buffer$1.TYPED_ARRAY_SUPPORT) {\n      this[offset] = value >>> 24;\n      this[offset + 1] = value >>> 16;\n      this[offset + 2] = value >>> 8;\n      this[offset + 3] = value & 0xff;\n    } else {\n      objectWriteUInt32(this, value, offset, false);\n    }\n\n    return offset + 4;\n  };\n\n  function checkIEEE754(buf, value, offset, ext, max, min) {\n    if (offset + ext > buf.length) throw new RangeError('Index out of range');\n    if (offset < 0) throw new RangeError('Index out of range');\n  }\n\n  function writeFloat(buf, value, offset, littleEndian, noAssert) {\n    if (!noAssert) {\n      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\n    }\n\n    write(buf, value, offset, littleEndian, 23, 4);\n    return offset + 4;\n  }\n\n  Buffer$1.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, true, noAssert);\n  };\n\n  Buffer$1.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, false, noAssert);\n  };\n\n  function writeDouble(buf, value, offset, littleEndian, noAssert) {\n    if (!noAssert) {\n      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\n    }\n\n    write(buf, value, offset, littleEndian, 52, 8);\n    return offset + 8;\n  }\n\n  Buffer$1.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n    return writeDouble(this, value, offset, true, noAssert);\n  };\n\n  Buffer$1.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n    return writeDouble(this, value, offset, false, noAssert);\n  }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\n\n  Buffer$1.prototype.copy = function copy(target, targetStart, start, end) {\n    if (!start) start = 0;\n    if (!end && end !== 0) end = this.length;\n    if (targetStart >= target.length) targetStart = target.length;\n    if (!targetStart) targetStart = 0;\n    if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done\n\n    if (end === start) return 0;\n    if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions\n\n    if (targetStart < 0) {\n      throw new RangeError('targetStart out of bounds');\n    }\n\n    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');\n    if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?\n\n    if (end > this.length) end = this.length;\n\n    if (target.length - targetStart < end - start) {\n      end = target.length - targetStart + start;\n    }\n\n    var len = end - start;\n    var i;\n\n    if (this === target && start < targetStart && targetStart < end) {\n      // descending copy from end\n      for (i = len - 1; i >= 0; --i) {\n        target[i + targetStart] = this[i + start];\n      }\n    } else if (len < 1000 || !Buffer$1.TYPED_ARRAY_SUPPORT) {\n      // ascending copy from start\n      for (i = 0; i < len; ++i) {\n        target[i + targetStart] = this[i + start];\n      }\n    } else {\n      Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);\n    }\n\n    return len;\n  }; // Usage:\n  //    buffer.fill(number[, offset[, end]])\n  //    buffer.fill(buffer[, offset[, end]])\n  //    buffer.fill(string[, offset[, end]][, encoding])\n\n\n  Buffer$1.prototype.fill = function fill(val, start, end, encoding) {\n    // Handle string cases:\n    if (typeof val === 'string') {\n      if (typeof start === 'string') {\n        encoding = start;\n        start = 0;\n        end = this.length;\n      } else if (typeof end === 'string') {\n        encoding = end;\n        end = this.length;\n      }\n\n      if (val.length === 1) {\n        var code = val.charCodeAt(0);\n\n        if (code < 256) {\n          val = code;\n        }\n      }\n\n      if (encoding !== undefined && typeof encoding !== 'string') {\n        throw new TypeError('encoding must be a string');\n      }\n\n      if (typeof encoding === 'string' && !Buffer$1.isEncoding(encoding)) {\n        throw new TypeError('Unknown encoding: ' + encoding);\n      }\n    } else if (typeof val === 'number') {\n      val = val & 255;\n    } // Invalid ranges are not set to a default, so can range check early.\n\n\n    if (start < 0 || this.length < start || this.length < end) {\n      throw new RangeError('Out of range index');\n    }\n\n    if (end <= start) {\n      return this;\n    }\n\n    start = start >>> 0;\n    end = end === undefined ? this.length : end >>> 0;\n    if (!val) val = 0;\n    var i;\n\n    if (typeof val === 'number') {\n      for (i = start; i < end; ++i) {\n        this[i] = val;\n      }\n    } else {\n      var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer$1(val, encoding).toString());\n      var len = bytes.length;\n\n      for (i = 0; i < end - start; ++i) {\n        this[i + start] = bytes[i % len];\n      }\n    }\n\n    return this;\n  }; // HELPER FUNCTIONS\n  // ================\n\n\n  var INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\n  function base64clean(str) {\n    // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n    str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''\n\n    if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\n    while (str.length % 4 !== 0) {\n      str = str + '=';\n    }\n\n    return str;\n  }\n\n  function stringtrim(str) {\n    if (str.trim) return str.trim();\n    return str.replace(/^\\s+|\\s+$/g, '');\n  }\n\n  function toHex$1(n) {\n    if (n < 16) return '0' + n.toString(16);\n    return n.toString(16);\n  }\n\n  function utf8ToBytes(string, units) {\n    units = units || Infinity;\n    var codePoint;\n    var length = string.length;\n    var leadSurrogate = null;\n    var bytes = [];\n\n    for (var i = 0; i < length; ++i) {\n      codePoint = string.charCodeAt(i); // is surrogate component\n\n      if (codePoint > 0xD7FF && codePoint < 0xE000) {\n        // last char was a lead\n        if (!leadSurrogate) {\n          // no lead yet\n          if (codePoint > 0xDBFF) {\n            // unexpected trail\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n            continue;\n          } else if (i + 1 === length) {\n            // unpaired lead\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n            continue;\n          } // valid lead\n\n\n          leadSurrogate = codePoint;\n          continue;\n        } // 2 leads in a row\n\n\n        if (codePoint < 0xDC00) {\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          leadSurrogate = codePoint;\n          continue;\n        } // valid surrogate pair\n\n\n        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n      } else if (leadSurrogate) {\n        // valid bmp char, but last char was a lead\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n      }\n\n      leadSurrogate = null; // encode utf8\n\n      if (codePoint < 0x80) {\n        if ((units -= 1) < 0) break;\n        bytes.push(codePoint);\n      } else if (codePoint < 0x800) {\n        if ((units -= 2) < 0) break;\n        bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n      } else if (codePoint < 0x10000) {\n        if ((units -= 3) < 0) break;\n        bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n      } else if (codePoint < 0x110000) {\n        if ((units -= 4) < 0) break;\n        bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n      } else {\n        throw new Error('Invalid code point');\n      }\n    }\n\n    return bytes;\n  }\n\n  function asciiToBytes(str) {\n    var byteArray = [];\n\n    for (var i = 0; i < str.length; ++i) {\n      // Node's code seems to be doing this and not & 0x7F..\n      byteArray.push(str.charCodeAt(i) & 0xFF);\n    }\n\n    return byteArray;\n  }\n\n  function utf16leToBytes(str, units) {\n    var c, hi, lo;\n    var byteArray = [];\n\n    for (var i = 0; i < str.length; ++i) {\n      if ((units -= 2) < 0) break;\n      c = str.charCodeAt(i);\n      hi = c >> 8;\n      lo = c % 256;\n      byteArray.push(lo);\n      byteArray.push(hi);\n    }\n\n    return byteArray;\n  }\n\n  function base64ToBytes(str) {\n    return toByteArray(base64clean(str));\n  }\n\n  function blitBuffer(src, dst, offset, length) {\n    for (var i = 0; i < length; ++i) {\n      if (i + offset >= dst.length || i >= src.length) break;\n      dst[i + offset] = src[i];\n    }\n\n    return i;\n  }\n\n  function isnan(val) {\n    return val !== val; // eslint-disable-line no-self-compare\n  } // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence\n  // The _isBuffer check is for Safari 5-7 support, because it's missing\n  // Object.prototype.constructor. Remove this eventually\n\n\n  function isBuffer(obj) {\n    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));\n  }\n\n  function isFastBuffer(obj) {\n    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);\n  } // For Node v0.10 support. Remove this eventually.\n\n\n  function isSlowBuffer(obj) {\n    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0));\n  }\n\n  var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs\n\n  function checkBuffer(buf, name) {\n    if (typeof buf !== 'string' && !isBuffer(buf)) {\n      throw new TypeError(name + ' must be a buffer or string');\n    }\n  }\n\n  var precondition = function (password, salt, iterations, keylen) {\n    checkBuffer(password, 'Password');\n    checkBuffer(salt, 'Salt');\n\n    if (typeof iterations !== 'number') {\n      throw new TypeError('Iterations not a number');\n    }\n\n    if (iterations < 0) {\n      throw new TypeError('Bad iterations');\n    }\n\n    if (typeof keylen !== 'number') {\n      throw new TypeError('Key length not a number');\n    }\n\n    if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {\n      /* eslint no-self-compare: 0 */\n      throw new TypeError('Bad key length');\n    }\n  };\n\n  var defaultEncoding;\n  /* istanbul ignore next */\n\n  {\n    defaultEncoding = 'utf-8';\n  }\n  var defaultEncoding_1 = defaultEncoding;\n  var safeBuffer = createCommonjsModule(function (module, exports) {\n    /* eslint-disable node/no-deprecated-api */\n    var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers\n\n    function copyProps(src, dst) {\n      for (var key in src) {\n        dst[key] = src[key];\n      }\n    }\n\n    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n      module.exports = buffer;\n    } else {\n      // Copy properties from require('buffer')\n      copyProps(buffer, exports);\n      exports.Buffer = SafeBuffer;\n    }\n\n    function SafeBuffer(arg, encodingOrOffset, length) {\n      return Buffer(arg, encodingOrOffset, length);\n    }\n\n    SafeBuffer.prototype = Object.create(Buffer.prototype); // Copy static methods from Buffer\n\n    copyProps(Buffer, SafeBuffer);\n\n    SafeBuffer.from = function (arg, encodingOrOffset, length) {\n      if (typeof arg === 'number') {\n        throw new TypeError('Argument must not be a number');\n      }\n\n      return Buffer(arg, encodingOrOffset, length);\n    };\n\n    SafeBuffer.alloc = function (size, fill, encoding) {\n      if (typeof size !== 'number') {\n        throw new TypeError('Argument must be a number');\n      }\n\n      var buf = Buffer(size);\n\n      if (fill !== undefined) {\n        if (typeof encoding === 'string') {\n          buf.fill(fill, encoding);\n        } else {\n          buf.fill(fill);\n        }\n      } else {\n        buf.fill(0);\n      }\n\n      return buf;\n    };\n\n    SafeBuffer.allocUnsafe = function (size) {\n      if (typeof size !== 'number') {\n        throw new TypeError('Argument must be a number');\n      }\n\n      return Buffer(size);\n    };\n\n    SafeBuffer.allocUnsafeSlow = function (size) {\n      if (typeof size !== 'number') {\n        throw new TypeError('Argument must be a number');\n      }\n\n      return buffer.SlowBuffer(size);\n    };\n  });\n  var safeBuffer_1 = safeBuffer.Buffer;\n  var Buffer$2 = safeBuffer.Buffer;\n  var Transform = stream.Transform;\n\n  function throwIfNotStringOrBuffer(val, prefix) {\n    if (!Buffer$2.isBuffer(val) && typeof val !== 'string') {\n      throw new TypeError(prefix + ' must be a string or a buffer');\n    }\n  }\n\n  function HashBase(blockSize) {\n    Transform.call(this);\n    this._block = Buffer$2.allocUnsafe(blockSize);\n    this._blockSize = blockSize;\n    this._blockOffset = 0;\n    this._length = [0, 0, 0, 0];\n    this._finalized = false;\n  }\n\n  inherits_browser(HashBase, Transform);\n\n  HashBase.prototype._transform = function (chunk, encoding, callback) {\n    var error = null;\n\n    try {\n      this.update(chunk, encoding);\n    } catch (err) {\n      error = err;\n    }\n\n    callback(error);\n  };\n\n  HashBase.prototype._flush = function (callback) {\n    var error = null;\n\n    try {\n      this.push(this.digest());\n    } catch (err) {\n      error = err;\n    }\n\n    callback(error);\n  };\n\n  HashBase.prototype.update = function (data, encoding) {\n    throwIfNotStringOrBuffer(data, 'Data');\n    if (this._finalized) throw new Error('Digest already called');\n    if (!Buffer$2.isBuffer(data)) data = Buffer$2.from(data, encoding); // consume data\n\n    var block = this._block;\n    var offset = 0;\n\n    while (this._blockOffset + data.length - offset >= this._blockSize) {\n      for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];\n\n      this._update();\n\n      this._blockOffset = 0;\n    }\n\n    while (offset < data.length) block[this._blockOffset++] = data[offset++]; // update length\n\n\n    for (var j = 0, carry = data.length * 8; carry > 0; ++j) {\n      this._length[j] += carry;\n      carry = this._length[j] / 0x0100000000 | 0;\n      if (carry > 0) this._length[j] -= 0x0100000000 * carry;\n    }\n\n    return this;\n  };\n\n  HashBase.prototype._update = function () {\n    throw new Error('_update is not implemented');\n  };\n\n  HashBase.prototype.digest = function (encoding) {\n    if (this._finalized) throw new Error('Digest already called');\n    this._finalized = true;\n\n    var digest = this._digest();\n\n    if (encoding !== undefined) digest = digest.toString(encoding); // reset state\n\n    this._block.fill(0);\n\n    this._blockOffset = 0;\n\n    for (var i = 0; i < 4; ++i) this._length[i] = 0;\n\n    return digest;\n  };\n\n  HashBase.prototype._digest = function () {\n    throw new Error('_digest is not implemented');\n  };\n\n  var hashBase = HashBase;\n  var Buffer$3 = safeBuffer.Buffer;\n  var ARRAY16 = new Array(16);\n\n  function MD5() {\n    hashBase.call(this, 64); // state\n\n    this._a = 0x67452301;\n    this._b = 0xefcdab89;\n    this._c = 0x98badcfe;\n    this._d = 0x10325476;\n  }\n\n  inherits_browser(MD5, hashBase);\n\n  MD5.prototype._update = function () {\n    var M = ARRAY16;\n\n    for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4);\n\n    var a = this._a;\n    var b = this._b;\n    var c = this._c;\n    var d = this._d;\n    a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);\n    d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);\n    c = fnF(c, d, a, b, M[2], 0x242070db, 17);\n    b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);\n    a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);\n    d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);\n    c = fnF(c, d, a, b, M[6], 0xa8304613, 17);\n    b = fnF(b, c, d, a, M[7], 0xfd469501, 22);\n    a = fnF(a, b, c, d, M[8], 0x698098d8, 7);\n    d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);\n    c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);\n    b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);\n    a = fnF(a, b, c, d, M[12], 0x6b901122, 7);\n    d = fnF(d, a, b, c, M[13], 0xfd987193, 12);\n    c = fnF(c, d, a, b, M[14], 0xa679438e, 17);\n    b = fnF(b, c, d, a, M[15], 0x49b40821, 22);\n    a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);\n    d = fnG(d, a, b, c, M[6], 0xc040b340, 9);\n    c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);\n    b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);\n    a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);\n    d = fnG(d, a, b, c, M[10], 0x02441453, 9);\n    c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);\n    b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);\n    a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);\n    d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);\n    c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);\n    b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);\n    a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);\n    d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);\n    c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);\n    b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);\n    a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);\n    d = fnH(d, a, b, c, M[8], 0x8771f681, 11);\n    c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);\n    b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);\n    a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);\n    d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);\n    c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);\n    b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);\n    a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);\n    d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);\n    c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);\n    b = fnH(b, c, d, a, M[6], 0x04881d05, 23);\n    a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);\n    d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);\n    c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);\n    b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);\n    a = fnI(a, b, c, d, M[0], 0xf4292244, 6);\n    d = fnI(d, a, b, c, M[7], 0x432aff97, 10);\n    c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);\n    b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);\n    a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);\n    d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);\n    c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);\n    b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);\n    a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);\n    d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);\n    c = fnI(c, d, a, b, M[6], 0xa3014314, 15);\n    b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);\n    a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);\n    d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);\n    c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);\n    b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);\n    this._a = this._a + a | 0;\n    this._b = this._b + b | 0;\n    this._c = this._c + c | 0;\n    this._d = this._d + d | 0;\n  };\n\n  MD5.prototype._digest = function () {\n    // create padding and handle blocks\n    this._block[this._blockOffset++] = 0x80;\n\n    if (this._blockOffset > 56) {\n      this._block.fill(0, this._blockOffset, 64);\n\n      this._update();\n\n      this._blockOffset = 0;\n    }\n\n    this._block.fill(0, this._blockOffset, 56);\n\n    this._block.writeUInt32LE(this._length[0], 56);\n\n    this._block.writeUInt32LE(this._length[1], 60);\n\n    this._update(); // produce result\n\n\n    var buffer$$1 = Buffer$3.allocUnsafe(16);\n    buffer$$1.writeInt32LE(this._a, 0);\n    buffer$$1.writeInt32LE(this._b, 4);\n    buffer$$1.writeInt32LE(this._c, 8);\n    buffer$$1.writeInt32LE(this._d, 12);\n    return buffer$$1;\n  };\n\n  function rotl(x, n) {\n    return x << n | x >>> 32 - n;\n  }\n\n  function fnF(a, b, c, d, m, k, s) {\n    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;\n  }\n\n  function fnG(a, b, c, d, m, k, s) {\n    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;\n  }\n\n  function fnH(a, b, c, d, m, k, s) {\n    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;\n  }\n\n  function fnI(a, b, c, d, m, k, s) {\n    return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;\n  }\n\n  var md5_js = MD5;\n\n  var md5 = function (buffer$$1) {\n    return new md5_js().update(buffer$$1).digest();\n  };\n\n  var Buffer$4 = buffer.Buffer;\n  var ARRAY16$1 = new Array(16);\n  var zl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\n  var zr = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];\n  var sl = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\n  var sr = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];\n  var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];\n  var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];\n\n  function RIPEMD160$1() {\n    hashBase.call(this, 64); // state\n\n    this._a = 0x67452301;\n    this._b = 0xefcdab89;\n    this._c = 0x98badcfe;\n    this._d = 0x10325476;\n    this._e = 0xc3d2e1f0;\n  }\n\n  inherits_browser(RIPEMD160$1, hashBase);\n\n  RIPEMD160$1.prototype._update = function () {\n    var words = ARRAY16$1;\n\n    for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4);\n\n    var al = this._a | 0;\n    var bl = this._b | 0;\n    var cl = this._c | 0;\n    var dl = this._d | 0;\n    var el = this._e | 0;\n    var ar = this._a | 0;\n    var br = this._b | 0;\n    var cr = this._c | 0;\n    var dr = this._d | 0;\n    var er = this._e | 0; // computation\n\n    for (var i = 0; i < 80; i += 1) {\n      var tl;\n      var tr;\n\n      if (i < 16) {\n        tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);\n        tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);\n      } else if (i < 32) {\n        tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);\n        tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);\n      } else if (i < 48) {\n        tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);\n        tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);\n      } else if (i < 64) {\n        tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);\n        tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);\n      } else {\n        // if (i<80) {\n        tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);\n        tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);\n      }\n\n      al = el;\n      el = dl;\n      dl = rotl$1(cl, 10);\n      cl = bl;\n      bl = tl;\n      ar = er;\n      er = dr;\n      dr = rotl$1(cr, 10);\n      cr = br;\n      br = tr;\n    } // update state\n\n\n    var t = this._b + cl + dr | 0;\n    this._b = this._c + dl + er | 0;\n    this._c = this._d + el + ar | 0;\n    this._d = this._e + al + br | 0;\n    this._e = this._a + bl + cr | 0;\n    this._a = t;\n  };\n\n  RIPEMD160$1.prototype._digest = function () {\n    // create padding and handle blocks\n    this._block[this._blockOffset++] = 0x80;\n\n    if (this._blockOffset > 56) {\n      this._block.fill(0, this._blockOffset, 64);\n\n      this._update();\n\n      this._blockOffset = 0;\n    }\n\n    this._block.fill(0, this._blockOffset, 56);\n\n    this._block.writeUInt32LE(this._length[0], 56);\n\n    this._block.writeUInt32LE(this._length[1], 60);\n\n    this._update(); // produce result\n\n\n    var buffer$$1 = Buffer$4.alloc ? Buffer$4.alloc(20) : new Buffer$4(20);\n    buffer$$1.writeInt32LE(this._a, 0);\n    buffer$$1.writeInt32LE(this._b, 4);\n    buffer$$1.writeInt32LE(this._c, 8);\n    buffer$$1.writeInt32LE(this._d, 12);\n    buffer$$1.writeInt32LE(this._e, 16);\n    return buffer$$1;\n  };\n\n  function rotl$1(x, n) {\n    return x << n | x >>> 32 - n;\n  }\n\n  function fn1(a, b, c, d, e, m, k, s) {\n    return rotl$1(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;\n  }\n\n  function fn2(a, b, c, d, e, m, k, s) {\n    return rotl$1(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;\n  }\n\n  function fn3(a, b, c, d, e, m, k, s) {\n    return rotl$1(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;\n  }\n\n  function fn4(a, b, c, d, e, m, k, s) {\n    return rotl$1(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;\n  }\n\n  function fn5(a, b, c, d, e, m, k, s) {\n    return rotl$1(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;\n  }\n\n  var ripemd160$1 = RIPEMD160$1;\n  var Buffer$5 = safeBuffer.Buffer; // prototype class for hash functions\n\n  function Hash(blockSize, finalSize) {\n    this._block = Buffer$5.alloc(blockSize);\n    this._finalSize = finalSize;\n    this._blockSize = blockSize;\n    this._len = 0;\n  }\n\n  Hash.prototype.update = function (data, enc) {\n    if (typeof data === 'string') {\n      enc = enc || 'utf8';\n      data = Buffer$5.from(data, enc);\n    }\n\n    var block = this._block;\n    var blockSize = this._blockSize;\n    var length = data.length;\n    var accum = this._len;\n\n    for (var offset = 0; offset < length;) {\n      var assigned = accum % blockSize;\n      var remainder = Math.min(length - offset, blockSize - assigned);\n\n      for (var i = 0; i < remainder; i++) {\n        block[assigned + i] = data[offset + i];\n      }\n\n      accum += remainder;\n      offset += remainder;\n\n      if (accum % blockSize === 0) {\n        this._update(block);\n      }\n    }\n\n    this._len += length;\n    return this;\n  };\n\n  Hash.prototype.digest = function (enc) {\n    var rem = this._len % this._blockSize;\n    this._block[rem] = 0x80; // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\n    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\n\n    this._block.fill(0, rem + 1);\n\n    if (rem >= this._finalSize) {\n      this._update(this._block);\n\n      this._block.fill(0);\n    }\n\n    var bits = this._len * 8; // uint32\n\n    if (bits <= 0xffffffff) {\n      this._block.writeUInt32BE(bits, this._blockSize - 4); // uint64\n\n    } else {\n      var lowBits = (bits & 0xffffffff) >>> 0;\n      var highBits = (bits - lowBits) / 0x100000000;\n\n      this._block.writeUInt32BE(highBits, this._blockSize - 8);\n\n      this._block.writeUInt32BE(lowBits, this._blockSize - 4);\n    }\n\n    this._update(this._block);\n\n    var hash = this._hash();\n\n    return enc ? hash.toString(enc) : hash;\n  };\n\n  Hash.prototype._update = function () {\n    throw new Error('_update must be implemented by subclass');\n  };\n\n  var hash$1 = Hash;\n  /*\n   * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined\n   * in FIPS PUB 180-1\n   * This source code is derived from sha1.js of the same repository.\n   * The difference between SHA-0 and SHA-1 is just a bitwise rotate left\n   * operation was added.\n   */\n\n  var Buffer$6 = safeBuffer.Buffer;\n  var K$1 = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];\n  var W = new Array(80);\n\n  function Sha() {\n    this.init();\n    this._w = W;\n    hash$1.call(this, 64, 56);\n  }\n\n  inherits_browser(Sha, hash$1);\n\n  Sha.prototype.init = function () {\n    this._a = 0x67452301;\n    this._b = 0xefcdab89;\n    this._c = 0x98badcfe;\n    this._d = 0x10325476;\n    this._e = 0xc3d2e1f0;\n    return this;\n  };\n\n  function rotl5(num) {\n    return num << 5 | num >>> 27;\n  }\n\n  function rotl30(num) {\n    return num << 30 | num >>> 2;\n  }\n\n  function ft(s, b, c, d) {\n    if (s === 0) return b & c | ~b & d;\n    if (s === 2) return b & c | b & d | c & d;\n    return b ^ c ^ d;\n  }\n\n  Sha.prototype._update = function (M) {\n    var W = this._w;\n    var a = this._a | 0;\n    var b = this._b | 0;\n    var c = this._c | 0;\n    var d = this._d | 0;\n    var e = this._e | 0;\n\n    for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);\n\n    for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n\n    for (var j = 0; j < 80; ++j) {\n      var s = ~~(j / 20);\n      var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K$1[s] | 0;\n      e = d;\n      d = c;\n      c = rotl30(b);\n      b = a;\n      a = t;\n    }\n\n    this._a = a + this._a | 0;\n    this._b = b + this._b | 0;\n    this._c = c + this._c | 0;\n    this._d = d + this._d | 0;\n    this._e = e + this._e | 0;\n  };\n\n  Sha.prototype._hash = function () {\n    var H = Buffer$6.allocUnsafe(20);\n    H.writeInt32BE(this._a | 0, 0);\n    H.writeInt32BE(this._b | 0, 4);\n    H.writeInt32BE(this._c | 0, 8);\n    H.writeInt32BE(this._d | 0, 12);\n    H.writeInt32BE(this._e | 0, 16);\n    return H;\n  };\n\n  var sha$1 = Sha;\n  /*\n   * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n   * in FIPS PUB 180-1\n   * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n   * Distributed under the BSD License\n   * See http://pajhome.org.uk/crypt/md5 for details.\n   */\n\n  var Buffer$7 = safeBuffer.Buffer;\n  var K$2 = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];\n  var W$1 = new Array(80);\n\n  function Sha1() {\n    this.init();\n    this._w = W$1;\n    hash$1.call(this, 64, 56);\n  }\n\n  inherits_browser(Sha1, hash$1);\n\n  Sha1.prototype.init = function () {\n    this._a = 0x67452301;\n    this._b = 0xefcdab89;\n    this._c = 0x98badcfe;\n    this._d = 0x10325476;\n    this._e = 0xc3d2e1f0;\n    return this;\n  };\n\n  function rotl1(num) {\n    return num << 1 | num >>> 31;\n  }\n\n  function rotl5$1(num) {\n    return num << 5 | num >>> 27;\n  }\n\n  function rotl30$1(num) {\n    return num << 30 | num >>> 2;\n  }\n\n  function ft$1(s, b, c, d) {\n    if (s === 0) return b & c | ~b & d;\n    if (s === 2) return b & c | b & d | c & d;\n    return b ^ c ^ d;\n  }\n\n  Sha1.prototype._update = function (M) {\n    var W = this._w;\n    var a = this._a | 0;\n    var b = this._b | 0;\n    var c = this._c | 0;\n    var d = this._d | 0;\n    var e = this._e | 0;\n\n    for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);\n\n    for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);\n\n    for (var j = 0; j < 80; ++j) {\n      var s = ~~(j / 20);\n      var t = rotl5$1(a) + ft$1(s, b, c, d) + e + W[j] + K$2[s] | 0;\n      e = d;\n      d = c;\n      c = rotl30$1(b);\n      b = a;\n      a = t;\n    }\n\n    this._a = a + this._a | 0;\n    this._b = b + this._b | 0;\n    this._c = c + this._c | 0;\n    this._d = d + this._d | 0;\n    this._e = e + this._e | 0;\n  };\n\n  Sha1.prototype._hash = function () {\n    var H = Buffer$7.allocUnsafe(20);\n    H.writeInt32BE(this._a | 0, 0);\n    H.writeInt32BE(this._b | 0, 4);\n    H.writeInt32BE(this._c | 0, 8);\n    H.writeInt32BE(this._d | 0, 12);\n    H.writeInt32BE(this._e | 0, 16);\n    return H;\n  };\n\n  var sha1$1 = Sha1;\n  /**\n   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n   * in FIPS 180-2\n   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n   *\n   */\n\n  var Buffer$8 = safeBuffer.Buffer;\n  var K$3 = [0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2];\n  var W$2 = new Array(64);\n\n  function Sha256() {\n    this.init();\n    this._w = W$2; // new Array(64)\n\n    hash$1.call(this, 64, 56);\n  }\n\n  inherits_browser(Sha256, hash$1);\n\n  Sha256.prototype.init = function () {\n    this._a = 0x6a09e667;\n    this._b = 0xbb67ae85;\n    this._c = 0x3c6ef372;\n    this._d = 0xa54ff53a;\n    this._e = 0x510e527f;\n    this._f = 0x9b05688c;\n    this._g = 0x1f83d9ab;\n    this._h = 0x5be0cd19;\n    return this;\n  };\n\n  function ch(x, y, z) {\n    return z ^ x & (y ^ z);\n  }\n\n  function maj(x, y, z) {\n    return x & y | z & (x | y);\n  }\n\n  function sigma0(x) {\n    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);\n  }\n\n  function sigma1(x) {\n    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);\n  }\n\n  function gamma0(x) {\n    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;\n  }\n\n  function gamma1(x) {\n    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;\n  }\n\n  Sha256.prototype._update = function (M) {\n    var W = this._w;\n    var a = this._a | 0;\n    var b = this._b | 0;\n    var c = this._c | 0;\n    var d = this._d | 0;\n    var e = this._e | 0;\n    var f = this._f | 0;\n    var g = this._g | 0;\n    var h = this._h | 0;\n\n    for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);\n\n    for (; i < 64; ++i) W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;\n\n    for (var j = 0; j < 64; ++j) {\n      var T1 = h + sigma1(e) + ch(e, f, g) + K$3[j] + W[j] | 0;\n      var T2 = sigma0(a) + maj(a, b, c) | 0;\n      h = g;\n      g = f;\n      f = e;\n      e = d + T1 | 0;\n      d = c;\n      c = b;\n      b = a;\n      a = T1 + T2 | 0;\n    }\n\n    this._a = a + this._a | 0;\n    this._b = b + this._b | 0;\n    this._c = c + this._c | 0;\n    this._d = d + this._d | 0;\n    this._e = e + this._e | 0;\n    this._f = f + this._f | 0;\n    this._g = g + this._g | 0;\n    this._h = h + this._h | 0;\n  };\n\n  Sha256.prototype._hash = function () {\n    var H = Buffer$8.allocUnsafe(32);\n    H.writeInt32BE(this._a, 0);\n    H.writeInt32BE(this._b, 4);\n    H.writeInt32BE(this._c, 8);\n    H.writeInt32BE(this._d, 12);\n    H.writeInt32BE(this._e, 16);\n    H.writeInt32BE(this._f, 20);\n    H.writeInt32BE(this._g, 24);\n    H.writeInt32BE(this._h, 28);\n    return H;\n  };\n\n  var sha256$1 = Sha256;\n  /**\n   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n   * in FIPS 180-2\n   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n   *\n   */\n\n  var Buffer$9 = safeBuffer.Buffer;\n  var W$3 = new Array(64);\n\n  function Sha224() {\n    this.init();\n    this._w = W$3; // new Array(64)\n\n    hash$1.call(this, 64, 56);\n  }\n\n  inherits_browser(Sha224, sha256$1);\n\n  Sha224.prototype.init = function () {\n    this._a = 0xc1059ed8;\n    this._b = 0x367cd507;\n    this._c = 0x3070dd17;\n    this._d = 0xf70e5939;\n    this._e = 0xffc00b31;\n    this._f = 0x68581511;\n    this._g = 0x64f98fa7;\n    this._h = 0xbefa4fa4;\n    return this;\n  };\n\n  Sha224.prototype._hash = function () {\n    var H = Buffer$9.allocUnsafe(28);\n    H.writeInt32BE(this._a, 0);\n    H.writeInt32BE(this._b, 4);\n    H.writeInt32BE(this._c, 8);\n    H.writeInt32BE(this._d, 12);\n    H.writeInt32BE(this._e, 16);\n    H.writeInt32BE(this._f, 20);\n    H.writeInt32BE(this._g, 24);\n    return H;\n  };\n\n  var sha224$1 = Sha224;\n  var Buffer$a = safeBuffer.Buffer;\n  var K$4 = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];\n  var W$4 = new Array(160);\n\n  function Sha512() {\n    this.init();\n    this._w = W$4;\n    hash$1.call(this, 128, 112);\n  }\n\n  inherits_browser(Sha512, hash$1);\n\n  Sha512.prototype.init = function () {\n    this._ah = 0x6a09e667;\n    this._bh = 0xbb67ae85;\n    this._ch = 0x3c6ef372;\n    this._dh = 0xa54ff53a;\n    this._eh = 0x510e527f;\n    this._fh = 0x9b05688c;\n    this._gh = 0x1f83d9ab;\n    this._hh = 0x5be0cd19;\n    this._al = 0xf3bcc908;\n    this._bl = 0x84caa73b;\n    this._cl = 0xfe94f82b;\n    this._dl = 0x5f1d36f1;\n    this._el = 0xade682d1;\n    this._fl = 0x2b3e6c1f;\n    this._gl = 0xfb41bd6b;\n    this._hl = 0x137e2179;\n    return this;\n  };\n\n  function Ch(x, y, z) {\n    return z ^ x & (y ^ z);\n  }\n\n  function maj$1(x, y, z) {\n    return x & y | z & (x | y);\n  }\n\n  function sigma0$1(x, xl) {\n    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);\n  }\n\n  function sigma1$1(x, xl) {\n    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);\n  }\n\n  function Gamma0(x, xl) {\n    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;\n  }\n\n  function Gamma0l(x, xl) {\n    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);\n  }\n\n  function Gamma1(x, xl) {\n    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;\n  }\n\n  function Gamma1l(x, xl) {\n    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);\n  }\n\n  function getCarry(a, b) {\n    return a >>> 0 < b >>> 0 ? 1 : 0;\n  }\n\n  Sha512.prototype._update = function (M) {\n    var W = this._w;\n    var ah = this._ah | 0;\n    var bh = this._bh | 0;\n    var ch = this._ch | 0;\n    var dh = this._dh | 0;\n    var eh = this._eh | 0;\n    var fh = this._fh | 0;\n    var gh = this._gh | 0;\n    var hh = this._hh | 0;\n    var al = this._al | 0;\n    var bl = this._bl | 0;\n    var cl = this._cl | 0;\n    var dl = this._dl | 0;\n    var el = this._el | 0;\n    var fl = this._fl | 0;\n    var gl = this._gl | 0;\n    var hl = this._hl | 0;\n\n    for (var i = 0; i < 32; i += 2) {\n      W[i] = M.readInt32BE(i * 4);\n      W[i + 1] = M.readInt32BE(i * 4 + 4);\n    }\n\n    for (; i < 160; i += 2) {\n      var xh = W[i - 15 * 2];\n      var xl = W[i - 15 * 2 + 1];\n      var gamma0 = Gamma0(xh, xl);\n      var gamma0l = Gamma0l(xl, xh);\n      xh = W[i - 2 * 2];\n      xl = W[i - 2 * 2 + 1];\n      var gamma1 = Gamma1(xh, xl);\n      var gamma1l = Gamma1l(xl, xh); // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n\n      var Wi7h = W[i - 7 * 2];\n      var Wi7l = W[i - 7 * 2 + 1];\n      var Wi16h = W[i - 16 * 2];\n      var Wi16l = W[i - 16 * 2 + 1];\n      var Wil = gamma0l + Wi7l | 0;\n      var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;\n      Wil = Wil + gamma1l | 0;\n      Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;\n      Wil = Wil + Wi16l | 0;\n      Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;\n      W[i] = Wih;\n      W[i + 1] = Wil;\n    }\n\n    for (var j = 0; j < 160; j += 2) {\n      Wih = W[j];\n      Wil = W[j + 1];\n      var majh = maj$1(ah, bh, ch);\n      var majl = maj$1(al, bl, cl);\n      var sigma0h = sigma0$1(ah, al);\n      var sigma0l = sigma0$1(al, ah);\n      var sigma1h = sigma1$1(eh, el);\n      var sigma1l = sigma1$1(el, eh); // t1 = h + sigma1 + ch + K[j] + W[j]\n\n      var Kih = K$4[j];\n      var Kil = K$4[j + 1];\n      var chh = Ch(eh, fh, gh);\n      var chl = Ch(el, fl, gl);\n      var t1l = hl + sigma1l | 0;\n      var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;\n      t1l = t1l + chl | 0;\n      t1h = t1h + chh + getCarry(t1l, chl) | 0;\n      t1l = t1l + Kil | 0;\n      t1h = t1h + Kih + getCarry(t1l, Kil) | 0;\n      t1l = t1l + Wil | 0;\n      t1h = t1h + Wih + getCarry(t1l, Wil) | 0; // t2 = sigma0 + maj\n\n      var t2l = sigma0l + majl | 0;\n      var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;\n      hh = gh;\n      hl = gl;\n      gh = fh;\n      gl = fl;\n      fh = eh;\n      fl = el;\n      el = dl + t1l | 0;\n      eh = dh + t1h + getCarry(el, dl) | 0;\n      dh = ch;\n      dl = cl;\n      ch = bh;\n      cl = bl;\n      bh = ah;\n      bl = al;\n      al = t1l + t2l | 0;\n      ah = t1h + t2h + getCarry(al, t1l) | 0;\n    }\n\n    this._al = this._al + al | 0;\n    this._bl = this._bl + bl | 0;\n    this._cl = this._cl + cl | 0;\n    this._dl = this._dl + dl | 0;\n    this._el = this._el + el | 0;\n    this._fl = this._fl + fl | 0;\n    this._gl = this._gl + gl | 0;\n    this._hl = this._hl + hl | 0;\n    this._ah = this._ah + ah + getCarry(this._al, al) | 0;\n    this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;\n    this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;\n    this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;\n    this._eh = this._eh + eh + getCarry(this._el, el) | 0;\n    this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;\n    this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;\n    this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;\n  };\n\n  Sha512.prototype._hash = function () {\n    var H = Buffer$a.allocUnsafe(64);\n\n    function writeInt64BE(h, l, offset) {\n      H.writeInt32BE(h, offset);\n      H.writeInt32BE(l, offset + 4);\n    }\n\n    writeInt64BE(this._ah, this._al, 0);\n    writeInt64BE(this._bh, this._bl, 8);\n    writeInt64BE(this._ch, this._cl, 16);\n    writeInt64BE(this._dh, this._dl, 24);\n    writeInt64BE(this._eh, this._el, 32);\n    writeInt64BE(this._fh, this._fl, 40);\n    writeInt64BE(this._gh, this._gl, 48);\n    writeInt64BE(this._hh, this._hl, 56);\n    return H;\n  };\n\n  var sha512$1 = Sha512;\n  var Buffer$b = safeBuffer.Buffer;\n  var W$5 = new Array(160);\n\n  function Sha384() {\n    this.init();\n    this._w = W$5;\n    hash$1.call(this, 128, 112);\n  }\n\n  inherits_browser(Sha384, sha512$1);\n\n  Sha384.prototype.init = function () {\n    this._ah = 0xcbbb9d5d;\n    this._bh = 0x629a292a;\n    this._ch = 0x9159015a;\n    this._dh = 0x152fecd8;\n    this._eh = 0x67332667;\n    this._fh = 0x8eb44a87;\n    this._gh = 0xdb0c2e0d;\n    this._hh = 0x47b5481d;\n    this._al = 0xc1059ed8;\n    this._bl = 0x367cd507;\n    this._cl = 0x3070dd17;\n    this._dl = 0xf70e5939;\n    this._el = 0xffc00b31;\n    this._fl = 0x68581511;\n    this._gl = 0x64f98fa7;\n    this._hl = 0xbefa4fa4;\n    return this;\n  };\n\n  Sha384.prototype._hash = function () {\n    var H = Buffer$b.allocUnsafe(48);\n\n    function writeInt64BE(h, l, offset) {\n      H.writeInt32BE(h, offset);\n      H.writeInt32BE(l, offset + 4);\n    }\n\n    writeInt64BE(this._ah, this._al, 0);\n    writeInt64BE(this._bh, this._bl, 8);\n    writeInt64BE(this._ch, this._cl, 16);\n    writeInt64BE(this._dh, this._dl, 24);\n    writeInt64BE(this._eh, this._el, 32);\n    writeInt64BE(this._fh, this._fl, 40);\n    return H;\n  };\n\n  var sha384$1 = Sha384;\n  var sha_js = createCommonjsModule(function (module) {\n    var exports = module.exports = function SHA(algorithm) {\n      algorithm = algorithm.toLowerCase();\n      var Algorithm = exports[algorithm];\n      if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)');\n      return new Algorithm();\n    };\n\n    exports.sha = sha$1;\n    exports.sha1 = sha1$1;\n    exports.sha224 = sha224$1;\n    exports.sha256 = sha256$1;\n    exports.sha384 = sha384$1;\n    exports.sha512 = sha512$1;\n  });\n  var Buffer$c = safeBuffer.Buffer;\n  var ZEROS = Buffer$c.alloc(128);\n  var sizes = {\n    md5: 16,\n    sha1: 20,\n    sha224: 28,\n    sha256: 32,\n    sha384: 48,\n    sha512: 64,\n    rmd160: 20,\n    ripemd160: 20\n  };\n\n  function Hmac$1(alg, key, saltLen) {\n    var hash = getDigest(alg);\n    var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;\n\n    if (key.length > blocksize) {\n      key = hash(key);\n    } else if (key.length < blocksize) {\n      key = Buffer$c.concat([key, ZEROS], blocksize);\n    }\n\n    var ipad = Buffer$c.allocUnsafe(blocksize + sizes[alg]);\n    var opad = Buffer$c.allocUnsafe(blocksize + sizes[alg]);\n\n    for (var i = 0; i < blocksize; i++) {\n      ipad[i] = key[i] ^ 0x36;\n      opad[i] = key[i] ^ 0x5C;\n    }\n\n    var ipad1 = Buffer$c.allocUnsafe(blocksize + saltLen + 4);\n    ipad.copy(ipad1, 0, 0, blocksize);\n    this.ipad1 = ipad1;\n    this.ipad2 = ipad;\n    this.opad = opad;\n    this.alg = alg;\n    this.blocksize = blocksize;\n    this.hash = hash;\n    this.size = sizes[alg];\n  }\n\n  Hmac$1.prototype.run = function (data, ipad) {\n    data.copy(ipad, this.blocksize);\n    var h = this.hash(ipad);\n    h.copy(this.opad, this.blocksize);\n    return this.hash(this.opad);\n  };\n\n  function getDigest(alg) {\n    function shaFunc(data) {\n      return sha_js(alg).update(data).digest();\n    }\n\n    function rmd160Func(data) {\n      return new ripemd160$1().update(data).digest();\n    }\n\n    if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func;\n    if (alg === 'md5') return md5;\n    return shaFunc;\n  }\n\n  function pbkdf2(password, salt, iterations, keylen, digest) {\n    precondition(password, salt, iterations, keylen);\n    if (!Buffer$c.isBuffer(password)) password = Buffer$c.from(password, defaultEncoding_1);\n    if (!Buffer$c.isBuffer(salt)) salt = Buffer$c.from(salt, defaultEncoding_1);\n    digest = digest || 'sha1';\n    var hmac = new Hmac$1(digest, password, salt.length);\n    var DK = Buffer$c.allocUnsafe(keylen);\n    var block1 = Buffer$c.allocUnsafe(salt.length + 4);\n    salt.copy(block1, 0, 0, salt.length);\n    var destPos = 0;\n    var hLen = sizes[digest];\n    var l = Math.ceil(keylen / hLen);\n\n    for (var i = 1; i <= l; i++) {\n      block1.writeUInt32BE(i, salt.length);\n      var T = hmac.run(block1, hmac.ipad1);\n      var U = T;\n\n      for (var j = 1; j < iterations; j++) {\n        U = hmac.run(U, hmac.ipad2);\n\n        for (var k = 0; k < hLen; k++) T[k] ^= U[k];\n      }\n\n      T.copy(DK, destPos);\n      destPos += hLen;\n    }\n\n    return DK;\n  }\n\n  var syncBrowser = pbkdf2;\n  var Buffer$d = safeBuffer.Buffer;\n  var ZERO_BUF;\n  var subtle = commonjsGlobal.crypto && commonjsGlobal.crypto.subtle;\n  var toBrowser = {\n    'sha': 'SHA-1',\n    'sha-1': 'SHA-1',\n    'sha1': 'SHA-1',\n    'sha256': 'SHA-256',\n    'sha-256': 'SHA-256',\n    'sha384': 'SHA-384',\n    'sha-384': 'SHA-384',\n    'sha-512': 'SHA-512',\n    'sha512': 'SHA-512'\n  };\n  var checks = [];\n\n  function checkNative(algo) {\n    if (commonjsGlobal.process && !commonjsGlobal.process.browser) {\n      return Promise.resolve(false);\n    }\n\n    if (!subtle || !subtle.importKey || !subtle.deriveBits) {\n      return Promise.resolve(false);\n    }\n\n    if (checks[algo] !== undefined) {\n      return checks[algo];\n    }\n\n    ZERO_BUF = ZERO_BUF || Buffer$d.alloc(8);\n    var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function () {\n      return true;\n    }).catch(function () {\n      return false;\n    });\n    checks[algo] = prom;\n    return prom;\n  }\n\n  function browserPbkdf2(password, salt, iterations, length, algo) {\n    return subtle.importKey('raw', password, {\n      name: 'PBKDF2'\n    }, false, ['deriveBits']).then(function (key) {\n      return subtle.deriveBits({\n        name: 'PBKDF2',\n        salt: salt,\n        iterations: iterations,\n        hash: {\n          name: algo\n        }\n      }, key, length << 3);\n    }).then(function (res) {\n      return Buffer$d.from(res);\n    });\n  }\n\n  function resolvePromise(promise, callback) {\n    promise.then(function (out) {\n      nextTick(function () {\n        callback(null, out);\n      });\n    }, function (e) {\n      nextTick(function () {\n        callback(e);\n      });\n    });\n  }\n\n  var async = function (password, salt, iterations, keylen, digest, callback) {\n    if (typeof digest === 'function') {\n      callback = digest;\n      digest = undefined;\n    }\n\n    digest = digest || 'sha1';\n    var algo = toBrowser[digest.toLowerCase()];\n\n    if (!algo || typeof commonjsGlobal.Promise !== 'function') {\n      return nextTick(function () {\n        var out;\n\n        try {\n          out = syncBrowser(password, salt, iterations, keylen, digest);\n        } catch (e) {\n          return callback(e);\n        }\n\n        callback(null, out);\n      });\n    }\n\n    precondition(password, salt, iterations, keylen);\n    if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');\n    if (!Buffer$d.isBuffer(password)) password = Buffer$d.from(password, defaultEncoding_1);\n    if (!Buffer$d.isBuffer(salt)) salt = Buffer$d.from(salt, defaultEncoding_1);\n    resolvePromise(checkNative(algo).then(function (resp) {\n      if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);\n      return syncBrowser(password, salt, iterations, keylen, digest);\n    }), callback);\n  };\n\n  var pbkdf2$1 = async;\n  var pbkdf2Sync = syncBrowser;\n  var browser$2 = {\n    pbkdf2: pbkdf2$1,\n    pbkdf2Sync: pbkdf2Sync\n  };\n  var pbkdf2Sync$1 = browser$2.pbkdf2Sync;\n  var MAX_VALUE = 0x7fffffff; // N = Cpu cost, r = Memory cost, p = parallelization cost\n\n  function scrypt(key, salt, N, r, p, dkLen, progressCallback) {\n    if (N === 0 || (N & N - 1) !== 0) throw Error('N must be > 0 and a power of 2');\n    if (N > MAX_VALUE / 128 / r) throw Error('Parameter N is too large');\n    if (r > MAX_VALUE / 128 / p) throw Error('Parameter r is too large');\n    var XY = new Buffer$1(256 * r);\n    var V = new Buffer$1(128 * r * N); // pseudo global\n\n    var B32 = new Int32Array(16); // salsa20_8\n\n    var x = new Int32Array(16); // salsa20_8\n\n    var _X = new Buffer$1(64); // blockmix_salsa8\n    // pseudo global\n\n\n    var B = pbkdf2Sync$1(key, salt, 1, p * 128 * r, 'sha256');\n    var tickCallback;\n\n    if (progressCallback) {\n      var totalOps = p * N * 2;\n      var currentOp = 0;\n\n      tickCallback = function () {\n        ++currentOp; // send progress notifications once every 1,000 ops\n\n        if (currentOp % 1000 === 0) {\n          progressCallback({\n            current: currentOp,\n            total: totalOps,\n            percent: currentOp / totalOps * 100.0\n          });\n        }\n      };\n    }\n\n    for (var i = 0; i < p; i++) {\n      smix(B, i * 128 * r, r, N, V, XY);\n    }\n\n    return pbkdf2Sync$1(key, B, 1, dkLen, 'sha256'); // all of these functions are actually moved to the top\n    // due to function hoisting\n\n    function smix(B, Bi, r, N, V, XY) {\n      var Xi = 0;\n      var Yi = 128 * r;\n      var i;\n      B.copy(XY, Xi, Bi, Bi + Yi);\n\n      for (i = 0; i < N; i++) {\n        XY.copy(V, i * Yi, Xi, Xi + Yi);\n        blockmix_salsa8(XY, Xi, Yi, r);\n        if (tickCallback) tickCallback();\n      }\n\n      for (i = 0; i < N; i++) {\n        var offset = Xi + (2 * r - 1) * 64;\n        var j = XY.readUInt32LE(offset) & N - 1;\n        blockxor(V, j * Yi, XY, Xi, Yi);\n        blockmix_salsa8(XY, Xi, Yi, r);\n        if (tickCallback) tickCallback();\n      }\n\n      XY.copy(B, Bi, Xi, Xi + Yi);\n    }\n\n    function blockmix_salsa8(BY, Bi, Yi, r) {\n      var i;\n      arraycopy(BY, Bi + (2 * r - 1) * 64, _X, 0, 64);\n\n      for (i = 0; i < 2 * r; i++) {\n        blockxor(BY, i * 64, _X, 0, 64);\n        salsa20_8(_X);\n        arraycopy(_X, 0, BY, Yi + i * 64, 64);\n      }\n\n      for (i = 0; i < r; i++) {\n        arraycopy(BY, Yi + i * 2 * 64, BY, Bi + i * 64, 64);\n      }\n\n      for (i = 0; i < r; i++) {\n        arraycopy(BY, Yi + (i * 2 + 1) * 64, BY, Bi + (i + r) * 64, 64);\n      }\n    }\n\n    function R(a, b) {\n      return a << b | a >>> 32 - b;\n    }\n\n    function salsa20_8(B) {\n      var i;\n\n      for (i = 0; i < 16; i++) {\n        B32[i] = (B[i * 4 + 0] & 0xff) << 0;\n        B32[i] |= (B[i * 4 + 1] & 0xff) << 8;\n        B32[i] |= (B[i * 4 + 2] & 0xff) << 16;\n        B32[i] |= (B[i * 4 + 3] & 0xff) << 24; // B32[i] = B.readUInt32LE(i*4)   <--- this is signficantly slower even in Node.js\n      }\n\n      arraycopy(B32, 0, x, 0, 16);\n\n      for (i = 8; i > 0; i -= 2) {\n        x[4] ^= R(x[0] + x[12], 7);\n        x[8] ^= R(x[4] + x[0], 9);\n        x[12] ^= R(x[8] + x[4], 13);\n        x[0] ^= R(x[12] + x[8], 18);\n        x[9] ^= R(x[5] + x[1], 7);\n        x[13] ^= R(x[9] + x[5], 9);\n        x[1] ^= R(x[13] + x[9], 13);\n        x[5] ^= R(x[1] + x[13], 18);\n        x[14] ^= R(x[10] + x[6], 7);\n        x[2] ^= R(x[14] + x[10], 9);\n        x[6] ^= R(x[2] + x[14], 13);\n        x[10] ^= R(x[6] + x[2], 18);\n        x[3] ^= R(x[15] + x[11], 7);\n        x[7] ^= R(x[3] + x[15], 9);\n        x[11] ^= R(x[7] + x[3], 13);\n        x[15] ^= R(x[11] + x[7], 18);\n        x[1] ^= R(x[0] + x[3], 7);\n        x[2] ^= R(x[1] + x[0], 9);\n        x[3] ^= R(x[2] + x[1], 13);\n        x[0] ^= R(x[3] + x[2], 18);\n        x[6] ^= R(x[5] + x[4], 7);\n        x[7] ^= R(x[6] + x[5], 9);\n        x[4] ^= R(x[7] + x[6], 13);\n        x[5] ^= R(x[4] + x[7], 18);\n        x[11] ^= R(x[10] + x[9], 7);\n        x[8] ^= R(x[11] + x[10], 9);\n        x[9] ^= R(x[8] + x[11], 13);\n        x[10] ^= R(x[9] + x[8], 18);\n        x[12] ^= R(x[15] + x[14], 7);\n        x[13] ^= R(x[12] + x[15], 9);\n        x[14] ^= R(x[13] + x[12], 13);\n        x[15] ^= R(x[14] + x[13], 18);\n      }\n\n      for (i = 0; i < 16; ++i) B32[i] = x[i] + B32[i];\n\n      for (i = 0; i < 16; i++) {\n        var bi = i * 4;\n        B[bi + 0] = B32[i] >> 0 & 0xff;\n        B[bi + 1] = B32[i] >> 8 & 0xff;\n        B[bi + 2] = B32[i] >> 16 & 0xff;\n        B[bi + 3] = B32[i] >> 24 & 0xff; // B.writeInt32LE(B32[i], i*4)  //<--- this is signficantly slower even in Node.js\n      }\n    } // naive approach... going back to loop unrolling may yield additional performance\n\n\n    function blockxor(S, Si, D, Di, len) {\n      for (var i = 0; i < len; i++) {\n        D[Di + i] ^= S[Si + i];\n      }\n    }\n  }\n\n  function arraycopy(src, srcPos, dest, destPos, length) {\n    if (isBuffer(src) && isBuffer(dest)) {\n      src.copy(dest, destPos, srcPos, srcPos + length);\n    } else {\n      while (length--) {\n        dest[destPos++] = src[srcPos++];\n      }\n    }\n  }\n\n  var scrypt_1 = scrypt;\n  var js = scrypt_1;\n  var rngBrowser = createCommonjsModule(function (module) {\n    // Unique ID creation requires a high quality random # generator.  In the\n    // browser this is a little complicated due to unknown quality of Math.random()\n    // and inconsistent support for the `crypto` API.  We do the best we can via\n    // feature-detection\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n    // implementation. Also, find the complete implementation of crypto on IE11.\n    var getRandomValues = typeof crypto != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (getRandomValues) {\n      // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n      var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n      module.exports = function whatwgRNG() {\n        getRandomValues(rnds8);\n        return rnds8;\n      };\n    } else {\n      // Math.random()-based (RNG)\n      //\n      // If all else fails, use Math.random().  It's fast, but is of unspecified\n      // quality.\n      var rnds = new Array(16);\n\n      module.exports = function mathRNG() {\n        for (var i = 0, r; i < 16; i++) {\n          if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n          rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n        }\n\n        return rnds;\n      };\n    }\n  });\n  /**\n   * Convert array of 16 byte values to UUID string format of the form:\n   * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n   */\n\n  var byteToHex = [];\n\n  for (var i = 0; i < 256; ++i) {\n    byteToHex[i] = (i + 0x100).toString(16).substr(1);\n  }\n\n  function bytesToUuid(buf, offset) {\n    var i = offset || 0;\n    var bth = byteToHex; // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n\n    return [bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]]].join('');\n  }\n\n  var bytesToUuid_1 = bytesToUuid; // **`v1()` - Generate time-based UUID**\n  //\n  // Inspired by https://github.com/LiosK/UUID.js\n  // and http://docs.python.org/library/uuid.html\n\n  var _nodeId;\n\n  var _clockseq; // Previous uuid creation time\n\n\n  var _lastMSecs = 0;\n  var _lastNSecs = 0; // See https://github.com/broofa/node-uuid for API details\n\n  function v1(options, buf, offset) {\n    var i = buf && offset || 0;\n    var b = buf || [];\n    options = options || {};\n    var node = options.node || _nodeId;\n    var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n    // specified.  We do this lazily to minimize issues related to insufficient\n    // system entropy.  See #189\n\n    if (node == null || clockseq == null) {\n      var seedBytes = rngBrowser();\n\n      if (node == null) {\n        // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n        node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n      }\n\n      if (clockseq == null) {\n        // Per 4.2.2, randomize (14 bit) clockseq\n        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n      }\n    } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n    var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n    // cycle to simulate higher resolution clock\n\n    var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n    var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n    if (dt < 0 && options.clockseq === undefined) {\n      clockseq = clockseq + 1 & 0x3fff;\n    } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n    // time interval\n\n\n    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n      nsecs = 0;\n    } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n    if (nsecs >= 10000) {\n      throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n    }\n\n    _lastMSecs = msecs;\n    _lastNSecs = nsecs;\n    _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n    msecs += 12219292800000; // `time_low`\n\n    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n    b[i++] = tl >>> 24 & 0xff;\n    b[i++] = tl >>> 16 & 0xff;\n    b[i++] = tl >>> 8 & 0xff;\n    b[i++] = tl & 0xff; // `time_mid`\n\n    var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n    b[i++] = tmh >>> 8 & 0xff;\n    b[i++] = tmh & 0xff; // `time_high_and_version`\n\n    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n    b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n    b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n    b[i++] = clockseq & 0xff; // `node`\n\n    for (var n = 0; n < 6; ++n) {\n      b[i + n] = node[n];\n    }\n\n    return buf ? buf : bytesToUuid_1(b);\n  }\n\n  var v1_1 = v1;\n\n  function v4(options, buf, offset) {\n    var i = buf && offset || 0;\n\n    if (typeof options == 'string') {\n      buf = options === 'binary' ? new Array(16) : null;\n      options = null;\n    }\n\n    options = options || {};\n    var rnds = options.random || (options.rng || rngBrowser)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n    rnds[6] = rnds[6] & 0x0f | 0x40;\n    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n    if (buf) {\n      for (var ii = 0; ii < 16; ++ii) {\n        buf[i + ii] = rnds[ii];\n      }\n    }\n\n    return buf || bytesToUuid_1(rnds);\n  }\n\n  var v4_1 = v4;\n  var uuid = v4_1;\n  uuid.v1 = v1_1;\n  uuid.v4 = v4_1;\n  var uuid_1 = uuid; //  This file is part of Zilliqa-Javascript-Library.\n\n  var ALGO_IDENTIFIER = 'aes-128-ctr';\n  /**\r\n   * getDerivedKey\r\n   *\r\n   * NOTE: only scrypt and pbkdf2 are supported.\r\n   *\r\n   * @param {Buffer} key - the passphrase\r\n   * @param {KDF} kdf - the key derivation function to be used\r\n   * @param {KDFParams} params - params for the kdf\r\n   *\r\n   * @returns {Promise<Buffer>}\r\n   */\n\n  function getDerivedKey(key, kdf, params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var salt, _a, c, dklen, _b, n, r, p, dklen;\n\n      return __generator(this, function (_c) {\n        salt = Buffer.from(params.salt, 'hex');\n\n        if (kdf === 'pbkdf2') {\n          _a = params, c = _a.c, dklen = _a.dklen;\n          return [2\n          /*return*/\n          , pbkdf2Sync(key, salt, c, dklen, 'sha256')];\n        }\n\n        if (kdf === 'scrypt') {\n          _b = params, n = _b.n, r = _b.r, p = _b.p, dklen = _b.dklen;\n          return [2\n          /*return*/\n          , js(key, salt, n, r, p, dklen)];\n        }\n\n        throw new Error('Only pbkdf2 and scrypt are supported');\n      });\n    });\n  }\n  /**\r\n   * encryptPrivateKey\r\n   *\r\n   * Encodes and encrypts an account in the format specified by\r\n   * https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition.\r\n   * However, note that, in keeping with the hash function used by Zilliqa's\r\n   * core protocol, the MAC is generated using sha256 instead of keccak.\r\n   *\r\n   * NOTE: only scrypt and pbkdf2 are supported.\r\n   *\r\n   * @param {KDF} kdf - the key derivation function to be used\r\n   * @param {string} privateKey - hex-encoded private key\r\n   * @param {string} passphrase - a passphrase used for encryption\r\n   *\r\n   * @returns {Promise<string>}\r\n   */\n\n\n  var encryptPrivateKey = function (kdf, privateKey, passphrase) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var address, salt, iv, kdfparams, derivedKey, cipher, ciphertext;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            address = getAddressFromPrivateKey(privateKey);\n            salt = randomBytes(32);\n            iv = Buffer.from(randomBytes(16), 'hex');\n            kdfparams = {\n              salt: salt,\n              n: 8192,\n              c: 262144,\n              r: 8,\n              p: 1,\n              dklen: 32\n            };\n            return [4\n            /*yield*/\n            , getDerivedKey(Buffer.from(passphrase), kdf, kdfparams)];\n\n          case 1:\n            derivedKey = _a.sent();\n            cipher = new aesJs.ModeOfOperation.ctr(derivedKey.slice(0, 16), new aesJs.Counter(iv));\n            ciphertext = Buffer.from(cipher.encrypt(Buffer.from(privateKey, 'hex')));\n            return [2\n            /*return*/\n            , JSON.stringify({\n              address: address,\n              crypto: {\n                cipher: ALGO_IDENTIFIER,\n                cipherparams: {\n                  iv: iv.toString('hex')\n                },\n                ciphertext: ciphertext.toString('hex'),\n                kdf: kdf,\n                kdfparams: kdfparams,\n                mac: hash_1 // @ts-ignore\n                .hmac(hash_1.sha256, derivedKey, 'hex').update(Buffer.concat([derivedKey.slice(16, 32), ciphertext, iv, Buffer.from(ALGO_IDENTIFIER)]), 'hex').digest('hex')\n              },\n              id: uuid_1.v4({\n                random: util.bytes.hexToIntArray(randomBytes(16))\n              }),\n              version: 3\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * decryptPrivateKey\r\n   *\r\n   * Recovers the private key from a keystore file using the given passphrase.\r\n   *\r\n   * @param {string} passphrase\r\n   * @param {KeystoreV3} keystore\r\n   * @returns {Promise<string>}\r\n   */\n\n\n  var decryptPrivateKey = function (passphrase, keystore) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var ciphertext, iv, kdfparams, derivedKey, mac, cipher;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ciphertext = Buffer.from(keystore.crypto.ciphertext, 'hex');\n            iv = Buffer.from(keystore.crypto.cipherparams.iv, 'hex');\n            kdfparams = keystore.crypto.kdfparams;\n            return [4\n            /*yield*/\n            , getDerivedKey(Buffer.from(passphrase), keystore.crypto.kdf, kdfparams)];\n\n          case 1:\n            derivedKey = _a.sent();\n            mac = hash_1 // @ts-ignore\n            .hmac(hash_1.sha256, derivedKey, 'hex').update(Buffer.concat([derivedKey.slice(16, 32), ciphertext, iv, Buffer.from(ALGO_IDENTIFIER)]), 'hex').digest('hex'); // we need to do a byte-by-byte comparison to avoid non-constant time side\n            // channel attacks.\n\n            if (!util.bytes.isEqual(mac.toUpperCase(), keystore.crypto.mac.toUpperCase())) {\n              return [2\n              /*return*/\n              , Promise.reject('Failed to decrypt.')];\n            }\n\n            cipher = new aesJs.ModeOfOperation.ctr(derivedKey.slice(0, 16), new aesJs.Counter(iv));\n            return [2\n            /*return*/\n            , Buffer.from(cipher.decrypt(ciphertext)).toString('hex')];\n        }\n      });\n    });\n  }; //  This file is part of Zilliqa-Javascript-Library.\n\n  /**\r\n   * sign\r\n   *\r\n   * @param {string} hash - hex-encoded hash of the data to be signed\r\n   *\r\n   * @returns {string} the signature\r\n   */\n\n\n  var sign$1 = function (msg, privateKey, pubKey) {\n    var sig = sign(msg, Buffer.from(privateKey, 'hex'), Buffer.from(pubKey, 'hex'));\n    var r = sig.r.toString('hex');\n    var s = sig.s.toString('hex');\n\n    while (r.length < 64) {\n      r = '0' + r;\n    }\n\n    while (s.length < 64) {\n      s = '0' + s;\n    }\n\n    return r + s;\n  };\n\n  exports.sign = sign$1;\n  exports.schnorr = schnorr;\n  exports.getAddressFromPrivateKey = getAddressFromPrivateKey;\n  exports.getPubKeyFromPrivateKey = getPubKeyFromPrivateKey;\n  exports.getAccountFrom0xPrivateKey = getAccountFrom0xPrivateKey;\n  exports.compressPublicKey = compressPublicKey;\n  exports.getAddressFromPublicKey = getAddressFromPublicKey;\n  exports.toChecksumAddress = toChecksumAddress;\n  exports.isValidChecksumAddress = isValidChecksumAddress;\n  exports.normaliseAddress = normaliseAddress;\n  exports.encodeBase58 = encodeBase58;\n  exports.decodeBase58 = decodeBase58;\n  exports.verifyPrivateKey = verifyPrivateKey;\n  exports.normalizePrivateKey = normalizePrivateKey;\n  exports.encryptPrivateKey = encryptPrivateKey;\n  exports.decryptPrivateKey = decryptPrivateKey;\n  exports.randomBytes = randomBytes;\n  exports.Signature = Signature$2;\n  exports.encode = encode;\n  exports.decode = decode;\n  exports.HRP = HRP;\n  exports.tHRP = tHRP;\n  exports.convertBits = convertBits;\n  exports.toBech32Address = toBech32Address;\n  exports.fromBech32Address = fromBech32Address;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}
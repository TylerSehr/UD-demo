{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('cross-fetch')) : typeof define === 'function' && define.amd ? define(['exports', 'cross-fetch'], factory) : factory(global.zjsCore = {}, global.fetch);\n})(this, function (exports, fetch) {\n  'use strict';\n\n  fetch = fetch && fetch.hasOwnProperty('default') ? fetch['default'] : fetch; //  This file is part of Zilliqa-Javascript-Library.\n  //\n  //  This program is free software: you can redistribute it and/or modify\n  //  it under the terms of the GNU General Public License as published by\n  //  the Free Software Foundation, either version 3 of the License, or\n  //  (at your option) any later version.\n  //\n  //   This program is distributed in the hope that it will be useful,\n  //   but WITHOUT ANY WARRANTY; without even the implied warranty of\n  //   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  //   GNU General Public License for more details.\n  //\n  //   You should have received a copy of the GNU General Public License\n  //   along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n  var Signer =\n  /** @class */\n  function () {\n    function Signer() {}\n\n    return Signer;\n  }();\n\n  var TxBlockType;\n\n  (function (TxBlockType) {\n    TxBlockType[TxBlockType[\"MICRO\"] = 0] = \"MICRO\";\n    TxBlockType[TxBlockType[\"FINAL\"] = 1] = \"FINAL\";\n  })(TxBlockType || (TxBlockType = {}));\n\n  (function (TransactionError) {\n    TransactionError[TransactionError[\"CHECKER_FAILED\"] = 0] = \"CHECKER_FAILED\";\n    TransactionError[TransactionError[\"RUNNER_FAILED\"] = 1] = \"RUNNER_FAILED\";\n    TransactionError[TransactionError[\"BALANCE_TRANSFER_FAILED\"] = 2] = \"BALANCE_TRANSFER_FAILED\";\n    TransactionError[TransactionError[\"EXECUTE_CMD_FAILED\"] = 3] = \"EXECUTE_CMD_FAILED\";\n    TransactionError[TransactionError[\"EXECUTE_CMD_TIMEOUT\"] = 4] = \"EXECUTE_CMD_TIMEOUT\";\n    TransactionError[TransactionError[\"NO_GAS_REMAINING_FOUND\"] = 5] = \"NO_GAS_REMAINING_FOUND\";\n    TransactionError[TransactionError[\"NO_ACCEPTED_FOUND\"] = 6] = \"NO_ACCEPTED_FOUND\";\n    TransactionError[TransactionError[\"CALL_CONTRACT_FAILED\"] = 7] = \"CALL_CONTRACT_FAILED\";\n    TransactionError[TransactionError[\"CREATE_CONTRACT_FAILED\"] = 8] = \"CREATE_CONTRACT_FAILED\";\n    TransactionError[TransactionError[\"JSON_OUTPUT_CORRUPTED\"] = 9] = \"JSON_OUTPUT_CORRUPTED\";\n    TransactionError[TransactionError[\"CONTRACT_NOT_EXIST\"] = 10] = \"CONTRACT_NOT_EXIST\";\n    TransactionError[TransactionError[\"STATE_CORRUPTED\"] = 11] = \"STATE_CORRUPTED\";\n    TransactionError[TransactionError[\"LOG_ENTRY_INSTALL_FAILED\"] = 12] = \"LOG_ENTRY_INSTALL_FAILED\";\n    TransactionError[TransactionError[\"MESSAGE_CORRUPTED\"] = 13] = \"MESSAGE_CORRUPTED\";\n    TransactionError[TransactionError[\"RECEIPT_IS_NULL\"] = 14] = \"RECEIPT_IS_NULL\";\n    TransactionError[TransactionError[\"MAX_DEPTH_REACHED\"] = 15] = \"MAX_DEPTH_REACHED\";\n    TransactionError[TransactionError[\"CHAIN_CALL_DIFF_SHARD\"] = 16] = \"CHAIN_CALL_DIFF_SHARD\";\n    TransactionError[TransactionError[\"PREPARATION_FAILED\"] = 17] = \"PREPARATION_FAILED\";\n    TransactionError[TransactionError[\"NO_OUTPUT\"] = 18] = \"NO_OUTPUT\";\n    TransactionError[TransactionError[\"OUTPUT_ILLEGAL\"] = 19] = \"OUTPUT_ILLEGAL\";\n  })(exports.TransactionError || (exports.TransactionError = {}));\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation. All rights reserved.\r\n  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n  this file except in compliance with the License. You may obtain a copy of the\r\n  License at http://www.apache.org/licenses/LICENSE-2.0\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n  MERCHANTABLITY OR NON-INFRINGEMENT.\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n  and limitations under the License.\r\n  ***************************************************************************** */\n\n  /* global Reflect, Promise */\n\n\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  function __extends(d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  }\n\n  var __assign = function () {\n    __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n\n      return t;\n    };\n\n    return __assign.apply(this, arguments);\n  };\n\n  function __awaiter(thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n\n      function step(result) {\n        result.done ? resolve(result.value) : new P(function (resolve) {\n          resolve(result.value);\n        }).then(fulfilled, rejected);\n      }\n\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  }\n\n  function __generator(thisArg, body) {\n    var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n        f,\n        y,\n        t,\n        g;\n    return g = {\n      next: verb(0),\n      \"throw\": verb(1),\n      \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n      return this;\n    }), g;\n\n    function verb(n) {\n      return function (v) {\n        return step([n, v]);\n      };\n    }\n\n    function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n\n      while (_) try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n\n      if (op[0] & 5) throw op[1];\n      return {\n        value: op[0] ? op[1] : void 0,\n        done: true\n      };\n    }\n  }\n\n  function __values(o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n        i = 0;\n    if (m) return m.call(o);\n    return {\n      next: function () {\n        if (o && i >= o.length) o = void 0;\n        return {\n          value: o && o[i++],\n          done: !o\n        };\n      }\n    };\n  }\n\n  function __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o),\n        r,\n        ar = [],\n        e;\n\n    try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    } catch (error) {\n      e = {\n        error: error\n      };\n    } finally {\n      try {\n        if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      } finally {\n        if (e) throw e.error;\n      }\n    }\n\n    return ar;\n  }\n\n  function __spread() {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n    return ar;\n  } //  This file is part of Zilliqa-Javascript-Library.\n\n  /**\r\n   * sign\r\n   *\r\n   * This decorates a method by attempting to sign the first argument of the\r\n   * intercepted method.\r\n   *\r\n   * @param {T} target\r\n   * @param {K} key\r\n   * @param {PropertyDescriptor} descriptor\r\n   * @returns {PropertyDescriptor | undefined}\r\n   */\n\n\n  var sign = function (target, key, descriptor) {\n    var original = descriptor.value;\n\n    function interceptor(arg) {\n      var args = [];\n\n      for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n      }\n\n      return __awaiter(this, void 0, void 0, function () {\n        var signed;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!(original && arg.bytes)) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , this.signer.sign(arg)];\n\n            case 1:\n              signed = _a.sent();\n              return [2\n              /*return*/\n              , original.call.apply(original, __spread([this, signed], args))];\n\n            case 2:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }\n\n    descriptor.value = interceptor;\n    return descriptor;\n  }; //  This file is part of Zilliqa-Javascript-Library.\n  //  This file is part of Zilliqa-Javascript-Library.\n\n\n  (function (RPCMethod) {\n    // Network-related methods\n    RPCMethod[\"GetNetworkId\"] = \"GetNetworkId\"; // Blockchain-related methods\n\n    RPCMethod[\"GetBlockchainInfo\"] = \"GetBlockchainInfo\";\n    RPCMethod[\"GetShardingStructure\"] = \"GetShardingStructure\";\n    RPCMethod[\"GetDSBlock\"] = \"GetDsBlock\";\n    RPCMethod[\"GetLatestDSBlock\"] = \"GetLatestDsBlock\";\n    RPCMethod[\"GetNumDSBlocks\"] = \"GetNumDSBlocks\";\n    RPCMethod[\"GetDSBlockRate\"] = \"GetDSBlockRate\";\n    RPCMethod[\"DSBlockListing\"] = \"DSBlockListing\";\n    RPCMethod[\"GetTxBlock\"] = \"GetTxBlock\";\n    RPCMethod[\"GetLatestTxBlock\"] = \"GetLatestTxBlock\";\n    RPCMethod[\"GetNumTxBlocks\"] = \"GetNumTxBlocks\";\n    RPCMethod[\"GetTxBlockRate\"] = \"GetTxBlockRate\";\n    RPCMethod[\"TxBlockListing\"] = \"TxBlockListing\";\n    RPCMethod[\"GetNumTransactions\"] = \"GetNumTransactions\";\n    RPCMethod[\"GetTransactionRate\"] = \"GetTransactionRate\";\n    RPCMethod[\"GetCurrentMiniEpoch\"] = \"GetCurrentMiniEpoch\";\n    RPCMethod[\"GetCurrentDSEpoch\"] = \"GetCurrentDSEpoch\";\n    RPCMethod[\"GetPrevDifficulty\"] = \"GetPrevDifficulty\";\n    RPCMethod[\"GetPrevDSDifficulty\"] = \"GetPrevDSDifficulty\"; // Transaction-related methods\n\n    RPCMethod[\"CreateTransaction\"] = \"CreateTransaction\";\n    RPCMethod[\"GetTransaction\"] = \"GetTransaction\";\n    RPCMethod[\"GetRecentTransactions\"] = \"GetRecentTransactions\";\n    RPCMethod[\"GetTransactionsForTxBlock\"] = \"GetTransactionsForTxBlock\";\n    RPCMethod[\"GetNumTxnsTxEpoch\"] = \"GetNumTxnsTxEpoch\";\n    RPCMethod[\"GetNumTxnsDSEpoch\"] = \"GetNumTxnsDSEpoch\";\n    RPCMethod[\"GetMinimumGasPrice\"] = \"GetMinimumGasPrice\"; // Contract-related methods\n\n    RPCMethod[\"GetSmartContracts\"] = \"GetSmartContracts\";\n    RPCMethod[\"GetSmartContractCode\"] = \"GetSmartContractCode\";\n    RPCMethod[\"GetSmartContractInit\"] = \"GetSmartContractInit\";\n    RPCMethod[\"GetSmartContractState\"] = \"GetSmartContractState\";\n    RPCMethod[\"GetSmartContractSubState\"] = \"GetSmartContractSubState\";\n    RPCMethod[\"GetContractAddressFromTransactionID\"] = \"GetContractAddressFromTransactionID\"; // Account-related methods\n\n    RPCMethod[\"GetBalance\"] = \"GetBalance\";\n  })(exports.RPCMethod || (exports.RPCMethod = {}));\n\n  (function (RPCErrorCode) {\n    // Standard JSON-RPC 2.0 errors\n    // RPC_INVALID_REQUEST is internally mapped to HTTP_BAD_REQUEST (400).\n    // It should not be used for application-layer errors.\n    RPCErrorCode[RPCErrorCode[\"RPC_INVALID_REQUEST\"] = -32600] = \"RPC_INVALID_REQUEST\"; // RPC_METHOD_NOT_FOUND is internally mapped to HTTP_NOT_FOUND (404).\n    // It should not be used for application-layer errors.\n\n    RPCErrorCode[RPCErrorCode[\"RPC_METHOD_NOT_FOUND\"] = -32601] = \"RPC_METHOD_NOT_FOUND\";\n    RPCErrorCode[RPCErrorCode[\"RPC_INVALID_PARAMS\"] = -32602] = \"RPC_INVALID_PARAMS\"; // RPC_INTERNAL_ERROR should only be used for genuine errors in bitcoind\n    // (for example datadir corruption).\n\n    RPCErrorCode[RPCErrorCode[\"RPC_INTERNAL_ERROR\"] = -32603] = \"RPC_INTERNAL_ERROR\";\n    RPCErrorCode[RPCErrorCode[\"RPC_PARSE_ERROR\"] = -32700] = \"RPC_PARSE_ERROR\"; // General application defined errors\n\n    RPCErrorCode[RPCErrorCode[\"RPC_MISC_ERROR\"] = -1] = \"RPC_MISC_ERROR\";\n    RPCErrorCode[RPCErrorCode[\"RPC_TYPE_ERROR\"] = -3] = \"RPC_TYPE_ERROR\";\n    RPCErrorCode[RPCErrorCode[\"RPC_INVALID_ADDRESS_OR_KEY\"] = -5] = \"RPC_INVALID_ADDRESS_OR_KEY\";\n    RPCErrorCode[RPCErrorCode[\"RPC_INVALID_PARAMETER\"] = -8] = \"RPC_INVALID_PARAMETER\";\n    RPCErrorCode[RPCErrorCode[\"RPC_DATABASE_ERROR\"] = -20] = \"RPC_DATABASE_ERROR\";\n    RPCErrorCode[RPCErrorCode[\"RPC_DESERIALIZATION_ERROR\"] = -22] = \"RPC_DESERIALIZATION_ERROR\";\n    RPCErrorCode[RPCErrorCode[\"RPC_VERIFY_ERROR\"] = -25] = \"RPC_VERIFY_ERROR\";\n    RPCErrorCode[RPCErrorCode[\"RPC_VERIFY_REJECTED\"] = -26] = \"RPC_VERIFY_REJECTED\";\n    RPCErrorCode[RPCErrorCode[\"RPC_IN_WARMUP\"] = -28] = \"RPC_IN_WARMUP\";\n    RPCErrorCode[RPCErrorCode[\"RPC_METHOD_DEPRECATED\"] = -32] = \"RPC_METHOD_DEPRECATED\";\n  })(exports.RPCErrorCode || (exports.RPCErrorCode = {}));\n\n  var DEFAULT_HEADERS = {\n    'Content-Type': 'application/json'\n  };\n\n  var performRPC = function (request, handler) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var response, err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , fetch(request.url, {\n              method: 'POST',\n              cache: 'no-cache',\n              mode: 'cors',\n              redirect: 'follow',\n              referrer: 'no-referrer',\n              body: JSON.stringify(request.payload),\n              headers: __assign(__assign({}, DEFAULT_HEADERS), request.options && request.options.headers || {})\n            })];\n\n          case 1:\n            response = _a.sent();\n            return [2\n            /*return*/\n            , response.json().then(function (body) {\n              return __assign(__assign({}, body), {\n                req: request\n              });\n            }).then(handler)];\n\n          case 2:\n            err_1 = _a.sent();\n            throw err_1;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; //  This file is part of Zilliqa-Javascript-Library.\n  //\n  //  This program is free software: you can redistribute it and/or modify\n  //  it under the terms of the GNU General Public License as published by\n  //  the Free Software Foundation, either version 3 of the License, or\n  //  (at your option) any later version.\n  //\n  //   This program is distributed in the hope that it will be useful,\n  //   but WITHOUT ANY WARRANTY; without even the implied warranty of\n  //   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  //   GNU General Public License for more details.\n  //\n  //   You should have received a copy of the GNU General Public License\n  //   along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n\n  function isValidResponse(response) {\n    if (response.jsonrpc === '2.0' && (response.id === '1' || response.id === 1) && (response.error || response.result)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function composeMiddleware() {\n    var fns = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      fns[_i] = arguments[_i];\n    }\n\n    if (fns.length === 0) {\n      return function (arg) {\n        return arg;\n      };\n    }\n\n    if (fns.length === 1) {\n      return fns[0];\n    }\n\n    return fns.reduce(function (a, b) {\n      return function (arg) {\n        return a(b(arg));\n      };\n    });\n  } //  This file is part of Zilliqa-Javascript-Library.\n\n\n  var MiddlewareType;\n\n  (function (MiddlewareType) {\n    MiddlewareType[MiddlewareType[\"REQ\"] = 0] = \"REQ\";\n    MiddlewareType[MiddlewareType[\"RES\"] = 1] = \"RES\";\n  })(MiddlewareType || (MiddlewareType = {}));\n\n  var BaseProvider =\n  /** @class */\n  function () {\n    function BaseProvider(nodeURL, reqMiddleware, resMiddleware) {\n      var _this = this;\n\n      if (reqMiddleware === void 0) {\n        reqMiddleware = new Map();\n      }\n\n      if (resMiddleware === void 0) {\n        resMiddleware = new Map();\n      }\n\n      this.middleware = {\n        request: {\n          use: function (fn, match) {\n            if (match === void 0) {\n              match = '*';\n            }\n\n            _this.pushMiddleware(fn, 0\n            /* REQ */\n            , match);\n          }\n        },\n        response: {\n          use: function (fn, match) {\n            if (match === void 0) {\n              match = '*';\n            }\n\n            _this.pushMiddleware(fn, 1\n            /* RES */\n            , match);\n          }\n        }\n      };\n      this.nodeURL = nodeURL;\n      this.reqMiddleware = reqMiddleware;\n      this.resMiddleware = resMiddleware;\n    }\n    /**\r\n     * pushMiddleware\r\n     *\r\n     * Adds the middleware to the appropriate middleware map.\r\n     *\r\n     * @param {ResMiddlewareFn}\r\n     * @param {T} type\r\n     * @param {Matcher} match\r\n     * @returns {void}\r\n     */\n\n\n    BaseProvider.prototype.pushMiddleware = function (fn, type, match) {\n      if (type !== 0\n      /* REQ */\n      && type !== 1\n      /* RES */\n      ) {\n          throw new Error('Please specify the type of middleware being added');\n        }\n\n      if (type === 0\n      /* REQ */\n      ) {\n          var current = this.reqMiddleware.get(match) || [];\n          this.reqMiddleware.set(match, __spread(current, [fn]));\n        } else {\n        var current = this.resMiddleware.get(match) || [];\n        this.resMiddleware.set(match, __spread(current, [fn]));\n      }\n    };\n    /**\r\n     * getMiddleware\r\n     *\r\n     * Returns the middleware that matches the matcher provided. Note that\r\n     * middleware are called in order of specificity: string -> regexp ->\r\n     * wildcard.\r\n     *\r\n     * @param {Matcher} match\r\n     * @returns {[ReqMiddlewareFn[], ResMiddlewareFn[]]}\r\n     */\n\n\n    BaseProvider.prototype.getMiddleware = function (method) {\n      var e_1, _a, e_2, _b;\n\n      var reqFns = [];\n      var resFns = [];\n\n      try {\n        for (var _c = __values(this.reqMiddleware.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var _e = __read(_d.value, 2),\n              key = _e[0],\n              transformers = _e[1];\n\n          if (typeof key === 'string' && key !== '*' && key === method) {\n            reqFns.push.apply(reqFns, __spread(transformers));\n          }\n\n          if (key instanceof RegExp && key.test(method)) {\n            reqFns.push.apply(reqFns, __spread(transformers));\n          }\n\n          if (key === '*') {\n            reqFns.push.apply(reqFns, __spread(transformers));\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      try {\n        for (var _f = __values(this.resMiddleware.entries()), _g = _f.next(); !_g.done; _g = _f.next()) {\n          var _h = __read(_g.value, 2),\n              key = _h[0],\n              transformers = _h[1];\n\n          if (typeof key === 'string' && key !== '*' && key === method) {\n            resFns.push.apply(resFns, __spread(transformers));\n          }\n\n          if (key instanceof RegExp && key.test(method)) {\n            resFns.push.apply(resFns, __spread(transformers));\n          }\n\n          if (key === '*') {\n            resFns.push.apply(resFns, __spread(transformers));\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_g && !_g.done && (_b = _f.return)) _b.call(_f);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n\n      return [reqFns, resFns];\n    };\n\n    return BaseProvider;\n  }(); //  This file is part of Zilliqa-Javascript-Library.\n\n\n  var HTTPProvider =\n  /** @class */\n  function (_super) {\n    __extends(HTTPProvider, _super);\n\n    function HTTPProvider() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    HTTPProvider.prototype.buildPayload = function (method, params) {\n      return {\n        url: this.nodeURL,\n        payload: {\n          id: 1,\n          jsonrpc: '2.0',\n          method: method,\n          params: params\n        }\n      };\n    };\n\n    HTTPProvider.prototype.send = function (method) {\n      var params = [];\n\n      for (var _i = 1; _i < arguments.length; _i++) {\n        params[_i - 1] = arguments[_i];\n      }\n\n      var _a = __read(this.getMiddleware(method), 2),\n          tReq = _a[0],\n          tRes = _a[1];\n\n      var reqMiddleware = composeMiddleware.apply(void 0, __spread(tReq));\n      var resMiddleware = composeMiddleware.apply(void 0, __spread(tRes));\n      var req = reqMiddleware(this.buildPayload(method, params));\n      return performRPC(req, resMiddleware);\n    };\n\n    HTTPProvider.prototype.subscribe = function (event, subscriber) {\n      throw new Error('HTTPProvider does not support subscriptions.');\n    };\n\n    HTTPProvider.prototype.unsubscribe = function (token) {\n      throw new Error('HTTPProvider does not support subscriptions.');\n    };\n\n    return HTTPProvider;\n  }(BaseProvider); //  This file is part of Zilliqa-Javascript-Library.\n  //\n  //  This program is free software: you can redistribute it and/or modify\n  //  it under the terms of the GNU General Public License as published by\n  //  the Free Software Foundation, either version 3 of the License, or\n  //  (at your option) any later version.\n  //\n  //   This program is distributed in the hope that it will be useful,\n  //   but WITHOUT ANY WARRANTY; without even the implied warranty of\n  //   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  //   GNU General Public License for more details.\n  //\n  //   You should have received a copy of the GNU General Public License\n  //   along with this program.  If not, see <https://www.gnu.org/licenses/>.\n  // this constant is used to indicate the number of times to poll the\n  // blockchain for a transaction confirmation. this number has been selected by\n  // using a heuristic to calculate the approximate maximum amount of time it\n  // should take for a transaction to be confirmed, even during a PoW submission\n  // round.\n\n\n  var GET_TX_ATTEMPTS = 33; //      \n  // An event handler can take an optional event argument\n  // and should not return a value\n  // An array of all currently registered event handlers for a type\n  // A map of event types and their corresponding event handlers.\n\n  /** Mitt: Tiny (~200b) functional event emitter / pubsub.\n   *  @name mitt\n   *  @returns {Mitt}\n   */\n\n  function mitt(all) {\n    all = all || Object.create(null);\n    return {\n      /**\n       * Register an event handler for the given type.\n       *\n       * @param  {String} type\tType of event to listen for, or `\"*\"` for all events\n       * @param  {Function} handler Function to call in response to given event\n       * @memberOf mitt\n       */\n      on: function on(type, handler) {\n        (all[type] || (all[type] = [])).push(handler);\n      },\n\n      /**\n       * Remove an event handler for the given type.\n       *\n       * @param  {String} type\tType of event to unregister `handler` from, or `\"*\"`\n       * @param  {Function} handler Handler function to remove\n       * @memberOf mitt\n       */\n      off: function off(type, handler) {\n        if (all[type]) {\n          all[type].splice(all[type].indexOf(handler) >>> 0, 1);\n        }\n      },\n\n      /**\n       * Invoke all handlers for the given type.\n       * If present, `\"*\"` handlers are invoked after type-matched handlers.\n       *\n       * @param {String} type  The event type to invoke\n       * @param {Any} [evt]  Any value (object is recommended and powerful), passed to each handler\n       * @memberOf mitt\n       */\n      emit: function emit(type, evt) {\n        (all[type] || []).slice().map(function (handler) {\n          handler(evt);\n        });\n        (all['*'] || []).slice().map(function (handler) {\n          handler(type, evt);\n        });\n      }\n    };\n  }\n\n  var EventEmitter =\n  /** @class */\n  function () {\n    function EventEmitter() {\n      var _this = this;\n\n      this.handlers = {};\n      this.emitter = new mitt(this.handlers);\n      this.off = this.emitter.off.bind(this);\n      this.emit = this.emitter.emit.bind(this); // tslint:disable-next-line: no-empty\n\n      this.promise = new Promise(function (resolve, reject) {\n        _this.resolve = resolve;\n        _this.reject = reject;\n      });\n      this.then = this.promise.then.bind(this.promise);\n    }\n\n    EventEmitter.prototype.resetHandlers = function () {\n      // tslint:disable-next-line: forin\n      for (var i in this.handlers) {\n        delete this.handlers[i];\n      }\n    };\n\n    EventEmitter.prototype.on = function (type, handler) {\n      this.emitter.on(type, handler);\n      return this;\n    };\n\n    EventEmitter.prototype.once = function (type, handler) {\n      var _this = this;\n\n      this.emitter.on(type, function (e) {\n        handler(e);\n\n        _this.removeEventListener(type);\n      });\n    };\n\n    EventEmitter.prototype.addEventListener = function (type, handler) {\n      this.emitter.on(type, handler);\n    };\n\n    EventEmitter.prototype.removeEventListener = function (type, handler) {\n      if (!type) {\n        this.handlers = {};\n        return;\n      }\n\n      if (!handler) {\n        delete this.handlers[type];\n      } else {\n        return this.emitter.off(type, handler);\n      }\n    };\n\n    EventEmitter.prototype.onError = function (error) {\n      this.emitter.on('error', error);\n      this.removeEventListener('*');\n    };\n\n    EventEmitter.prototype.onData = function (data) {\n      this.emitter.on('data', data);\n      this.removeEventListener('*');\n    };\n\n    EventEmitter.prototype.listenerCount = function (listenKey) {\n      var count = 0;\n      Object.keys(this.handlers).forEach(function (val) {\n        if (listenKey === val) {\n          count += 1;\n        }\n      });\n      return count;\n    };\n\n    return EventEmitter;\n  }(); //  This file is part of Zilliqa-Javascript-Library.\n\n\n  exports.Signer = Signer;\n  exports.sign = sign;\n  exports.performRPC = performRPC;\n  exports.isValidResponse = isValidResponse;\n  exports.composeMiddleware = composeMiddleware;\n  exports.HTTPProvider = HTTPProvider;\n  exports.GET_TX_ATTEMPTS = GET_TX_ATTEMPTS;\n  exports.EventEmitter = EventEmitter;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}